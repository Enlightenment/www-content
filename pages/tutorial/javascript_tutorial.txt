~~Title: Javascript Tutorial~~
==== Javascript Tutorial [DRAFT]====

This Javascript tutorial describes the basics to compiles and runs a Javascript example using EFL with Node.Js

<note important>
The Javascript bindings are currently in BETA state.
</note>

=== Prerequisite ===

Before you start you may want to read about how to compile an EFL library

    * Installed from source: [[docs/efl/start|Get started with EFL]].

=== Dependencies ===

You will need additional dependencies to Javascript Bindings:

    * [[https://nodejs.org|node]] (4.2 or better)

=== Compilation ===

== Efl ==
To configure efl sources with bindings to use in nodejs add ''//––with-js=nodejs//'' to the configure flags to enable nodejs support.

<code bash>
./configure --with-js=nodejs #in efl source path
</code>

After that, you can compile normally with

<code bash>
make
make install
</code>

=== Node.Js ===

After everything is compiled and installed, it is time to use the modules in node.js. 

EFL will install its nodejs modules under the ''<prefix>/lib'' path. The default prefix, if not explicitly defined, is ''/usr/local''. In order to nodejs discover these modules, add the previously cited folder to the NODE_PATH environment variable:

<code bash>
export NODE_PATH=/usr/local/lib:$NODE_PATH #if necessary replace with your prefix path
</code>

To check if the path is correctly set, use ''require'' inside nodejs to import the module:

<code javascript>
~$ node
> efl = require("efl")
</code>

====Button Example====

<note tip>
You can find this example in ''efl_source/src/examples/elementary/button_example_00.js''
</note>

Import Efl module
<code javascript>
efl = require('efl');
</code>

Create a new Window with //auto hide// (the window is automatically hidden when the close button is clicked):
<code javascript>
win = new efl.Efl.Ui.Win.Standard(null);
win.setText("Hello, World!"); // Sets the title
win.setAutohide(true);
</code>

Create a new Button (passing the newly created window as parent) and set new label text to button:
<code javascript>
btn = new efl.Elm.Button(win);
btn.setText(null, "Good-Bye, World!");
</code>

Set button basic size and positions:
<code javascript>
btn.setSize(120, 30);
btn.setPosition(60, 15);
btn.setHintWeight(1.0, 1.0);
btn.setHintAlign(1.0, 1.0);
</code>

The method ''on'' is used to register callback on events. In this case we need to catch the ''clicked'' event, so we register a function (second argument) to print a log message when the button ''btn'' is clicked:
<code javascript>
btn.on('clicked', function () { console.log('clicked'); } );
</code>

To finish, it is necessary to show all elements, using the ''setVisible(true)'' method:
<code javascript>
btn.setVisible(true);
win.setSize(240, 60);
win.setVisible(true);
</code>

====Twitter Example====

<note tip>
You find complete twitter example in ''elementary_source/src/examples/twitter_example_01.js''
</note>

This is a more complex example, with edje theme and some external requirements. We need install ''request'' and ''twitter'' module, for this use the ''npm'' (node.js package manager) it downloads and installs all necessary to use this modules.
<code bash>
npm install request
npm install twitter
</code>
<note tip>''npm'' is installed by default with Node.js</note>

Import all modules and initialize necessary variables to connect in twitter API
<code javascript>
elm = require('elm');
util = require('util');
fs = require('fs');
request = require('request'); //need "npm install request"
Twitter = require('twitter'); //need "npm install twitter"

var twit = new Twitter({
  consumer_key: 'ZbSM93w5Sp2cyZ2SG0XuCvoHV',
  consumer_secret: 'g8N7EEQLpdKPnAsS9hWuQV29FYjBkhH62jhZzXyYymDw87DKye',
  access_token_key: '222611263-pPhKKjYh59uuNLP0b86sP7aAtLhdecjVQaEsCDCv',
  access_token_secret: 'l7ccNKXTVv6cymfSD1gQH61tmfixkdna2QmOjPtpVxSHD'
});

user_acount = 'EnlightenmentKo'
icon_array = new Array();
</code>

Create a new Window (it has previous example):
<code javascript>
win = new elm.Elm.WinStandard(null);
win.setTitle("Twitter App");
win.setAutohide(true);
</code>

Create and show a //box// and //list// elementary widget containers 
<code javascript>
box = new elm.Elm.Box(win);
box.setSizeHintWeight(1.0, 1.0);
win.resizeObjectAdd(box);
box.setVisible(true);

list = new elm.Elm.List(win);
list.setSizeHintWeight(1.0, 1.0);
list.setSizeHintAlign(-1.0, -1.0);
box.packEnd(list);
list.setVisible(true);
</code>

Getting twitter user timeline asynchronous, using callback 
<code javascript>
twit.get('statuses/user_timeline', {screen_name: user_acount, count:10},
  function(error, tweets, response) {
  
</code>

Make a new file stream with ''fs.createWriteStream'', download the image to file using ''request'' module and register the ''_img_load'' function to called when image download has finished
<code javascript>
    file = fs.createWriteStream('/tmp/twitter_pic.jpg');
    file.on('finish', _img_load);
    if (tweets.length > 0) {
         request(tweets[0].user.profile_image_url).pipe(file);
    }
</code>

For each tweet we make a new Elm.Layout and set a theme using ''setfile'', ''setText'' is used to define a new text to Edje elements in theme. To have a formatted text we use Elm.Entry to main tweet text and add this widget into theme using ''setContent'' layout method
<code javascript>
    for(i=0; i < tweets.length; i++){
        var layout = new elm.Elm.Layout(win);
        layout.setFile("twitter_example_01.edj", "tweet");
        layout.setText("user_name", screen_name);
        layout.setText("screen_name", " - @"+screen_name);

        var entry = new elm.Elm.Entry(win);
        entry.setText("elm.text", text);
        console.log(text);
        layout.contentSet("tweet_text", entry);
</code>

Add a layout widget to Elm.List and call ''list.go()'' to start displaying the list properly.
<code javascript>
        item = list.itemAppend("", layout, null, null, null);
    }
    list.go();
};
win.setVisible(true);
</code>

You will find this and more examples in directory ''src/examples'' in efl and elementary source code.

All you need to run is:
<code bash>
node <example_file_name>
</code>