~~Title: Javascript Tutorial~~
==== Javascript Tutorial [DRAFT]====

These Javascript tutorials describe the basics to compiles and run a Javascript example using Elementary in Node.Js

=== Prerequisite ===

Before you start you will want basic about how compile a EFL library

    * Installed from source: [[docs/efl/start|Get started with EFL]].

=== Dependencies ===

You will need additional dependencies to Javascript Bindings:

    * [[https://nodejs.org|node]] (4.2 or better)

=== Compilation ===

== Efl ==
To configure efl sources with bindings to use in nodejs add ''//––with-js=nodejs//'' in configure flags to generate node files

<code bash>
./configure --with-js=nodejs #in efl source path
</code>

and compile normaly

<code bash>
make
make install
</code>

== Elementary ==

In Elementary all you need is run ''./autotools'' and compile/install

<code bash>
./autotools #in elementary source path
make
make install
</code>

=== Node.Js ===

After all compiled and installed is time to use the modules in node.js. 

The default node.js files installed by efl/elm stay in prefix /lib path (if you don't define a prefix path is ''/usr/local/lib'')

Node.js need know where find efl/elm node modules, to that export NODE_PATH with the file path to modules.

<code bash>
export NODE_PATH=/usr/local/lib #if necessary replace with your prefix path
</code>

Now you are ready to use the modules in node.js, use ''require'' to import modules

<code javascript>
~$ node
> efl = require("efl")
> elm = require("elm")
</code>

====Button Example====

<note>
You find this example in ''elementary_source/src/examples/button_example_00.js''
</note>

Import Elementary module
<code javascript>
elm = require('elm');
</code>

Create a new Window with autohide (the window is hide automatic when close is pressed):
<code javascript>
win = new elm.Elm.WinStandard(null);
win.setTitle("Hello, World!");
win.setAutohide(true);
</code>

Create a new Button (passed window has parent) and set new label text to button:
<code javascript>
btn = new elm.Elm.Button(win);
btn.setText(null, "Good-Bye, World!");
</code>

Set button basic size and positions:
<code javascript>
btn.setSize(120, 30);
btn.setPosition(60, 15);
btn.setSizeHintWeight(1.0, 1.0);
btn.setSizeHintAlign(1.0, 1.0);
</code>

The method ''on'' is used to register callback on events, in this case we need catch the ''clicked'' event, we register a function (second argument) to print a log message when button ''btn'' is clicked
<code javascript>
btn.on('clicked', function () { console.log('clicked'); } );
</code>

To finish is needy show all elements, for that use ''setVisible(true)''
<code javascript>
btn.setVisible(true);
win.setSize(240, 60);
win.setVisible(true);
</code>

====Twitter Example====

This sample is more complex and we need some external requirements, the request module and twitter module, for that use ''npm'' (node package manager).

<code bash>
nom install request
npm install twitter
</code>

<note tip>npm is installed by default with Node.js</note>