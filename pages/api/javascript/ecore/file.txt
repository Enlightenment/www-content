===== Javascript binding API - Ecore Files =====

[[api:javascript:ecore|Back to the JS Ecore page]]

**DRAFT**

The File module provides a large number of functions to work with files, directories, and downloads.

==== Constants ====

=== Events ===

When monitoring a file or a directory, these constants are used:

   * ''efl.Ecore.File.EVENT_NONE'' - No event.
   * ''efl.Ecore.File.EVENT_CREATED_FILE'' - Created file event.
   * ''efl.Ecore.File.EVENT_CREATED_DIRECTORY'' - Created directory event.
   * ''efl.Ecore.File.EVENT_DELETED_FILE'' - Deleted file event.
   * ''efl.Ecore.File.EVENT_DELETED_DIRECTORY'' - Deleted directory event.
   * ''efl.Ecore.File.EVENT_SELF'' - Deleted monitored directory event.
   * ''efl.Ecore.File.EVENT_MODIFIED'' - Modified file or directory event.
   * ''efl.Ecore.File.EVENT_CLOSED'' - Closed file event.

=== Progress ===

These constants are used to handle the progress of a download action.

   * ''efl.Ecore.File.PROGRESS_CONTINUE'' - Continue the download.
   * ''efl.Ecore.File.PROCESS_ABORT'' - Abort the download.

==== Functions ====

=== abortAllDownloads() ===

Syntax

<code javascript>
efl.Ecore.File.abortAllDownloads();
</code>

Abort all downloads.

This function aborts all the downloads that have been started by ''efl.Ecore.File.download''. It loops over the started downloads and call ''abort()'' for each of them. To abort only one specific download operation, call ''abort()'' directly on the download wrapper object.

=== addMonitor(path, callback) ===

Syntax

<code javascript>
function mycallback(monitor, event, path) { ... }
var monitor = efl.Ecore.File.addMonitor(path, mycallback);
</code>

Parameters

   * path - The path to monitor.
   * callback - The function to call on changes.

Return type

   * object - An object wrapping the new monitor.
   * null - If it was not possible to create the monitor.

This function monitors path. If the path is ''null'', or is an empty string, or none of the notify methods (Inotify, Windows notification or polling) is available, or if the path does not exist the function returns ''null''. Otherwise, it returns a newly allocated ''Monitor'' object and the monitoring begins. When one of the ''efl.Ecore.File.EVENT_*'' events are notified, the callback is called. Call ''del()'' on the monitor object to stop the monitoring.

=== availableDownloadProtocol(protocol) ===

Syntax

<code javascript>
var isAvailable = efl.Ecore.File.availableDownloadProtocol(protocol);
</code>

Parameters

   * protocol - The name of the desired protocol

Return type

   * boolean - Whether the protocol is available or not.

This function returns ''true'' if protocol is supported, ''false'' otherwise. protocol can be ''http://'', ''ftp://'' or ''file:/\/ ''. Ecore.File must be compiled with CURL to handle http and ftp protocols.

=== canExec(file) ===

Syntax

<code javascript>
var canExec = efl.Ecore.File.canExec(file)
</code>

Parameters

   * file - The name of the file.

Return value

   * boolean - ''true'' if the file can be executed, ''false'' otherwise.

This function returns ''true'' if file can be executed, ''false'' otherwise.

=== canRead(file) ===

Syntax

<code javascript>
var canRead = efl.Ecore.File.canRead(file)
</code>

Parameters

   * file - The name of the file.

Return value

   * boolean - ''true'' if the file is readable, ''false'' otherwise.

This function returns ''true'' if file can be read, ''false'' otherwise.

=== canWrite(file) ===

Syntax

<code javascript>
var canWrite = efl.Ecore.File.canWrite(file)
</code>

Parameters

   * file - The name of the file.

Return value

   * boolean - ''true'' if the file is writable, ''false'' otherwise.

This function returns ''true'' if file can be written, ''false'' otherwise.

=== cp(src, dst) ===

Syntax

<code javascript>
efl.Ecore.File.cp(src, dst)
</code>

Parameters
   * src - The name of the source file.
   * dst - The name of the destination file.

Return value

   * boolean - ''true'' on success, ''false'' otherwise.

This function copies src to dst. If the absolute path name of src and dst can not be computed, or if they are equal, or if the copy fails, the function returns ''false'', otherwise it returns ''true''.

=== efl.Ecore.File.download(url, dst, completion_cb, progress_cb [, headers]) ===

Syntax

<code javascript>
function completion_cb(file, status) { ... };
function progress_cb(file, dltotal, dlnow, ultotal, ulnow) { ... };
efl.Ecore.File.download(url, dst, completion_cb, progress_cb);

headers = {...};
efl.Ecore.File.download(url, dst, completion_cb, progress_cb, headers);
</code>

Parameters
   * url - The complete url to download.
   * dst - The local file to save the downloaded to.
   * completion_cb - A callback called on download complete.
   * progress_cb - A callback called during the download operation.
   * headers - Optional object with set of headers to the download operation.

Return value

   * boolean - ''true'' if the download start or ''false'' on failure.

This function starts the download of the URL ''url'' and saves it to ''dst''. ''url'' must provide the protocol, including 'http://', 'ftp://' or 'file:/\/'. ''efl.Ecore.File'' must be compiled with CURL to download using http and ftp protocols. If ''dst'' is ill-formed, or if it already exists, the function returns ''false''. When the download is complete, the callback ''completion_cb'' is called and data is passed to it. The status parameter of completion_cb will be filled with the status of the download (200, 404,...). The progress_cb is called during the download operation, each time a packet is received or when CURL wants. It can be used to display the percentage of the downloaded file. Return 0 (or ''efl.Ecore.File.PROGRESS_CONTINUE'' from this callback, if provided, to continue the operation or anything else to abort the download. The only operations that can be aborted are those with protocol 'http' or 'ftp'. Similarly ''efl.Ecore.File.abortAllDownloads()'' can be used to abort all download operations.

The optional ''headers'' parameters contain additional headers to control the download operation.

This function returns ''true'' if the download starts, ''false'' otherwise.

=== environmentTmp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== escapeName() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== exists() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== existsPathDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== getAppExe() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== getDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== getFile() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== init() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== installedApp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== isDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== isEmptyDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== listApp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== ls() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkdir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkdirs() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkpath() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkpaths() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkstemp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mksubdirs() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== modTime() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mv() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== readlink() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== realpath() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== remove() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== rmdir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== rmRecursive() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== shutdown() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== size() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== stripExtension() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== symlink() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== unlink() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...