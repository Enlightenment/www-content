===== Javascript binding API - Ecore Files =====

[[api:javascript:ecore|Back to the JS Ecore page]]

**DRAFT**

The File module provides a large number of functions to work with file, directories and downloads.

==== Constants ====

=== Events ===

When monitoring a file or a directory, these constants are used:

   * ''efl.Ecore.File.EVENT_NONE'' - No event.
   * ''efl.Ecore.File.EVENT_CREATED_FILE'' - Created file event.
   * ''efl.Ecore.File.EVENT_CREATED_DIRECTORY'' - Created directory event.
   * ''efl.Ecore.File.EVENT_DELETED_FILE'' - Deleted file event.
   * ''efl.Ecore.File.EVENT_DELETED_DIRECTORY'' - Deleted directory event.
   * ''efl.Ecore.File.EVENT_SELF'' - Deleted monitored directory event.
   * ''efl.Ecore.File.EVENT_MODIFIED'' - Modified file or directory event.
   * ''efl.Ecore.File.EVENT_CLOSED'' - Closed file event.

=== Progress ===

These constants are used to handle the progress of a download action.

   * ''efl.Ecore.File.PROGRESS_CONTINUE'' - Continue the download.
   * ''efl.Ecore.File.PROCESS_ABORT'' - Abort the download.

==== Functions ====

=== abortAllDownloads() ===

Syntax

<code javascript>
efl.Ecore.File.abortAllDownloads();
</code>

Abort all downloads.

This function aborts all the downloads that have been started by ''efl.Ecore.File.download''. It loops over the started downloads and call ''abort()'' for each of them. To abort only one specific download operation, call ''abort()'' directly on the download wrapper object.

=== addMonitor(path, callback) ===

Syntax

<code javascript>
function mycallback(monitor, event, path) { ... }
var monitor = efl.Ecore.File.addMonitor(path, mycallback);
</code>

Parameters

   * path - The path to monitor.
   * callback - The function to call on changes.

Return type

   * object - An object wrapping the new monitor.
   * null - If it was not possible to create the monitor.

This function monitors path. If path is ''null'', or is an empty string, or none of the notify methods (Inotify, Windows notification or polling) is available, or if path does not exist the function returns ''null''. Otherwise, it returns a newly allocated ''Monitor'' object and the monitoring begins. When one of the ''efl.Ecore.File.EVENT_*'' events is notified, callback is called. Call ''del()'' on the monitor object to stop the monitoring.

=== availableDownloadProtocol(protocol) ===

Syntax

<code javascript>
var isAvailable = efl.Ecore.File.availableDownloadProtocol(protocol);
</code>

Parameters

   * protocol - The name of the desired protocol

Return type

   * boolean - Whether the protocol is available or not.

This function returns ''true'' if protocol is supported, ''false'' otherwise. protocol can be 'http://', 'ftp://' or 'file://'. Ecore.File must be compiled with CURL to handle http and ftp protocols.

=== canExec() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== canRead() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== canWrite() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== cp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== download() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== environmentTmp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== escapeName() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== exists() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== existsPathDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== getAppExe() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== getDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== getFile() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== init() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== installedApp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== isDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== isEmptyDir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== listApp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== ls() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkdir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkdirs() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkpath() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkpaths() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mkstemp() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mksubdirs() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== modTime() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== mv() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== readlink() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== realpath() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== remove() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== rmdir() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== rmRecursive() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== shutdown() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== size() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== stripExtension() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== symlink() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...

=== unlink() ===

Syntax

<code javascript>
</code>

Parameters

   * parameter

Return type

   * return type

Lorem ipsum...