<title>Ector.Buffer.span_get</title>
===== Signature =====

<code>
Ector.Buffer.span_get @virtual_pure {
    params {
        @in x: int;
        @in y: int;
        @in w: uint;
        @in cspace: Efl.Gfx.Colorspace;
        @out length: uint;
    }
    return: ptr(uint8);
}
</code>

===== C signature =====

<code c>
uint8_t *ector_buffer_span_get(Eo *obj, int x, int y, unsigned int w, Efl_Gfx_Colorspace cspace, unsigned int *length);
</code>

===== Parameters =====

  * **x** //(in)// - %%Ranges from -l to w+r-1%%
  * **y** //(in)// - %%Ranges from -t to h+b-1%%
  * **w** //(in)// - %%Ranges from 1 to w+l+r%%
  * **cspace** //(in)// - %%Requested colorspace, may trigger conversion on the fly.%%
  * **length** //(out)// - %%Length in bytes of the returned buffer%%

===== Description =====

%%Get a single horizontal span of length w starting from (x,y)%%

%%Call span_free() to release it. This function will try not to allocate any new buffer, whenever possible. This means the data might be mapped directly from the backing memory buffer.%%

//Since 1.17//
{{page>:docs:efl:user:mixin:ector:buffer:method:span_get:description&nodate&nolink&nouser}}

