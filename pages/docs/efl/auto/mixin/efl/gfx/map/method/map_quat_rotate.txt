<title>Efl.Gfx.Map.map_quat_rotate</title>
===== Signature =====

<code>
Efl.Gfx.Map.map_quat_rotate {
    params {
        @in qx: double;
        @in qy: double;
        @in qz: double;
        @in qw: double;
        @in cx: double;
        @in cy: double;
        @in cz: double;
    }
    return: bool;
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_gfx_map_quat_rotate(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

===== Parameters =====

  * **qx** //(in)// - %%The x component of the imaginary part of the quaternion.%%
  * **qy** //(in)// - %%The y component of the imaginary part of the quaternion.%%
  * **qz** //(in)// - %%The z component of the imaginary part of the quaternion.%%
  * **qw** //(in)// - %%The w component of the real part of the quaternion.%%
  * **cx** //(in)// - %%Rotation's center x.%%
  * **cy** //(in)// - %%Rotation's center y.%%
  * **cz** //(in)// - %%Rotation's center z.%%

===== Description =====

%%Rotate the map in 3D using a unit quaternion.%%

%%This will rotate in 3D using a unit quaternion. Like with evas_map_util_3d_rotate() you provide a center point to rotate around (in 3D).%%
{{page>:docs:efl:user:mixin:efl:gfx:map:method:map_quat_rotate:description&nodate&nolink&nouser}}

