<title>Efl.Input.Event</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_input_event [fillcolor = "deepskyblue4", label = "Efl.Input.Event", color = "deepskyblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]] //(mixin)//**

===== Description =====

%%Represents a generic event data.%%

%%Most Efl Events do not carry Efl Objects, rather simple data structures. This class is intended to carry more complex event data, such as pointer events.%%
</note>

//Since 1.19//

{{page>:docs:efl:user:mixin:efl:input:event:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:mixin:efl:input:event:method:dup|dup]]**
<code c>
Efl_Input_Event *efl_input_dup(Eo *obj);
</code>

%%Creates a copy of this event.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:method:reset|reset]]**
<code c>
void efl_input_reset(Eo *obj);
</code>

%%Resets the internal data to 0 or default values.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:property:device|device]]** //**(get, set)**//
<code c>
Efl_Input_Device *efl_input_device_get(const Eo *obj);
void efl_input_device_set(Eo *obj, Efl_Input_Device *dev);
</code>

%%Input device that originated this event.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:property:event_flags|event_flags]]** //**(get, set)**//
<code c>
Efl_Input_Flags efl_input_event_flags_get(const Eo *obj);
void efl_input_event_flags_set(Eo *obj, Efl_Input_Flags flags);
</code>

%%Extra flags for this event, may be changed by the user.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:property:fake|fake]]** //**(get)**//
<code c>
Eina_Bool efl_input_fake_get(const Eo *obj);
</code>

%%%%''true''%% if the event was fake, not triggered by real hardware.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:property:processed|processed]]** //**(get, set)**//
<code c>
Eina_Bool efl_input_processed_get(const Eo *obj);
void efl_input_processed_set(Eo *obj, Eina_Bool val);
</code>

%%%%''true''%% if %%[[:docs:efl:auto:mixin:efl:input:event:property:event_flags|Efl.Input.Event.event_flags]]%% indicates the event is on hold.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:property:scrolling|scrolling]]** //**(get, set)**//
<code c>
Eina_Bool efl_input_scrolling_get(const Eo *obj);
void efl_input_scrolling_set(Eo *obj, Eina_Bool val);
</code>

%%%%''true''%% if %%[[:docs:efl:auto:mixin:efl:input:event:property:event_flags|Efl.Input.Event.event_flags]]%% indicates the event happened while scrolling.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:property:timestamp|timestamp]]** //**(get, set)**//
<code c>
double efl_input_timestamp_get(const Eo *obj);
void efl_input_timestamp_set(Eo *obj, double ms);
</code>

%%The time at which an event was generated.%%\\ 
\\ 
**[[:docs:efl:auto:mixin:efl:input:event:method:instance_get|instance_get]]** ''protected''
<code c>
Efl_Input_Event *efl_input_instance_get(const Eo *obj, Efl_Object *owner, void **priv);
</code>

%%Get an instance of this input event%%\\ 
\\ 

