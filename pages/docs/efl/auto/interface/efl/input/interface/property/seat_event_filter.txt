<title>Efl.Input.Interface.seat_event_filter</title>
===== Signature =====

<code>
@property seat_event_filter @pure_virtual {
    get {
        keys {
            seat: Efl.Input.Device;
        }
        values {
            enable: bool;
        }
    }
    set {
        keys {
            seat: Efl.Input.Device;
        }
        values {
            enable: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

===== Keys =====

  * **seat** - %%The seat to act on.%%
===== Values =====

  * **enable** - %%%%''true''%% to enable events for a seat or %%''false''%% otherwise.%%
===== Description =====



{{page>:docs:efl:user:interface:efl:input:interface:property:seat_event_filter:description&nodate&nolink&nouser}}

==== Getter ====

%%Check if input events from a given seat is enabled.%%

//Since 1.19//

{{page>:docs:efl:user:interface:efl:input:interface:property:seat_event_filter:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Add or remove a given seat to the filter list. If the filter list is empty this object will report mouse, keyboard and focus events from any seat, otherwise those events will only be reported if the event comes from a seat that is in the list.%%

//Since 1.19//{{page>:docs:efl:user:interface:efl:input:interface:property:seat_event_filter:getter_description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Efl.Input.Interface.seat_event_filter**
  * [[:docs:efl:auto:class:efl:canvas:object:property:seat_event_filter|Efl.Canvas.Object.seat_event_filter]]

