<title>Efl.Image.Load.load_region</title>
===== Signature =====

<code>
@property Efl.Image.Load.load_region @virtual_pure {
    get {
        values {
            x: int;
            y: int;
            w: int;
            h: int;
        }
    }
    set {
        values {
            x: int;
            y: int;
            w: int;
            h: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_image_load_region_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_image_load_region_set(Eo *obj, int x, int y, int w, int h);
</code>

===== Values =====

  * **x** - %%X-offset of the region to be loaded.%%
  * **y** - %%Y-offset of the region to be loaded.%%
  * **w** - %%Width of the region to be loaded.%%
  * **h** - %%Height of the region to be loaded.%%
===== Description =====



{{page>:docs:efl:user:interface:efl:image:load:property:load_region:description&nodate&nolink&nouser}}

==== Getter ====

%%Retrieve the coordinates of a given image object's selective (source image) load region.%%

<note>
%%Use %%''null''%% pointers on the coordinates you're not interested in: they'll be ignored by the function.%%
</note>

{{page>:docs:efl:user:interface:efl:image:load:property:load_region:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Inform a given image object to load a selective region of its source image.%%

%%This function is useful when one is not showing all of an image's area on its image object.%%

<note>
%%The image loader for the image format in question has to support selective region loading in order to this function to take effect.%%
</note>{{page>:docs:efl:user:interface:efl:image:load:property:load_region:getter_description&nodate&nolink&nouser}}


