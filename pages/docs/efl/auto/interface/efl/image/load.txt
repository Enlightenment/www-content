<title>Efl.Image.Load</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_image_load [fillcolor = "dodgerblue4", label = "Efl.Image.Load", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:interface:efl:image:load|Efl.Image.Load]] //(interface)//**

===== Description =====

%%Common APIs for all loadable 2D images.%%

{{page>:docs:efl:user:interface:efl:image:load:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:interface:efl:image:load:method:load_async_cancel|load_async_cancel]]**
<code c>
void efl_image_load_async_cancel(Eo *obj);
</code>

%%Cancel preloading an image object's image data in the background.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:method:load_async_start|load_async_start]]**
<code c>
void efl_image_load_async_start(Eo *obj);
</code>

%%Begin preloading an image object's image data in the background.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_dpi|load_dpi]]** //**(get, set)**//
<code c>
double efl_image_load_dpi_get(const Eo *obj);
void efl_image_load_dpi_set(Eo *obj, double dpi);
</code>

\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_error|load_error]]** //**(get)**//
<code c>
Efl_Image_Load_Error efl_image_load_error_get(const Eo *obj);
</code>

%%Retrieves a number representing any error that occurred during the last loading of the given image object's source image.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_orientation|load_orientation]]** //**(get, set)**//
<code c>
Eina_Bool efl_image_load_orientation_get(const Eo *obj);
void efl_image_load_orientation_set(Eo *obj, Eina_Bool enable);
</code>

%%Defines whether the orientation information in the image file should be honored.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_region_support|load_region_support]]** //**(get)**//
<code c>
Eina_Bool efl_image_load_region_support_get(const Eo *obj);
</code>

%%Indicates whether the %%[[:docs:efl:auto:interface:efl:image:load:property:load_region|Efl.Image.Load.load_region]]%% property is supported for the current file.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_region|load_region]]** //**(get, set)**//
<code c>
void efl_image_load_region_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_image_load_region_set(Eo *obj, int x, int y, int w, int h);
</code>

\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_scale_down|load_scale_down]]** //**(get, set)**//
<code c>
int efl_image_load_scale_down_get(const Eo *obj);
void efl_image_load_scale_down_set(Eo *obj, int div);
</code>

%%The scale down factor is a divider on the original image size.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_size|load_size]]** //**(get, set)**//
<code c>
void efl_image_load_size_get(const Eo *obj, int *w, int *h);
void efl_image_load_size_set(Eo *obj, int w, int h);
</code>

%%The load size of an image.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:property:load_skip_header|load_skip_header]]** //**(get, set)**//
<code c>
Eina_Bool efl_image_load_skip_header_get(const Eo *obj);
void efl_image_load_skip_header_set(Eo *obj, Eina_Bool skip);
</code>

%%Initial load should skip header check and leave it all to data load%%\\ 
\\ 

===== Events =====

**[[:docs:efl:auto:interface:efl:image:load:event:load_cancelled|load,cancelled]]**
<code c>
EFL_IMAGE_LOAD_EVENT_LOAD_CANCELLED(void)
</code>

%%Called when the image loading was cancelled%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:event:load_done|load,done]]**
<code c>
EFL_IMAGE_LOAD_EVENT_LOAD_DONE(void)
</code>

%%Called when he image was loaded%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:image:load:event:load_error|load,error]]**
<code c>
EFL_IMAGE_LOAD_EVENT_LOAD_ERROR(Efl_Image_Load_Error)
</code>

%%Called when an error happened during image loading%%\\ 
\\ 
