<title>Efl.File.file</title>
===== Signature =====

<code>
@property Efl.File.file @virtual_pure {
    get {
        values {
            file: string;
            key: string;
        }
    }
    set {
        values {
            file: string;
            key: string;
        }
        return: bool;
    }
}
</code>

===== C signature =====

<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

===== Values =====

  * **file** - %%The image file path.%%
  * **key** - %%The image key in %%''file''%% (if its an Eet one), or %%''null''%%, otherwise.%%
===== Description =====



{{page>:docs:efl:user:interface:efl:file:property:file:description&nodate&nolink&nouser}}

==== Getter ====

%%Retrieve the source file from where an image object is to fetch the real image data (it may be an Eet file, besides pure image ones).%%

%%You must not modify the strings on the returned pointers.%%

<note>
%%Use %%''null''%% pointers on the file components you're not interested in: they'll be ignored by the function.%%
</note>

{{page>:docs:efl:user:interface:efl:file:property:file:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Set the source file from where an image object must fetch the real image data (it may be an Eet file, besides pure image ones).%%

%%If the file supports multiple data stored in it (as Eet files do), you can specify the key to be used as the index of the image in this file.%%{{page>:docs:efl:user:interface:efl:file:property:file:getter_description&nodate&nolink&nouser}}


