<title>Efl.Canvas</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas [fillcolor = "dodgerblue4", label = "Efl.Canvas", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]] //(interface)//**

===== Description =====

%%Common interface for window and some internal classes in EFL.%%

{{page>:docs:efl:user:interface:efl:canvas:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:interface:efl:canvas:method:object_top_at_xy_get|object_top_at_xy_get]]**
<code c>
Efl_Gfx *efl_canvas_object_top_at_xy_get(const Eo *obj, int x, int y, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve the object stacked at the top of a given position in a canvas.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:method:object_top_in_rectangle_get|object_top_in_rectangle_get]]**
<code c>
Efl_Gfx *efl_canvas_object_top_in_rectangle_get(const Eo *obj, int x, int y, int w, int h, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve the Evas object stacked at the top of a given rectangular region in a canvas%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:method:objects_at_xy_get|objects_at_xy_get]]**
<code c>
Eina_Iterator *efl_canvas_objects_at_xy_get(const Eo *obj, int x, int y, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve a list of objects lying over a given position in a canvas.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:method:objects_in_rectangle_get|objects_in_rectangle_get]]**
<code c>
Eina_Iterator *efl_canvas_objects_in_rectangle_get(const Eo *obj, int x, int y, int w, int h, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve a list of objects lying over a given rectangular region in a canvas.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:method:smart_objects_calculate|smart_objects_calculate]]**
<code c>
void efl_canvas_smart_objects_calculate(Eo *obj);
</code>

%%Call user-provided %%''calculate''%% smart functions and unset the flag signalling that the object needs to get recalculated to all smart objects in the canvas.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:property:image_max_size|image_max_size]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_image_max_size_get(const Eo *obj, int *maxw, int *maxh);
</code>

%%Get the maximum image size evas can possibly handle.%%\\ 
\\ 

===== Events =====

**[[:docs:efl:auto:interface:efl:canvas:event:device_added|device,added]]**
<code c>
EFL_CANVAS_EVENT_DEVICE_ADDED(Efl_Input_Device *)
</code>

%%Called when input device was added%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:device_changed|device,changed]]**
<code c>
EFL_CANVAS_EVENT_DEVICE_CHANGED(Efl_Input_Device *)
</code>

%%Called when input device changed%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:device_removed|device,removed]]**
<code c>
EFL_CANVAS_EVENT_DEVICE_REMOVED(Efl_Input_Device *)
</code>

%%Called when input device was removed%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:focus_in|focus,in]]**
<code c>
EFL_CANVAS_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%Called when canvas got focus%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:focus_out|focus,out]]**
<code c>
EFL_CANVAS_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%Called when canvas lost focus%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:object_focus_in|object,focus,in]]**
<code c>
EFL_CANVAS_EVENT_OBJECT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%Called when object got focus%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:object_focus_out|object,focus,out]]**
<code c>
EFL_CANVAS_EVENT_OBJECT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%Called when object lost focus%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:render_post|render,post]]**
<code c>
EFL_CANVAS_EVENT_RENDER_POST(void)
</code>

%%Called when post render happens%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:canvas:event:render_pre|render,pre]]**
<code c>
EFL_CANVAS_EVENT_RENDER_PRE(void)
</code>

%%Called when pre render happens%%\\ 
\\ 
