<title>Efl.Gfx.Stack.layer</title>
===== Signature =====

<code>
@property Efl.Gfx.Stack.layer @virtual_pure {
    get {
        values {
            l: short;
        }
    }
    set {
        values {
            l: short;
        }
    }
}
</code>

===== C signature =====

<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

===== Values =====

  * **l** - %%The number of the layer to place the object on. Must be between #EFL_GFX_STACK_LAYER_MIN and #EFL_GFX_STACK_LAYER_MAX.%%
===== Description =====



{{page>:docs:efl:user:interface:efl:gfx:stack:property:layer:description&nodate&nolink&nouser}}

==== Getter ====

%%Retrieves the layer of its canvas that the given object is part of.%%

%%See also %%[[:docs:efl:auto:interface:efl:gfx:stack:property:layer|Efl.Gfx.Stack.layer.set]]%%()%%

{{page>:docs:efl:user:interface:efl:gfx:stack:property:layer:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Sets the layer of its canvas that the given object will be part of.%%

%%If you don't use this function, you'll be dealing with an unique layer of objects, the default one. Additional layers are handy when you don't want a set of objects to interfere with another set with regard to stacking. Two layers are completely disjoint in that matter.%%

%%This is a low-level function, which you'd be using when something should be always on top, for example.%%

<note warning>
%%Be careful, it doesn't make sense to change the layer of smart objects' children. Smart objects have a layer of their own, which should contain all their children objects.%%
</note>

%%See also %%[[:docs:efl:auto:interface:efl:gfx:stack:property:layer|Efl.Gfx.Stack.layer.get]]%%()%%{{page>:docs:efl:user:interface:efl:gfx:stack:property:layer:getter_description&nodate&nolink&nouser}}


