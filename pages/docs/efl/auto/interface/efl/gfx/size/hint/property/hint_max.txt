<title>Efl.Gfx.Size.Hint.hint_max</title>
===== Signature =====

<code>
@property Efl.Gfx.Size.Hint.hint_max @virtual_pure {
    get {
        values {
            w: int;
            h: int;
        }
    }
    set {
        values {
            w: int;
            h: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_gfx_size_hint_max_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_max_set(Eo *obj, int w, int h);
</code>

===== Values =====

  * **w** - %%Integer to use as the maximum width hint.%%
  * **h** - %%Integer to use as the maximum height hint.%%
===== Description =====

%%Hints on the object's maximum size.%%

%%This is not a size enforcement in any way, it's just a hint that should be used whenever appropriate.%%

%%The object container is in charge of fetching this property and placing the object accordingly.%%

%%Values -1 will be treated as unset hint components, when queried by managers.%%

<note>
%%Smart objects (such as elementary) can have their own size hint policy. So calling this API may or may not affect the size of smart objects.%%
</note>{{page>:docs:efl:user:interface:efl:gfx:size:hint:property:hint_max:description&nodate&nolink&nouser}}


