<title>Efl.Gfx.View.view_size</title>
===== Signature =====

<code>
@property view_size @pure_virtual {
    get {
        values {
            w: int;
            h: int;
        }
    }
    set {
        values {
            w: int;
            h: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_gfx_view_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_view_size_set(Eo *obj, int w, int h);
</code>

===== Values =====

  * **w** - %%Width of the view.%%
  * **h** - %%Height of the view.%%
===== Description =====

%%The dimensions of this object's viewport.%%

%%This property represents the size of an image (file on disk, vector graphics, GL or 3D scene, ...) view: this is the logical size of a view, not the number of pixels in the buffer, nor its visible size on the window.%%

%%For scalable scenes (vector graphics, 3D or GL), this means scaling the contents of the scene and drawing more pixels as a result; For pixmaps this means zooming and stretching up or down the backing buffer to fit this view.%%

%%In most cases the view should have the same dimensions as the object on the canvas, for best quality.%%

%%%%[[:docs:efl:auto:interface:efl:gfx:view:property:view_size|Efl.Gfx.View.view_size.set]]%% may not be implemented. If it is, it might trigger a complete recalculation of the scene, or reload of the pixel data.%%

%%Refer to each implementing class specific documentation for more details.%%{{page>:docs:efl:user:interface:efl:gfx:view:property:view_size:description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Efl.Gfx.View.view_size**
  * [[:docs:efl:auto:class:elm:glview:property:view_size|Elm.Glview.view_size]]
  * [[:docs:efl:auto:class:efl:canvas:image:internal:property:view_size|Efl.Canvas.Image.Internal.view_size]]
  * [[:docs:efl:auto:class:evas:vg:property:view_size|Evas.VG.view_size]]
  * [[:docs:efl:auto:class:efl:ui:image:property:view_size|Efl.Ui.Image.view_size]]

