<title>Efl.Pack.Layout</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_pack_layout [fillcolor = "dodgerblue4", label = "Efl.Pack.Layout", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:interface:efl:pack:layout|Efl.Pack.Layout]] //(interface)//**

===== Description =====

%%Low-level APIs for object that can lay their children out.%%

%%Used for containers (box, grid).%%

{{page>:docs:efl:user:interface:efl:pack:layout:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:interface:efl:pack:layout:method:layout_request|layout_request]]**
<code c>
void efl_pack_layout_request(Eo *obj);
</code>

%%Requests EFL to call the %%[[:docs:efl:auto:interface:efl:pack:layout:method:layout_update|Efl.Pack.Layout.layout_update]]%% method on this object.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:layout:property:layout_engine|layout_engine]]** //**(get, set)**//
<code c>
void efl_pack_layout_engine_get(const Eo *obj, const Efl_Object **engine, const void **data);
void efl_pack_layout_engine_set(Eo *obj, const Efl_Object *engine, const void *data);
</code>

%%Implementation of this container's layout algorithm.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:layout:method:layout_do|layout_do]]** ''protected''
<code c>
void efl_pack_layout_do(const Eo *obj, Efl_Gfx *pack, const void *data);
</code>

%%Lay out (resize and move) children objects of %%''pack''%%.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:layout:method:layout_update|layout_update]]** ''protected''
<code c>
void efl_pack_layout_update(Eo *obj);
</code>

%%Implementation of this container's layout algorithm.%%\\ 
\\ 

