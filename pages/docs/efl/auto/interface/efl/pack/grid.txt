<title>Efl.Pack.Grid</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_pack_grid [fillcolor = "dodgerblue4", label = "Efl.Pack.Grid", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack_linear [fillcolor = "gray15", label = "Efl.Pack.Linear", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack [fillcolor = "gray15", label = "Efl.Pack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_pack_grid -> efl_pack_linear
    efl_pack_linear -> efl_pack
    efl_pack -> efl_container
    efl_container -> efl_gfx
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]] //(interface)//**
    * [[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]] //(interface)//
      * [[:docs:efl:auto:interface:efl:pack|Efl.Pack]] //(interface)//
        * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//

===== Description =====

%%2D containers aligned on a grid with rows and columns%%

{{page>:docs:efl:user:interface:efl:pack:grid:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:interface:efl:pack:grid:method:grid_content_get|grid_content_get]]**
<code c>
Efl_Gfx *efl_pack_grid_content_get(Eo *obj, int col, int row);
</code>

%%Returns a child at a given position, see %%[[:docs:efl:auto:interface:efl:pack:grid:method:grid_contents_get|Efl.Pack.Grid.grid_contents_get]]%%.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:method:grid_contents_get|grid_contents_get]]**
<code c>
Eina_Iterator *efl_pack_grid_contents_get(Eo *obj, int col, int row, Eina_Bool below);
</code>

%%Returns all objects at a given position in this grid.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:method:pack_grid|pack_grid]]**
<code c>
Eina_Bool efl_pack_grid(Eo *obj, Efl_Gfx *subobj, int col, int row, int colspan, int rowspan);
</code>

%%Pack object on the grid%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:property:grid_columns|grid_columns]]** //**(get, set)**//
<code c>
int efl_pack_grid_columns_get(const Eo *obj);
void efl_pack_grid_columns_set(Eo *obj, int cols);
</code>

%%Gird columns property%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:property:grid_orientation|grid_orientation]]** //**(get, set)**//
<code c>
void efl_pack_grid_orientation_get(const Eo *obj, Efl_Orient *primary, Efl_Orient *secondary);
void efl_pack_grid_orientation_set(Eo *obj, Efl_Orient primary, Efl_Orient secondary);
</code>

%%Primary and secondary up/left/right/down orientations for linear apis.%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:property:grid_position|grid_position]]** //**(get)**//
<code c>
Eina_Bool efl_pack_grid_position_get(const Eo *obj, Efl_Gfx *subobj, int *col, int *row, int *colspan, int *rowspan);
</code>

%%Position and span of the %%''subobj''%% in this container, may be modified to move the %%''subobj''%%%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:property:grid_rows|grid_rows]]** //**(get, set)**//
<code c>
int efl_pack_grid_rows_get(const Eo *obj);
void efl_pack_grid_rows_set(Eo *obj, int rows);
</code>

%%Grid rows property%%\\ 
\\ 
**[[:docs:efl:auto:interface:efl:pack:grid:property:grid_size|grid_size]]** //**(get, set)**//
<code c>
void efl_pack_grid_size_get(const Eo *obj, int *cols, int *rows);
void efl_pack_grid_size_set(Eo *obj, int cols, int rows);
</code>

%%Combines %%[[:docs:efl:auto:interface:efl:pack:grid:property:grid_columns|Efl.Pack.Grid.grid_columns]]%% and %%[[:docs:efl:auto:interface:efl:pack:grid:property:grid_rows|Efl.Pack.Grid.grid_rows]]%%%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_count|content_count]]**
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_iterate|content_iterate]]**
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_remove|content_remove]]**
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_unset|content_unset]]**
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:property:content|content]]** //**(get, set)**//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:color_part|color_part]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_color_part_get(const Eo *obj, const char *part, int *r, int *g, int *b, int *a);
Eina_Bool efl_gfx_color_part_set(Eo *obj, const char *part, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:color|color]]** //**(get, set)**//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:geometry|geometry]]** //**(get, set)**//
<code c>
void efl_gfx_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_geometry_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:position|position]]** //**(get, set)**//
<code c>
void efl_gfx_position_get(const Eo *obj, int *x, int *y);
void efl_gfx_position_set(Eo *obj, int x, int y);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:size|size]]** //**(get, set)**//
<code c>
void efl_gfx_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_set(Eo *obj, int w, int h);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:visible|visible]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_after|pack_after]]**
<code c>
Eina_Bool efl_pack_after(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Append item after other sub object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_at|pack_at]]**
<code c>
Eina_Bool efl_pack_at(Eo *obj, Efl_Gfx *subobj, int index);
</code>

%%Inserts %%''subobj''%% at the specified %%''index''%%.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_before|pack_before]]**
<code c>
Eina_Bool efl_pack_before(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Prepend item before other sub object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_begin|pack_begin]]**
<code c>
Eina_Bool efl_pack_begin(Eo *obj, Efl_Gfx *subobj);
</code>

%%Prepend an object at the beginning of this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_content_get|pack_content_get]]**
<code c>
Efl_Gfx *efl_pack_content_get(Eo *obj, int index);
</code>

%%Content at a given index in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_end|pack_end]]**
<code c>
Eina_Bool efl_pack_end(Eo *obj, Efl_Gfx *subobj);
</code>

%%Append object at the end of this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_index_get|pack_index_get]]**
<code c>
int efl_pack_index_get(Eo *obj, const Efl_Gfx *subobj);
</code>

%%Get the index of a child in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_unpack_at|pack_unpack_at]]**
<code c>
Efl_Gfx *efl_pack_unpack_at(Eo *obj, int index);
</code>

%%Pop out item at specified %%''index''%%.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:method:pack_clear|pack_clear]]**
<code c>
Eina_Bool efl_pack_clear(Eo *obj);
</code>

%%Removes all packed contents, and unreferences them.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:method:pack|pack]]**
<code c>
Eina_Bool efl_pack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Adds an item to this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:method:unpack_all|unpack_all]]**
<code c>
Eina_Bool efl_pack_unpack_all(Eo *obj);
</code>

%%Removes all packed contents, without unreferencing them.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:method:unpack|unpack]]**
<code c>
Eina_Bool efl_pack_unpack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Removes an existing item from the container, without deleting it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:property:pack_align|pack_align]]** //**(get, set)**//
<code c>
void efl_pack_align_get(const Eo *obj, double *align_horiz, double *align_vert);
void efl_pack_align_set(Eo *obj, double align_horiz, double align_vert);
</code>

%%Alignment of the container within its bounds%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**//
<code c>
void efl_pack_padding_get(const Eo *obj, double *pad_horiz, double *pad_vert, Eina_Bool *scalable);
void efl_pack_padding_set(Eo *obj, double pad_horiz, double pad_vert, Eina_Bool scalable);
</code>

%%Padding between items contained in this object.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:event:layout_updated|layout,updated]]**
<code c>
EFL_PACK_EVENT_LAYOUT_UPDATED(void)
</code>

%%Sent after the layout was updated.%%\\ 
\\ 
