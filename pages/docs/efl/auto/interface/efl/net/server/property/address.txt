<title>Efl.Net.Server.address</title>
===== Signature =====

<code>
@property address @pure_virtual {
    get {
        values {
            address: string;
        }
    }
    set @protected {
        values {
            address: string;
        }
    }
}
</code>

===== C signature =====

<code c>
const char *efl_net_server_address_get(const Eo *obj);
void efl_net_server_address_set(Eo *obj, const char *address);
</code>

===== Values =====

  * **address** - %%Address the server is bound to%%
===== Description =====

%%The address the server is bound to.%%

%%The actual value depends on the type of server, like an IPv4 (ip:port) or IPv6 ([ip]:port) formatted for a TCP/UDP server, the path if an Unix Local...%%

%%It's always resolved, then if operations are working with domain names or URL, this is the values the kernel reports. It's similar to getsockname() in behavior.%%

//Since 1.19//{{page>:docs:efl:user:interface:efl:net:server:property:address:description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Efl.Net.Server.address**
  * [[:docs:efl:auto:class:efl:net:server:ssl:property:address|Efl.Net.Server.Ssl.address]]
  * [[:docs:efl:auto:class:efl:net:server:simple:property:address|Efl.Net.Server.Simple.address]]
  * [[:docs:efl:auto:class:efl:net:server:fd:property:address|Efl.Net.Server.Fd.address]]

