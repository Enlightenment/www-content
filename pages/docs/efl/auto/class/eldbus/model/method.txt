<title>Eldbus.Model.Method</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    eldbus_model_method [fillcolor = "black", label = "Eldbus.Model.Method", color = "gray15", fontcolor = "white", style = "filled"]
    eldbus_model_arguments [fillcolor = "gray15", label = "Eldbus.Model.Arguments", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_model [fillcolor = "gray15", label = "Efl.Model", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    eldbus_model_method -> eldbus_model_arguments
    eldbus_model_arguments -> efl_object
    eldbus_model_arguments -> efl_model
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:eldbus:model:method|Eldbus.Model.Method]] //(class)//**
    * [[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
      * [[:docs:efl:auto:interface:efl:model|Efl.Model]] //(interface)//

===== Description =====

%%Eldbus model method class%%

{{page>:docs:efl:user:class:eldbus:model:method:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:eldbus:model:method:method:call|call]]**
<code c>
void eldbus_model_method_call(Eo *obj);
</code>

%%Calls the method. The properties must have been set.%%\\ 
\\ 
**[[:docs:efl:auto:class:eldbus:model:method:method:constructor|constructor]]**
<code c>
void eldbus_model_method_constructor(Eo *obj, Eldbus_Proxy *proxy, const Eldbus_Introspection_Method *method);
</code>

%%Custom Eldbus_Model_Method constructor.%%\\ 
\\ 

===== Overrides =====

**[[:docs:efl:auto:class:eldbus:model:method:method:constructor|constructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 

===== Others =====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:child_add|child_add]]** //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
Efl_Object *efl_model_child_add(Eo *obj);
</code>

%%Add a new child.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:child_del|child_del]]** //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
void efl_model_child_del(Eo *obj, Efl_Object *child);
</code>

%%Remove a child.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:children_count_get|children_count_get]]** //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
Efl_Future *efl_model_children_count_get(Eo *obj);
</code>

%%Get children count.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:children_slice_get|children_slice_get]]** //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
Efl_Future *efl_model_children_slice_get(Eo *obj, unsigned int start, unsigned int count);
</code>

%%Get children slice OR full range.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:constructor|constructor]]**
<code c>
void eldbus_model_arguments_constructor(Eo *obj, Eldbus_Proxy *proxy, const char *name, const Eina_List *arguments);
</code>

%%Custom Eldbus_Model_Arguments constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:destructor|destructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:property_get|property_get]]** //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
Efl_Future *efl_model_property_get(Eo *obj, const char *property);
</code>

%%Retrieve the value of a given property name.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:method:property_set|property_set]]** //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
Efl_Future *efl_model_property_set(Eo *obj, const char *property, const Eina_Value *value);
</code>

%%Set a property value of a given property name.%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:property:name|name]]** //**(get)**//
<code c>
const char *eldbus_model_arguments_name_get(const Eo *obj);
</code>

%%Name of the argument%%\\ 
\\ 
[[:docs:efl:auto:class:eldbus:model:arguments|Eldbus.Model.Arguments]].**[[:docs:efl:auto:class:eldbus:model:arguments:property:properties|properties]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:model|Efl.Model]]]//
<code c>
const Eina_Array *efl_model_properties_get(const Eo *obj);
</code>

%%Get properties from model.%%\\ 
\\ 

===== Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:eldbus:model:method:event:successful_call|successful,call]] | %%Event dispatched for a successful method call.%% |
===== Inherited Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:interface:efl:model:event:child_added|Efl.Model.child,added]] | %%Event dispatched when new child is added.%% |
| [[:docs:efl:auto:interface:efl:model:event:child_removed|Efl.Model.child,removed]] | %%Event dispatched when child is removed.%% |
| [[:docs:efl:auto:interface:efl:model:event:children_count_changed|Efl.Model.children,count,changed]] | %%Event dispatched when children count is finished.%% |
| [[:docs:efl:auto:interface:efl:model:event:properties_changed|Efl.Model.properties,changed]] | %%Event dispatched when properties list is available.%% |
