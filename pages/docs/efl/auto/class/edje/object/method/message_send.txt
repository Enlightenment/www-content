<title>Edje.Object.message_send</title>
===== Signature =====

<code>
message_send {
    params {
        @in type: Edje.Message_Type;
        @in id: int;
        @in msg: void_ptr;
    }
}
</code>

===== C signature =====

<code c>
void edje_obj_message_send(Eo *obj, Edje_Message_Type type, int id, void *msg);
</code>

===== Parameters =====

  * **type** //(in)// - %%The type of message to send to obj%%
  * **id** //(in)// - %%A identification number for the message to be sent%%
  * **msg** //(in)// - %%The message's body, a struct depending on type%%

===== Description =====

%%Sends an (Edje) message to a given Edje object%%

%%This function sends an Edje message to obj and to all of its child objects, if it has any (swallowed objects are one kind of child object). type and msg  must be matched accordingly, as documented in #Edje_Message_Type.%%

%%The id argument as a form of code and theme defining a common interface on message communication. One should define the same IDs on both code and EDC declaration (see @ref edcref "the syntax" for EDC files), to individualize messages (binding them to a given context).%%

%%The function to handle messages arriving  from obj is set with edje_object_message_handler_set().%%
{{page>:docs:efl:user:class:edje:object:method:message_send:description&nodate&nolink&nouser}}

===== Implemented by =====

  * **Edje.Object.message_send**

