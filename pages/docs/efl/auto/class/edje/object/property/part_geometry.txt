<title>Edje.Object.part_geometry</title>
===== Signature =====

<code>
@property part_geometry {
    get {
        keys {
            part: string;
        }
        values {
            x: Evas.Coord;
            y: Evas.Coord;
            w: Evas.Coord;
            h: Evas.Coord;
        }
        return: bool;
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool edje_obj_part_geometry_get(const Eo *obj, const char *part, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

===== Keys =====

  * **part** - %%The Edje part's name%%
===== Values =====

  * **x** - %%A pointer to a variable where to store the part's x coordinate%%
  * **y** - %%A pointer to a variable where to store the part's y coordinate%%
  * **w** - %%A pointer to a variable where to store the part's width%%
  * **h** - %%A pointer to a variable where to store the part's height%%
===== Description =====

%%Retrieves the geometry of a given Edje part, in a given Edje object's group definition, relative to the object's area.%%

%%This function gets the geometry of an Edje part within its group. The x and y coordinates are relative to the top left corner of the whole obj object's area.%%

%%Use %%''null''%% pointers on the geometry components you're not interested in: they'll be ignored by the function.%%
</note>

%%On failure, this function will make all non-%%''null''%% geometry pointers' pointed variables be set to zero.%%
</note>
{{page>:docs:efl:user:class:edje:object:property:part_geometry:description&nodate&nolink&nouser}}

===== Implemented by =====

  * **Edje.Object.part_geometry**

