<title>Edje.Edit</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    edje_edit [fillcolor = "black", label = "Edje.Edit", color = "gray15", fontcolor = "white", style = "filled"]
    edje_object [fillcolor = "gray15", label = "Edje.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group_clipped [fillcolor = "gray15", label = "Efl.Canvas.Group.Clipped", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_observer [fillcolor = "gray15", label = "Efl.Observer", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    edje_edit -> edje_object
    edje_object -> efl_canvas_group_clipped
    efl_canvas_group_clipped -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    edje_object -> efl_file
    edje_object -> efl_container
    efl_container -> efl_gfx
    edje_object -> efl_part
    edje_object -> efl_observer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:edje:edit|Edje.Edit]] //(class)//**
    * [[:docs:efl:auto:class:edje:object|Edje.Object]] //(class)//
      * [[:docs:efl:auto:class:efl:canvas:group:clipped|Efl.Canvas.Group.Clipped]] //(class)//
        * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
            * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
      * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//
      * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
        * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:docs:efl:auto:interface:efl:part|Efl.Part]] //(interface)//
      * [[:docs:efl:auto:interface:efl:observer|Efl.Observer]] //(interface)//

===== Description =====

%%Edje editing class to access edje object internals.%%

%%This was intended ONLY for use in an actual edje editor program. Unless you are writing one of these, do NOT use this API here.%%

{{page>:docs:efl:user:class:edje:edit:description&nodate&nolink&nouser}}

===== Overrides =====

**[[:docs:efl:auto:class:edje:edit:method:constructor|constructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:edje:edit:method:destructor|destructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:edje:edit:method:group_del|group_del]]** //[from [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
void efl_canvas_group_del(Eo *obj);
</code>

%%Internal destructor function.%%\\ 
\\ 
**[[:docs:efl:auto:class:edje:edit:property:file|file]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:file|Efl.File]]]//
<code c>
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

\\ 
**[[:docs:efl:auto:class:edje:edit:property:mmap|mmap]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:file|Efl.File]]]//
<code c>
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>

\\ 

===== Others =====

[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:access_part_iterate|access_part_iterate]]**
<code c>
Eina_Iterator *edje_obj_access_part_iterate(Eo *obj);
</code>

%%Iterate over all accessibility-enabled part names.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:calc_force|calc_force]]**
<code c>
void edje_obj_calc_force(Eo *obj);
</code>

%%Force a Size/Geometry calculation.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:color_class_clear|color_class_clear]]**
<code c>
Eina_Bool edje_obj_color_class_clear(const Eo *obj);
</code>

%%Clear object color classes.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:color_class_del|color_class_del]]**
<code c>
void edje_obj_color_class_del(Eo *obj, const char *color_class);
</code>

%%Delete the object color class.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:content_remove|content_remove]]** //[from [[:docs:efl:auto:interface:efl:container|Efl.Container]]]//
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:dbg_info_get|dbg_info_get]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:freeze|freeze]]**
<code c>
int edje_obj_freeze(Eo *obj);
</code>

%%Freezes the Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:group_add|group_add]]** //[from [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
void efl_canvas_group_add(Eo *obj);
</code>

%%Internal constructor function.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:group_calculate|group_calculate]]** //[from [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
void efl_canvas_group_calculate(Eo *obj);
</code>

%%Triggers an immediate recalculation of this object's geometry.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:message_send|message_send]]**
<code c>
void edje_obj_message_send(Eo *obj, Edje_Message_Type type, int id, void *msg);
</code>

%%Send an (Edje) message to a given Edje object%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:message_signal_process|message_signal_process]]**
<code c>
void edje_obj_message_signal_process(Eo *obj);
</code>

%%Process an object's message queue.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_drag_page|part_drag_page]]**
<code c>
Eina_Bool edje_obj_part_drag_page(Eo *obj, const char *part, double dx, double dy);
</code>

%%Pages x,y steps.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_drag_step|part_drag_step]]**
<code c>
Eina_Bool edje_obj_part_drag_step(Eo *obj, const char *part, double dx, double dy);
</code>

%%Steps the dragable x,y steps.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_exists|part_exists]]**
<code c>
Eina_Bool edje_obj_part_exists(const Eo *obj, const char *part);
</code>

%%Check if an Edje part exists in a given Edje object's group definition.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_append|part_text_append]]**
<code c>
void edje_obj_part_text_append(Eo *obj, const char *part, const char *text);
</code>

%%Insert text for an object part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_cursor_copy|part_text_cursor_copy]]**
<code c>
void edje_obj_part_text_cursor_copy(Eo *obj, const char *part, Edje_Cursor src, Edje_Cursor dst);
</code>

%%Copy the cursor to another cursor.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_cursor_down|part_text_cursor_down]]**
<code c>
Eina_Bool edje_obj_part_text_cursor_down(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Moves the cursor to the char below the current cursor position.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_cursor_next|part_text_cursor_next]]**
<code c>
Eina_Bool edje_obj_part_text_cursor_next(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Advances the cursor to the next cursor position. @ref evas_textblock_cursor_char_next%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_cursor_prev|part_text_cursor_prev]]**
<code c>
Eina_Bool edje_obj_part_text_cursor_prev(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Moves the cursor to the previous char @ref evas_textblock_cursor_char_prev%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_cursor_up|part_text_cursor_up]]**
<code c>
Eina_Bool edje_obj_part_text_cursor_up(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Move the cursor to the char above the current cursor position.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_hide_visible_password|part_text_hide_visible_password]]**
<code c>
Eina_Bool edje_obj_part_text_hide_visible_password(Eo *obj, const char *part);
</code>

%%Hide visible last character for password mode.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_imf_context_reset|part_text_imf_context_reset]]**
<code c>
void edje_obj_part_text_imf_context_reset(const Eo *obj, const char *part);
</code>

%%Reset the input method context if needed.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_input_panel_hide|part_text_input_panel_hide]]**
<code c>
void edje_obj_part_text_input_panel_hide(const Eo *obj, const char *part);
</code>

%%Hide the input panel (virtual keyboard). See also %%[[:docs:efl:auto:class:edje:object:method:part_text_input_panel_show|Edje.Object.part_text_input_panel_show]]%%%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_input_panel_show|part_text_input_panel_show]]**
<code c>
void edje_obj_part_text_input_panel_show(const Eo *obj, const char *part);
</code>

%%Show the input panel (virtual keyboard) based on the input panel property such as layout, autocapital types, and so on.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_insert|part_text_insert]]**
<code c>
void edje_obj_part_text_insert(Eo *obj, const char *part, const char *text);
</code>

%%Insert text for an object part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_select_abort|part_text_select_abort]]**
<code c>
void edje_obj_part_text_select_abort(const Eo *obj, const char *part);
</code>

%%Aborts any selection action on a part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_select_all|part_text_select_all]]**
<code c>
void edje_obj_part_text_select_all(const Eo *obj, const char *part);
</code>

%%Set the selection to be everything.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_select_begin|part_text_select_begin]]**
<code c>
void edje_obj_part_text_select_begin(const Eo *obj, const char *part);
</code>

%%Starts selecting at current cursor position%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_select_extend|part_text_select_extend]]**
<code c>
void edje_obj_part_text_select_extend(const Eo *obj, const char *part);
</code>

%%Extends the current selection to the current cursor position%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_select_none|part_text_select_none]]**
<code c>
void edje_obj_part_text_select_none(const Eo *obj, const char *part);
</code>

%%Set the selection to be none.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_style_user_peek|part_text_style_user_peek]]**
<code c>
const char *edje_obj_part_text_style_user_peek(const Eo *obj, const char *part);
</code>

%%Return the text of the object part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_style_user_pop|part_text_style_user_pop]]**
<code c>
void edje_obj_part_text_style_user_pop(Eo *obj, const char *part);
</code>

%%Delete the top style form the user style stack.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_style_user_push|part_text_style_user_push]]**
<code c>
void edje_obj_part_text_style_user_push(Eo *obj, const char *part, const char *style);
</code>

%%Set the style of the%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part_text_user_insert|part_text_user_insert]]**
<code c>
void edje_obj_part_text_user_insert(const Eo *obj, const char *part, const char *text);
</code>

%%This function inserts text as if the user has inserted it.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:parts_extends_calc|parts_extends_calc]]**
<code c>
Eina_Bool edje_obj_parts_extends_calc(Eo *obj, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%Calculate the geometry of the region, relative to a given Edje object's area, occupied by all parts in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:part|part]]** //[from [[:docs:efl:auto:interface:efl:part|Efl.Part]]]//
<code c>
Efl_Object *efl_part(const Eo *obj, const char *name);
</code>

%%Get a proxy object referring to a part of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:preload|preload]]**
<code c>
Eina_Bool edje_obj_preload(Eo *obj, Eina_Bool cancel);
</code>

%%Preload the images on the Edje Object in the background.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:signal_callback_add|signal_callback_add]]**
<code c>
void edje_obj_signal_callback_add(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func, void *data);
</code>

%%Add a callback for an arriving Edje signal, emitted by a given Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:signal_callback_del|signal_callback_del]]**
<code c>
void *edje_obj_signal_callback_del(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func, void *data);
</code>

%%Remove a signal-triggered callback from an object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:signal_emit|signal_emit]]**
<code c>
void edje_obj_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Send/emit an Edje signal to a given Edje object%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:size_class_del|size_class_del]]**
<code c>
void edje_obj_size_class_del(Eo *obj, const char *size_class);
</code>

%%Delete the object size class.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:size_min_calc|size_min_calc]]**
<code c>
void edje_obj_size_min_calc(Eo *obj, Evas_Coord *minw, Evas_Coord *minh);
</code>

%%Calculate the minimum required size for a given Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:size_min_restricted_calc|size_min_restricted_calc]]**
<code c>
void edje_obj_size_min_restricted_calc(Eo *obj, Evas_Coord *minw, Evas_Coord *minh, Evas_Coord restrictedw, Evas_Coord restrictedh);
</code>

%%Calculate the minimum required size for a given Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_class_del|text_class_del]]**
<code c>
void edje_obj_text_class_del(Eo *obj, const char *text_class);
</code>

%%Delete the object text class.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_insert_filter_callback_add|text_insert_filter_callback_add]]**
<code c>
void edje_obj_text_insert_filter_callback_add(Eo *obj, const char *part, Edje_Text_Filter_Cb func, void *data);
</code>

%%Add a filter function for newly inserted text.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_insert_filter_callback_del_full|text_insert_filter_callback_del_full]]**
<code c>
void *edje_obj_text_insert_filter_callback_del_full(Eo *obj, const char *part, Edje_Text_Filter_Cb func, void *data);
</code>

%%Delete a function and matching user data from the filter list.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_insert_filter_callback_del|text_insert_filter_callback_del]]**
<code c>
void *edje_obj_text_insert_filter_callback_del(Eo *obj, const char *part, Edje_Text_Filter_Cb func);
</code>

%%Delete a function from the filter list.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_markup_filter_callback_add|text_markup_filter_callback_add]]**
<code c>
void edje_obj_text_markup_filter_callback_add(Eo *obj, const char *part, Edje_Markup_Filter_Cb func, void *data);
</code>

%%Add a markup filter function for newly inserted text.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_markup_filter_callback_del_full|text_markup_filter_callback_del_full]]**
<code c>
void *edje_obj_text_markup_filter_callback_del_full(Eo *obj, const char *part, Edje_Markup_Filter_Cb func, void *data);
</code>

%%Delete a function and matching user data from the markup filter list.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:text_markup_filter_callback_del|text_markup_filter_callback_del]]**
<code c>
void *edje_obj_text_markup_filter_callback_del(Eo *obj, const char *part, Edje_Markup_Filter_Cb func);
</code>

%%Delete a function from the markup filter list.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:thaw|thaw]]**
<code c>
int edje_obj_thaw(Eo *obj);
</code>

%%Thaws the Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:method:update|update]]** //[from [[:docs:efl:auto:interface:efl:observer|Efl.Observer]]]//
<code c>
void efl_observer_update(Eo *obj, Efl_Object *obs, const char *key, void *data);
</code>

%%Update observer according to the changes of observable object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:animation|animation]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_animation_get(const Eo *obj);
void edje_obj_animation_set(Eo *obj, Eina_Bool on);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:base_scale|base_scale]]** //**(get)**//
<code c>
double edje_obj_base_scale_get(const Eo *obj);
</code>

%%Get a given Edje object's base_scale factor.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:color_class_description|color_class_description]]** //**(get)**//
<code c>
const char *edje_obj_color_class_description_get(const Eo *obj, const char *color_class);
</code>

%%Gets the description of an object color class.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:color_class|color_class]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_color_class_get(const Eo *obj, const char *color_class, Edje_Color_Class_Mode mode, int *r, int *g, int *b, int *a);
Eina_Bool edje_obj_color_class_set(Eo *obj, const char *color_class, Edje_Color_Class_Mode mode, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:content_part_name|content_part_name]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:container|Efl.Container]]]//
<code c>
const char *efl_content_part_name_get(const Eo *obj, Efl_Gfx *content);
</code>

%%The name of the part under which an object is swallowed.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:data|data]]** //**(get)**//
<code c>
const char *edje_obj_data_get(const Eo *obj, const char *key);
</code>

%%Retrive an EDC data field's value from a given Edje object's group.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:global_color_class|global_color_class]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_global_color_class_get(const Eo *obj, const char *color_class, Edje_Color_Class_Mode mode, int *r, int *g, int *b, int *a);
Eina_Bool edje_obj_global_color_class_set(const Eo *obj, const char *color_class, Edje_Color_Class_Mode mode, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:item_provider|item_provider]]** //**(set)**//
<code c>
void edje_obj_item_provider_set(Eo *obj, Edje_Item_Provider_Cb func, void *data);
</code>

%%Set the function that provides item objects for named items in an edje entry text%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:language|language]]** //**(get, set)**//
<code c>
const char *edje_obj_language_get(const Eo *obj);
void edje_obj_language_set(Eo *obj, const char *language);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:load_error|load_error]]** //**(get)**//
<code c>
Edje_Load_Error edje_obj_load_error_get(const Eo *obj);
</code>

%%Gets the (last) file loading error for a given Edje object%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:message_handler|message_handler]]** //**(set)**//
<code c>
void edje_obj_message_handler_set(Eo *obj, Edje_Message_Handler_Cb func, void *data);
</code>

%%Set an Edje message handler function for a given Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:mirrored|mirrored]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_mirrored_get(const Eo *obj);
void edje_obj_mirrored_set(Eo *obj, Eina_Bool rtl);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:no_render|no_render]]** //**(set)**// //[from [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_canvas_object_no_render_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:paragraph_direction|paragraph_direction]]** //**(set)**// //[from [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_canvas_object_paragraph_direction_set(Eo *obj, Efl_Text_Bidirectional_Type dir);
</code>

%%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_drag_dir|part_drag_dir]]** //**(get)**//
<code c>
Edje_Drag_Dir edje_obj_part_drag_dir_get(const Eo *obj, const char *part);
</code>

%%Determine dragable directions.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_drag_page|part_drag_page]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_drag_page_get(const Eo *obj, const char *part, double *dx, double *dy);
Eina_Bool edje_obj_part_drag_page_set(Eo *obj, const char *part, double dx, double dy);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_drag_size|part_drag_size]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_drag_size_get(const Eo *obj, const char *part, double *dw, double *dh);
Eina_Bool edje_obj_part_drag_size_set(Eo *obj, const char *part, double dw, double dh);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_drag_step|part_drag_step]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_drag_step_get(const Eo *obj, const char *part, double *dx, double *dy);
Eina_Bool edje_obj_part_drag_step_set(Eo *obj, const char *part, double dx, double dy);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_drag_value|part_drag_value]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_drag_value_get(const Eo *obj, const char *part, double *dx, double *dy);
Eina_Bool edje_obj_part_drag_value_set(Eo *obj, const char *part, double dx, double dy);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_external_content|part_external_content]]** //**(get)**//
<code c>
Efl_Canvas_Object *edje_obj_part_external_content_get(const Eo *obj, const char *part, const char *content);
</code>

%%Get an object contained in an part of type EXTERNAL%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_external_object|part_external_object]]** //**(get)**//
<code c>
Efl_Canvas_Object *edje_obj_part_external_object_get(const Eo *obj, const char *part);
</code>

%%Get the object created by this external part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_external_param_type|part_external_param_type]]** //**(get)**//
<code c>
Edje_External_Param_Type edje_obj_part_external_param_type_get(const Eo *obj, const char *part, const char *param);
</code>

%%Facility to query the type of the given parameter of the given part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_external_param|part_external_param]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_external_param_get(const Eo *obj, const char *part, Edje_External_Param *param);
Eina_Bool edje_obj_part_external_param_set(Eo *obj, const char *part, const Edje_External_Param *param);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_geometry|part_geometry]]** //**(get)**//
<code c>
Eina_Bool edje_obj_part_geometry_get(const Eo *obj, const char *part, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%Retrieve the geometry of a given Edje part, in a given Edje object's group definition, relative to the object's area.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_object|part_object]]** //**(get)**//
<code c>
const Efl_Canvas_Object *edje_obj_part_object_get(const Eo *obj, const char *part);
</code>

%%Get a handle to the Evas object implementing a given Edje part, in an Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_state|part_state]]** //**(get)**//
<code c>
const char *edje_obj_part_state_get(const Eo *obj, const char *part, double *val_ret);
</code>

%%Returns the state of the Edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_anchor_geometry|part_text_anchor_geometry]]** //**(get)**//
<code c>
const Eina_List *edje_obj_part_text_anchor_geometry_get(const Eo *obj, const char *part, const char *anchor);
</code>

%%Return a list of Evas_Textblock_Rectangle anchor rectangles.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_anchor_list|part_text_anchor_list]]** //**(get)**//
<code c>
const Eina_List *edje_obj_part_text_anchor_list_get(const Eo *obj, const char *part);
</code>

%%Return a list of char anchor names.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_autocapital_type|part_text_autocapital_type]]** //**(get, set)**//
<code c>
Edje_Text_Autocapital_Type edje_obj_part_text_autocapital_type_get(const Eo *obj, const char *part);
void edje_obj_part_text_autocapital_type_set(Eo *obj, const char *part, Edje_Text_Autocapital_Type autocapital_type);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_begin|part_text_cursor_begin]]** //**(set)**//
<code c>
void edje_obj_part_text_cursor_begin_set(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Moves the cursor to the beginning of the text part @ref evas_textblock_cursor_paragraph_first%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_content|part_text_cursor_content]]** //**(get)**//
<code c>
char *edje_obj_part_text_cursor_content_get(const Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Returns the content (char) at the cursor position. @ref evas_textblock_cursor_content_get%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_coord|part_text_cursor_coord]]** //**(set)**//
<code c>
Eina_Bool edje_obj_part_text_cursor_coord_set(Eo *obj, const char *part, Edje_Cursor cur, Evas_Coord x, Evas_Coord y);
</code>

%%Position the given cursor to a X,Y position.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_end|part_text_cursor_end]]** //**(set)**//
<code c>
void edje_obj_part_text_cursor_end_set(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Moves the cursor to the end of the text part. @ref evas_textblock_cursor_paragraph_last%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_geometry|part_text_cursor_geometry]]** //**(get)**//
<code c>
void edje_obj_part_text_cursor_geometry_get(const Eo *obj, const char *part, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%Returns the cursor geometry of the part relative to the edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_is_format|part_text_cursor_is_format]]** //**(get)**//
<code c>
Eina_Bool edje_obj_part_text_cursor_is_format_get(const Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Returns whether the cursor points to a format. @ref evas_textblock_cursor_is_format%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_is_visible_format|part_text_cursor_is_visible_format]]** //**(get)**//
<code c>
Eina_Bool edje_obj_part_text_cursor_is_visible_format_get(const Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Return %%''true''%% if the cursor points to a visible format For example \t, \n, item and etc. @ref evas_textblock_cursor_format_is_visible_get%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_line_begin|part_text_cursor_line_begin]]** //**(set)**//
<code c>
void edje_obj_part_text_cursor_line_begin_set(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Move the cursor to the beginning of the line. @ref evas_textblock_cursor_line_char_first%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_line_end|part_text_cursor_line_end]]** //**(set)**//
<code c>
void edje_obj_part_text_cursor_line_end_set(Eo *obj, const char *part, Edje_Cursor cur);
</code>

%%Move the cursor to the end of the line. @ref evas_textblock_cursor_line_char_last%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_cursor_pos|part_text_cursor_pos]]** //**(get, set)**//
<code c>
int edje_obj_part_text_cursor_pos_get(const Eo *obj, const char *part, Edje_Cursor cur);
void edje_obj_part_text_cursor_pos_set(Eo *obj, const char *part, Edje_Cursor cur, int pos);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_escaped|part_text_escaped]]** //**(set)**//
<code c>
Eina_Bool edje_obj_part_text_escaped_set(Eo *obj, const char *part, const char *text);
</code>

%%Sets the text for an object part, but converts HTML escapes to UTF8%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_imf_context|part_text_imf_context]]** //**(get)**//
<code c>
void *edje_obj_part_text_imf_context_get(const Eo *obj, const char *part);
</code>

%%Get the input method context in entry.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_hint|part_text_input_hint]]** //**(get, set)**//
<code c>
Edje_Input_Hints edje_obj_part_text_input_hint_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_hint_set(Eo *obj, const char *part, Edje_Input_Hints input_hints);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_enabled|part_text_input_panel_enabled]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_text_input_panel_enabled_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_enabled_set(Eo *obj, const char *part, Eina_Bool enabled);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_imdata|part_text_input_panel_imdata]]** //**(get, set)**//
<code c>
void edje_obj_part_text_input_panel_imdata_get(const Eo *obj, const char *part, void *data, int *len);
void edje_obj_part_text_input_panel_imdata_set(Eo *obj, const char *part, const void *data, int len);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_language|part_text_input_panel_language]]** //**(get, set)**//
<code c>
Edje_Input_Panel_Lang edje_obj_part_text_input_panel_language_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_language_set(Eo *obj, const char *part, Edje_Input_Panel_Lang lang);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_layout_variation|part_text_input_panel_layout_variation]]** //**(get, set)**//
<code c>
int edje_obj_part_text_input_panel_layout_variation_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_layout_variation_set(Eo *obj, const char *part, int variation);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_layout|part_text_input_panel_layout]]** //**(get, set)**//
<code c>
Edje_Input_Panel_Layout edje_obj_part_text_input_panel_layout_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_layout_set(Eo *obj, const char *part, Edje_Input_Panel_Layout layout);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_return_key_disabled|part_text_input_panel_return_key_disabled]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_text_input_panel_return_key_disabled_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_return_key_disabled_set(Eo *obj, const char *part, Eina_Bool disabled);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_return_key_type|part_text_input_panel_return_key_type]]** //**(get, set)**//
<code c>
Edje_Input_Panel_Return_Key_Type edje_obj_part_text_input_panel_return_key_type_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_return_key_type_set(Eo *obj, const char *part, Edje_Input_Panel_Return_Key_Type return_key_type);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_input_panel_show_on_demand|part_text_input_panel_show_on_demand]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_text_input_panel_show_on_demand_get(const Eo *obj, const char *part);
void edje_obj_part_text_input_panel_show_on_demand_set(Eo *obj, const char *part, Eina_Bool ondemand);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_item_geometry|part_text_item_geometry]]** //**(get)**//
<code c>
Eina_Bool edje_obj_part_text_item_geometry_get(const Eo *obj, const char *part, const char *item, Evas_Coord *cx, Evas_Coord *cy, Evas_Coord *cw, Evas_Coord *ch);
</code>

%%Return item geometry.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_item_list|part_text_item_list]]** //**(get)**//
<code c>
const Eina_List *edje_obj_part_text_item_list_get(const Eo *obj, const char *part);
</code>

%%Return a list of char item names.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_prediction_allow|part_text_prediction_allow]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_part_text_prediction_allow_get(const Eo *obj, const char *part);
void edje_obj_part_text_prediction_allow_set(Eo *obj, const char *part, Eina_Bool prediction);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_select_allow|part_text_select_allow]]** //**(set)**//
<code c>
void edje_obj_part_text_select_allow_set(Eo *obj, const char *part, Eina_Bool allow);
</code>

%%Enables selection if the entry is an EXPLICIT selection mode type.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_selection|part_text_selection]]** //**(get)**//
<code c>
const char *edje_obj_part_text_selection_get(const Eo *obj, const char *part);
</code>

%%Return the selection text of the object part.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text_unescaped|part_text_unescaped]]** //**(get, set)**//
<code c>
char *edje_obj_part_text_unescaped_get(const Eo *obj, const char *part);
Eina_Bool edje_obj_part_text_unescaped_set(Eo *obj, const char *part, const char *text_to_escape);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:part_text|part_text]]** //**(get, set)**//
<code c>
const char *edje_obj_part_text_get(const Eo *obj, const char *part);
Eina_Bool edje_obj_part_text_set(Eo *obj, const char *part, const char *text);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:perspective|perspective]]** //**(get, set)**//
<code c>
const Edje_Perspective *edje_obj_perspective_get(const Eo *obj);
void edje_obj_perspective_set(Eo *obj, Edje_Perspective *ps);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:play|play]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_play_get(const Eo *obj);
void edje_obj_play_set(Eo *obj, Eina_Bool play);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:position|position]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]]]//
<code c>
void efl_gfx_position_set(Eo *obj, int x, int y);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:scale|scale]]** //**(get, set)**//
<code c>
double edje_obj_scale_get(const Eo *obj);
Eina_Bool edje_obj_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:seat_name|seat_name]]** //**(get)**//
<code c>
Eina_Stringshare *edje_obj_seat_name_get(const Eo *obj, Efl_Input_Device *device);
</code>

%%Get the name given to a set by Edje.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:seat|seat]]** //**(get)**//
<code c>
Efl_Input_Device *edje_obj_seat_get(const Eo *obj, Eina_Stringshare *name);
</code>

%%Return the seat device given its Edje's name.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:size_class|size_class]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_size_class_get(const Eo *obj, const char *size_class, int *minw, int *minh, int *maxw, int *maxh);
Eina_Bool edje_obj_size_class_set(Eo *obj, const char *size_class, int minw, int minh, int maxw, int maxh);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:size_max|size_max]]** //**(get)**//
<code c>
void edje_obj_size_max_get(const Eo *obj, Evas_Coord *maxw, Evas_Coord *maxh);
</code>

%%Get the maximum size specified -- as an EDC property -- for a given Edje object%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:size_min|size_min]]** //**(get)**//
<code c>
void edje_obj_size_min_get(const Eo *obj, Evas_Coord *minw, Evas_Coord *minh);
</code>

%%Get the minimum size specified -- as an EDC property -- for a given Edje object%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:size|size]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]]]//
<code c>
void efl_gfx_size_set(Eo *obj, int w, int h);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:text_change_cb|text_change_cb]]** //**(set)**//
<code c>
void edje_obj_text_change_cb_set(Eo *obj, Edje_Text_Change_Cb func, void *data);
</code>

%%Set the object text callback.%%\\ 
\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:text_class|text_class]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_text_class_get(const Eo *obj, const char *text_class, const char **font, Evas_Font_Size *size);
Eina_Bool edje_obj_text_class_set(Eo *obj, const char *text_class, const char *font, Evas_Font_Size size);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:transition_duration_factor|transition_duration_factor]]** //**(get, set)**//
<code c>
double edje_obj_transition_duration_factor_get(const Eo *obj);
void edje_obj_transition_duration_factor_set(Eo *obj, double scale);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:update_hints|update_hints]]** //**(get, set)**//
<code c>
Eina_Bool edje_obj_update_hints_get(const Eo *obj);
void edje_obj_update_hints_set(Eo *obj, Eina_Bool update);
</code>

\\ 
[[:docs:efl:auto:class:edje:object|Edje.Object]].**[[:docs:efl:auto:class:edje:object:property:visible|visible]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]]]//
<code c>
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:group:clipped|Efl.Canvas.Group.Clipped]].**[[:docs:efl:auto:class:efl:canvas:group:clipped:method:group_member_add|group_member_add]]** //[from [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
void efl_canvas_group_member_add(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Set an Evas object as a member of a given smart object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group:clipped|Efl.Canvas.Group.Clipped]].**[[:docs:efl:auto:class:efl:canvas:group:clipped:method:group_member_del|group_member_del]]** //[from [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
void efl_canvas_group_member_del(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Removes a member object from a given smart object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group:clipped|Efl.Canvas.Group.Clipped]].**[[:docs:efl:auto:class:efl:canvas:group:clipped:property:clip|clip]]** //**(set)**// //[from [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_canvas_object_clip_set(Eo *obj, Efl_Canvas_Object *clip);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:group:clipped|Efl.Canvas.Group.Clipped]].**[[:docs:efl:auto:class:efl:canvas:group:clipped:property:color|color]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]]]//
<code c>
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:method:group_change|group_change]]**
<code c>
void efl_canvas_group_change(Eo *obj);
</code>

%%Marks the object as dirty.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:method:group_children_iterate|group_children_iterate]]**
<code c>
Eina_Iterator *efl_canvas_group_children_iterate(const Eo *obj);
</code>

%%Returns an iterator over the children of this object, that are canvas objects.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_group_need_recalculate_get(const Eo *obj);
void efl_canvas_group_need_recalculate_set(Eo *obj, Eina_Bool value);
</code>

%%Indicates that the group's layout need to be recalculated.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:clipees_has|clipees_has]]**
<code c>
Eina_Bool efl_canvas_object_clipees_has(const Eo *obj);
</code>

%%Test if any object is clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:event_callback_call|event_callback_call]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:event_callback_legacy_call|event_callback_legacy_call]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_grab|key_grab]]**
<code c>
Eina_Bool efl_canvas_object_key_grab(Eo *obj, const char *keyname, Evas_Modifier_Mask modifiers, Evas_Modifier_Mask not_modifiers, Eina_Bool exclusive);
</code>

%%Requests %%''keyname''%% key events be directed to %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_ungrab|key_ungrab]]**
<code c>
void efl_canvas_object_key_ungrab(Eo *obj, const char *keyname, Evas_Modifier_Mask modifiers, Evas_Modifier_Mask not_modifiers);
</code>

%%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:legacy_ctor|legacy_ctor]]**
<code c>
void efl_canvas_object_legacy_ctor(Eo *obj);
</code>

%%Internal function. Do not use.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:lower|lower]]** //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:provider_find|provider_find]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:raise|raise]]** //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_add|seat_focus_add]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_add(Eo *obj, Efl_Input_Device *seat);
</code>

%%Add a seat to the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_check|seat_focus_check]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_check(Eo *obj, Efl_Input_Device *seat);
</code>

%%Check if this object is focused by a given seat%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_del|seat_focus_del]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_del(Eo *obj, Efl_Input_Device *seat);
</code>

%%Remove a seat from the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_above|stack_above]]** //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_below|stack_below]]** //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:above|above]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_anti_alias_get(const Eo *obj);
void efl_canvas_object_anti_alias_set(Eo *obj, Eina_Bool anti_alias);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:below|below]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:clipees|clipees]]** //**(get)**//
<code c>
Eina_Iterator *efl_canvas_object_clipees_get(const Eo *obj);
</code>

%%Return a list of objects currently clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:color_part|color_part]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]]]//
<code c>
Eina_Bool efl_gfx_color_part_get(const Eo *obj, const char *part, int *r, int *g, int *b, int *a);
Eina_Bool efl_gfx_color_part_set(Eo *obj, const char *part, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]]]//
<code c>
void efl_gfx_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_geometry_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, int *w, int *h);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, int w, int h);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_combined_min_get(const Eo *obj, int *w, int *h);
</code>

%%Read-only minimum size combining both %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_display_mode|hint_display_mode]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
Efl_Gfx_Size_Hint_Mode efl_gfx_size_hint_display_mode_get(const Eo *obj);
void efl_gfx_size_hint_display_mode_set(Eo *obj, Efl_Gfx_Size_Hint_Mode dispmode);
</code>

%%A hint for an object's display mode.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_max_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_max_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_min_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_request|hint_request]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_request_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_request_set(Eo *obj, int w, int h);
</code>

%%Hints for the object's optimum size.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_restricted_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, int w, int h);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]]]//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:is_frame_object|is_frame_object]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_is_frame_object_get(const Eo *obj);
void efl_canvas_object_is_frame_object_set(Eo *obj, Eina_Bool is_frame);
</code>

%%If %%''true''%% the object belongs to the window border decorations.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_key_focus_get(const Eo *obj);
void efl_canvas_object_key_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Indicates that this object is the keyboard event receiver on its canvas.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:layer|layer]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]]]//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:loop|loop]]** //**(get)**// //[from [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]]]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:map_enable|map_enable]]** //**(get, set)**// //[from [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]]]//
<code c>
Eina_Bool efl_gfx_map_enable_get(const Eo *obj);
void efl_gfx_map_enable_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether map transformation is enabled on this object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_pass_events_get(const Eo *obj);
void efl_canvas_object_pass_events_set(Eo *obj, Eina_Bool pass);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_device_in|pointer_device_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_device_in_get(const Eo *obj, Efl_Input_Device *pointer);
</code>

%%Read-only value indicating whether a pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_in|pointer_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_in_get(const Eo *obj);
</code>

%%Read-only value indicating whether the main pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_by_device_get(const Eo *obj, Efl_Input_Device *dev);
void efl_canvas_object_pointer_mode_by_device_set(Eo *obj, Efl_Input_Device *dev, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour by device. See %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_get(const Eo *obj);
void efl_canvas_object_pointer_mode_set(Eo *obj, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_propagate_events_get(const Eo *obj);
void efl_canvas_object_propagate_events_set(Eo *obj, Eina_Bool propagate);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**//
<code c>
Efl_Gfx_Render_Op efl_canvas_object_render_op_get(const Eo *obj);
void efl_canvas_object_render_op_set(Eo *obj, Efl_Gfx_Render_Op render_op);
</code>

%%Render mode to be used for compositing the Evas object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**//
<code c>
Efl_Canvas_Object *efl_canvas_object_render_parent_get(const Eo *obj);
</code>

%%Gets the parent smart object of a given Evas object, if it has one.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_repeat_events_get(const Eo *obj);
void efl_canvas_object_repeat_events_set(Eo *obj, Eina_Bool repeat);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:scale|scale]]** //**(get, set)**//
<code c>
double efl_canvas_object_scale_get(const Eo *obj);
void efl_canvas_object_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]]]//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_seat_focus_get(const Eo *obj);
</code>

%%Check if this object is focused.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:type|type]]** //**(set)**//
<code c>
void efl_canvas_object_type_set(Eo *obj, const char *type);
</code>

%%Sets the legacy type name of this Evas object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_count|content_count]]**
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_iterate|content_iterate]]**
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_unset|content_unset]]**
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:property:content|content]]** //**(get, set)**//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:interface:efl:file:method:save|save]]**
<code c>
Eina_Bool efl_file_save(const Eo *obj, const char *file, const char *key, const char *flags);
</code>

%%Save the given image object's contents to an (image) file.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_base_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_base_set(Eo *obj, int w, int h);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_step_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_step_set(Eo *obj, int w, int h);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:method:pointer_iterate|pointer_iterate]]**
<code c>
Eina_Iterator *efl_input_pointer_iterate(const Eo *obj, Eina_Bool hover);
</code>

%%Returns an iterator over the current known pointer positions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_input_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the mouse pointer is logically inside the canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_xy|pointer_xy]]** //**(get)**//
<code c>
void efl_input_pointer_xy_get(const Eo *obj, int *x, int *y);
</code>

%%This function returns the current known pointer coordinates%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_dup|map_dup]]**
<code c>
Eina_Bool efl_gfx_map_dup(Eo *obj, const Efl_Gfx_Map *other);
</code>

%%Duplicate the map information from another object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_lightning_3d|map_lightning_3d]]**
<code c>
Eina_Bool efl_gfx_map_lightning_3d(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Perform lighting calculations on the given Map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_perspective_3d|map_perspective_3d]]**
<code c>
Eina_Bool efl_gfx_map_perspective_3d(Eo *obj, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_populate_manual|map_populate_manual]]**
<code c>
Eina_Bool efl_gfx_map_populate_manual(Eo *obj, double x, double y, double w, double h, double z);
</code>

%%Populate source and destination map points to match given geometry.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_populate|map_populate]]**
<code c>
Eina_Bool efl_gfx_map_populate(Eo *obj, double z);
</code>

%%Populate source and destination map points to match this object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_quat_rotate|map_quat_rotate]]**
<code c>
Eina_Bool efl_gfx_map_quat_rotate(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

%%Rotate the map in 3D using a unit quaternion.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_rotate_3d|map_rotate_3d]]**
<code c>
Eina_Bool efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>

%%Rotate the map around 3 axes in 3D%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_rotate|map_rotate]]**
<code c>
Eina_Bool efl_gfx_map_rotate(Eo *obj, double degrees, double cx, double cy);
</code>

%%Change the map to apply the given rotation.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_zoom|map_zoom]]**
<code c>
Eina_Bool efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>

%%Change the map to apply the given zooming.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Alpha flag for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>

%%Clockwise state of a map (read-only).%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

%%Color of a vertex in the map.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_move_sync|map_move_sync]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_move_sync_get(const Eo *obj);
void efl_gfx_map_move_sync_set(Eo *obj, Eina_Bool enable);
</code>

%%Status of object move synchronization for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_coord|map_point_coord]]** //**(get, set)**//
<code c>
void efl_gfx_map_point_coord_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_point_coord_set(Eo *obj, int idx, double x, double y, double z);
</code>

%%Map point's coordinate.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_image_uv|map_point_image_uv]]** //**(get, set)**//
<code c>
void efl_gfx_map_point_image_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_point_image_uv_set(Eo *obj, int idx, double u, double v);
</code>

%%Map point's U and V texture source point.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_z|map_point_z]]** //**(get)**//
<code c>
double efl_gfx_map_point_z_get(const Eo *obj, int idx);
</code>

%%Value of Z coordinate of point %%''idx''%%.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>

%%Smoothing state for map rendering.%%\\ 
\\ 

===== Inherited Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:edje:object:event:recalc|Edje.Object.recalc]] | %%Edje re-calculated the object.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:interface:efl:animator:event:animator_tick|Efl.Animator.animator,tick]] | %%Animator tick synchronized with screen vsync if possible.%% |
| [[:docs:efl:auto:interface:efl:container:event:content_added|Efl.Container.content,added]] | %%Sent after a new item was added.%% |
| [[:docs:efl:auto:interface:efl:container:event:content_removed|Efl.Container.content,removed]] | %%Sent after an item was removed, before unref.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:hide|Efl.Gfx.hide]] | %%Object just became invisible.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:hide|Efl.Gfx.hide]] | %%Object just became invisible.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:move|Efl.Gfx.move]] | %%Object was moved, its position during the event is the new one.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:move|Efl.Gfx.move]] | %%Object was moved, its position during the event is the new one.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:resize|Efl.Gfx.resize]] | %%Object was resized, its size during the event is the new one.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:resize|Efl.Gfx.resize]] | %%Object was resized, its size during the event is the new one.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:show|Efl.Gfx.show]] | %%Object just became visible.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:show|Efl.Gfx.show]] | %%Object just became visible.%% |
| [[:docs:efl:auto:interface:efl:gfx:size:hint:event:change_size_hints|Efl.Gfx.Size.Hint.change,size,hints]] | %%Object size hints changed.%% |
| [[:docs:efl:auto:interface:efl:gfx:stack:event:restack|Efl.Gfx.Stack.restack]] | %%Object stacking was changed.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:finger_down|Efl.Input.Interface.finger,down]] | %%Finger pressed (finger id is known).%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:finger_move|Efl.Input.Interface.finger,move]] | %%Finger moved (current and previous positions are known).%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:finger_up|Efl.Input.Interface.finger,up]] | %%Finger released (finger id is known).%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:focus_in|Efl.Input.Interface.focus,in]] | %%A focus in event.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:focus_out|Efl.Input.Interface.focus,out]] | %%A focus out event.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:hold|Efl.Input.Interface.hold]] | %%All input events are on hold or resumed.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:key_down|Efl.Input.Interface.key,down]] | %%Keyboard key press.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:key_up|Efl.Input.Interface.key,up]] | %%Keyboard key release.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_axis|Efl.Input.Interface.pointer,axis]] | %%Pen or other axis event update.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_cancel|Efl.Input.Interface.pointer,cancel]] | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_down|Efl.Input.Interface.pointer,down]] | %%Main pointer button pressed (button id is known).%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_in|Efl.Input.Interface.pointer,in]] | %%Pointer entered a window or a widget.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_move|Efl.Input.Interface.pointer,move]] | %%Main pointer move (current and previous positions are known).%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_out|Efl.Input.Interface.pointer,out]] | %%Pointer left a window or a widget.%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_up|Efl.Input.Interface.pointer,up]] | %%Main pointer button released (button id is known).%% |
| [[:docs:efl:auto:interface:efl:input:interface:event:pointer_wheel|Efl.Input.Interface.pointer,wheel]] | %%Mouse wheel event.%% |
