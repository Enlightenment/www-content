<title>Efl.Io.Buffered_Stream.line_delimiter</title>
===== Signature =====

<code>
@property Efl.Io.Buffered_Stream.line_delimiter {
    get {
        values {
            slice: ptr(const(Eina.Slice));
        }
    }
    set {
        values {
            slice: ptr(const(Eina.Slice));
        }
    }
}
</code>

===== C signature =====

<code c>
const Eina_Slice *efl_io_buffered_stream_line_delimiter_get(const Eo *obj);
void efl_io_buffered_stream_line_delimiter_set(Eo *obj, const Eina_Slice *slice);
</code>

===== Values =====

  * **slice** - %%The contents may contain \0 and will be copied%%
===== Description =====

%%If set, incoming data will be checked for the delimiter and "line" events are The line may include the delimiter, unless it's end-of-stream on %%[[:docs:efl:auto:class:efl:io:buffered_stream:property:max_queue_size_input|Efl.Io.Buffered_Stream.max_queue_size_input]]%% was reached.%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:io:buffered_stream:property:line_delimiter:description&nodate&nolink&nouser}}

==== Setter ====

%%Change line delimiter to use. If NULL or empty, no delimiter is to be used%%

//Since 1.19//{{page>:docs:efl:user:class:efl:io:buffered_stream:property:line_delimiter:getter_description&nodate&nolink&nouser}}


