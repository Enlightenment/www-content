<title>Efl.Net.Dialer.Http</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_dialer_http [fillcolor = "black", label = "Efl.Net.Dialer.Http", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_dialer [fillcolor = "gray15", label = "Efl.Net.Dialer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_io_sizer [fillcolor = "gray15", label = "Efl.Io.Sizer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_net_dialer_http -> efl_loop_user
    efl_loop_user -> efl_object
    efl_net_dialer_http -> efl_net_dialer
    efl_net_dialer -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
    efl_net_dialer_http -> efl_io_sizer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:net:dialer:http|Efl.Net.Dialer.Http]] //(class)//**
    * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]] //(interface)//
      * [[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]] //(interface)//
        * [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//
        * [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//
        * [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]] //(mixin)//
    * [[:docs:efl:auto:mixin:efl:io:sizer|Efl.Io.Sizer]] //(mixin)//

===== Description =====

%%HTTP Dialer (Client).%%

%%The effective URL in use, if %%[[:docs:efl:auto:class:efl:net:dialer:http:property:allow_redirects|Efl.Net.Dialer.Http.allow_redirects]]%% is %%''true''%% will be available as %%[[:docs:efl:auto:interface:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%. The %%[[:docs:efl:auto:interface:efl:net:socket:property:address_local|Efl.Net.Socket.address_local]]%% is an IP:PORT pair.%%

%%The dialer can do bi-directional information exchange. It can also do a PUT and upload a file, or GET and download one. Anoter case is to do a POST with some form values, including a file, and retrieve its headers and response body. To make usage more streamlined, choose your primary interest with %%[[:docs:efl:auto:class:efl:net:dialer:http:property:primary_mode|Efl.Net.Dialer.Http.primary_mode]]%% then get some properties such as %%[[:docs:efl:auto:mixin:efl:io:sizer:property:size|Efl.Io.Sizer.size]]%% to report or use what matters to your use case.%%

%%If %%[[:docs:efl:auto:class:efl:net:dialer:http:property:allow_redirects|Efl.Net.Dialer.Http.allow_redirects]]%% is %%''true''%%, multiple "connected" and "resolved" signals will be dispatched, one for each connection. Then %%[[:docs:efl:auto:class:efl:net:dialer:http:property:response_status|Efl.Net.Dialer.Http.response_status]]%% and %%[[:docs:efl:auto:class:efl:net:dialer:http:method:response_headers_get|Efl.Net.Dialer.Http.response_headers_get]]%% will keep changing. Using %%[[:docs:efl:auto:class:efl:net:dialer:http:method:response_headers_all_get|Efl.Net.Dialer.Http.response_headers_all_get]]%% one can see the whole history of headers and connections.%%

%%To enable debugging use EINA_LOG_LEVELS=ecore_con:4 environment variable.%%

%%If the proxy is NULL (default), then the system proxy will be used. On UNIX that's the environment variable %%''http_proxy''%% (or '%%''all_proxy''%%') is used if the given address doesn't match %%''no_proxy''%% patterns. To disable proxy use an empty string. If provided proxy must be one of the protocols:%%

%%- http://username:password@proxyserver:port - http://username@proxyserver:port - http://proxyserver:port - http://proxyserver  (default port 1080) - socks5://username:password@proxyserver:port (SOCKSv5) - socks5h://username@proxyserver:port (let socks server to resolve domain) - socks5://proxyserver:port - socks5://proxyserver (default port 1080) - socks4a://proxyserver:port (SOCKSv4 and let socks server to resolve domain) - socks4://proxyserver:port (SOCKSv4)%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:net:dialer:http:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:efl:net:dialer:http:method:date_parse|date_parse]]**
<code c>
int64_t efl_net_dialer_http_date_parse(const Eo *obj, const char *str);
</code>

%%Parse the given string as time in seconds since 1/1/1970.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:date_serialize|date_serialize]]**
<code c>
char *efl_net_dialer_http_date_serialize(const Eo *obj, int64_t epochtime);
</code>

%%Serialize the given GMT time in seconds since 1/1/1970.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:request_header_add|request_header_add]]**
<code c>
void efl_net_dialer_http_request_header_add(Eo *obj, const char *key, const char *value);
</code>

%%Add a request header 'key: value'.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:request_headers_clear|request_headers_clear]]**
<code c>
void efl_net_dialer_http_request_headers_clear(Eo *obj);
</code>

%%Clear all request headers.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:request_headers_get|request_headers_get]]**
<code c>
Eina_Iterator *efl_net_dialer_http_request_headers_get(Eo *obj);
</code>

%%Return an iterator to the key-value pairs for request headers%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:response_headers_all_get|response_headers_all_get]]**
<code c>
Eina_Iterator *efl_net_dialer_http_response_headers_all_get(Eo *obj);
</code>

%%Return an iterator to the key-value pairs for all response headers.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:response_headers_clear|response_headers_clear]]**
<code c>
void efl_net_dialer_http_response_headers_clear(Eo *obj);
</code>

%%Save some memory by disposing the received headers%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:response_headers_get|response_headers_get]]**
<code c>
Eina_Iterator *efl_net_dialer_http_response_headers_get(Eo *obj);
</code>

%%Return an iterator to the key-value pairs for the last response headers.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:allow_redirects|allow_redirects]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_dialer_http_allow_redirects_get(const Eo *obj);
void efl_net_dialer_http_allow_redirects_set(Eo *obj, Eina_Bool allow_redirects);
</code>

%%Allow HTTP redirects to be followed.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:authentication|authentication]]** //**(get, set)**//
<code c>
void efl_net_dialer_http_authentication_get(const Eo *obj, const char **username, const char **password, Efl_Net_Http_Authentication_Method *method, Eina_Bool *restricted);
void efl_net_dialer_http_authentication_set(Eo *obj, const char *username, const char *password, Efl_Net_Http_Authentication_Method method, Eina_Bool restricted);
</code>

%%HTTP authentication to use.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:cookie_jar|cookie_jar]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_http_cookie_jar_get(const Eo *obj);
void efl_net_dialer_http_cookie_jar_set(Eo *obj, const char *path);
</code>

%%This property sets the filename where to read and write cookies.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:http_version|http_version]]** //**(get, set)**//
<code c>
Efl_Net_Http_Version efl_net_dialer_http_version_get(const Eo *obj);
void efl_net_dialer_http_version_set(Eo *obj, Efl_Net_Http_Version http_version);
</code>

%%The HTTP version to use.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:method|method]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_http_method_get(const Eo *obj);
void efl_net_dialer_http_method_set(Eo *obj, const char *method);
</code>

%%The HTTP method to use.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:primary_mode|primary_mode]]** //**(get, set)**//
<code c>
Efl_Net_Dialer_Http_Primary_Mode efl_net_dialer_http_primary_mode_get(const Eo *obj);
void efl_net_dialer_http_primary_mode_set(Eo *obj, Efl_Net_Dialer_Http_Primary_Mode primary_mode);
</code>

%%Is this request primarily a download or upload?%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:progress_download|progress_download]]** //**(get)**//
<code c>
void efl_net_dialer_http_progress_download_get(const Eo *obj, uint64_t *downloaded, uint64_t *total);
</code>

%%How many bytes were downloaded and how much was expected.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:progress_upload|progress_upload]]** //**(get)**//
<code c>
void efl_net_dialer_http_progress_upload_get(const Eo *obj, uint64_t *uploaded, uint64_t *total);
</code>

%%How many bytes were uploaded and how much was expected.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:request_content_length|request_content_length]]** //**(get, set)**//
<code c>
int64_t efl_net_dialer_http_request_content_length_get(const Eo *obj);
void efl_net_dialer_http_request_content_length_set(Eo *obj, int64_t length);
</code>

%%"Content-Length:" Header used for uploading/sending.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:response_content_length|response_content_length]]** //**(get, set)**//
<code c>
int64_t efl_net_dialer_http_response_content_length_get(const Eo *obj);
void efl_net_dialer_http_response_content_length_set(Eo *obj, int64_t length);
</code>

%%"Content-Length:" Header used for downloading/receiving.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:response_content_type|response_content_type]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_http_response_content_type_get(const Eo *obj);
void efl_net_dialer_http_response_content_type_set(Eo *obj, const char *content_type);
</code>

%%"Content-Type:" Header used for downloading/receiving%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:response_status|response_status]]** //**(get)**//
<code c>
Efl_Net_Http_Status efl_net_dialer_http_response_status_get(const Eo *obj);
</code>

%%The HTTP response status of this request.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:ssl_certificate_authority|ssl_certificate_authority]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_http_ssl_certificate_authority_get(const Eo *obj);
void efl_net_dialer_http_ssl_certificate_authority_set(Eo *obj, const char *path);
</code>

%%Overrides the CA (Certificate Authority) path or directory.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:ssl_certificate_revocation_list|ssl_certificate_revocation_list]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_http_ssl_certificate_revocation_list_get(const Eo *obj);
void efl_net_dialer_http_ssl_certificate_revocation_list_set(Eo *obj, const char *file);
</code>

%%Defines a CRL (Certificate Revocation List) path to use.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:ssl_verify|ssl_verify]]** //**(get, set)**//
<code c>
void efl_net_dialer_http_ssl_verify_get(const Eo *obj, Eina_Bool *peer, Eina_Bool *hostname);
void efl_net_dialer_http_ssl_verify_set(Eo *obj, Eina_Bool peer, Eina_Bool hostname);
</code>

%%If remote peer's SSL certificate should be verified.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:user_agent|user_agent]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_http_user_agent_get(const Eo *obj);
void efl_net_dialer_http_user_agent_set(Eo *obj, const char *ser_agent);
</code>

%%The User-Agent to specify.%%\\ 
\\ 

===== Overrides =====

**[[:docs:efl:auto:class:efl:net:dialer:http:method:close|close]]** //[from [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]]]//
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>

%%Closes the Input/Output object.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:constructor|constructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:destructor|destructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:dial|dial]]** //[from [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]]]//
<code c>
Eina_Error efl_net_dialer_dial(Eo *obj, const char *address);
</code>

%%Dials to the remote peer.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:read|read]]** //[from [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]]]//
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>

%%Reads data into a pre-allocated buffer.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:resize|resize]]** //[from [[:docs:efl:auto:mixin:efl:io:sizer|Efl.Io.Sizer]]]//
<code c>
Eina_Error efl_io_sizer_resize(Eo *obj, uint64_t size);
</code>

%%Resize object%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:method:write|write]]** //[from [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]]]//
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>

%%Writes data from a pre-populated buffer.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:address_dial|address_dial]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]]]//
<code c>
const char *efl_net_dialer_address_dial_get(const Eo *obj);
void efl_net_dialer_address_dial_set(Eo *obj, const char *address);
</code>

%%Return the address given to %%[[:docs:efl:auto:interface:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:address_local|address_local]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]]]//
<code c>
const char *efl_net_socket_address_local_get(const Eo *obj);
void efl_net_socket_address_local_set(Eo *obj, const char *address);
</code>

%%The local address, similar to getsockname().%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:address_remote|address_remote]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]]]//
<code c>
const char *efl_net_socket_address_remote_get(const Eo *obj);
void efl_net_socket_address_remote_set(Eo *obj, const char *address);
</code>

%%The remote address, similar to getpeername().%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:can_read|can_read]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]]]//
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>

%%If %%''true''%% will notify %%[[:docs:efl:auto:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:can_write|can_write]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]]]//
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>

%%If %%''true''%% will notify %%[[:docs:efl:auto:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:close_on_destructor|close_on_destructor]]** //**(get, set)**// //[from [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]]]//
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>

%%If true will automatically close() on object destructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:close_on_exec|close_on_exec]]** //**(get, set)**// //[from [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]]]//
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>

%%If true will automatically close resources on exec() calls.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:closed|closed]]** //**(get)**// //[from [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]]]//
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
</code>

%%If true will notify object was closed.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:connected|connected]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]]]//
<code c>
Eina_Bool efl_net_dialer_connected_get(const Eo *obj);
void efl_net_dialer_connected_set(Eo *obj, Eina_Bool connected);
</code>

%%Returns whenever the socket is connected or not.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:eos|eos]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]]]//
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>

%%If %%''true''%% will notify end of stream.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:proxy|proxy]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]]]//
<code c>
const char *efl_net_dialer_proxy_get(const Eo *obj);
void efl_net_dialer_proxy_set(Eo *obj, const char *proxy_url);
</code>

%%Controls/retrieve if the dialer should use a proxy.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:size|size]]** //**(get)**// //[from [[:docs:efl:auto:mixin:efl:io:sizer|Efl.Io.Sizer]]]//
<code c>
uint64_t efl_io_sizer_size_get(const Eo *obj);
</code>

%%Size property%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:dialer:http:property:timeout_dial|timeout_dial]]** //**(get, set)**// //[from [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]]]//
<code c>
double efl_net_dialer_timeout_dial_get(const Eo *obj);
void efl_net_dialer_timeout_dial_set(Eo *obj, double seconds);
</code>

%%The timeout in seconds to use for dialing/connecting.%%\\ 
\\ 

===== Others =====

[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:loop_user:property:loop|loop]]** //**(get)**//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:loop_user:property:parent|parent]]** //**(set)**// //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 

===== Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:efl:net:dialer:http:event:headers_done|headers,done]] | %%Notifies all headers were parsed and are available.%% |
===== Inherited Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:interface:efl:io:reader:event:can_read_changed|Efl.Io.Reader.can_read,changed]] | %%Notifies can_read property changed.%% |
| [[:docs:efl:auto:interface:efl:io:reader:event:eos|Efl.Io.Reader.eos]] | %%Notifies end of stream, when property is marked as true.%% |
| [[:docs:efl:auto:interface:efl:io:writer:event:can_write_changed|Efl.Io.Writer.can_write,changed]] | %%Notifies can_write property changed.%% |
| [[:docs:efl:auto:interface:efl:net:dialer:event:connected|Efl.Net.Dialer.connected]] | %%Notifies the socket is connected to the remote peer.%% |
| [[:docs:efl:auto:interface:efl:net:dialer:event:error|Efl.Net.Dialer.error]] | %%Some error happened and the socket stopped working.%% |
| [[:docs:efl:auto:interface:efl:net:dialer:event:resolved|Efl.Net.Dialer.resolved]] | %%Notifies %%[[:docs:efl:auto:interface:efl:net:dialer:property:address_dial|Efl.Net.Dialer.address_dial]]%% was resolved to %%[[:docs:efl:auto:interface:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%.%% |
| [[:docs:efl:auto:mixin:efl:io:closer:event:closed|Efl.Io.Closer.closed]] | %%Notifies closed, when property is marked as true%% |
| [[:docs:efl:auto:mixin:efl:io:sizer:event:size_changed|Efl.Io.Sizer.size,changed]] | %%Notifies size changed%% |
