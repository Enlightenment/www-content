<title>Efl.Net.Dialer.Tcp</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_dialer_tcp [fillcolor = "black", label = "Efl.Net.Dialer.Tcp", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_socket_tcp [fillcolor = "gray15", label = "Efl.Net.Socket.Tcp", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_socket_fd [fillcolor = "gray15", label = "Efl.Net.Socket.Fd", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_fd [fillcolor = "gray15", label = "Efl.Loop.Fd", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_io_reader_fd [fillcolor = "gray15", label = "Efl.Io.Reader.Fd", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer_fd [fillcolor = "gray15", label = "Efl.Io.Writer.Fd", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer_fd [fillcolor = "gray15", label = "Efl.Io.Closer.Fd", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_net_dialer [fillcolor = "gray15", label = "Efl.Net.Dialer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_net_dialer_tcp -> efl_net_socket_tcp
    efl_net_socket_tcp -> efl_net_socket_fd
    efl_net_socket_fd -> efl_loop_fd
    efl_loop_fd -> efl_loop_user
    efl_loop_user -> efl_object
    efl_net_socket_fd -> efl_io_reader_fd
    efl_io_reader_fd -> efl_io_reader
    efl_net_socket_fd -> efl_io_writer_fd
    efl_io_writer_fd -> efl_io_writer
    efl_net_socket_fd -> efl_io_closer_fd
    efl_io_closer_fd -> efl_io_closer
    efl_net_socket_fd -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
    efl_net_dialer_tcp -> efl_net_dialer
    efl_net_dialer -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:net:dialer:tcp|Efl.Net.Dialer.Tcp]] //(class)//**
    * [[:docs:efl:auto:class:efl:net:socket:tcp|Efl.Net.Socket.Tcp]] //(class)//
      * [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]] //(class)//
        * [[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]] //(class)//
          * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:mixin:efl:io:reader:fd|Efl.Io.Reader.Fd]] //(mixin)//
          * [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//
        * [[:docs:efl:auto:mixin:efl:io:writer:fd|Efl.Io.Writer.Fd]] //(mixin)//
          * [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//
        * [[:docs:efl:auto:mixin:efl:io:closer:fd|Efl.Io.Closer.Fd]] //(mixin)//
          * [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]] //(mixin)//
        * [[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]] //(interface)//
          * [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//
          * [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//
          * [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]] //(mixin)//
    * [[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]] //(interface)//
      * [[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]] //(interface)//
        * [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//
        * [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//
        * [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]] //(mixin)//

===== Description =====

%%Connects to a remote TCP server.%%

%%If the proxy is NULL (default), then the system proxy will be used. On UNIX that's the environment variable %%''socks_proxy''%% (or '%%''proxy''%%' or '%%''all_proxy''%%') is used if the given address doesn't match %%''no_proxy''%% patterns. To disable proxy use an empty string.%%

%%If the proxy is NULL (default), then the system proxy will be used. On UNIX that's the environment variable %%''socks_proxy''%% (or '%%''all_proxy''%%') is used if the given address doesn't match %%''no_proxy''%% patterns. To disable proxy use an empty string. If provided proxy must be one of the protocols:%%

%%- socks5://username:password@proxyserver:port (SOCKSv5) - socks5h://username@proxyserver:port (let socks server to resolve domain) - socks5://proxyserver:port - socks5://proxyserver (default port 1080) - socks4a://proxyserver:port (SOCKSv4 and let socks server to resolve domain) - socks4://proxyserver:port (SOCKSv4)%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:net:dialer:tcp:description&nodate&nolink&nouser}}

==== Inherited ====

[[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:docs:efl:auto:class:efl:loop:fd:property:fd_file|fd_file]]** //**(get, set)**//
<code c>
int efl_loop_fd_file_get(const Eo *obj);
void efl_loop_fd_file_set(Eo *obj, int fd);
</code>

%%Define which file descriptor to watch when watching a file.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:docs:efl:auto:class:efl:net:socket:tcp:property:fd|fd]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:tcp|Efl.Net.Socket.Tcp]]]//
<code c>
int efl_loop_fd_get(const Eo *obj);
void efl_loop_fd_set(Eo *obj, int fd);
</code>

%%Define which file descriptor to watch. If it is a file, use file_fd variant.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:loop_user:property:loop|loop]]** //**(get)**//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:family|family]]** //**(get, set)**// ''protected set''
<code c>
int efl_net_socket_fd_family_get(const Eo *obj);
void efl_net_socket_fd_family_set(Eo *obj, int family);
</code>

%%The address family (AF_*) family of this socket.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:net:socket:tcp|Efl.Net.Socket.Tcp]].**[[:docs:efl:auto:class:efl:net:socket:tcp:property:cork|cork]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_socket_tcp_cork_get(const Eo *obj);
Eina_Bool efl_net_socket_tcp_cork_set(Eo *obj, Eina_Bool cork);
</code>

%%Controls TCP's cork using TCP_CORK%%\\ 
\\ 
[[:docs:efl:auto:class:efl:net:socket:tcp|Efl.Net.Socket.Tcp]].**[[:docs:efl:auto:class:efl:net:socket:tcp:property:keep_alive|keep_alive]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_socket_tcp_keep_alive_get(const Eo *obj);
Eina_Bool efl_net_socket_tcp_keep_alive_set(Eo *obj, Eina_Bool keep_alive);
</code>

%%Controls keep-alive using SO_KEEPALIVE%%\\ 
\\ 
[[:docs:efl:auto:class:efl:net:socket:tcp|Efl.Net.Socket.Tcp]].**[[:docs:efl:auto:class:efl:net:socket:tcp:property:no_delay|no_delay]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_socket_tcp_no_delay_get(const Eo *obj);
Eina_Bool efl_net_socket_tcp_no_delay_set(Eo *obj, Eina_Bool no_delay);
</code>

%%Controls TCP's no-delay using TCP_NODELAY%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:loop:fd:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]]]//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:net:socket:fd:method:finalize|finalize]]** //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:class:efl:net:socket:fd:method:read|read]]** //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]//
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>

%%Reads data into a pre-allocated buffer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:can_read|can_read]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]// ''protected set''
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>

%%If %%''true''%% will notify %%[[:docs:efl:auto:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:eos|eos]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]// ''protected set''
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>

%%If %%''true''%% will notify end of stream.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]].**[[:docs:efl:auto:class:efl:net:socket:fd:method:write|write]]** //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]//
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>

%%Writes data from a pre-populated buffer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:can_write|can_write]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]// ''protected set''
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>

%%If %%''true''%% will notify %%[[:docs:efl:auto:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:method:dial|dial]]** //[Overridden here]//
<code c>
Eina_Error efl_net_dialer_dial(Eo *obj, const char *address);
</code>

%%Dials to the remote peer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:property:address_dial|address_dial]]** //**(get, set)**// //[Overridden here]// ''protected set''
<code c>
const char *efl_net_dialer_address_dial_get(const Eo *obj);
void efl_net_dialer_address_dial_set(Eo *obj, const char *address);
</code>

%%Returns the address given to %%[[:docs:efl:auto:interface:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%%.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:property:connected|connected]]** //**(get, set)**// //[Overridden here]// ''protected set''
<code c>
Eina_Bool efl_net_dialer_connected_get(const Eo *obj);
void efl_net_dialer_connected_set(Eo *obj, Eina_Bool connected);
</code>

%%Returns whenever the socket is connected or not.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:property:proxy|proxy]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_net_dialer_proxy_get(const Eo *obj);
void efl_net_dialer_proxy_set(Eo *obj, const char *proxy_url);
</code>

%%Controls/retrieves if the dialer should use a proxy.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:property:timeout_dial|timeout_dial]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_net_dialer_timeout_dial_get(const Eo *obj);
void efl_net_dialer_timeout_dial_set(Eo *obj, double seconds);
</code>

%%The timeout in seconds to use for dialing/connecting.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:address_local|address_local]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]// ''protected set''
<code c>
const char *efl_net_socket_address_local_get(const Eo *obj);
void efl_net_socket_address_local_set(Eo *obj, const char *address);
</code>

%%The local address, similar to getsockname().%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:address_remote|address_remote]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]// ''protected set''
<code c>
const char *efl_net_socket_address_remote_get(const Eo *obj);
void efl_net_socket_address_remote_set(Eo *obj, const char *address);
</code>

%%The remote address, similar to getpeername().%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer:fd|Efl.Io.Closer.Fd]].**[[:docs:efl:auto:mixin:efl:io:closer:fd:property:closer_fd|closer_fd]]** //**(get, set)**// ''protected set''
<code c>
int efl_io_closer_fd_get(const Eo *obj);
void efl_io_closer_fd_set(Eo *obj, int fd);
</code>

%%Closer file descriptor%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:class:efl:net:dialer:tcp:method:close|close]]** //[Overridden here]//
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>

%%Closes the Input/Output object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:class:efl:net:socket:fd:property:closed|closed]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:net:socket:fd|Efl.Net.Socket.Fd]]]//
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>

%%If true will notify object was closed.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:mixin:efl:io:closer:fd:property:close_on_destructor|close_on_destructor]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:mixin:efl:io:closer:fd|Efl.Io.Closer.Fd]]]//
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>

%%If true will automatically close() on object destructor.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:mixin:efl:io:closer:fd:property:close_on_exec|close_on_exec]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:mixin:efl:io:closer:fd|Efl.Io.Closer.Fd]]]//
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>

%%If true will automatically close resources on exec() calls.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:reader:fd|Efl.Io.Reader.Fd]].**[[:docs:efl:auto:mixin:efl:io:reader:fd:property:reader_fd|reader_fd]]** //**(get, set)**// ''protected set''
<code c>
int efl_io_reader_fd_get(const Eo *obj);
void efl_io_reader_fd_set(Eo *obj, int fd);
</code>

%%Reader file descriptor%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:writer:fd|Efl.Io.Writer.Fd]].**[[:docs:efl:auto:mixin:efl:io:writer:fd:property:writer_fd|writer_fd]]** //**(get, set)**// ''protected set''
<code c>
int efl_io_writer_fd_get(const Eo *obj);
void efl_io_writer_fd_set(Eo *obj, int fd);
</code>

%%Writer file descriptor%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:docs:efl:auto:class:efl:loop:fd:event:error|error]]**
<code c>
EFL_LOOP_FD_EVENT_ERROR(void)
</code>

%%Called when a error occurred on the file descriptor%%\\ 
\\ 
[[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:docs:efl:auto:class:efl:loop:fd:event:read|read]]**
<code c>
EFL_LOOP_FD_EVENT_READ(void)
</code>

%%Called when a read happened on the file descriptor%%\\ 
\\ 
[[:docs:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:docs:efl:auto:class:efl:loop:fd:event:write|write]]**
<code c>
EFL_LOOP_FD_EVENT_WRITE(void)
</code>

%%Called when a write happened on the file descriptor%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:interface:efl:io:reader:event:can_read_changed|can_read,changed]]**
<code c>
EFL_IO_READER_EVENT_CAN_READ_CHANGED(void)
</code>

%%Notifies can_read property changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:interface:efl:io:reader:event:can_read_changed|can_read,changed]]**
<code c>
EFL_IO_READER_EVENT_CAN_READ_CHANGED(void)
</code>

%%Notifies can_read property changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:interface:efl:io:reader:event:can_read_changed|can_read,changed]]**
<code c>
EFL_IO_READER_EVENT_CAN_READ_CHANGED(void)
</code>

%%Notifies can_read property changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:interface:efl:io:reader:event:eos|eos]]**
<code c>
EFL_IO_READER_EVENT_EOS(void)
</code>

%%Notifies end of stream, when property is marked as true.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:interface:efl:io:reader:event:eos|eos]]**
<code c>
EFL_IO_READER_EVENT_EOS(void)
</code>

%%Notifies end of stream, when property is marked as true.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]].**[[:docs:efl:auto:interface:efl:io:reader:event:eos|eos]]**
<code c>
EFL_IO_READER_EVENT_EOS(void)
</code>

%%Notifies end of stream, when property is marked as true.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]].**[[:docs:efl:auto:interface:efl:io:writer:event:can_write_changed|can_write,changed]]**
<code c>
EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED(void)
</code>

%%Notifies can_write property changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]].**[[:docs:efl:auto:interface:efl:io:writer:event:can_write_changed|can_write,changed]]**
<code c>
EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED(void)
</code>

%%Notifies can_write property changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]].**[[:docs:efl:auto:interface:efl:io:writer:event:can_write_changed|can_write,changed]]**
<code c>
EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED(void)
</code>

%%Notifies can_write property changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:interface:efl:net:dialer:event:connected|connected]]**
<code c>
EFL_NET_DIALER_EVENT_CONNECTED(void)
</code>

%%Notifies the socket is connected to the remote peer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:interface:efl:net:dialer:event:error|error]]**
<code c>
EFL_NET_DIALER_EVENT_ERROR(Eina_Error)
</code>

%%Some error happened and the socket stopped working.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:dialer|Efl.Net.Dialer]].**[[:docs:efl:auto:interface:efl:net:dialer:event:resolved|resolved]]**
<code c>
EFL_NET_DIALER_EVENT_RESOLVED(const char *)
</code>

%%Notifies %%[[:docs:efl:auto:interface:efl:net:dialer:property:address_dial|Efl.Net.Dialer.address_dial]]%% was resolved to %%[[:docs:efl:auto:interface:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:mixin:efl:io:closer:event:closed|closed]]**
<code c>
EFL_IO_CLOSER_EVENT_CLOSED(void)
</code>

%%Notifies closed, when property is marked as true%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:mixin:efl:io:closer:event:closed|closed]]**
<code c>
EFL_IO_CLOSER_EVENT_CLOSED(void)
</code>

%%Notifies closed, when property is marked as true%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]].**[[:docs:efl:auto:mixin:efl:io:closer:event:closed|closed]]**
<code c>
EFL_IO_CLOSER_EVENT_CLOSED(void)
</code>

%%Notifies closed, when property is marked as true%%\\ 
\\ 
