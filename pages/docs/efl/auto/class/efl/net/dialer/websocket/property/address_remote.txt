<title>Efl.Net.Dialer.Websocket.address_remote</title>
//Overridden from [[:docs:efl:auto:interface:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]].//===== Signature =====

<code>
@property address_remote @pure_virtual {
    get {
        values {
            address: string;
        }
    }
    set @protected {
        values {
            address: string;
        }
    }
}
</code>

===== C signature =====

<code c>
const char *efl_net_socket_address_remote_get(const Eo *obj);
void efl_net_socket_address_remote_set(Eo *obj, const char *address);
</code>

===== Values =====

  * **address** - %%Remote address%%
===== Description =====

%%The remote address, similar to getpeername().%%

%%The actual value depends on the type of socket, like an IPv4 (ip:port) or IPv6 ([ip]:port) formatted for a TCP/UDP socket, the path if an Unix Local...%%

%%It's always resolved, then if operations are working with domain names or URL, this is the values the kernel reports. It's similar to getpeername() in behavior.%%

//Since 1.19//{{page>:docs:efl:user:class:efl:net:dialer:websocket:property:address_remote:description&nodate&nolink&nouser}}


===== Implemented by =====

  * [[:docs:efl:auto:interface:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]
  * [[:docs:efl:auto:class:efl:net:socket:fd:property:address_remote|Efl.Net.Socket.Fd.address_remote]]
  * [[:docs:efl:auto:class:efl:net:server:udp:client:property:address_remote|Efl.Net.Server.Udp.Client.address_remote]]
  * **Efl.Net.Dialer.Websocket.address_remote**
  * [[:docs:efl:auto:class:efl:net:dialer:http:property:address_remote|Efl.Net.Dialer.Http.address_remote]]
  * [[:docs:efl:auto:class:efl:net:socket:simple:property:address_remote|Efl.Net.Socket.Simple.address_remote]]
  * [[:docs:efl:auto:class:efl:net:socket:ssl:property:address_remote|Efl.Net.Socket.Ssl.address_remote]]

