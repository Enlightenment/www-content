<title>Efl.Net.Ip.Address</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_ip_address [fillcolor = "black", label = "Efl.Net.Ip.Address", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_net_ip_address -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:net:ip:address|Efl.Net.Ip.Address]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%An Internet Protocol (IP) Address.%%

%%This class is a set of helpers to translate to and from address strings used in Efl.Net. For IP they take the formats:%%

%%- IPv4 complete: 127.0.0.1:1234 - IPv4 no port: 127.0.0.1 - IPv6 complete: [::1]:1234 - IPv6 no port: [::1] - IPv6 no braces (implies no port): ::1%%

%%However in other libraries one may use the address numbers or even a 'struct sockaddr' handle and translating by yourself may be too much work. To convert to a string, just create an instance with %%[[:docs:efl:auto:class:efl:net:ip:address:method:create|Efl.Net.Ip.Address.create]]%% or %%[[:docs:efl:auto:class:efl:net:ip:address:method:create_sockaddr|Efl.Net.Ip.Address.create_sockaddr]]%% and then query %%[[:docs:efl:auto:class:efl:net:ip:address:property:string|Efl.Net.Ip.Address.string]]%%. To convert from numeric string to sockaddr, create an instance with %%[[:docs:efl:auto:class:efl:net:ip:address:method:parse|Efl.Net.Ip.Address.parse]]%% and then query %%[[:docs:efl:auto:class:efl:net:ip:address:property:sockaddr|Efl.Net.Ip.Address.sockaddr]]%%.%%

%%To resolve a host and port name to numbers use %%[[:docs:efl:auto:class:efl:net:ip:address:method:resolve|Efl.Net.Ip.Address.resolve]]%%, this will asynchronously resolve and return the results in a promise.%%

%%The result of %%[[:docs:efl:auto:class:efl:net:ip:address:property:string|Efl.Net.Ip.Address.string]]%% can be passed to %%[[:docs:efl:auto:interface:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%% and %%[[:docs:efl:auto:interface:efl:net:server:method:serve|Efl.Net.Server.serve]]%%%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:net:ip:address:description&nodate&nolink&nouser}}

===== Methods =====

^ Method name ^ Brief description ^
| [[:docs:efl:auto:class:efl:net:ip:address:method:any_check|any_check]] | %%Check if "0.0.0.0" (IPv4) or "::" (IPv6)%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:create_sockaddr|create_sockaddr]] | %%Create an object given sockaddr%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:create|create]] | %%Create an object given family, port and address.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv4_class_a_check|ipv4_class_a_check]] | %%Check if IPv4 and is CLASS-A%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv4_class_b_check|ipv4_class_b_check]] | %%Check if IPv4 and is CLASS-B%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv4_class_c_check|ipv4_class_c_check]] | %%Check if IPv4 and is CLASS-C%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv4_class_d_check|ipv4_class_d_check]] | %%Check if IPv4 and is CLASS-D%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv6_local_link_check|ipv6_local_link_check]] | %%Check if IPv6 is link-local.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv6_local_site_check|ipv6_local_site_check]] | %%Check if IPv6 is site-local.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv6_v4compat_check|ipv6_v4compat_check]] | %%Check if IPv6 is compatible with IPv4.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:ipv6_v4mapped_check|ipv6_v4mapped_check]] | %%Check if IPv6 is mapping an IPv4.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:loopback_check|loopback_check]] | %%Check if loopback "127.0.0.1" (IPv4) or "::1" (IPv6)%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:multicast_check|multicast_check]] | %%Check if multicast%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:parse|parse]] | %%Parse a numeric address and return an object representing it.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:method:resolve|resolve]] | %%Asynchronously resolve host and port names.%% |

===== Properties =====

^ Property name ^ Brief description ^
| [[:docs:efl:auto:class:efl:net:ip:address:property:address|address]] //**(get, set)**// | %%The bytes representing the address.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:property:family|family]] //**(get, set)**// | %%The address family, one of AF_INET6 or AF_INET.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:property:port|port]] //**(get, set)**// | %%The address port in Host/Native endianess.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:property:sockaddr|sockaddr]] //**(get, set)**// | %%The <netinet/in.h>-compatible 'struct sockaddr'.%% |
| [[:docs:efl:auto:class:efl:net:ip:address:property:string|string]] //**(get)**// | %%Returns the numeric address formatted as a string.%% |

===== Overridden Methods =====

^ Method name ^ Brief description ^
| [[:docs:efl:auto:class:efl:net:ip:address:method:finalize|finalize]] //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]// | No description supplied. |

===== Events =====

This class does not define any events.
