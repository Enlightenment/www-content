<title>Efl.Net.Ip.Address.parse</title>
===== Signature =====

<code>
parse @class {
    params {
        @in numeric_address: string;
    }
    return: own(Efl.Net.Ip.Address);
}
</code>

===== C signature =====

<code c>
Efl_Net_Ip_Address *efl_net_ip_address_parse(const Eo *obj, const char *numeric_address);
</code>

===== Parameters =====

  * **numeric_address** //(in)// - %%The numeric address to parse, such as '127.0.0.1:1234' or '[::1]:1234'%%

===== Description =====

%%Parses a numeric address and return an object representing it.%%

%%This parses a numeric IPv4 or IPv6 address and optional port, returning an object representing it on success or %%''NULL''%% on failure.%%

%%The address may be in the formats:%%

%%- IPv4 complete: 127.0.0.1:1234 - IPv4 no port: 127.0.0.1 - IPv6 complete: [::1]:1234 - IPv6 no port: [::1] - IPv6 no braces (implies no port): ::1%%

%%If you want to translate address and port to numbers use %%[[:docs:efl:auto:class:efl:net:ip:address:method:resolve|Efl.Net.Ip.Address.resolve]]%%.%%

//Since 1.19//
{{page>:docs:efl:user:class:efl:net:ip:address:method:parse:description&nodate&nolink&nouser}}

===== Implemented by =====

  * **Efl.Net.Ip.Address.parse**

