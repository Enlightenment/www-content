<title>Efl.Net.Ip.Address.resolve</title>
===== Signature =====

<code>
resolve @class {
    params {
        @in address: string @nonull;
        @in family: int @optional;
        @in flags: int @optional;
    }
    return: future<const(Efl.Net.Ip.Address.Resolve_Results)>;
}
</code>

===== C signature =====

<code c>
Efl_Future *efl_net_ip_address_resolve(const Eo *obj, const char *address, int family, int flags);
</code>

===== Parameters =====

  * **address** //(in)// - %%The address such as enlightenment.org:http or enlightenment.org (port=0)%%
  * **family** //(in)// - %%Preferred family. AF_UNSPEC or 0 for both, otherwise one of AF_INET or AF_INET6%%
  * **flags** //(in)// - %%Flags to use with getaddrinfo(). If 0, default flags are used (AI_V4MAPPED | AI_ADDRCONFIG, if these exist in your system).%%

===== Description =====

%%Asynchronously resolve host and port names.%%

%%This will resolve the host and port names, returning the results asynchronously in a Future.%%

%%It's based on getaddrinfo() and will receive extra flags to change its behavior.%%

%%Ports can also be named, for example http resolves to 80. Your system database is used (see getaddrinfo()).%%

%%You may try %%[[:docs:efl:auto:class:efl:net:ip:address:method:parse|Efl.Net.Ip.Address.parse]]%% if you have numeric values for host and port.%%

//Since 1.19//
{{page>:docs:efl:user:class:efl:net:ip:address:method:resolve:description&nodate&nolink&nouser}}

===== Implemented by =====

  * **Efl.Net.Ip.Address.resolve**

