<title>Efl.Net.Server.Ssl</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_server_ssl [fillcolor = "black", label = "Efl.Net.Server.Ssl", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_server [fillcolor = "gray15", label = "Efl.Net.Server", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_net_server_ssl -> efl_loop_user
    efl_loop_user -> efl_object
    efl_net_server_ssl -> efl_net_server
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:net:server:ssl|Efl.Net.Server.Ssl]] //(class)//**
    * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]] //(interface)//

===== Description =====

%%A SSL server over TCP.%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:net:server:ssl:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:efl:net:server:ssl:method:socket_activate|socket_activate]]**
<code c>
Eina_Error efl_net_server_ssl_socket_activate(Eo *obj, const char *address);
</code>

%%If this method is called use an already activated socket.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:server:ssl:property:close_on_exec|close_on_exec]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_ssl_close_on_exec_get(const Eo *obj);
Eina_Bool efl_net_server_ssl_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>

%%Controls Close-on-Exec() using FD_CLOEXEC.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:server:ssl:property:family|family]]** //**(get)**//
<code c>
int efl_net_server_ssl_family_get(const Eo *obj);
</code>

%%The address family (AF_*) family of this socket.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:server:ssl:property:ipv6_only|ipv6_only]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_ssl_ipv6_only_get(const Eo *obj);
void efl_net_server_ssl_ipv6_only_set(Eo *obj, Eina_Bool ipv6_only);
</code>

%%Whenever IPv6 listen address will accept only same-family clients or will allow IPv4 to connect as well.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:server:ssl:property:reuse_address|reuse_address]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_ssl_reuse_address_get(const Eo *obj);
Eina_Bool efl_net_server_ssl_reuse_address_set(Eo *obj, Eina_Bool reuse_address);
</code>

%%Controls address reuse() using SO_REUSEADDR%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:server:ssl:property:reuse_port|reuse_port]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_ssl_reuse_port_get(const Eo *obj);
Eina_Bool efl_net_server_ssl_reuse_port_set(Eo *obj, Eina_Bool reuse_port);
</code>

%%Controls port reuse() using SO_REUSEPORT (since linux 3.9)%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:net:server:ssl:property:ssl_context|ssl_context]]** //**(get, set)**//
<code c>
Efl_Net_Ssl_Context *efl_net_server_ssl_context_get(const Eo *obj);
void efl_net_server_ssl_context_set(Eo *obj, Efl_Net_Ssl_Context *ssl_context);
</code>

%%Defines the SSL context to use for this server.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:loop_user:property:loop|loop]]** //**(get)**//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:loop_user:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]]]//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:net:server:ssl:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:net:server:ssl:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:class:efl:net:server:ssl:method:serve|serve]]** //[Overridden here]//
<code c>
Eina_Error efl_net_server_serve(Eo *obj, const char *address);
</code>

%%Starts serving requests.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:class:efl:net:server:ssl:property:address|address]]** //**(get, set)**// //[Overridden here]// ''protected set''
<code c>
const char *efl_net_server_address_get(const Eo *obj);
void efl_net_server_address_set(Eo *obj, const char *address);
</code>

%%The address the server is bound to.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:class:efl:net:server:ssl:property:clients_count|clients_count]]** //**(get, set)**// //[Overridden here]// ''protected set''
<code c>
unsigned int efl_net_server_clients_count_get(const Eo *obj);
void efl_net_server_clients_count_set(Eo *obj, unsigned int count);
</code>

%%Number of concurrent clients accepted by this server.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:class:efl:net:server:ssl:property:clients_limit|clients_limit]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_net_server_clients_limit_get(const Eo *obj, unsigned int *limit, Eina_Bool *reject_excess);
void efl_net_server_clients_limit_set(Eo *obj, unsigned int limit, Eina_Bool reject_excess);
</code>

%%Number of maximum concurrent clients allowed by this server.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:class:efl:net:server:ssl:property:serving|serving]]** //**(get, set)**// //[Overridden here]// ''protected set''
<code c>
Eina_Bool efl_net_server_serving_get(const Eo *obj);
void efl_net_server_serving_set(Eo *obj, Eina_Bool serving);
</code>

%%Returns whenever the server is ready to accept clients or not.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:class:efl:net:server:ssl:method:client_announce|client_announce]]** //[Overridden here]// ''protected''
<code c>
Eina_Bool efl_net_server_client_announce(Eo *obj, Efl_Net_Socket *client);
</code>

%%Implementions should call this method to announce new clients.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:interface:efl:net:server:event:client_add|client,add]]**
<code c>
EFL_NET_SERVER_EVENT_CLIENT_ADD(Efl_Net_Socket *, @hot)
</code>

%%A new client socket was created.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:interface:efl:net:server:event:client_rejected|client,rejected]]**
<code c>
EFL_NET_SERVER_EVENT_CLIENT_REJECTED(const char *)
</code>

%%Notifies a client was rejected due excess, see %%[[:docs:efl:auto:interface:efl:net:server:property:clients_limit|Efl.Net.Server.clients_limit]]%%.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:interface:efl:net:server:event:error|error]]**
<code c>
EFL_NET_SERVER_EVENT_ERROR(Eina_Error)
</code>

%%Some error happened and the server needs to be stopped.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:docs:efl:auto:interface:efl:net:server:event:serving|serving]]**
<code c>
EFL_NET_SERVER_EVENT_SERVING(void)
</code>

%%Notifies the server is ready to accept clients. See property %%[[:docs:efl:auto:interface:efl:net:server:property:serving|Efl.Net.Server.serving]]%%%%\\ 
\\ 
