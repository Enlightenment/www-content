<title>Efl.Net.Server.Udp.Client</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_server_udp_client [fillcolor = "black", label = "Efl.Net.Server.Udp.Client", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_net_server_udp_client -> efl_object
    efl_net_server_udp_client -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:net:server:udp:client|Efl.Net.Server.Udp.Client]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:interface:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:docs:efl:auto:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:docs:efl:auto:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:docs:efl:auto:mixin:efl:io:closer|Efl.Io.Closer]] //(mixin)//

===== Description =====

%%A UDP client child of Efl.Net.Server.Udp%%

%%Unlike connection protocols such as TCP or Local, UDP doesn't create extra sockets for its "clients". Then this thin class will provide the required socket interface on top of the server internal socket.%%

%%Given this limitation, some features such as 'cork' (used to coalesce multiple writes() into a single datagram) are not available since it could interfere with other clients.%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:net:server:udp:client:description&nodate&nolink&nouser}}

===== Methods =====

^ Method name ^ Brief description ^
| [[:docs:efl:auto:class:efl:net:server:udp:client:method:next_datagram_size_query|next_datagram_size_query]] | %%Query the next datagram size.%% |

===== Events =====

This class does not define any events.
