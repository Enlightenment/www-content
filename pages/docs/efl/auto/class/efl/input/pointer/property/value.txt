<title>Efl.Input.Pointer.value</title>
===== Signature =====

<code>
@property Efl.Input.Pointer.value {
    get {
        keys {
            key: Efl.Input.Value;
        }
        values {
            val: double;
        }
    }
    set {
        keys {
            key: Efl.Input.Value;
        }
        values {
            val: double;
        }
        return: bool;
    }
}
</code>

===== C signature =====

<code c>
double efl_input_pointer_value_get(const Eo *obj, Efl_Input_Value key);
Eina_Bool efl_input_pointer_value_set(Eo *obj, Efl_Input_Value key, double val);
</code>

===== Keys =====

  * **key** - %%%%''key''%%%%
===== Values =====

  * **val** - %%%%''key''%% value%%
===== Description =====

%%Represents a generic value for this event.%%

%%Refer to the documentation of %%[[:docs:efl:auto:enum:efl:input:value|Efl.Input.Value]]%% for each value's meaning, type and range. Call %%[[:docs:efl:auto:class:efl:input:pointer:property:value_has|Efl.Input.Pointer.value_has.get]]%% to determine whether the returned value is valid or not for this event.%%

%%Most values are precise floating point values, usually in pixels, radians, or in a range of [-1, 1] or [0, 1]. Some values are discrete values (integers) and thus should preferably be queried with the other methods of this class.%%

//Since 1.18//{{page>:docs:efl:user:class:efl:input:pointer:property:value:description&nodate&nolink&nouser}}


