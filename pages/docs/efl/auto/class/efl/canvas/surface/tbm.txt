<title>Efl.Canvas.Surface.Tbm</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas_surface_tbm [fillcolor = "black", label = "Efl.Canvas.Surface.Tbm", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_surface [fillcolor = "gray15", label = "Efl.Canvas.Surface", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_image_internal [fillcolor = "gray15", label = "Efl.Canvas.Image.Internal", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_filter_internal [fillcolor = "gray15", label = "Efl.Canvas.Filter.Internal", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_gfx_filter [fillcolor = "gray15", label = "Efl.Gfx.Filter", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_image [fillcolor = "gray15", label = "Efl.Image", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_buffer [fillcolor = "gray15", label = "Efl.Gfx.Buffer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_fill [fillcolor = "gray15", label = "Efl.Gfx.Fill", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_view [fillcolor = "gray15", label = "Efl.Gfx.View", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_orientation [fillcolor = "gray15", label = "Efl.Orientation", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_flipable [fillcolor = "gray15", label = "Efl.Flipable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_canvas_surface_tbm -> efl_object
    efl_canvas_surface_tbm -> efl_canvas_surface
    efl_canvas_surface -> efl_interface
    efl_canvas_surface -> efl_canvas_image_internal
    efl_canvas_image_internal -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    efl_canvas_image_internal -> efl_canvas_filter_internal
    efl_canvas_filter_internal -> efl_gfx_filter
    efl_canvas_filter_internal -> efl_object
    efl_canvas_image_internal -> efl_image
    efl_canvas_image_internal -> efl_gfx_buffer
    efl_canvas_image_internal -> efl_gfx_fill
    efl_canvas_image_internal -> efl_gfx_view
    efl_canvas_image_internal -> efl_orientation
    efl_canvas_image_internal -> efl_flipable
    efl_canvas_image_internal -> efl_file
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:canvas:surface:tbm|Efl.Canvas.Surface.Tbm]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:mixin:efl:canvas:surface|Efl.Canvas.Surface]] //(mixin)//
      * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
      * [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]] //(class)//
        * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
          * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
          * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
          * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]] //(mixin)//
          * [[:docs:efl:auto:interface:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:interface:efl:image|Efl.Image]] //(interface)//
        * [[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]] //(interface)//
        * [[:docs:efl:auto:interface:efl:gfx:fill|Efl.Gfx.Fill]] //(interface)//
        * [[:docs:efl:auto:interface:efl:gfx:view|Efl.Gfx.View]] //(interface)//
        * [[:docs:efl:auto:interface:efl:orientation|Efl.Orientation]] //(interface)//
        * [[:docs:efl:auto:interface:efl:flipable|Efl.Flipable]] //(interface)//
        * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//

===== Description =====

%%Native Tizen Buffer Manager surface for Efl canvas%%

{{page>:docs:efl:user:class:efl:canvas:surface:tbm:description&nodate&nolink&nouser}}

==== Inherited ====

[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:clipees_has|clipees_has]]**
<code c>
Eina_Bool efl_canvas_object_clipees_has(const Eo *obj);
</code>

%%Test if any object is clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_grab|key_grab]]**
<code c>
Eina_Bool efl_canvas_object_key_grab(Eo *obj, const char *keyname, Evas_Modifier_Mask modifiers, Evas_Modifier_Mask not_modifiers, Eina_Bool exclusive);
</code>

%%Requests %%''keyname''%% key events be directed to %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_ungrab|key_ungrab]]**
<code c>
void efl_canvas_object_key_ungrab(Eo *obj, const char *keyname, Evas_Modifier_Mask modifiers, Evas_Modifier_Mask not_modifiers);
</code>

%%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_add|seat_focus_add]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_add(Eo *obj, Efl_Input_Device *seat);
</code>

%%Add a seat to the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_check|seat_focus_check]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_check(Eo *obj, Efl_Input_Device *seat);
</code>

%%Check if this object is focused by a given seat%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_del|seat_focus_del]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_del(Eo *obj, Efl_Input_Device *seat);
</code>

%%Remove a seat from the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_anti_alias_get(const Eo *obj);
void efl_canvas_object_anti_alias_set(Eo *obj, Eina_Bool anti_alias);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:clipees|clipees]]** //**(get)**//
<code c>
Eina_Iterator *efl_canvas_object_clipees_get(const Eo *obj);
</code>

%%Return a list of objects currently clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:clip|clip]]** //**(get, set)**//
<code c>
Efl_Canvas_Object *efl_canvas_object_clip_get(const Eo *obj);
void efl_canvas_object_clip_set(Eo *obj, Efl_Canvas_Object *clip);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:is_frame_object|is_frame_object]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_is_frame_object_get(const Eo *obj);
void efl_canvas_object_is_frame_object_set(Eo *obj, Eina_Bool is_frame);
</code>

%%If %%''true''%% the object belongs to the window border decorations.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_key_focus_get(const Eo *obj);
void efl_canvas_object_key_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Indicates that this object is the keyboard event receiver on its canvas.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:no_render|no_render]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_no_render_get(const Eo *obj);
void efl_canvas_object_no_render_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:paragraph_direction|paragraph_direction]]** //**(get, set)**//
<code c>
Efl_Text_Bidirectional_Type efl_canvas_object_paragraph_direction_get(const Eo *obj);
void efl_canvas_object_paragraph_direction_set(Eo *obj, Efl_Text_Bidirectional_Type dir);
</code>

%%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_pass_events_get(const Eo *obj);
void efl_canvas_object_pass_events_set(Eo *obj, Eina_Bool pass);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_device_in|pointer_device_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_device_in_get(const Eo *obj, Efl_Input_Device *pointer);
</code>

%%Read-only value indicating whether a pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_in|pointer_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_in_get(const Eo *obj);
</code>

%%Read-only value indicating whether the main pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_by_device_get(const Eo *obj, Efl_Input_Device *dev);
void efl_canvas_object_pointer_mode_by_device_set(Eo *obj, Efl_Input_Device *dev, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour by device. See %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_get(const Eo *obj);
void efl_canvas_object_pointer_mode_set(Eo *obj, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_propagate_events_get(const Eo *obj);
void efl_canvas_object_propagate_events_set(Eo *obj, Eina_Bool propagate);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**//
<code c>
Efl_Gfx_Render_Op efl_canvas_object_render_op_get(const Eo *obj);
void efl_canvas_object_render_op_set(Eo *obj, Efl_Gfx_Render_Op render_op);
</code>

%%Render mode to be used for compositing the Evas object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_repeat_events_get(const Eo *obj);
void efl_canvas_object_repeat_events_set(Eo *obj, Eina_Bool repeat);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:scale|scale]]** //**(get, set)**//
<code c>
double efl_canvas_object_scale_get(const Eo *obj);
void efl_canvas_object_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_seat_focus_get(const Eo *obj);
</code>

%%Check if this object is focused.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:canvas:object:property:loop|loop]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:canvas:surface:tbm:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:canvas:surface:tbm:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:class:efl:canvas:image:internal:method:save|save]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Eina_Bool efl_file_save(const Eo *obj, const char *file, const char *key, const char *flags);
</code>

%%Save the given image object's contents to an (image) file.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:interface:efl:file:property:file|file]]** //**(get, set)**//
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:interface:efl:file:property:mmap|mmap]]** //**(get, set)**//
<code c>
void efl_file_mmap_get(const Eo *obj, const Eina_File **f, const char **key);
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>

\\ 
[[:docs:efl:auto:interface:efl:flipable|Efl.Flipable]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:flip|flip]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Efl_Flip efl_flip_get(const Eo *obj);
void efl_flip_set(Eo *obj, Efl_Flip flip);
</code>

%%Control the flip of the given image%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:class:efl:canvas:image:internal:method:buffer_update_add|buffer_update_add]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
void efl_gfx_buffer_update_add(Eo *obj, int x, int y, int w, int h);
</code>

%%Mark a sub-region of the given image object to be redrawn.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:alpha|alpha]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Eina_Bool efl_gfx_buffer_alpha_get(const Eo *obj);
void efl_gfx_buffer_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Indicates whether the alpha channel should be used.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:colorspace|colorspace]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Efl_Gfx_Colorspace efl_gfx_buffer_colorspace_get(const Eo *obj);
</code>

%%The colorspace defines how pixels are encoded in the image in memory.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:method:buffer_copy_set|buffer_copy_set]]**
<code c>
Eina_Bool efl_gfx_buffer_copy_set(Eo *obj, const Eina_Slice *slice, int width, int height, int stride, Efl_Gfx_Colorspace cspace, int plane);
</code>

%%Set the pixels for this buffer by copying them, or allocate a new memory region.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:method:buffer_managed_get|buffer_managed_get]]**
<code c>
Eina_Bool efl_gfx_buffer_managed_get(Eo *obj, Eina_Slice *slice, int plane);
</code>

%%Get a direct pointer to the internal pixel data, if available.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:method:buffer_managed_set|buffer_managed_set]]**
<code c>
Eina_Bool efl_gfx_buffer_managed_set(Eo *obj, const Eina_Slice *slice, int width, int height, int stride, Efl_Gfx_Colorspace cspace, int plane);
</code>

%%Set the pixels for this buffer, managed externally by the client.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:method:buffer_map|buffer_map]]**
<code c>
Eina_Bool efl_gfx_buffer_map(Eo *obj, Eina_Rw_Slice *slice, Efl_Gfx_Buffer_Access_Mode mode, int x, int y, int w, int h, Efl_Gfx_Colorspace cspace, int plane, int *stride);
</code>

%%Map a region of this buffer for read or write access by the CPU.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:method:buffer_unmap|buffer_unmap]]**
<code c>
Eina_Bool efl_gfx_buffer_unmap(Eo *obj, const Eina_Rw_Slice *slice);
</code>

%%Unmap a region of this buffer, and update the internal data if needed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:property:buffer_borders|buffer_borders]]** //**(get)**//
<code c>
void efl_gfx_buffer_borders_get(const Eo *obj, unsigned int *l, unsigned int *r, unsigned int *t, unsigned int *b);
</code>

%%Duplicated pixel borders inside this buffer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:property:buffer_size|buffer_size]]** //**(get, set)**//
<code c>
void efl_gfx_buffer_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_buffer_size_set(Eo *obj, int w, int h);
</code>

%%Rectangular size of the pixel buffer as allocated in memory.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:buffer|Efl.Gfx.Buffer]].**[[:docs:efl:auto:interface:efl:gfx:buffer:property:stride|stride]]** //**(get)**//
<code c>
int efl_gfx_buffer_stride_get(const Eo *obj);
</code>

%%Length in bytes of one row of pixels in memory.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:fill|Efl.Gfx.Fill]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:fill_auto|fill_auto]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Eina_Bool efl_gfx_fill_auto_get(const Eo *obj);
void efl_gfx_fill_auto_set(Eo *obj, Eina_Bool filled);
</code>

%%Binds the object's %%[[:docs:efl:auto:interface:efl:gfx:fill:property:fill|Efl.Gfx.Fill.fill]]%% property to its actual geometry.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:fill|Efl.Gfx.Fill]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:fill|fill]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
void efl_gfx_fill_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_fill_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Specifies how to tile an image to fill its rectangle geometry.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:filter_program|filter_program]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
void efl_gfx_filter_program_get(const Eo *obj, const char **code, const char **name);
void efl_gfx_filter_program_set(Eo *obj, const char *code, const char *name);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_data|filter_data]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]]]//
<code c>
void efl_gfx_filter_data_get(const Eo *obj, const char *name, const char **value, Eina_Bool *execute);
void efl_gfx_filter_data_set(Eo *obj, const char *name, const char *value, Eina_Bool execute);
</code>

%%Extra data used by the filter program.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_padding|filter_padding]]** //**(get)**// //[Overridden in [[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]]]//
<code c>
void efl_gfx_filter_padding_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>

%%Required padding to apply this filter without cropping.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_source|filter_source]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]]]//
<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>

%%Bind an object to use as a mask or texture in a filter program.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_state|filter_state]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]]]//
<code c>
void efl_gfx_filter_state_get(const Eo *obj, const char **cur_state, double *cur_val, const char **next_state, double *next_val, double *pos);
void efl_gfx_filter_state_set(Eo *obj, const char *cur_state, double cur_val, const char *next_state, double next_val, double pos);
</code>

%%Set the current state of the filter.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, int *w, int *h);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, int w, int h);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_combined_min_get(const Eo *obj, int *w, int *h);
</code>

%%Read-only minimum size combining both %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_display_mode|hint_display_mode]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Size_Hint_Mode efl_gfx_size_hint_display_mode_get(const Eo *obj);
void efl_gfx_size_hint_display_mode_set(Eo *obj, Efl_Gfx_Size_Hint_Mode dispmode);
</code>

%%A hint for an object's display mode.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_max_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_max_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_min_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_request|hint_request]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_request_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_request_set(Eo *obj, int w, int h);
</code>

%%Hints for the object's optimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]// ''protected set''
<code c>
void efl_gfx_size_hint_restricted_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, int w, int h);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_base_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_base_set(Eo *obj, int w, int h);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_step_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_step_set(Eo *obj, int w, int h);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:lower|lower]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:raise|raise]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_above|stack_above]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_below|stack_below]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:above|above]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:below|below]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:layer|layer]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx:view|Efl.Gfx.View]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:view_size|view_size]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
void efl_gfx_view_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_view_size_set(Eo *obj, int w, int h);
</code>

%%The dimensions of this object's viewport.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:color_part|color_part]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_color_part_get(const Eo *obj, const char *part, int *r, int *g, int *b, int *a);
Eina_Bool efl_gfx_color_part_set(Eo *obj, const char *part, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:color|color]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_geometry_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:position|position]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_position_get(const Eo *obj, int *x, int *y);
void efl_gfx_position_set(Eo *obj, int x, int y);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:size|size]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_set(Eo *obj, int w, int h);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:visible|visible]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:border_center_fill|border_center_fill]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Efl_Gfx_Border_Fill_Mode efl_image_border_center_fill_get(const Eo *obj);
void efl_image_border_center_fill_set(Eo *obj, Efl_Gfx_Border_Fill_Mode fill);
</code>

%%Specifies how the center part of the object (not the borders) should be drawn when EFL is rendering it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:border_scale|border_scale]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
double efl_image_border_scale_get(const Eo *obj);
void efl_image_border_scale_set(Eo *obj, double scale);
</code>

%%Scaling factor applied to the image borders.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:border|border]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
void efl_image_border_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_image_border_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Dimensions of this image's border, a region that does not scale with the center area.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:content_hint|content_hint]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Efl_Image_Content_Hint efl_image_content_hint_get(const Eo *obj);
void efl_image_content_hint_set(Eo *obj, Efl_Image_Content_Hint hint);
</code>

\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:ratio|ratio]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
double efl_image_ratio_get(const Eo *obj);
</code>

%%The native width/height ratio of the image.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:scale_hint|scale_hint]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Efl_Image_Scale_Hint efl_image_scale_hint_get(const Eo *obj);
void efl_image_scale_hint_set(Eo *obj, Efl_Image_Scale_Hint hint);
</code>

\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:smooth_scale|smooth_scale]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Eina_Bool efl_image_smooth_scale_get(const Eo *obj);
void efl_image_smooth_scale_set(Eo *obj, Eina_Bool smooth_scale);
</code>

%%Whether to use high-quality image scaling algorithm for this image.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:method:pointer_iterate|pointer_iterate]]**
<code c>
Eina_Iterator *efl_input_pointer_iterate(const Eo *obj, Eina_Bool hover);
</code>

%%Returns an iterator over the current known pointer positions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_input_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the mouse pointer is logically inside the canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_xy|pointer_xy]]** //**(get)**//
<code c>
void efl_input_pointer_xy_get(const Eo *obj, int *x, int *y);
</code>

%%This function returns the current known pointer coordinates%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:orientation|Efl.Orientation]].**[[:docs:efl:auto:class:efl:canvas:image:internal:property:orientation|orientation]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]//
<code c>
Efl_Orient efl_orientation_get(const Eo *obj);
void efl_orientation_set(Eo *obj, Efl_Orient dir);
</code>

%%Control the orientation of a given widget%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:surface|Efl.Canvas.Surface]].**[[:docs:efl:auto:class:efl:canvas:surface:tbm:property:native_buffer|native_buffer]]** //**(get, set)**// //[Overridden here]//
<code c>
void *efl_canvas_surface_native_buffer_get(const Eo *obj);
Eina_Bool efl_canvas_surface_native_buffer_set(Eo *obj, void *buffer);
</code>

%%External buffer attached to this native surface.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:class:efl:canvas:object:property:map_enable|map_enable]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_map_enable_get(const Eo *obj);
void efl_gfx_map_enable_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether map transformation is enabled on this object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_dup|map_dup]]**
<code c>
Eina_Bool efl_gfx_map_dup(Eo *obj, const Efl_Gfx_Map *other);
</code>

%%Duplicate the map information from another object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_lightning_3d|map_lightning_3d]]**
<code c>
Eina_Bool efl_gfx_map_lightning_3d(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Perform lighting calculations on the given Map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_perspective_3d|map_perspective_3d]]**
<code c>
Eina_Bool efl_gfx_map_perspective_3d(Eo *obj, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_populate_manual|map_populate_manual]]**
<code c>
Eina_Bool efl_gfx_map_populate_manual(Eo *obj, double x, double y, double w, double h, double z);
</code>

%%Populate source and destination map points to match given geometry.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_populate|map_populate]]**
<code c>
Eina_Bool efl_gfx_map_populate(Eo *obj, double z);
</code>

%%Populate source and destination map points to match this object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_quat_rotate|map_quat_rotate]]**
<code c>
Eina_Bool efl_gfx_map_quat_rotate(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

%%Rotate the map in 3D using a unit quaternion.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_rotate_3d|map_rotate_3d]]**
<code c>
Eina_Bool efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>

%%Rotate the map around 3 axes in 3D%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_rotate|map_rotate]]**
<code c>
Eina_Bool efl_gfx_map_rotate(Eo *obj, double degrees, double cx, double cy);
</code>

%%Change the map to apply the given rotation.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_zoom|map_zoom]]**
<code c>
Eina_Bool efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>

%%Change the map to apply the given zooming.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Alpha flag for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>

%%Clockwise state of a map (read-only).%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

%%Color of a vertex in the map.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_move_sync|map_move_sync]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_move_sync_get(const Eo *obj);
void efl_gfx_map_move_sync_set(Eo *obj, Eina_Bool enable);
</code>

%%Status of object move synchronization for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_coord|map_point_coord]]** //**(get, set)**//
<code c>
void efl_gfx_map_point_coord_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_point_coord_set(Eo *obj, int idx, double x, double y, double z);
</code>

%%Map point's coordinate.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_image_uv|map_point_image_uv]]** //**(get, set)**//
<code c>
void efl_gfx_map_point_image_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_point_image_uv_set(Eo *obj, int idx, double u, double v);
</code>

%%Map point's U and V texture source point.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_z|map_point_z]]** //**(get)**//
<code c>
double efl_gfx_map_point_z_get(const Eo *obj, int idx);
</code>

%%Value of Z coordinate of point %%''idx''%%.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>

%%Smoothing state for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:legacy_ctor|legacy_ctor]]** ''protected''
<code c>
void efl_canvas_object_legacy_ctor(Eo *obj);
</code>

%%Internal function. Do not use.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// ''protected''
<code c>
Efl_Canvas_Object *efl_canvas_object_render_parent_get(const Eo *obj);
</code>

%%Gets the parent smart object of a given Evas object, if it has one.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:type|type]]** //**(set)**// ''protected''
<code c>
void efl_canvas_object_type_set(Eo *obj, const char *type);
</code>

%%Sets the legacy type name of this Evas object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:class:efl:canvas:image:internal:method:filter_dirty|filter_dirty]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]// ''protected''
<code c>
void evas_filter_dirty(Eo *obj);
</code>

%%Called when the filter changes must trigger a redraw of the object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:class:efl:canvas:image:internal:method:filter_input_alpha|filter_input_alpha]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]// ''protected''
<code c>
Eina_Bool evas_filter_input_alpha(Eo *obj);
</code>

%%Called by Efl.Canvas.Filter.Internal to determine whether the input is alpha or rgba.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:class:efl:canvas:image:internal:method:filter_input_render|filter_input_render]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]// ''protected''
<code c>
Eina_Bool evas_filter_input_render(Eo *obj, void *filter, void *drawctx, void *data, int l, int r, int t, int b, int x, int y, Eina_Bool do_async);
</code>

%%Called by Efl.Canvas.Filter.Internal when the parent class must render the input.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:class:efl:canvas:image:internal:method:filter_state_prepare|filter_state_prepare]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:image:internal|Efl.Canvas.Image.Internal]]]// ''protected''
<code c>
void evas_filter_state_prepare(Eo *obj, Efl_Canvas_Filter_State *state, void *data);
</code>

%%Called by Efl.Canvas.Filter.Internal to request the parent class for state information (color, etc...).%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_changed|filter_changed]]** //**(set)**// ''protected''
<code c>
void evas_filter_changed_set(Eo *obj, Eina_Bool val);
</code>

%%Marks this filter as changed.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_invalid|filter_invalid]]** //**(set)**// ''protected''
<code c>
void evas_filter_invalid_set(Eo *obj, Eina_Bool val);
</code>

%%Marks this filter as invalid.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:docs:efl:auto:mixin:efl:canvas:filter:internal:property:filter_output_buffer|filter_output_buffer]]** //**(get)**// ''protected''
<code c>
void *evas_filter_output_buffer_get(const Eo *obj);
</code>

%%Retrieve cached output buffer, if any.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:animator|Efl.Animator]].**[[:docs:efl:auto:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:interface:efl:image:event:preload|preload]]**
<code c>
EFL_IMAGE_EVENT_PRELOAD(void)
</code>

%%Image data has been preloaded.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:interface:efl:image:event:resize|resize]]**
<code c>
EFL_IMAGE_EVENT_RESIZE(void)
</code>

%%Image was resized (its pixel data).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:image|Efl.Image]].**[[:docs:efl:auto:interface:efl:image:event:unload|unload]]**
<code c>
EFL_IMAGE_EVENT_UNLOAD(void)
</code>

%%Image data has been unloaded (by some mechanism in EFL that threw out the original image data).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
