<title>Efl.Canvas.Text.Cursor</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas_text_cursor [fillcolor = "black", label = "Efl.Canvas.Text.Cursor", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_canvas_text_cursor -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:canvas:text:cursor|Efl.Canvas.Text.Cursor]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Efl canvas text cursor class%%

{{page>:docs:efl:user:class:efl:canvas:text:cursor:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:char_delete|char_delete]]**
<code c>
void efl_canvas_text_cursor_char_delete(Eo *obj);
</code>

%%Deletes a single character from position pointed by given cursor.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:char_next|char_next]]**
<code c>
void efl_canvas_text_cursor_char_next(Eo *obj);
</code>

%%Advances the cursor one char forward.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:char_prev|char_prev]]**
<code c>
void efl_canvas_text_cursor_char_prev(Eo *obj);
</code>

%%Advances the cursor one char backwards.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:compare|compare]]**
<code c>
int efl_canvas_text_cursor_compare(const Eo *obj, const Efl_Canvas_Text_Cursor *cur);
</code>

%%Compares two cursors.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:coord_set|coord_set]]**
<code c>
void efl_canvas_text_cursor_coord_set(Eo *obj, int x, int y);
</code>

%%Sets the position of the cursor according to the X and Y coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:copy|copy]]**
<code c>
void efl_canvas_text_cursor_copy(Eo *obj, const Efl_Canvas_Text_Cursor *src);
</code>

%%Copies source cursor.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:equal|equal]]**
<code c>
Eina_Bool efl_canvas_text_cursor_equal(const Eo *obj, const Efl_Canvas_Text_Cursor *cur);
</code>

%%Checks if two cursors are equal%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:line_char_first|line_char_first]]**
<code c>
void efl_canvas_text_cursor_line_char_first(Eo *obj);
</code>

%%Go to the start of the current line%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:line_char_last|line_char_last]]**
<code c>
void efl_canvas_text_cursor_line_char_last(Eo *obj);
</code>

%%Go to the end of the current line%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:line_jump_by|line_jump_by]]**
<code c>
void efl_canvas_text_cursor_line_jump_by(Eo *obj, int by);
</code>

%%Move the cursor %%''by''%% lines up if negative, down if positive.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:object_item_insert|object_item_insert]]**
<code c>
Efl_Canvas_Text_Annotation *efl_canvas_text_cursor_object_item_insert(Eo *obj, const char *format);
</code>

%%Inserts a object item at specified position.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:paragraph_char_first|paragraph_char_first]]**
<code c>
void efl_canvas_text_cursor_paragraph_char_first(Eo *obj);
</code>

%%Go to the first char in the node the cursor is pointing on.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:paragraph_char_last|paragraph_char_last]]**
<code c>
void efl_canvas_text_cursor_paragraph_char_last(Eo *obj);
</code>

%%Go to the last char in a text node.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:paragraph_first|paragraph_first]]**
<code c>
void efl_canvas_text_cursor_paragraph_first(Eo *obj);
</code>

%%Sets the cursor to the start of the first text node%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:paragraph_last|paragraph_last]]**
<code c>
void efl_canvas_text_cursor_paragraph_last(Eo *obj);
</code>

%%Sets the cursor to the end of the last text node%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:paragraph_next|paragraph_next]]**
<code c>
void efl_canvas_text_cursor_paragraph_next(Eo *obj);
</code>

%%Advances to the start of the next text node%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:paragraph_prev|paragraph_prev]]**
<code c>
void efl_canvas_text_cursor_paragraph_prev(Eo *obj);
</code>

%%Advances to the end of the previous text node%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:text_insert|text_insert]]**
<code c>
int efl_canvas_text_cursor_text_insert(Eo *obj, const char *text);
</code>

%%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:word_end|word_end]]**
<code c>
void efl_canvas_text_cursor_word_end(Eo *obj);
</code>

%%Moves the cursor to the end of the word under the cursor%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:word_start|word_start]]**
<code c>
void efl_canvas_text_cursor_word_start(Eo *obj);
</code>

%%Moves the cursor to the start of the word under the cursor%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:property:content|content]]** //**(get)**//
<code c>
Eina_Unicode efl_canvas_text_cursor_content_get(const Eo *obj);
</code>

%%The content of the cursor (the character under the cursor)%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:property:geometry|geometry]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_text_cursor_geometry_get(const Eo *obj, Efl_Canvas_Text_Cursor_Type ctype, int *cx, int *cy, int *cw, int *ch, int *cx2, int *cy2, int *cw2, int *ch2);
</code>

%%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:property:object_item_annotation|object_item_annotation]]** //**(get)**//
<code c>
Efl_Canvas_Text_Annotation *efl_canvas_text_cursor_object_item_annotation_get(const Eo *obj);
</code>

%%The object-item annotation at the cursor's position.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:property:position|position]]** //**(get, set)**//
<code c>
int efl_canvas_text_cursor_position_get(const Eo *obj);
void efl_canvas_text_cursor_position_set(Eo *obj, int position);
</code>

%%Sets position of cursor to given pos.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:text:cursor:property:text_object|text_object]]** //**(get, set)**//
<code c>
const Efl_Canvas_Object *efl_canvas_text_cursor_text_object_get(const Eo *obj);
void efl_canvas_text_cursor_text_object_set(Eo *obj, const Efl_Canvas_Object *tb);
</code>

%%The text object the cursor is associated with.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:canvas:text:cursor:method:finalize|finalize]]** //[Overridden here]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:constructor|constructor]]**
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 

===== Events =====

**[[:docs:efl:auto:class:efl:canvas:text:cursor:event:changed|changed]]**
<code c>
EFL_CANVAS_TEXT_CURSOR_EVENT_CHANGED(void)
</code>

%%The cursor position has changed%%\\ 
\\ 
==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
