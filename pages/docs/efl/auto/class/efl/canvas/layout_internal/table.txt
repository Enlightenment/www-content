<title>Efl.Canvas.Layout_Internal.Table</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas_layout_internal_table [fillcolor = "black", label = "Efl.Canvas.Layout_Internal.Table", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_layout_internal [fillcolor = "gray15", label = "Efl.Canvas.Layout_Internal", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack_grid [fillcolor = "gray15", label = "Efl.Pack.Grid", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack_linear [fillcolor = "gray15", label = "Efl.Pack.Linear", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack [fillcolor = "gray15", label = "Efl.Pack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_canvas_layout_internal_table -> efl_object
    efl_canvas_layout_internal_table -> efl_canvas_layout_internal
    efl_canvas_layout_internal_table -> efl_pack_grid
    efl_pack_grid -> efl_pack_linear
    efl_pack_linear -> efl_pack
    efl_pack -> efl_container
    efl_container -> efl_gfx
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:canvas:layout_internal:table|Efl.Canvas.Layout_Internal.Table]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:interface:efl:canvas:layout_internal|Efl.Canvas.Layout_Internal]] //(interface)//
    * [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]] //(interface)//
      * [[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]] //(interface)//
        * [[:docs:efl:auto:interface:efl:pack|Efl.Pack]] //(interface)//
          * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//

===== Description =====

%%Represents a Table created as part of a layout.%%

%%Can not be deleted, this is only a representation of an internal object of an EFL layout.%%

{{page>:docs:efl:user:class:efl:canvas:layout_internal:table:description&nodate&nolink&nouser}}

===== Overrides =====

**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:content_count|content_count]]** //[from [[:docs:efl:auto:interface:efl:container|Efl.Container]]]//
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:content_iterate|content_iterate]]** //[from [[:docs:efl:auto:interface:efl:container|Efl.Container]]]//
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:content_remove|content_remove]]** //[from [[:docs:efl:auto:interface:efl:container|Efl.Container]]]//
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:finalize|finalize]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:grid_content_get|grid_content_get]]** //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
Efl_Gfx *efl_pack_grid_content_get(Eo *obj, int col, int row);
</code>

%%Returns a child at a given position, see %%[[:docs:efl:auto:interface:efl:pack:grid:method:grid_contents_get|Efl.Pack.Grid.grid_contents_get]]%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:grid_contents_get|grid_contents_get]]** //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
Eina_Iterator *efl_pack_grid_contents_get(Eo *obj, int col, int row, Eina_Bool below);
</code>

%%Returns all objects at a given position in this grid.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:pack_clear|pack_clear]]** //[from [[:docs:efl:auto:interface:efl:pack|Efl.Pack]]]//
<code c>
Eina_Bool efl_pack_clear(Eo *obj);
</code>

%%Removes all packed contents, and unreferences them.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:pack_grid|pack_grid]]** //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
Eina_Bool efl_pack_grid(Eo *obj, Efl_Gfx *subobj, int col, int row, int colspan, int rowspan);
</code>

%%Pack object on the grid%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:unpack_all|unpack_all]]** //[from [[:docs:efl:auto:interface:efl:pack|Efl.Pack]]]//
<code c>
Eina_Bool efl_pack_unpack_all(Eo *obj);
</code>

%%Removes all packed contents, without unreferencing them.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:method:unpack|unpack]]** //[from [[:docs:efl:auto:interface:efl:pack|Efl.Pack]]]//
<code c>
Eina_Bool efl_pack_unpack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Removes an existing item from the container, without deleting it.%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:property:grid_columns|grid_columns]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
int efl_pack_grid_columns_get(const Eo *obj);
</code>

%%Gird columns property%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:property:grid_position|grid_position]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
Eina_Bool efl_pack_grid_position_get(const Eo *obj, Efl_Gfx *subobj, int *col, int *row, int *colspan, int *rowspan);
</code>

%%Position and span of the %%''subobj''%% in this container, may be modified to move the %%''subobj''%%%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:property:grid_rows|grid_rows]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
int efl_pack_grid_rows_get(const Eo *obj);
</code>

%%Grid rows property%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:property:grid_size|grid_size]]** //**(get)**// //[from [[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]]]//
<code c>
void efl_pack_grid_size_get(const Eo *obj, int *cols, int *rows);
</code>

%%Combines %%[[:docs:efl:auto:interface:efl:pack:grid:property:grid_columns|Efl.Pack.Grid.grid_columns]]%% and %%[[:docs:efl:auto:interface:efl:pack:grid:property:grid_rows|Efl.Pack.Grid.grid_rows]]%%%%\\ 
\\ 
**[[:docs:efl:auto:class:efl:canvas:layout_internal:table:property:real_part|real_part]]** //**(set)**// //[from [[:docs:efl:auto:interface:efl:canvas:layout_internal|Efl.Canvas.Layout_Internal]]]//
<code c>
void _edje_real_part_set(Eo *obj, void *ed, void *rp, const char *part);
</code>

%%Real part property%%\\ 
\\ 

===== Others =====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:constructor|constructor]]**
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:destructor|destructor]]**
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:method:content_unset|content_unset]]**
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:property:content_part_name|content_part_name]]** //**(get)**//
<code c>
const char *efl_content_part_name_get(const Eo *obj, Efl_Gfx *content);
</code>

%%The name of the part under which an object is swallowed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:property:content|content]]** //**(get, set)**//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:color_part|color_part]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_color_part_get(const Eo *obj, const char *part, int *r, int *g, int *b, int *a);
Eina_Bool efl_gfx_color_part_set(Eo *obj, const char *part, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:color|color]]** //**(get, set)**//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:geometry|geometry]]** //**(get, set)**//
<code c>
void efl_gfx_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_geometry_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:position|position]]** //**(get, set)**//
<code c>
void efl_gfx_position_get(const Eo *obj, int *x, int *y);
void efl_gfx_position_set(Eo *obj, int x, int y);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:size|size]]** //**(get, set)**//
<code c>
void efl_gfx_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_set(Eo *obj, int w, int h);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:property:visible|visible]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

\\ 
[[:docs:efl:auto:interface:efl:pack:grid|Efl.Pack.Grid]].**[[:docs:efl:auto:interface:efl:pack:grid:property:grid_orientation|grid_orientation]]** //**(get, set)**//
<code c>
void efl_pack_grid_orientation_get(const Eo *obj, Efl_Orient *primary, Efl_Orient *secondary);
void efl_pack_grid_orientation_set(Eo *obj, Efl_Orient primary, Efl_Orient secondary);
</code>

%%Primary and secondary up/left/right/down orientations for linear apis.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_after|pack_after]]**
<code c>
Eina_Bool efl_pack_after(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Append item after other sub object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_at|pack_at]]**
<code c>
Eina_Bool efl_pack_at(Eo *obj, Efl_Gfx *subobj, int index);
</code>

%%Inserts %%''subobj''%% at the specified %%''index''%%.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_before|pack_before]]**
<code c>
Eina_Bool efl_pack_before(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Prepend item before other sub object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_begin|pack_begin]]**
<code c>
Eina_Bool efl_pack_begin(Eo *obj, Efl_Gfx *subobj);
</code>

%%Prepend an object at the beginning of this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_content_get|pack_content_get]]**
<code c>
Efl_Gfx *efl_pack_content_get(Eo *obj, int index);
</code>

%%Content at a given index in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_end|pack_end]]**
<code c>
Eina_Bool efl_pack_end(Eo *obj, Efl_Gfx *subobj);
</code>

%%Append object at the end of this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_index_get|pack_index_get]]**
<code c>
int efl_pack_index_get(Eo *obj, const Efl_Gfx *subobj);
</code>

%%Get the index of a child in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:docs:efl:auto:interface:efl:pack:linear:method:pack_unpack_at|pack_unpack_at]]**
<code c>
Efl_Gfx *efl_pack_unpack_at(Eo *obj, int index);
</code>

%%Pop out item at specified %%''index''%%.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:method:pack|pack]]**
<code c>
Eina_Bool efl_pack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Adds an item to this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:property:pack_align|pack_align]]** //**(get, set)**//
<code c>
void efl_pack_align_get(const Eo *obj, double *align_horiz, double *align_vert);
void efl_pack_align_set(Eo *obj, double align_horiz, double align_vert);
</code>

%%Alignment of the container within its bounds%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:pack|Efl.Pack]].**[[:docs:efl:auto:interface:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**//
<code c>
void efl_pack_padding_get(const Eo *obj, double *pad_horiz, double *pad_vert, Eina_Bool *scalable);
void efl_pack_padding_set(Eo *obj, double pad_horiz, double pad_vert, Eina_Bool scalable);
</code>

%%Padding between items contained in this object.%%\\ 
\\ 

===== Inherited Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:interface:efl:container:event:content_added|Efl.Container.content,added]] | %%Sent after a new item was added.%% |
| [[:docs:efl:auto:interface:efl:container:event:content_removed|Efl.Container.content,removed]] | %%Sent after an item was removed, before unref.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:hide|Efl.Gfx.hide]] | %%Object just became invisible.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:move|Efl.Gfx.move]] | %%Object was moved, its position during the event is the new one.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:resize|Efl.Gfx.resize]] | %%Object was resized, its size during the event is the new one.%% |
| [[:docs:efl:auto:interface:efl:gfx:event:show|Efl.Gfx.show]] | %%Object just became visible.%% |
| [[:docs:efl:auto:interface:efl:pack:event:layout_updated|Efl.Pack.layout,updated]] | %%Sent after the layout was updated.%% |
