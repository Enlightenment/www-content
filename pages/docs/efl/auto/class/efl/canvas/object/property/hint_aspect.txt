<title>Efl.Canvas.Object.hint_aspect</title>
//Overridden from [[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_aspect|Efl.Gfx.Size.Hint.hint_aspect]] **(get, set)**.//===== Signature =====

<code>
@property hint_aspect @pure_virtual {
    get {
        values {
            mode: Efl.Gfx.Size.Hint.Aspect;
            w: int;
            h: int;
        }
    }
    set {
        values {
            mode: Efl.Gfx.Size.Hint.Aspect;
            w: int;
            h: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, int *w, int *h);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, int w, int h);
</code>

===== Values =====

  * **mode** - %%Mode of interpretation.%%
  * **w** - %%Width%%
  * **h** - %%Height%%
===== Description =====

%%Defines the aspect ratio to respect when scaling this object.%%

%%The aspect ratio is defined as the width / height ratio of the object. Depending on the object and its container, this hint may or may not be fully respected.%%

%%If any of the given aspect ratio terms are 0, the object's container will ignore the aspect and scale this object to occupy the whole available area, for any given policy.%%{{page>:docs:efl:user:class:efl:canvas:object:property:hint_aspect:description&nodate&nolink&nouser}}


===== Implemented by =====

  * [[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_aspect|Efl.Gfx.Size.Hint.hint_aspect]]
  * **Efl.Canvas.Object.hint_aspect**
  * [[:docs:efl:auto:class:efl:ui:win:property:hint_aspect|Efl.Ui.Win.hint_aspect]]

