<title>Efl.Object.key_value</title>
===== Signature =====

<code>
@property Efl.Object.key_value {
    get {
        keys {
            key: string;
        }
        values {
            value: ptr(generic_value);
        }
    }
    set {
        keys {
            key: string;
        }
        values {
            value: ptr(generic_value);
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

===== Keys =====

  * **key** - %%The key associated with the value%%
===== Values =====

  * **value** - %%The value to set%%
===== Description =====

%%Value on with string key on the object.%%

%%This stores the value with the given string key on the object and it will be freed when replaced or deleted or the referring object is deleted.%%

%%This is the same key store used by key_data and key_obj so keys are shared and can store only one thing%%{{page>:docs:efl:user:class:efl:object:property:key_value:description&nodate&nolink&nouser}}


