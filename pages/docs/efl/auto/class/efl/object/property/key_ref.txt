<title>Efl.Object.key_ref</title>
===== Signature =====

<code>
@property Efl.Object.key_ref {
    get {
        keys {
            key: string;
        }
        values {
            objdata: Efl.Object;
        }
    }
    set {
        keys {
            key: string;
        }
        values {
            objdata: const(Efl.Object);
        }
    }
}
</code>

===== C signature =====

<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

===== Keys =====

  * **key** - %%The key associated with the object ref%%
===== Values =====

==== Getter ====

  * **objdata** - %%The object to set%%
==== Setter ====

  * **objdata** - %%The object to set%%
===== Description =====

%%Generic object reference with string key to object.%%

%%The object will be automatically ref'd when set and unref'd when replaced or deleted or referring object is deleted. If the referenced object is deleted then the key is deleted automatically.%%

%%This is the same key store used by key_data and key_value so keys are shared and can store only one thing%%{{page>:docs:efl:user:class:efl:object:property:key_ref:description&nodate&nolink&nouser}}


