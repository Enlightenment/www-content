<title>Efl.Object.key_wref</title>
===== Signature =====

<code>
@property Efl.Object.key_wref {
    get {
        keys {
            key: string;
        }
        values {
            objdata: Efl.Object;
        }
    }
    set {
        keys {
            key: string;
        }
        values {
            objdata: const(Efl.Object);
        }
    }
}
</code>

===== C signature =====

<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

===== Keys =====

  * **key** - %%The key associated with the object ref%%
===== Values =====

==== Getter ====

  * **objdata** - %%The object to set%%
==== Setter ====

  * **objdata** - %%The object to set%%
===== Description =====

%%Generic weak object reference with string key to object.%%

%%The object key will be removed if the object is removed, but will not take or removed references like key_obj.%%

%%This is the same key store used by key_data and key_value so keys are shared and can store only one thing%%{{page>:docs:efl:user:class:efl:object:property:key_wref:description&nodate&nolink&nouser}}


