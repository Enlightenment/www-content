<title>Efl.Network.Server</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_network_server [fillcolor = "black", label = "Efl.Network.Server", color = "gray15", fontcolor = "white", style = "filled"]
    efl_network [fillcolor = "gray15", label = "Efl.Network", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_network_server -> efl_network
    efl_network -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:network:server|Efl.Network.Server]] //(class)//**
    * [[:docs:efl:auto:class:efl:network|Efl.Network]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Efl network server%%

{{page>:docs:efl:user:class:efl:network:server:description&nodate&nolink&nouser}}

===== Properties =====

^ Property name ^ Brief description ^
| [[:docs:efl:auto:class:efl:network:server:property:client_limit|client_limit]] //(get, set)// | %%Sets a limit on the number of clients that can be handled concurrently by the given server, and a policy on what to do if excess clients try to connect.%% |
| [[:docs:efl:auto:class:efl:network:server:property:clients|clients]] //(get)// | %%Retrieves the current list of clients.%% |
| [[:docs:efl:auto:class:efl:network:server:property:connection_type|connection_type]] //(get, set)// | %%Type of the server connection as defined in %%[[:docs:efl:auto:enum:ecore:con:type|Ecore.Con.Type]]%%%% |
| [[:docs:efl:auto:class:efl:network:server:property:name|name]] //(get, set)// | %%Retrieves the name of server.%% |

===== Events =====

This class does not define any events.
