<title>Efl.Network.Server.client_limit</title>
===== Signature =====

<code>
@property Efl.Network.Server.client_limit {
    get {
        values {
            client_limit: int;
            reject_excess_clients: char;
        }
    }
    set {
        values {
            client_limit: int;
            reject_excess_clients: char;
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_network_server_client_limit_get(const Eo *obj, int *client_limit, char *reject_excess_clients);
void efl_network_server_client_limit_set(Eo *obj, int client_limit, char reject_excess_clients);
</code>

===== Values =====

  * **client_limit** - %%The maximum number of clients to handle concurrently. -1 means unlimited (default). 0 effectively disables the server.%%
  * **reject_excess_clients** - %%Set to 1 to automatically disconnect excess clients as soon as they connect if you are already handling client_limit clients. Set to 0 (default) to just hold off on the "accept()" system call until the number of active  clients drops. This causes the kernel to queue up to 4096 connections (or your kernel's limit, whichever is lower).%%
===== Description =====

%%Sets a limit on the number of clients that can be handled concurrently by the given server, and a policy on what to do if excess clients try to connect.%%

%%Beware that if you set this once ecore is already running, you may already have pending CLIENT_ADD events in your event queue.  Those clients have already connected and will not be affected by this call. Only clients subsequently trying to connect will be affected.%%{{page>:docs:efl:user:class:efl:network:server:property:client_limit:description&nodate&nolink&nouser}}


