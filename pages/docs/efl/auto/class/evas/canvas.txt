<title>Evas.Canvas</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    evas_canvas [fillcolor = "black", label = "Evas.Canvas", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas [fillcolor = "gray15", label = "Efl.Canvas", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    evas_canvas -> efl_object
    evas_canvas -> efl_canvas
    evas_canvas -> efl_animator
    evas_canvas -> efl_input_interface
    evas_canvas -> efl_loop_user
    efl_loop_user -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:evas:canvas|Evas.Canvas]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]] //(interface)//
    * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
    * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
    * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Evas canvas class%%

{{page>:docs:efl:user:class:evas:canvas:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:evas:canvas:method:coord_screen_x_to_world|coord_screen_x_to_world]]**
<code c>
Evas_Coord evas_canvas_coord_screen_x_to_world(const Eo *obj, int x);
</code>

%%Convert/scale an output screen coordinate into canvas coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:coord_screen_y_to_world|coord_screen_y_to_world]]**
<code c>
Evas_Coord evas_canvas_coord_screen_y_to_world(const Eo *obj, int y);
</code>

%%Convert/scale an output screen coordinate into canvas coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:coord_world_x_to_screen|coord_world_x_to_screen]]**
<code c>
int evas_canvas_coord_world_x_to_screen(const Eo *obj, Evas_Coord x);
</code>

%%Convert/scale a canvas coordinate into output screen coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:coord_world_y_to_screen|coord_world_y_to_screen]]**
<code c>
int evas_canvas_coord_world_y_to_screen(const Eo *obj, Evas_Coord y);
</code>

%%Convert/scale a canvas coordinate into output screen coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:damage_rectangle_add|damage_rectangle_add]]**
<code c>
void evas_canvas_damage_rectangle_add(Eo *obj, int x, int y, int w, int h);
</code>

%%Add a damage rectangle.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:focus_in|focus_in]]**
<code c>
void evas_canvas_focus_in(Eo *obj);
</code>

%%Inform to the evas that it got the focus from the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:focus_out|focus_out]]**
<code c>
void evas_canvas_focus_out(Eo *obj);
</code>

%%Inform to the evas that it lost the focus from the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_available_list|font_available_list]]**
<code c>
Eina_List *evas_canvas_font_available_list(const Eo *obj);
</code>

%%List of available font descriptions known or found by this evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_cache_flush|font_cache_flush]]**
<code c>
void evas_canvas_font_cache_flush(Eo *obj);
</code>

%%Force the given evas and associated engine to flush its font cache.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_hinting_can_hint|font_hinting_can_hint]]**
<code c>
Eina_Bool evas_canvas_font_hinting_can_hint(const Eo *obj, Evas_Font_Hinting_Flags hinting);
</code>

%%Checks if the font hinting is supported by the given evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_path_append|font_path_append]]**
<code c>
void evas_canvas_font_path_append(Eo *obj, const char *path);
</code>

%%Appends a font path to the list of font paths used by the given evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_path_clear|font_path_clear]]**
<code c>
void evas_canvas_font_path_clear(Eo *obj);
</code>

%%Removes all font paths loaded into memory for the given evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_path_list|font_path_list]]**
<code c>
const Eina_List *evas_canvas_font_path_list(const Eo *obj);
</code>

%%Retrieves the list of font paths used by the given evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:font_path_prepend|font_path_prepend]]**
<code c>
void evas_canvas_font_path_prepend(Eo *obj, const char *path);
</code>

%%Prepends a font path to the list of font paths used by the given evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:image_cache_flush|image_cache_flush]]**
<code c>
void evas_canvas_image_cache_flush(Eo *obj);
</code>

%%Flush the image cache of the canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:image_cache_reload|image_cache_reload]]**
<code c>
void evas_canvas_image_cache_reload(Eo *obj);
</code>

%%Reload the image cache.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_lock_add|key_lock_add]]**
<code c>
void evas_canvas_key_lock_add(Eo *obj, const char *keyname);
</code>

%%Adds the %%''keyname''%% key to the current list of lock keys.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_lock_del|key_lock_del]]**
<code c>
void evas_canvas_key_lock_del(Eo *obj, const char *keyname);
</code>

%%Removes the %%''keyname''%% key from the current list of lock keys on canvas %%''e''%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_lock_off|key_lock_off]]**
<code c>
void evas_canvas_key_lock_off(Eo *obj, const char *keyname);
</code>

%%Disables or turns off programmatically the lock key with name %%''keyname''%% for the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_lock_on|key_lock_on]]**
<code c>
void evas_canvas_key_lock_on(Eo *obj, const char *keyname);
</code>

%%Enables or turns on programmatically the lock key with name %%''keyname''%% for the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_modifier_add|key_modifier_add]]**
<code c>
void evas_canvas_key_modifier_add(Eo *obj, const char *keyname);
</code>

%%Adds the %%''keyname''%% key to the current list of modifier keys.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_modifier_del|key_modifier_del]]**
<code c>
void evas_canvas_key_modifier_del(Eo *obj, const char *keyname);
</code>

%%Removes the %%''keyname''%% key from the current list of modifier keys on canvas %%''e''%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_modifier_mask_get|key_modifier_mask_get]]**
<code c>
Evas_Modifier_Mask evas_canvas_key_modifier_mask_get(const Eo *obj, const char *keyname);
</code>

%%Creates a bit mask from the %%''keyname''%% modifier key. Values returned from different calls to it may be ORed together, naturally.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_modifier_off|key_modifier_off]]**
<code c>
void evas_canvas_key_modifier_off(Eo *obj, const char *keyname);
</code>

%%Disables or turns off programmatically the modifier key with name %%''keyname''%% for the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:key_modifier_on|key_modifier_on]]**
<code c>
void evas_canvas_key_modifier_on(Eo *obj, const char *keyname);
</code>

%%Enables or turns on programmatically the modifier key with name %%''keyname''%% for the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:nochange_pop|nochange_pop]]**
<code c>
void evas_canvas_nochange_pop(Eo *obj);
</code>

%%Pop the nochange flag down 1.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:nochange_push|nochange_push]]**
<code c>
void evas_canvas_nochange_push(Eo *obj);
</code>

%%Push the nochange flag up 1%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:norender|norender]]**
<code c>
void evas_canvas_norender(Eo *obj);
</code>

%%Update the canvas internal objects but not triggering immediate renderization.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:object_name_find|object_name_find]]**
<code c>
Efl_Canvas_Object *evas_canvas_object_name_find(const Eo *obj, const char *name);
</code>

%%Retrieves the object on the given evas with the given name.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:object_top_at_xy_get|object_top_at_xy_get]]**
<code c>
Efl_Canvas_Object *evas_canvas_object_top_at_xy_get(const Eo *obj, Evas_Coord x, Evas_Coord y, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve the Evas object stacked at the top of a given position in a canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:object_top_in_rectangle_get|object_top_in_rectangle_get]]**
<code c>
Efl_Canvas_Object *evas_canvas_object_top_in_rectangle_get(const Eo *obj, Evas_Coord x, Evas_Coord y, Evas_Coord w, Evas_Coord h, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve the Evas object stacked at the top of a given rectangular region in a canvas%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:objects_at_xy_get|objects_at_xy_get]]**
<code c>
Eina_List *evas_canvas_objects_at_xy_get(const Eo *obj, Evas_Coord x, Evas_Coord y, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve a list of Evas objects lying over a given position in a canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:objects_in_rectangle_get|objects_in_rectangle_get]]**
<code c>
Eina_List *evas_canvas_objects_in_rectangle_get(const Eo *obj, Evas_Coord x, Evas_Coord y, Evas_Coord w, Evas_Coord h, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Get all objects in the given rectangle%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:obscured_clear|obscured_clear]]**
<code c>
void evas_canvas_obscured_clear(Eo *obj);
</code>

%%Remove all "obscured regions" from an Evas canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:obscured_rectangle_add|obscured_rectangle_add]]**
<code c>
void evas_canvas_obscured_rectangle_add(Eo *obj, int x, int y, int w, int h);
</code>

%%Add an "obscured region" to an Evas canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render2_updates|render2_updates]]**
<code c>
Eina_List *evas_canvas_render2_updates(Eo *obj);
</code>

%%Render the given Evas canvas using the new rendering infra.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render2|render2]]**
<code c>
Eina_Bool evas_canvas_render2(Eo *obj);
</code>

%%Render the given Evas canvas using the new rendering infra.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render_async|render_async]]**
<code c>
Eina_Bool evas_canvas_render_async(Eo *obj);
</code>

%%Render the given Evas canvas asynchronously.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render_dump|render_dump]]**
<code c>
void evas_canvas_render_dump(Eo *obj);
</code>

%%Make the canvas discard as much data as possible used by the engine at runtime.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render_idle_flush|render_idle_flush]]**
<code c>
void evas_canvas_render_idle_flush(Eo *obj);
</code>

%%Make the canvas discard internally cached data used for rendering.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render_updates|render_updates]]**
<code c>
Eina_List *evas_canvas_render_updates(Eo *obj);
</code>

%%Force immediate renderization of the given Evas canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:render|render]]**
<code c>
void evas_canvas_render(Eo *obj);
</code>

%%Force renderization of the given canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:seat_focus_in|seat_focus_in]]**
<code c>
void evas_canvas_seat_focus_in(Eo *obj, Efl_Input_Device *seat);
</code>

%%Inform to the evas that it got the focus from a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:seat_focus_out|seat_focus_out]]**
<code c>
void evas_canvas_seat_focus_out(Eo *obj, Efl_Input_Device *seat);
</code>

%%Inform to the evas that it lost the focus from a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:seat_key_lock_off|seat_key_lock_off]]**
<code c>
void evas_canvas_seat_key_lock_off(Eo *obj, const char *keyname, Efl_Input_Device *seat);
</code>

%%Disables or turns off programmatically the lock key with name %%''keyname''%% for a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:seat_key_lock_on|seat_key_lock_on]]**
<code c>
void evas_canvas_seat_key_lock_on(Eo *obj, const char *keyname, Efl_Input_Device *seat);
</code>

%%Enables or turns on programmatically the lock key with name %%''keyname''%% for a give seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:seat_key_modifier_off|seat_key_modifier_off]]**
<code c>
void evas_canvas_seat_key_modifier_off(Eo *obj, const char *keyname, Efl_Input_Device *seat);
</code>

%%Disables or turns off programmatically the modifier key with name %%''keyname''%% for a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:seat_key_modifier_on|seat_key_modifier_on]]**
<code c>
void evas_canvas_seat_key_modifier_on(Eo *obj, const char *keyname, Efl_Input_Device *seat);
</code>

%%Enables or turns on programmatically the modifier key with name %%''keyname''%% for a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:smart_objects_calculate|smart_objects_calculate]]**
<code c>
void evas_canvas_smart_objects_calculate(Eo *obj);
</code>

%%Call user-provided %%''calculate''%% smart functions and unset the flag signalling that the object needs to get recalculated to all smart objects in the canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:sync|sync]]**
<code c>
void evas_canvas_sync(Eo *obj);
</code>

%%Sync evas canvas%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:touch_point_list_count|touch_point_list_count]]**
<code c>
unsigned int evas_canvas_touch_point_list_count(Eo *obj);
</code>

%%Get the number of touched point in the evas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:touch_point_list_nth_id_get|touch_point_list_nth_id_get]]**
<code c>
int evas_canvas_touch_point_list_nth_id_get(Eo *obj, unsigned int n);
</code>

%%This function returns the %%''id''%% of nth touch point.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:touch_point_list_nth_state_get|touch_point_list_nth_state_get]]**
<code c>
Evas_Touch_Point_State evas_canvas_touch_point_list_nth_state_get(Eo *obj, unsigned int n);
</code>

%%This function returns the %%''state''%% of nth touch point.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:touch_point_list_nth_xy_get|touch_point_list_nth_xy_get]]**
<code c>
void evas_canvas_touch_point_list_nth_xy_get(Eo *obj, unsigned int n, double *x, double *y);
</code>

%%This function returns the nth touch point's coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:method:tree_objects_at_xy_get|tree_objects_at_xy_get]]**
<code c>
Eina_List *evas_canvas_tree_objects_at_xy_get(Eo *obj, Efl_Canvas_Object *stop, int x, int y);
</code>

%%Retrieve a list of Evas objects lying over a given position in a canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:changed|changed]]** //**(get)**//
<code c>
Eina_Bool evas_canvas_changed_get(const Eo *obj);
</code>

%%Get the changed marker for the canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:data_attach|data_attach]]** //**(get, set)**//
<code c>
void *evas_canvas_data_attach_get(const Eo *obj);
void evas_canvas_data_attach_set(Eo *obj, void *data);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas:property:default_device|default_device]]** //**(get)**//
<code c>
Efl_Input_Device *evas_canvas_default_device_get(const Eo *obj, Efl_Input_Device_Class type);
</code>

%%Return the default device of a given type. @note Currently Evas only creates a seat, mouse and keyboard.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:engine_info|engine_info]]** //**(get, set)**//
<code c>
Evas_Engine_Info *evas_canvas_engine_info_get(const Eo *obj);
Eina_Bool evas_canvas_engine_info_set(Eo *obj, Evas_Engine_Info *info);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas:property:event_default_flags|event_default_flags]]** //**(get, set)**//
<code c>
Efl_Input_Flags evas_canvas_event_default_flags_get(const Eo *obj);
void evas_canvas_event_default_flags_set(Eo *obj, Efl_Input_Flags flags);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas:property:event_down_count|event_down_count]]** //**(get)**//
<code c>
int evas_canvas_event_down_count_get(const Eo *obj);
</code>

%%Get the number of mouse or multi presses currently active.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:focus_state|focus_state]]** //**(get)**//
<code c>
Eina_Bool evas_canvas_focus_state_get(const Eo *obj);
</code>

%%Get the focus state for the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:focus|focus]]** //**(get)**//
<code c>
Efl_Canvas_Object *evas_canvas_focus_get(const Eo *obj);
</code>

%%Retrieve the object focused by the default seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:font_cache|font_cache]]** //**(get, set)**//
<code c>
int evas_canvas_font_cache_get(const Eo *obj);
void evas_canvas_font_cache_set(Eo *obj, int size);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas:property:font_hinting|font_hinting]]** //**(get, set)**//
<code c>
Evas_Font_Hinting_Flags evas_canvas_font_hinting_get(const Eo *obj);
void evas_canvas_font_hinting_set(Eo *obj, Evas_Font_Hinting_Flags hinting);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas:property:image_cache|image_cache]]** //**(get, set)**//
<code c>
int evas_canvas_image_cache_get(const Eo *obj);
void evas_canvas_image_cache_set(Eo *obj, int size);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas:property:image_max_size|image_max_size]]** //**(get)**//
<code c>
Eina_Bool evas_canvas_image_max_size_get(const Eo *obj, int *maxw, int *maxh);
</code>

%%Get the maximum image size evas can possibly handle.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:key_lock|key_lock]]** //**(get)**//
<code c>
const Evas_Lock *evas_canvas_key_lock_get(const Eo *obj);
</code>

%%Returns a handle to the list of lock keys registered in the canvas %%''e''%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:key_modifier|key_modifier]]** //**(get)**//
<code c>
const Evas_Modifier *evas_canvas_key_modifier_get(const Eo *obj);
</code>

%%Returns a handle to the list of modifier keys registered in the canvas %%''e''%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:object_bottom|object_bottom]]** //**(get)**//
<code c>
Efl_Canvas_Object *evas_canvas_object_bottom_get(const Eo *obj);
</code>

%%Get the lowest (stacked) Evas object on the canvas %%''e''%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:object_top|object_top]]** //**(get)**//
<code c>
Efl_Canvas_Object *evas_canvas_object_top_get(const Eo *obj);
</code>

%%Get the highest (stacked) Evas object on the canvas %%''e''%%.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_button_down_mask_by_device|pointer_button_down_mask_by_device]]** //**(get)**//
<code c>
unsigned int evas_canvas_pointer_button_down_mask_by_device_get(const Eo *obj, Efl_Input_Device *dev);
</code>

%%Returns a bitmask with the mouse buttons currently pressed, set to 1.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_button_down_mask|pointer_button_down_mask]]** //**(get)**//
<code c>
unsigned int evas_canvas_pointer_button_down_mask_get(const Eo *obj);
</code>

%%Returns a bitmask with the default mouse buttons currently pressed, set to 1.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_canvas_xy_by_device|pointer_canvas_xy_by_device]]** //**(get)**//
<code c>
void evas_canvas_pointer_canvas_xy_by_device_get(const Eo *obj, Efl_Input_Device *dev, Evas_Coord *x, Evas_Coord *y);
</code>

%%This function returns the current known default pointer coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_canvas_xy|pointer_canvas_xy]]** //**(get)**//
<code c>
void evas_canvas_pointer_canvas_xy_get(const Eo *obj, Evas_Coord *x, Evas_Coord *y);
</code>

%%This function returns the current known default pointer coordinates%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_inside_by_device|pointer_inside_by_device]]** //**(get)**//
<code c>
Eina_Bool evas_canvas_pointer_inside_by_device_get(const Eo *obj, Efl_Input_Device *dev);
</code>

%%Returns whether the mouse pointer is logically inside the canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool evas_canvas_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the default mouse pointer is logically inside the canvas.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_output_xy_by_device|pointer_output_xy_by_device]]** //**(get)**//
<code c>
void evas_canvas_pointer_output_xy_by_device_get(const Eo *obj, Efl_Input_Device *dev, int *x, int *y);
</code>

%%This function returns the current known pointer coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:pointer_output_xy|pointer_output_xy]]** //**(get)**//
<code c>
void evas_canvas_pointer_output_xy_get(const Eo *obj, int *x, int *y);
</code>

%%This function returns the current known default pointer coordinates.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:seat_focus_state|seat_focus_state]]** //**(get)**//
<code c>
Eina_Bool evas_canvas_seat_focus_state_get(const Eo *obj, Efl_Input_Device *seat);
</code>

%%Get the focus state by a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Efl_Canvas_Object *evas_canvas_seat_focus_get(const Eo *obj, Efl_Input_Device *seat);
</code>

%%Return the focused object by a given seat.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:property:smart_objects_calculate_count|smart_objects_calculate_count]]** //**(get)**//
<code c>
int evas_canvas_smart_objects_calculate_count_get(const Eo *obj);
</code>

%%This gets the internal counter that counts the number of smart calculations.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:evas:canvas:property:loop|loop]]** //**(get)**// //[Overridden here]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas:method:event_freeze|event_freeze]]** //[Overridden here]//
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas:method:event_thaw|event_thaw]]** //[Overridden here]//
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas:method:provider_find|provider_find]]** //[Overridden here]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:method:object_top_at_xy_get|object_top_at_xy_get]]**
<code c>
Efl_Gfx *efl_canvas_object_top_at_xy_get(const Eo *obj, int x, int y, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve the object stacked at the top of a given position in a canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:method:object_top_in_rectangle_get|object_top_in_rectangle_get]]**
<code c>
Efl_Gfx *efl_canvas_object_top_in_rectangle_get(const Eo *obj, int x, int y, int w, int h, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve the Evas object stacked at the top of a given rectangular region in a canvas%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:method:objects_at_xy_get|objects_at_xy_get]]**
<code c>
Eina_Iterator *efl_canvas_objects_at_xy_get(const Eo *obj, int x, int y, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve a list of objects lying over a given position in a canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:method:objects_in_rectangle_get|objects_in_rectangle_get]]**
<code c>
Eina_Iterator *efl_canvas_objects_in_rectangle_get(const Eo *obj, int x, int y, int w, int h, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>

%%Retrieve a list of objects lying over a given rectangular region in a canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:method:smart_objects_calculate|smart_objects_calculate]]**
<code c>
void efl_canvas_smart_objects_calculate(Eo *obj);
</code>

%%Call user-provided %%''calculate''%% smart functions and unset the flag signalling that the object needs to get recalculated to all smart objects in the canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:property:image_max_size|image_max_size]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_image_max_size_get(const Eo *obj, int *maxw, int *maxh);
</code>

%%Get the maximum image size evas can possibly handle.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:method:pointer_iterate|pointer_iterate]]**
<code c>
Eina_Iterator *efl_input_pointer_iterate(const Eo *obj, Eina_Bool hover);
</code>

%%Returns an iterator over the current known pointer positions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_input_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the mouse pointer is logically inside the canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_xy|pointer_xy]]** //**(get)**//
<code c>
void efl_input_pointer_xy_get(const Eo *obj, int *x, int *y);
</code>

%%This function returns the current known pointer coordinates%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:seat_event_filter|seat_event_filter]]** //**(get, set)**//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 

===== Events =====

**[[:docs:efl:auto:class:evas:canvas:event:axis_update|axis,update]]**
<code c>
EVAS_CANVAS_EVENT_AXIS_UPDATE(void, @beta)
</code>

%%Called on axis update%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:event:render_flush_post|render,flush,post]]**
<code c>
EVAS_CANVAS_EVENT_RENDER_FLUSH_POST(void, @beta)
</code>

%%Called on render flush post phase%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:event:render_flush_pre|render,flush,pre]]**
<code c>
EVAS_CANVAS_EVENT_RENDER_FLUSH_PRE(void, @beta)
</code>

%%Called on render flush pre phase%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas:event:viewport_resize|viewport,resize]]**
<code c>
EVAS_CANVAS_EVENT_VIEWPORT_RESIZE(void, @beta)
</code>

%%Called on viewport resize%%\\ 
\\ 
==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:animator|Efl.Animator]].**[[:docs:efl:auto:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:device_added|device,added]]**
<code c>
EFL_CANVAS_EVENT_DEVICE_ADDED(Efl_Input_Device *)
</code>

%%Called when input device was added%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:device_changed|device,changed]]**
<code c>
EFL_CANVAS_EVENT_DEVICE_CHANGED(Efl_Input_Device *)
</code>

%%Called when input device changed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:device_removed|device,removed]]**
<code c>
EFL_CANVAS_EVENT_DEVICE_REMOVED(Efl_Input_Device *)
</code>

%%Called when input device was removed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:focus_in|focus,in]]**
<code c>
EFL_CANVAS_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%Called when canvas got focus%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:focus_out|focus,out]]**
<code c>
EFL_CANVAS_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%Called when canvas lost focus%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:object_focus_in|object,focus,in]]**
<code c>
EFL_CANVAS_EVENT_OBJECT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%Called when object got focus%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:object_focus_out|object,focus,out]]**
<code c>
EFL_CANVAS_EVENT_OBJECT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%Called when object lost focus%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:render_post|render,post]]**
<code c>
EFL_CANVAS_EVENT_RENDER_POST(void)
</code>

%%Called when post render happens%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:canvas|Efl.Canvas]].**[[:docs:efl:auto:interface:efl:canvas:event:render_pre|render,pre]]**
<code c>
EFL_CANVAS_EVENT_RENDER_PRE(void)
</code>

%%Called when pre render happens%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
