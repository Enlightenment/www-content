<title>Evas.Canvas3D.Primitive</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    evas_canvas3d_primitive [fillcolor = "black", label = "Evas.Canvas3D.Primitive", color = "gray15", fontcolor = "white", style = "filled"]
    evas_canvas3d_object [fillcolor = "gray15", label = "Evas.Canvas3D.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    evas_canvas3d_primitive -> evas_canvas3d_object
    evas_canvas3d_object -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:evas:canvas3d:primitive|Evas.Canvas3D.Primitive]] //(class)//**
    * [[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Evas 3D canvas primitive class%%

{{page>:docs:efl:user:class:evas:canvas3d:primitive:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:evas:canvas3d:primitive:property:form|form]]** //**(get, set)**//
<code c>
Evas_Canvas3D_Mesh_Primitive evas_canvas3d_primitive_form_get(const Eo *obj);
void evas_canvas3d_primitive_form_set(Eo *obj, Evas_Canvas3D_Mesh_Primitive form);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas3d:primitive:property:mode|mode]]** //**(get, set)**//
<code c>
Evas_Canvas3D_Primitive_Mode evas_canvas3d_primitive_mode_get(const Eo *obj);
void evas_canvas3d_primitive_mode_set(Eo *obj, Evas_Canvas3D_Primitive_Mode mode);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas3d:primitive:property:precision|precision]]** //**(get, set)**//
<code c>
int evas_canvas3d_primitive_precision_get(const Eo *obj);
void evas_canvas3d_primitive_precision_set(Eo *obj, int precision);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas3d:primitive:property:ratio|ratio]]** //**(get, set)**//
<code c>
Evas_Real evas_canvas3d_primitive_ratio_get(const Eo *obj);
void evas_canvas3d_primitive_ratio_set(Eo *obj, Evas_Real ratio);
</code>

\\ 
**[[:docs:efl:auto:class:evas:canvas3d:primitive:property:surface|surface]]** //**(set)**//
<code c>
void evas_canvas3d_primitive_surface_set(Eo *obj, Evas_Canvas3D_Surface_Func *surface);
</code>

%%Set the surface of the given primitive.%%\\ 
\\ 
**[[:docs:efl:auto:class:evas:canvas3d:primitive:property:tex_scale|tex_scale]]** //**(get, set)**//
<code c>
void evas_canvas3d_primitive_tex_scale_get(const Eo *obj, Evas_Real *tex_scale_x, Evas_Real *tex_scale_y);
void evas_canvas3d_primitive_tex_scale_set(Eo *obj, Evas_Real tex_scale_x, Evas_Real tex_scale_y);
</code>

\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:event_callback_del|event_callback_del]]** //[Overridden in [[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]]]//
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:event_callback_priority_add|event_callback_priority_add]]** //[Overridden in [[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]]]//
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:provider_find|provider_find]]** //[Overridden in [[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas3d:primitive:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:evas:canvas3d:primitive:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:callback_register|callback_register]]**
<code c>
void evas_canvas3d_object_callback_register(Eo *obj, const char *event, const void *data);
</code>

%%Pure virtual register samrt callback function.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:callback_unregister|callback_unregister]]**
<code c>
void evas_canvas3d_object_callback_unregister(Eo *obj, const char *event);
</code>

%%Pure virtual unregister smart callback function.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:change_notify|change_notify]]**
<code c>
void evas_canvas3d_object_change_notify(Eo *obj, Evas_Canvas3D_State state, Evas_Canvas3D_Object *ref);
</code>

%%Pure virtual change_notify function.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:change|change]]**
<code c>
void evas_canvas3d_object_change(Eo *obj, Evas_Canvas3D_State state, Evas_Canvas3D_Object *ref);
</code>

%%Notify the object regarding its  state change.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:dirty_get|dirty_get]]**
<code c>
Eina_Bool evas_canvas3d_object_dirty_get(const Eo *obj, Evas_Canvas3D_State state);
</code>

%%Returns the status of a particular state of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:type_get|type_get]]**
<code c>
Evas_Canvas3D_Object_Type evas_canvas3d_object_type_get(const Eo *obj);
</code>

%%Returns the type of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:type_set|type_set]]**
<code c>
void evas_canvas3d_object_type_set(Eo *obj, Evas_Canvas3D_Object_Type type);
</code>

%%Sets the type of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:update_notify|update_notify]]**
<code c>
void evas_canvas3d_object_update_notify(Eo *obj);
</code>

%%Pure virtual update_notify function.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:method:update|update]]**
<code c>
void evas_canvas3d_object_update(Eo *obj);
</code>

%%Update request for the object.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:event:clicked|clicked]]**
<code c>
EVAS_CANVAS3D_OBJECT_EVENT_CLICKED(void)
</code>

%%Clicked Event.%%\\ 
\\ 
[[:docs:efl:auto:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:docs:efl:auto:class:evas:canvas3d:object:event:collision|collision]]**
<code c>
EVAS_CANVAS3D_OBJECT_EVENT_COLLISION(void)
</code>

%%Collision Event.%%\\ 
\\ 
