<title>Elm.Notify.timeout</title>
===== Signature =====

<code>
@property Elm.Notify.timeout {
    get {
        values {
            timeout: double;
        }
    }
    set {
        values {
            timeout: double;
        }
    }
}
</code>

===== C signature =====

<code c>
double elm_obj_notify_timeout_get(const Eo *obj);
void elm_obj_notify_timeout_set(Eo *obj, double timeout);
</code>

===== Values =====

  * **timeout** - %%The timeout in seconds%%
===== Description =====



{{page>:docs:efl:user:class:elm:notify:property:timeout:description&nodate&nolink&nouser}}

==== Getter ====

%%Return the timeout value (in seconds)%%

{{page>:docs:efl:user:class:elm:notify:property:timeout:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Set the time interval after which the notify window is going to be hidden.%%

%%This function sets a timeout and starts the timer controlling when the notify is hidden. Since calling evas_object_show() on a notify restarts the timer controlling when the notify is hidden, setting this before the notify is shown will in effect mean starting the timer when the notify is shown.%%

<note>
%%Set a value <= 0.0 to disable a running timer.%%
</note>

<note>
%%If the value > 0.0 and the notify is previously visible, the timer will be started with this value, canceling any running timer.%%
</note>{{page>:docs:efl:user:class:elm:notify:property:timeout:getter_description&nodate&nolink&nouser}}


