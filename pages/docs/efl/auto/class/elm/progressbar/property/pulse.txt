<title>Elm.Progressbar.pulse</title>
===== Signature =====

<code>
@property pulse {
    get {
        values {
            pulse: bool;
        }
    }
    set {
        values {
            pulse: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool elm_obj_progressbar_pulse_get(const Eo *obj);
void elm_obj_progressbar_pulse_set(Eo *obj, Eina_Bool pulse);
</code>

===== Values =====

  * **pulse** - %%%%''true''%% to put %%''obj''%% in pulsing mode, %%''false''%% to put it back to its default one%%
===== Description =====

%%Control whether a given progress bar widget is at "pulsing mode" or not.%%

%%By default, progress bars will display values from the low to high value boundaries. There are, though, contexts in which the progress of a given task is unknown. For such cases, one can set a progress bar widget to a "pulsing state", to give the user an idea that some computation is being held, but without exact progress values. In the default theme, it will animate its bar with the contents filling in constantly and back to non-filled, in a loop. To start and stop this pulsing animation, one has to explicitly call elm_progressbar_pulse().%%{{page>:docs:efl:user:class:elm:progressbar:property:pulse:description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Elm.Progressbar.pulse**

