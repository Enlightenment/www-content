<title>Elm.Entry</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_entry [fillcolor = "black", label = "Elm.Entry", color = "gray15", fontcolor = "white", style = "filled"]
    elm_layout [fillcolor = "gray15", label = "Elm.Layout", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget [fillcolor = "gray15", label = "Elm.Widget", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_accessible [fillcolor = "gray15", label = "Elm.Interface.Atspi_Accessible", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_component [fillcolor = "gray15", label = "Elm.Interface.Atspi_Component", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    elm_interface_scrollable [fillcolor = "gray15", label = "Elm.Interface_Scrollable", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_scrollable [fillcolor = "gray15", label = "Efl.Ui.Scrollable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_clickable [fillcolor = "gray15", label = "Efl.Ui.Clickable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    elm_interface_atspi_text [fillcolor = "gray15", label = "Elm.Interface.Atspi.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    elm_interface_atspi_text_editable [fillcolor = "gray15", label = "Elm.Interface.Atspi.Text.Editable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_selectable [fillcolor = "gray15", label = "Efl.Ui.Selectable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_scrollable [fillcolor = "gray15", label = "Efl.Ui.Scrollable", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    elm_entry -> elm_layout
    elm_layout -> elm_widget
    elm_widget -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    elm_widget -> elm_interface_atspi_accessible
    elm_interface_atspi_accessible -> efl_interface
    elm_interface_atspi_accessible -> efl_object
    elm_widget -> elm_interface_atspi_component
    elm_layout -> efl_part
    elm_layout -> efl_container
    efl_container -> efl_gfx
    elm_layout -> efl_file
    elm_entry -> elm_interface_scrollable
    elm_interface_scrollable -> efl_ui_scrollable
    elm_interface_scrollable -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    elm_entry -> efl_ui_clickable
    elm_entry -> elm_interface_atspi_text
    elm_entry -> elm_interface_atspi_text_editable
    elm_entry -> efl_file
    elm_entry -> efl_ui_selectable
    elm_entry -> efl_ui_scrollable
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:elm:entry|Elm.Entry]] //(class)//**
    * [[:docs:efl:auto:class:elm:layout|Elm.Layout]] //(class)//
      * [[:docs:efl:auto:class:elm:widget|Elm.Widget]] //(class)//
        * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
            * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]] //(mixin)//
          * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]] //(mixin)//
      * [[:docs:efl:auto:interface:efl:part|Efl.Part]] //(interface)//
      * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
        * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//
    * [[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]] //(mixin)//
      * [[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
      * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
        * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
          * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
          * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]] //(interface)//
    * [[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]] //(interface)//
    * [[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]] //(interface)//
    * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//
    * [[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]] //(interface)//
    * [[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//

===== Description =====

%%Elementary entry class%%

{{page>:docs:efl:user:class:elm:entry:description&nodate&nolink&nouser}}

===== Methods =====

^ Method name ^ Brief description ^
| [[:docs:efl:auto:class:elm:entry:method:anchor_hover_end|anchor_hover_end]] | %%Ends the hover popup in the entry%% |
| [[:docs:efl:auto:class:elm:entry:method:calc_force|calc_force]] | %%Forces calculation of the entry size and text layouting.%% |
| [[:docs:efl:auto:class:elm:entry:method:context_menu_clear|context_menu_clear]] | %%This clears and frees the items in a entry's contextual (longpress) menu.%% |
| [[:docs:efl:auto:class:elm:entry:method:context_menu_item_add|context_menu_item_add]] | %%This adds an item to the entry's contextual menu.%% |
| [[:docs:efl:auto:class:elm:entry:method:cursor_down|cursor_down]] | %%This moves the cursor one line down within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:cursor_next|cursor_next]] | %%This moves the cursor one place to the right within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:cursor_prev|cursor_prev]] | %%This moves the cursor one place to the left within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:cursor_selection_begin|cursor_selection_begin]] | %%This begins a selection within the entry as though the user were holding down the mouse button to make a selection.%% |
| [[:docs:efl:auto:class:elm:entry:method:cursor_selection_end|cursor_selection_end]] | %%This ends a selection within the entry as though the user had just released the mouse button while making a selection.%% |
| [[:docs:efl:auto:class:elm:entry:method:cursor_up|cursor_up]] | %%This moves the cursor one line up within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:entry_append|entry_append]] | %%Appends %%''str''%% to the text of the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:entry_insert|entry_insert]] | %%Inserts the given text into the entry at the current cursor position.%% |
| [[:docs:efl:auto:class:elm:entry:method:file_save|file_save]] | %%This function writes any changes made to the file set with @ref elm_entry_file_set.%% |
| [[:docs:efl:auto:class:elm:entry:method:imf_context_reset|imf_context_reset]] | %%Reset the input method context of the entry if needed.%% |
| [[:docs:efl:auto:class:elm:entry:method:input_panel_hide|input_panel_hide]] | %%Hide the input panel (virtual keyboard).%% |
| [[:docs:efl:auto:class:elm:entry:method:input_panel_imdata_get|input_panel_imdata_get]] | %%Get the specific data of the current input panel.%% |
| [[:docs:efl:auto:class:elm:entry:method:input_panel_imdata_set|input_panel_imdata_set]] | %%Set the input panel-specific data to deliver to the input panel.%% |
| [[:docs:efl:auto:class:elm:entry:method:input_panel_show|input_panel_show]] | %%Show the input panel (virtual keyboard) based on the input panel property of entry such as layout, autocapital types, and so on.%% |
| [[:docs:efl:auto:class:elm:entry:method:is_empty|is_empty]] | %%Get whether the entry is empty.%% |
| [[:docs:efl:auto:class:elm:entry:method:item_provider_append|item_provider_append]] | %%This appends a custom item provider to the list for that entry%% |
| [[:docs:efl:auto:class:elm:entry:method:item_provider_prepend|item_provider_prepend]] | %%This prepends a custom item provider to the list for that entry%% |
| [[:docs:efl:auto:class:elm:entry:method:item_provider_remove|item_provider_remove]] | %%This removes a custom item provider to the list for that entry%% |
| [[:docs:efl:auto:class:elm:entry:method:markup_filter_append|markup_filter_append]] | %%Append a markup filter function for text inserted in the entry%% |
| [[:docs:efl:auto:class:elm:entry:method:markup_filter_prepend|markup_filter_prepend]] | %%Prepend a markup filter function for text inserted in the entry%% |
| [[:docs:efl:auto:class:elm:entry:method:markup_filter_remove|markup_filter_remove]] | %%Remove a markup filter from the list%% |
| [[:docs:efl:auto:class:elm:entry:method:select_all|select_all]] | %%This selects all text within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:select_none|select_none]] | %%This drops any existing text selection within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:selection_copy|selection_copy]] | %%This executes a "copy" action on the selected text in the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:selection_cut|selection_cut]] | %%This executes a "cut" action on the selected text in the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:selection_paste|selection_paste]] | %%This executes a "paste" action in the entry.%% |
| [[:docs:efl:auto:class:elm:entry:method:text_style_user_peek|text_style_user_peek]] | %%Get the style on the top of user style stack.%% |
| [[:docs:efl:auto:class:elm:entry:method:text_style_user_pop|text_style_user_pop]] | %%Remove the style in the top of user style stack.%% |
| [[:docs:efl:auto:class:elm:entry:method:text_style_user_push|text_style_user_push]] | %%Push the style to the top of user style stack. If there is styles in the user style stack, the properties in the top style of user style stack will replace the properties in current theme. The input style is specified in format tag='property=value' (i.e. DEFAULT='font=Sans font_size=60'hilight=' + font_weight=Bold').%% |

===== Properties =====

^ Property name ^ Brief description ^
| [[:docs:efl:auto:class:elm:entry:property:anchor_hover_parent|anchor_hover_parent]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:anchor_hover_style|anchor_hover_style]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:autocapital_type|autocapital_type]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:autosave|autosave]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:cnp_mode|cnp_mode]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:context_menu_disabled|context_menu_disabled]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:cursor_begin|cursor_begin]] //(set)// | %%This moves the cursor to the beginning of the entry.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_content|cursor_content]] //(get)// | %%Get the character pointed by the cursor at its current position.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_end|cursor_end]] //(set)// | %%This moves the cursor to the end of the entry.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_geometry|cursor_geometry]] //(get)// | %%This function returns the geometry of the cursor.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_is_format|cursor_is_format]] //(get)// | %%Get whether a format node exists at the current cursor position.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_is_visible_format|cursor_is_visible_format]] //(get)// | %%Get if the current cursor position holds a visible format node.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_line_begin|cursor_line_begin]] //(set)// | %%This moves the cursor to the beginning of the current line.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_line_end|cursor_line_end]] //(set)// | %%This moves the cursor to the end of the current line.%% |
| [[:docs:efl:auto:class:elm:entry:property:cursor_pos|cursor_pos]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:editable|editable]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:end_visible|end_visible]] //(set)// | %%Sets the visibility of the end widget of the entry, set by @ref elm_object_part_content_set(ent, "end", content).%% |
| [[:docs:efl:auto:class:elm:entry:property:file_text_format|file_text_format]] //(set)// | %%Text format used to load and save the file, which could be plain text or markup text.%% |
| [[:docs:efl:auto:class:elm:entry:property:icon_visible|icon_visible]] //(set)// | %%Sets the visibility of the left-side widget of the entry, set by @ref elm_object_part_content_set.%% |
| [[:docs:efl:auto:class:elm:entry:property:imf_context|imf_context]] //(get)// | %%Returns the input method context of the entry.%% |
| [[:docs:efl:auto:class:elm:entry:property:input_hint|input_hint]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_enabled|input_panel_enabled]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_language|input_panel_language]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_layout_variation|input_panel_layout_variation]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_layout|input_panel_layout]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_return_key_autoenabled|input_panel_return_key_autoenabled]] //(set)// | %%Set whether the return key on the input panel is disabled automatically when entry has no text.%% |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_return_key_disabled|input_panel_return_key_disabled]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_return_key_type|input_panel_return_key_type]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:input_panel_show_on_demand|input_panel_show_on_demand]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:line_wrap|line_wrap]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:password|password]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:prediction_allow|prediction_allow]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:scrollable|scrollable]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:select_allow|select_allow]] //(get, set)// | %%Allow selection in the entry.%% |
| [[:docs:efl:auto:class:elm:entry:property:select_region|select_region]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:selection_handler_disabled|selection_handler_disabled]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:selection|selection]] //(get)// | %%Get any selected text within the entry.%% |
| [[:docs:efl:auto:class:elm:entry:property:single_line|single_line]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:entry:property:textblock|textblock]] //(get)// | %%Returns the actual textblock object of the entry.%% |

===== Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:elm:entry:event:aborted|aborted]] | %%Called when entry was aborted%% |
| [[:docs:efl:auto:class:elm:entry:event:activated|activated]] | %%Called when entry got activated%% |
| [[:docs:efl:auto:class:elm:entry:event:anchor_clicked|anchor,clicked]] | %%Called when anchor was clicked%% |
| [[:docs:efl:auto:class:elm:entry:event:anchor_down|anchor,down]] | %%Called on anchor down%% |
| [[:docs:efl:auto:class:elm:entry:event:anchor_hover_opened|anchor,hover,opened]] | %%Called when hover opened%% |
| [[:docs:efl:auto:class:elm:entry:event:anchor_in|anchor,in]] | %%Called on anchor in%% |
| [[:docs:efl:auto:class:elm:entry:event:anchor_out|anchor,out]] | %%Called on anchor out%% |
| [[:docs:efl:auto:class:elm:entry:event:anchor_up|anchor,up]] | %%called on anchor up%% |
| [[:docs:efl:auto:class:elm:entry:event:changed_user|changed,user]] | %%Called when the object changed due to user interaction%% |
| [[:docs:efl:auto:class:elm:entry:event:changed|changed]] | %%Called when entry changed%% |
| [[:docs:efl:auto:class:elm:entry:event:context_open|context,open]] | %%Called when context menu was opened%% |
| [[:docs:efl:auto:class:elm:entry:event:cursor_changed_manual|cursor,changed,manual]] | %%Called on manual cursor change%% |
| [[:docs:efl:auto:class:elm:entry:event:cursor_changed|cursor,changed]] | %%Called on cursor changed%% |
| [[:docs:efl:auto:class:elm:entry:event:maxlength_reached|maxlength,reached]] | %%Called when maximum entry length has been reached%% |
| [[:docs:efl:auto:class:elm:entry:event:preedit_changed|preedit,changed]] | %%Called when entry preedit changed%% |
| [[:docs:efl:auto:class:elm:entry:event:press|press]] | %%Called when entry pressed%% |
| [[:docs:efl:auto:class:elm:entry:event:redo_request|redo,request]] | %%Called when redo was requested%% |
| [[:docs:efl:auto:class:elm:entry:event:rejected|rejected]] | %%Called when entry was rejected%% |
| [[:docs:efl:auto:class:elm:entry:event:text_set_done|text,set,done]] | %%Called when text set finished%% |
| [[:docs:efl:auto:class:elm:entry:event:undo_request|undo,request]] | %%Called when undo was requested%% |
| [[:docs:efl:auto:class:elm:entry:event:validate|validate]] | %%Called when validating%% |
