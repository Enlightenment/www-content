<title>Elm.Progressbar</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_progressbar [fillcolor = "black", label = "Elm.Progressbar", color = "gray15", fontcolor = "white", style = "filled"]
    elm_layout [fillcolor = "gray15", label = "Elm.Layout", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget [fillcolor = "gray15", label = "Elm.Widget", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_accessible [fillcolor = "gray15", label = "Elm.Interface.Atspi_Accessible", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_component [fillcolor = "gray15", label = "Elm.Interface.Atspi_Component", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_view [fillcolor = "gray15", label = "Efl.Ui.View", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_model_connect [fillcolor = "gray15", label = "Efl.Ui.Model.Connect", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_model_factory_connect [fillcolor = "gray15", label = "Efl.Ui.Model.Factory.Connect", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_progress [fillcolor = "gray15", label = "Efl.Ui.Progress", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_orientation [fillcolor = "gray15", label = "Efl.Orientation", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    elm_progressbar -> elm_layout
    elm_layout -> elm_widget
    elm_widget -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    elm_widget -> elm_interface_atspi_accessible
    elm_interface_atspi_accessible -> efl_interface
    elm_interface_atspi_accessible -> efl_object
    elm_widget -> elm_interface_atspi_component
    elm_layout -> efl_part
    elm_layout -> efl_container
    efl_container -> efl_gfx
    elm_layout -> efl_file
    elm_layout -> efl_ui_view
    elm_layout -> efl_ui_model_connect
    elm_layout -> efl_ui_model_factory_connect
    elm_progressbar -> efl_ui_progress
    elm_progressbar -> efl_orientation
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:elm:progressbar|Elm.Progressbar]] //(class)//**
    * [[:docs:efl:auto:class:elm:layout|Elm.Layout]] //(class)//
      * [[:docs:efl:auto:class:elm:widget|Elm.Widget]] //(class)//
        * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
            * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]] //(mixin)//
          * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]] //(mixin)//
      * [[:docs:efl:auto:interface:efl:part|Efl.Part]] //(interface)//
      * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
        * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//
      * [[:docs:efl:auto:interface:efl:ui:view|Efl.Ui.View]] //(interface)//
      * [[:docs:efl:auto:interface:efl:ui:model:connect|Efl.Ui.Model.Connect]] //(interface)//
      * [[:docs:efl:auto:interface:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]] //(interface)//
    * [[:docs:efl:auto:interface:efl:ui:progress|Efl.Ui.Progress]] //(interface)//
    * [[:docs:efl:auto:interface:efl:orientation|Efl.Orientation]] //(interface)//

===== Description =====

%%Elementary progressbar class%%

{{page>:docs:efl:user:class:elm:progressbar:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:elm:progressbar:method:is_pulsing_get|is_pulsing_get]]**
<code c>
Eina_Bool elm_obj_progressbar_is_pulsing_get(const Eo *obj);
</code>

%%Get the pulsing state on a given progressbar widget.%%\\ 
\\ 
**[[:docs:efl:auto:class:elm:progressbar:method:part_value_get|part_value_get]]**
<code c>
double elm_obj_progressbar_part_value_get(const Eo *obj, const char *part);
</code>

%%Get the progress value (in percentage) on a given progress bar widget for a particular part%%\\ 
\\ 
**[[:docs:efl:auto:class:elm:progressbar:method:part_value_set|part_value_set]]**
<code c>
void elm_obj_progressbar_part_value_set(Eo *obj, const char *part, double val);
</code>

%%Set the progress value (in percentage) on a given progress bar widget for the given part name%%\\ 
\\ 
**[[:docs:efl:auto:class:elm:progressbar:method:pulse|pulse]]**
<code c>
void elm_obj_progressbar_pulse(Eo *obj, Eina_Bool state);
</code>

%%Start/stop a given progress bar "pulsing" animation, if its under that mode%%\\ 
\\ 
**[[:docs:efl:auto:class:elm:progressbar:property:pulse|pulse]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_progressbar_pulse_get(const Eo *obj);
void elm_obj_progressbar_pulse_set(Eo *obj, Eina_Bool pulse);
</code>

%%Control whether a given progress bar widget is at "pulsing mode" or not.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:method:group_change|group_change]]**
<code c>
void efl_canvas_group_change(Eo *obj);
</code>

%%Marks the object as dirty.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:method:group_children_iterate|group_children_iterate]]**
<code c>
Eina_Iterator *efl_canvas_group_children_iterate(const Eo *obj);
</code>

%%Returns an iterator over the children of this object, that are canvas objects.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_group_need_recalculate_get(const Eo *obj);
void efl_canvas_group_need_recalculate_set(Eo *obj, Eina_Bool value);
</code>

%%Indicates that the group's layout need to be recalculated.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:layout:method:group_calculate|group_calculate]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_canvas_group_calculate(Eo *obj);
</code>

%%Triggers an immediate recalculation of this object's geometry.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:widget:method:group_member_add|group_member_add]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_canvas_group_member_add(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Set an Evas object as a member of a given smart object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:widget:method:group_member_del|group_member_del]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_canvas_group_member_del(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Removes a member object from a given smart object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
Efl_Text_Bidirectional_Type efl_canvas_object_paragraph_direction_get(const Eo *obj);
void efl_canvas_object_paragraph_direction_set(Eo *obj, Efl_Text_Bidirectional_Type dir);
</code>

%%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:clipees_has|clipees_has]]**
<code c>
Eina_Bool efl_canvas_object_clipees_has(const Eo *obj);
</code>

%%Test if any object is clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_grab|key_grab]]**
<code c>
Eina_Bool efl_canvas_object_key_grab(Eo *obj, const char *keyname, Evas_Modifier_Mask modifiers, Evas_Modifier_Mask not_modifiers, Eina_Bool exclusive);
</code>

%%Requests %%''keyname''%% key events be directed to %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_ungrab|key_ungrab]]**
<code c>
void efl_canvas_object_key_ungrab(Eo *obj, const char *keyname, Evas_Modifier_Mask modifiers, Evas_Modifier_Mask not_modifiers);
</code>

%%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_add|seat_focus_add]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_add(Eo *obj, Efl_Input_Device *seat);
</code>

%%Add a seat to the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_check|seat_focus_check]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_check(Eo *obj, Efl_Input_Device *seat);
</code>

%%Check if this object is focused by a given seat%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_del|seat_focus_del]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_del(Eo *obj, Efl_Input_Device *seat);
</code>

%%Remove a seat from the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_anti_alias_get(const Eo *obj);
void efl_canvas_object_anti_alias_set(Eo *obj, Eina_Bool anti_alias);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:clipees|clipees]]** //**(get)**//
<code c>
Eina_Iterator *efl_canvas_object_clipees_get(const Eo *obj);
</code>

%%Return a list of objects currently clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_key_focus_get(const Eo *obj);
void efl_canvas_object_key_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Indicates that this object is the keyboard event receiver on its canvas.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_pass_events_get(const Eo *obj);
void efl_canvas_object_pass_events_set(Eo *obj, Eina_Bool pass);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_device_in|pointer_device_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_device_in_get(const Eo *obj, Efl_Input_Device *pointer);
</code>

%%Read-only value indicating whether a pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_in|pointer_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_in_get(const Eo *obj);
</code>

%%Read-only value indicating whether the main pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_by_device_get(const Eo *obj, Efl_Input_Device *dev);
void efl_canvas_object_pointer_mode_by_device_set(Eo *obj, Efl_Input_Device *dev, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour by device. See %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_get(const Eo *obj);
void efl_canvas_object_pointer_mode_set(Eo *obj, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_propagate_events_get(const Eo *obj);
void efl_canvas_object_propagate_events_set(Eo *obj, Eina_Bool propagate);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**//
<code c>
Efl_Gfx_Render_Op efl_canvas_object_render_op_get(const Eo *obj);
void efl_canvas_object_render_op_set(Eo *obj, Efl_Gfx_Render_Op render_op);
</code>

%%Render mode to be used for compositing the Evas object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_repeat_events_get(const Eo *obj);
void efl_canvas_object_repeat_events_set(Eo *obj, Eina_Bool repeat);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:scale|scale]]** //**(get, set)**//
<code c>
double efl_canvas_object_scale_get(const Eo *obj);
void efl_canvas_object_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_seat_focus_get(const Eo *obj);
</code>

%%Check if this object is focused.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:elm:widget:property:clip|clip]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Canvas_Object *efl_canvas_object_clip_get(const Eo *obj);
void efl_canvas_object_clip_set(Eo *obj, Efl_Canvas_Object *clip);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:elm:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_canvas_object_is_frame_object_get(const Eo *obj);
void efl_canvas_object_is_frame_object_set(Eo *obj, Eina_Bool is_frame);
</code>

%%If %%''true''%% the object belongs to the window border decorations.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:elm:widget:property:no_render|no_render]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_canvas_object_no_render_get(const Eo *obj);
void efl_canvas_object_no_render_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:canvas:object:property:loop|loop]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:event_callback_call|event_callback_call]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:event_callback_legacy_call|event_callback_legacy_call]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:elm:layout:method:dbg_info_get|dbg_info_get]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:elm:progressbar:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:elm:widget:method:destructor|destructor]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:elm:widget:method:provider_find|provider_find]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:data_get|data_get]]**
<code c>
const char *elm_obj_layout_data_get(const Eo *obj, const char *key);
</code>

%%Get the edje data from the given layout.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:freeze|freeze]]**
<code c>
int elm_obj_layout_freeze(Eo *obj);
</code>

%%Freezes the Elementary layout object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_engine_only_get|part_cursor_engine_only_get]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_engine_only_get(const Eo *obj, const char *part_name);
</code>

%%Get a specific cursor engine_only for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_engine_only_set|part_cursor_engine_only_set]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_engine_only_set(Eo *obj, const char *part_name, Eina_Bool engine_only);
</code>

%%Sets if the cursor set should be searched on the theme or should use the provided by the engine, only.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_get|part_cursor_get]]**
<code c>
const char *elm_obj_layout_part_cursor_get(const Eo *obj, const char *part_name);
</code>

%%Get the cursor to be shown when mouse is over an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_set|part_cursor_set]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_set(Eo *obj, const char *part_name, const char *cursor);
</code>

%%Sets a specific cursor for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_style_get|part_cursor_style_get]]**
<code c>
const char *elm_obj_layout_part_cursor_style_get(const Eo *obj, const char *part_name);
</code>

%%Get a specific cursor style for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_style_set|part_cursor_style_set]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_style_set(Eo *obj, const char *part_name, const char *style);
</code>

%%Sets a specific cursor style for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_unset|part_cursor_unset]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_unset(Eo *obj, const char *part_name);
</code>

%%Unsets a cursor previously set with %%[[:docs:efl:auto:class:elm:layout:method:part_cursor_set|Elm.Layout.part_cursor_set]]%%.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:signal_callback_add|signal_callback_add]]**
<code c>
void elm_obj_layout_signal_callback_add(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func, void *data);
</code>

%%Add a callback for a (Edje) signal emitted by a layout widget's underlying Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:signal_callback_del|signal_callback_del]]**
<code c>
void *elm_obj_layout_signal_callback_del(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func);
</code>

%%Remove a signal-triggered callback from a given layout widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:signal_emit|signal_emit]]**
<code c>
void elm_obj_layout_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Send a (Edje) signal to a given layout widget's underlying Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:sizing_restricted_eval|sizing_restricted_eval]]**
<code c>
void elm_obj_layout_sizing_restricted_eval(Eo *obj, Eina_Bool width, Eina_Bool height);
</code>

%%Request sizing reevaluation, restricted to current width and/or height.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:sub_object_add_enable|sub_object_add_enable]]**
<code c>
Eina_Bool elm_obj_layout_sub_object_add_enable(Eo *obj);
</code>

%%Enable sub object add%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:thaw|thaw]]**
<code c>
int elm_obj_layout_thaw(Eo *obj);
</code>

%%Thaws the Elementary object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:theme_enable|theme_enable]]**
<code c>
Eina_Bool elm_obj_layout_theme_enable(Eo *obj);
</code>

%%Enable theme%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:edje_object_can_access|edje_object_can_access]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_layout_edje_object_can_access_get(const Eo *obj);
Eina_Bool elm_obj_layout_edje_object_can_access_set(Eo *obj, Eina_Bool can_access);
</code>

\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:edje|edje]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_layout_edje_get(const Eo *obj);
</code>

%%Get the edje layout%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:text|text]]** //**(get, set)**//
<code c>
const char *elm_obj_layout_text_get(const Eo *obj, const char *part);
Eina_Bool elm_obj_layout_text_set(Eo *obj, const char *part, const char *text);
</code>

\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:theme|theme]]** //**(set)**//
<code c>
Eina_Bool elm_obj_layout_theme_set(Eo *obj, const char *klass, const char *group, const char *style);
</code>

%%Set the edje group from the elementary theme that will be used as layout.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:progressbar:method:sizing_eval|sizing_eval]]** //[Overridden here]//
<code c>
void elm_obj_layout_sizing_eval(Eo *obj);
</code>

%%Eval sizing.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:disable|disable]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_disable(Eo *obj);
</code>

%%'Virtual' function on the widget being disabled.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:focus_direction|focus_direction]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_focus_direction(Eo *obj, const Efl_Canvas_Object *base, double degree, Efl_Canvas_Object **direction, Elm_Widget_Item **direction_item, double *weight);
</code>

%%'Virtual' function handling passing focus to sub-objects given a direction, in degrees.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:focus_next|focus_next]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_focus_next(Eo *obj, Elm_Focus_Direction dir, Efl_Canvas_Object **next, Elm_Widget_Item **next_item);
</code>

%%'Virtual' function handling passing focus to sub-objects.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:on_focus|on_focus]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_on_focus(Eo *obj, Elm_Widget_Item *item);
</code>

%%'Virtual' function handling focus in/out events on the widget%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:sub_object_add|sub_object_add]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_sub_object_add(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%'Virtual' function handling sub objects being added.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:progressbar:method:focus_direction_manager_is|focus_direction_manager_is]]** //[Overridden here]//
<code c>
Eina_Bool elm_obj_widget_focus_direction_manager_is(Eo *obj);
</code>

%%'Virtual' function which checks if handling of passing focus to sub-objects in given direction is supported by widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:progressbar:method:focus_next_manager_is|focus_next_manager_is]]** //[Overridden here]//
<code c>
Eina_Bool elm_obj_widget_focus_next_manager_is(Eo *obj);
</code>

%%'Virtual' function which checks if handling of passing focus to sub-objects is supported by widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:progressbar:method:sub_object_del|sub_object_del]]** //[Overridden here]//
<code c>
Eina_Bool elm_obj_widget_sub_object_del(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%'Virtual' function handling sub objects being removed.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:progressbar:method:theme_apply|theme_apply]]** //[Overridden here]//
<code c>
Elm_Theme_Apply elm_obj_widget_theme_apply(Eo *obj);
</code>

%%'Virtual' function on the widget being re-themed.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:access|access]]**
<code c>
void elm_obj_widget_access(Eo *obj, Eina_Bool acs);
</code>

%%'Virtual' function on the widget being set access.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:activate|activate]]**
<code c>
Eina_Bool elm_obj_widget_activate(Eo *obj, Elm_Activate act);
</code>

%%'Virtual' function to activate widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:cursor_add|cursor_add]]**
<code c>
void elm_obj_widget_cursor_add(Eo *obj, Elm_Cursor *cur);
</code>

%%Add cursor%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:cursor_del|cursor_del]]**
<code c>
void elm_obj_widget_cursor_del(Eo *obj, Elm_Cursor *cur);
</code>

%%Delete cursor%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_custom_chain_append|focus_custom_chain_append]]**
<code c>
void elm_obj_widget_focus_custom_chain_append(Eo *obj, Efl_Canvas_Object *child, Efl_Canvas_Object *relative_child);
</code>

%%Append object to custom focus chain.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_custom_chain_prepend|focus_custom_chain_prepend]]**
<code c>
void elm_obj_widget_focus_custom_chain_prepend(Eo *obj, Efl_Canvas_Object *child, Efl_Canvas_Object *relative_child);
</code>

%%Prepend object to custom focus chain.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_custom_chain_unset|focus_custom_chain_unset]]**
<code c>
void elm_obj_widget_focus_custom_chain_unset(Eo *obj);
</code>

%%Unset a custom focus chain on a given Elementary widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_cycle|focus_cycle]]**
<code c>
void elm_obj_widget_focus_cycle(Eo *obj, Elm_Focus_Direction dir);
</code>

%%Give focus to next object with specific focus direction in object tree.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_direction_get|focus_direction_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_direction_get(const Eo *obj, const Efl_Canvas_Object *base, double degree, Efl_Canvas_Object **direction, Elm_Widget_Item **direction_item, double *weight);
</code>

%%Get focus direction%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_direction_go|focus_direction_go]]**
<code c>
Eina_Bool elm_obj_widget_focus_direction_go(Eo *obj, double degree);
</code>

%%Go in focus direction%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_disabled_handle|focus_disabled_handle]]**
<code c>
void elm_obj_widget_focus_disabled_handle(Eo *obj);
</code>

%%Handle disable widget focus%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_hide_handle|focus_hide_handle]]**
<code c>
void elm_obj_widget_focus_hide_handle(Eo *obj);
</code>

%%Handle hide focus%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_highlight_geometry_get|focus_highlight_geometry_get]]**
<code c>
void elm_obj_widget_focus_highlight_geometry_get(const Eo *obj, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%Get the focus highlight geometry of widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_list_direction_get|focus_list_direction_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_list_direction_get(const Eo *obj, const Efl_Canvas_Object *base, const Eina_List *items, list_data_get_func_type list_data_get, double degree, Efl_Canvas_Object **direction, Elm_Widget_Item **direction_item, double *weight);
</code>

%%Get focus list direction%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_list_next_get|focus_list_next_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_list_next_get(const Eo *obj, const Eina_List *items, list_data_get_func_type list_data_get, Elm_Focus_Direction dir, Efl_Canvas_Object **next, Elm_Widget_Item **next_item);
</code>

%%Get next item in focus list%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_mouse_up_handle|focus_mouse_up_handle]]**
<code c>
void elm_obj_widget_focus_mouse_up_handle(Eo *obj);
</code>

%%Handle focus mouse up%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_get|focus_next_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_next_get(const Eo *obj, Elm_Focus_Direction dir, Efl_Canvas_Object **next, Elm_Widget_Item **next_item);
</code>

%%Get next focus item%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_item_get|focus_next_item_get]]**
<code c>
Elm_Widget_Item *elm_obj_widget_focus_next_item_get(const Eo *obj, Elm_Focus_Direction dir);
</code>

%%Get the next object item with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_item_set|focus_next_item_set]]**
<code c>
void elm_obj_widget_focus_next_item_set(Eo *obj, Elm_Widget_Item *next_item, Elm_Focus_Direction dir);
</code>

%%Set the next object item with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_object_get|focus_next_object_get]]**
<code c>
Efl_Canvas_Object *elm_obj_widget_focus_next_object_get(const Eo *obj, Elm_Focus_Direction dir);
</code>

%%Get the next object with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_object_set|focus_next_object_set]]**
<code c>
void elm_obj_widget_focus_next_object_set(Eo *obj, Efl_Canvas_Object *next, Elm_Focus_Direction dir);
</code>

%%Set the next object with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_reconfigure|focus_reconfigure]]**
<code c>
void elm_obj_widget_focus_reconfigure(Eo *obj);
</code>

%%No description supplied.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_region_show|focus_region_show]]**
<code c>
void elm_obj_widget_focus_region_show(const Eo *obj);
</code>

%%Show focus region%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_restore|focus_restore]]**
<code c>
void elm_obj_widget_focus_restore(Eo *obj);
</code>

%%Restore the focus state of the sub-tree.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_steal|focus_steal]]**
<code c>
void elm_obj_widget_focus_steal(Eo *obj, Elm_Widget_Item *item);
</code>

%%Steal focus%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_tree_unfocusable_handle|focus_tree_unfocusable_handle]]**
<code c>
void elm_obj_widget_focus_tree_unfocusable_handle(Eo *obj);
</code>

%%Handle focus tree unfocusable%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focused_object_clear|focused_object_clear]]**
<code c>
void elm_obj_widget_focused_object_clear(Eo *obj);
</code>

%%Clear focused object%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:name_find|name_find]]**
<code c>
Efl_Canvas_Object *elm_obj_widget_name_find(const Eo *obj, const char *name, int recurse);
</code>

%%Find widget by name%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:newest_focus_order_get|newest_focus_order_get]]**
<code c>
Efl_Canvas_Object *elm_obj_widget_newest_focus_order_get(const Eo *obj, unsigned int *newest_focus_order, Eina_Bool can_focus_only);
</code>

%%Get newest focus in order%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:on_focus_region|on_focus_region]]**
<code c>
Eina_Bool elm_obj_widget_on_focus_region(Eo *obj, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%'Virtual' function returning an inner area of a widget that should be brought into the visible area of a broader viewport, may this context arise.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:part_text_translate|part_text_translate]]**
<code c>
const char *elm_obj_widget_part_text_translate(Eo *obj, const char *part, const char *text);
</code>

%%Translate part text%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_freeze_pop|scroll_freeze_pop]]**
<code c>
void elm_obj_widget_scroll_freeze_pop(Eo *obj);
</code>

%%Pop scroller freeze%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_freeze_push|scroll_freeze_push]]**
<code c>
void elm_obj_widget_scroll_freeze_push(Eo *obj);
</code>

%%Push scroller freeze%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_hold_pop|scroll_hold_pop]]**
<code c>
void elm_obj_widget_scroll_hold_pop(Eo *obj);
</code>

%%Pop scroller hold%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_hold_push|scroll_hold_push]]**
<code c>
void elm_obj_widget_scroll_hold_push(Eo *obj);
</code>

%%Push scroll hold%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:show_region_get|show_region_get]]**
<code c>
void elm_obj_widget_show_region_get(const Eo *obj, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%Get show region%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:show_region_set|show_region_set]]**
<code c>
void elm_obj_widget_show_region_set(Eo *obj, Evas_Coord x, Evas_Coord y, Evas_Coord w, Evas_Coord h, Eina_Bool forceshow);
</code>

%%Set show region%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:signal_callback_add|signal_callback_add]]**
<code c>
void elm_obj_widget_signal_callback_add(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func, void *data);
</code>

%%Add signal callback%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:signal_callback_del|signal_callback_del]]**
<code c>
void *elm_obj_widget_signal_callback_del(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func);
</code>

%%Delete signal callback%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:signal_emit|signal_emit]]**
<code c>
void elm_obj_widget_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Emit signal on widget%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:tooltip_add|tooltip_add]]**
<code c>
void elm_obj_widget_tooltip_add(Eo *obj, Elm_Tooltip *tt);
</code>

%%Add tooltip to widget%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:tooltip_del|tooltip_del]]**
<code c>
void elm_obj_widget_tooltip_del(Eo *obj, Elm_Tooltip *tt);
</code>

%%Delet widget tooltip%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:translatable_part_text_get|translatable_part_text_get]]**
<code c>
const char *elm_obj_widget_translatable_part_text_get(const Eo *obj, const char *part);
</code>

%%Get translatable part text%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:translate|translate]]**
<code c>
Eina_Bool elm_obj_widget_translate(Eo *obj);
</code>

%%'Virtual' function handling language changes on Elementary.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:widget_event_callback_add|widget_event_callback_add]]**
<code c>
void elm_obj_widget_event_callback_add(Eo *obj, Elm_Event_Cb func, const void *data);
</code>

%%Add event callback%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:widget_event_callback_del|widget_event_callback_del]]**
<code c>
void *elm_obj_widget_event_callback_del(Eo *obj, Elm_Event_Cb func, const void *data);
</code>

%%Delete event callback handler%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:widget_event_propagate|widget_event_propagate]]**
<code c>
Eina_Bool elm_obj_widget_event_propagate(Eo *obj, Evas_Callback_Type type, void *event_info, Efl_Input_Flags *event_flags);
</code>

%%Propagate event%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:widget_event|widget_event]]**
<code c>
Eina_Bool elm_obj_widget_event(Eo *obj, Efl_Canvas_Object *source, Evas_Callback_Type type, void *event_info);
</code>

%%'Virtual' function handling input events on the widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:access_highlight_in_theme|access_highlight_in_theme]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_access_highlight_in_theme_get(const Eo *obj);
void elm_obj_widget_access_highlight_in_theme_set(Eo *obj, Eina_Bool highlight);
</code>

%%Accessibility highlight in theme%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:access_info|access_info]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_access_info_get(const Eo *obj);
void elm_obj_widget_access_info_set(Eo *obj, const char *txt);
</code>

%%Accessibility information%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:can_focus_child_list|can_focus_child_list]]** //**(get)**//
<code c>
Eina_List *elm_obj_widget_can_focus_child_list_get(const Eo *obj);
</code>

%%Can focus children list%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:can_focus|can_focus]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_can_focus_get(const Eo *obj);
void elm_obj_widget_can_focus_set(Eo *obj, Eina_Bool can_focus);
</code>

%%The ability for an Elementary object to be focused.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:child_can_focus|child_can_focus]]** //**(get)**//
<code c>
Eina_Bool elm_obj_widget_child_can_focus_get(const Eo *obj);
</code>

%%Child can focus property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:disabled|disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_disabled_get(const Eo *obj);
void elm_obj_widget_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Enabled / disabled property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:display_mode|display_mode]]** //**(set)**//
<code c>
void elm_obj_widget_display_mode_set(Eo *obj, Efl_Gfx_Size_Hint_Mode dispmode);
</code>

%%Display mode property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:domain_part_text_translatable|domain_part_text_translatable]]** //**(set)**//
<code c>
void elm_obj_widget_domain_part_text_translatable_set(Eo *obj, const char *part, const char *domain, Eina_Bool translatable);
</code>

%%Translate domain text part property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:domain_translatable_part_text|domain_translatable_part_text]]** //**(set)**//
<code c>
void elm_obj_widget_domain_translatable_part_text_set(Eo *obj, const char *part, const char *domain, const char *label);
</code>

%%Domain translatable text part property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_child_locked_x|drag_child_locked_x]]** //**(get)**//
<code c>
int elm_obj_widget_drag_child_locked_x_get(const Eo *obj);
</code>

%%Drag child locked X axis%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_child_locked_y|drag_child_locked_y]]** //**(get)**//
<code c>
int elm_obj_widget_drag_child_locked_y_get(const Eo *obj);
</code>

%%Drag child locked Y axis property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_lock_x|drag_lock_x]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_drag_lock_x_get(const Eo *obj);
void elm_obj_widget_drag_lock_x_set(Eo *obj, Eina_Bool lock);
</code>

%%Drag lock on X axis%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_lock_y|drag_lock_y]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_drag_lock_y_get(const Eo *obj);
void elm_obj_widget_drag_lock_y_set(Eo *obj, Eina_Bool lock);
</code>

%%Lock the Y axis from being dragged%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_custom_chain|focus_custom_chain]]** //**(get, set)**//
<code c>
const Eina_List *elm_obj_widget_focus_custom_chain_get(const Eo *obj);
void elm_obj_widget_focus_custom_chain_set(Eo *obj, Eina_List *objs);
</code>

%%A custom chain of objects to pass focus.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_focus_highlight_style_get(const Eo *obj);
Eina_Bool elm_obj_widget_focus_highlight_style_set(Eo *obj, const char *style);
</code>

%%Control the widget focus highlight style.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_move_policy_automatic_get(const Eo *obj);
void elm_obj_widget_focus_move_policy_automatic_set(Eo *obj, Eina_Bool automatic);
</code>

%%Control the widget's focus_move_policy mode setting.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Move_Policy elm_obj_widget_focus_move_policy_get(const Eo *obj);
void elm_obj_widget_focus_move_policy_set(Eo *obj, Efl_Ui_Focus_Move_Policy policy);
</code>

%%The widget's focus move policy.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_order|focus_order]]** //**(get)**//
<code c>
unsigned int elm_obj_widget_focus_order_get(const Eo *obj);
</code>

%%Focus order property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_region_show_mode|focus_region_show_mode]]** //**(get, set)**//
<code c>
Elm_Focus_Region_Show_Mode elm_obj_widget_focus_region_show_mode_get(const Eo *obj);
void elm_obj_widget_focus_region_show_mode_set(Eo *obj, Elm_Focus_Region_Show_Mode mode);
</code>

%%Control the focus_region_show mode.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_region|focus_region]]** //**(get)**//
<code c>
Eina_Bool elm_obj_widget_focus_region_get(const Eo *obj, Evas_Coord *x, Evas_Coord *y, Evas_Coord *w, Evas_Coord *h);
</code>

%%Focus region property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focused_item|focused_item]]** //**(get)**//
<code c>
Elm_Widget_Item *elm_obj_widget_focused_item_get(const Eo *obj);
</code>

%%Get the focused widget item.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focused_object|focused_object]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_focused_object_get(const Eo *obj);
</code>

%%Current focused object in object tree.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus|focus]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_get(const Eo *obj);
void elm_obj_widget_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Focus property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:highlight_ignore|highlight_ignore]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_highlight_ignore_get(const Eo *obj);
void elm_obj_widget_highlight_ignore_set(Eo *obj, Eina_Bool ignore);
</code>

%%Highlight ignore%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:highlight_in_theme|highlight_in_theme]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_highlight_in_theme_get(const Eo *obj);
void elm_obj_widget_highlight_in_theme_set(Eo *obj, Eina_Bool highlight);
</code>

%%Highlight in theme property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:highlight|highlight]]** //**(get)**//
<code c>
Eina_Bool elm_obj_widget_highlight_get(const Eo *obj);
</code>

%%Highlight property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:hover_object|hover_object]]** //**(set)**//
<code c>
void elm_obj_widget_hover_object_set(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%Hover object property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:item_loop_enabled|item_loop_enabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_item_loop_enabled_get(const Eo *obj);
void elm_obj_widget_item_loop_enabled_set(Eo *obj, Eina_Bool enable);
</code>

%%Control item loop feature.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_mirrored_automatic_get(const Eo *obj);
void elm_obj_widget_mirrored_automatic_set(Eo *obj, Eina_Bool automatic);
</code>

%%Control the widget's mirrored mode setting.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:mirrored|mirrored]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_mirrored_get(const Eo *obj);
void elm_obj_widget_mirrored_set(Eo *obj, Eina_Bool mirrored);
</code>

%%Control the widget's mirrored mode.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**//
<code c>
void elm_obj_widget_on_show_region_hook_set(Eo *obj, region_hook_func_type func, void *data);
</code>

%%Region hook on show property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_orientation_mode_disabled_get(const Eo *obj);
void elm_obj_widget_orientation_mode_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Orientation mode disabled or enabled%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:orientation|orientation]]** //**(set)**//
<code c>
void elm_obj_widget_orientation_set(Eo *obj, int rotation);
</code>

%%Widget orientation%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parent2|parent2]]** //**(get, set)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_parent2_get(const Eo *obj);
void elm_obj_widget_parent2_set(Eo *obj, Efl_Canvas_Object *parent);
</code>

%%Second parent property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parent_highlight|parent_highlight]]** //**(set)**//
<code c>
void elm_obj_widget_parent_highlight_set(Eo *obj, Eina_Bool highlighted);
</code>

%%Parent highlight property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parent_widget|parent_widget]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_parent_widget_get(const Eo *obj);
</code>

%%Parent widget property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parents_bounce|parents_bounce]]** //**(get)**//
<code c>
void elm_obj_widget_parents_bounce_get(const Eo *obj, Eina_Bool *horiz, Eina_Bool *vert);
</code>

%%Parents bounce property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:part_text|part_text]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_part_text_get(const Eo *obj, const char *part);
void elm_obj_widget_part_text_set(Eo *obj, const char *part, const char *label);
</code>

%%Part text property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:resize_object|resize_object]]** //**(set)**//
<code c>
void elm_obj_widget_resize_object_set(Eo *obj, Efl_Canvas_Object *sobj, Eina_Bool sub_obj);
</code>

%%Resize object property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scale|scale]]** //**(get, set)**//
<code c>
double elm_obj_widget_scale_get(const Eo *obj);
void elm_obj_widget_scale_set(Eo *obj, double scale);
</code>

%%Scale factor%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scroll_freeze|scroll_freeze]]** //**(get)**//
<code c>
int elm_obj_widget_scroll_freeze_get(const Eo *obj);
</code>

%%Scroll freeze property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scroll_hold|scroll_hold]]** //**(get)**//
<code c>
int elm_obj_widget_scroll_hold_get(const Eo *obj);
</code>

%%Scroll hold property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scrollable_children|scrollable_children]]** //**(get)**//
<code c>
Eina_List *elm_obj_widget_scrollable_children_get(const Eo *obj);
</code>

%%Function to operate on a given widget's scrollable children when necessary.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:style|style]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_style_get(const Eo *obj);
Elm_Theme_Apply elm_obj_widget_style_set(Eo *obj, const char *style);
</code>

%%Theme style%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:theme_object|theme_object]]** //**(set)**//
<code c>
Elm_Theme_Apply elm_obj_widget_theme_object_set(Eo *obj, Efl_Canvas_Object *edj, const char *wname, const char *welement, const char *wstyle);
</code>

%%Theme object property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:theme|theme]]** //**(get, set)**//
<code c>
Elm_Theme *elm_obj_widget_theme_get(const Eo *obj);
void elm_obj_widget_theme_set(Eo *obj, Elm_Theme *th);
</code>

%%Widget theme%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:top|top]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_top_get(const Eo *obj);
</code>

%%Top widget property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:tree_unfocusable|tree_unfocusable]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_tree_unfocusable_get(const Eo *obj);
void elm_obj_widget_tree_unfocusable_set(Eo *obj, Eina_Bool tree_unfocusable);
</code>

%%Make the elementary object and its children to be unfocusable (or focusable). If the tree is set as unfocusable, newest focused object which is not in this tree will get focus. This API can be helpful for an object to be deleted. When an object will be deleted soon, it and its children may not want to get focus (by focus reverting or by other focus controls). Then, just use this API before deleting.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_count|content_count]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_iterate|content_iterate]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_remove|content_remove]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_unset|content_unset]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:property:content_part_name|content_part_name]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
const char *efl_content_part_name_get(const Eo *obj, Efl_Gfx *content);
</code>

%%The name of the part under which an object is swallowed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:property:content|content]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:class:elm:layout:property:file|file]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:class:elm:layout:property:mmap|mmap]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_file_mmap_get(const Eo *obj, const Eina_File **f, const char **key);
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>

\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:interface:efl:file:method:save|save]]**
<code c>
Eina_Bool efl_file_save(const Eo *obj, const char *file, const char *key, const char *flags);
</code>

%%Save the given image object's contents to an (image) file.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, int *w, int *h);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, int w, int h);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_combined_min_get(const Eo *obj, int *w, int *h);
</code>

%%Read-only minimum size combining both %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_display_mode|hint_display_mode]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Size_Hint_Mode efl_gfx_size_hint_display_mode_get(const Eo *obj);
void efl_gfx_size_hint_display_mode_set(Eo *obj, Efl_Gfx_Size_Hint_Mode dispmode);
</code>

%%A hint for an object's display mode.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_max_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_max_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_min_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_request|hint_request]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_request_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_request_set(Eo *obj, int w, int h);
</code>

%%Hints for the object's optimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]// ''protected set''
<code c>
void efl_gfx_size_hint_restricted_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, int w, int h);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_base_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_base_set(Eo *obj, int w, int h);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_step_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_step_set(Eo *obj, int w, int h);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:lower|lower]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:raise|raise]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_above|stack_above]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_below|stack_below]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:above|above]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:below|below]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:layer|layer]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:color_part|color_part]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_color_part_get(const Eo *obj, const char *part, int *r, int *g, int *b, int *a);
Eina_Bool efl_gfx_color_part_set(Eo *obj, const char *part, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_geometry_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:elm:widget:property:color|color]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:elm:widget:property:position|position]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_gfx_position_get(const Eo *obj, int *x, int *y);
void efl_gfx_position_set(Eo *obj, int x, int y);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:elm:widget:property:size|size]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_gfx_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_set(Eo *obj, int w, int h);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:elm:widget:property:visible|visible]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:method:pointer_iterate|pointer_iterate]]**
<code c>
Eina_Iterator *efl_input_pointer_iterate(const Eo *obj, Eina_Bool hover);
</code>

%%Returns an iterator over the current known pointer positions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_input_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the mouse pointer is logically inside the canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_xy|pointer_xy]]** //**(get)**//
<code c>
void efl_input_pointer_xy_get(const Eo *obj, int *x, int *y);
</code>

%%This function returns the current known pointer coordinates%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:orientation|Efl.Orientation]].**[[:docs:efl:auto:class:elm:progressbar:property:orientation|orientation]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Orient efl_orientation_get(const Eo *obj);
void efl_orientation_set(Eo *obj, Efl_Orient dir);
</code>

%%Control the orientation of a given widget%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:part|Efl.Part]].**[[:docs:efl:auto:class:elm:progressbar:method:part|part]]** //[Overridden here]//
<code c>
Efl_Object *efl_part(const Eo *obj, const char *name);
</code>

%%Get a proxy object referring to a part of an object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:model:connect|Efl.Ui.Model.Connect]].**[[:docs:efl:auto:class:elm:layout:method:connect|connect]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_ui_model_connect(Eo *obj, const char *name, const char *property);
</code>

%%Connect property%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]].**[[:docs:efl:auto:class:elm:layout:method:connect|connect]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_ui_model_factory_connect(Eo *obj, const char *name, Efl_Ui_Factory *factory);
</code>

%%Connect factory%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:progress|Efl.Ui.Progress]].**[[:docs:efl:auto:class:elm:progressbar:property:progress_value|progress_value]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_ui_progress_value_get(const Eo *obj);
void efl_ui_progress_value_set(Eo *obj, double val);
</code>

%%Control the progress value (in percentage) on a given progress widget%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:progress|Efl.Ui.Progress]].**[[:docs:efl:auto:class:elm:progressbar:property:span_size|span_size]]** //**(get, set)**// //[Overridden here]//
<code c>
int efl_ui_progress_span_size_get(const Eo *obj);
void efl_ui_progress_span_size_set(Eo *obj, int size);
</code>

%%Control the (exact) length of the bar region of a given progress widget%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:progress|Efl.Ui.Progress]].**[[:docs:efl:auto:class:elm:progressbar:property:unit_format|unit_format]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_ui_progress_unit_format_get(const Eo *obj);
void efl_ui_progress_unit_format_set(Eo *obj, const char *units);
</code>

%%Control the format string for a given progress widget's units label%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:view|Efl.Ui.View]].**[[:docs:efl:auto:class:elm:layout:property:model|model]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Model *efl_ui_view_model_get(const Eo *obj);
void efl_ui_view_model_set(Eo *obj, Efl_Model *model);
</code>

%%Model that is/will be%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:class:efl:canvas:object:property:map_enable|map_enable]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_map_enable_get(const Eo *obj);
void efl_gfx_map_enable_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether map transformation is enabled on this object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_dup|map_dup]]**
<code c>
Eina_Bool efl_gfx_map_dup(Eo *obj, const Efl_Gfx_Map *other);
</code>

%%Duplicate the map information from another object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_lightning_3d|map_lightning_3d]]**
<code c>
Eina_Bool efl_gfx_map_lightning_3d(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Perform lighting calculations on the given Map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_perspective_3d|map_perspective_3d]]**
<code c>
Eina_Bool efl_gfx_map_perspective_3d(Eo *obj, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_populate_manual|map_populate_manual]]**
<code c>
Eina_Bool efl_gfx_map_populate_manual(Eo *obj, double x, double y, double w, double h, double z);
</code>

%%Populate source and destination map points to match given geometry.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_populate|map_populate]]**
<code c>
Eina_Bool efl_gfx_map_populate(Eo *obj, double z);
</code>

%%Populate source and destination map points to match this object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_quat_rotate|map_quat_rotate]]**
<code c>
Eina_Bool efl_gfx_map_quat_rotate(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

%%Rotate the map in 3D using a unit quaternion.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_rotate_3d|map_rotate_3d]]**
<code c>
Eina_Bool efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>

%%Rotate the map around 3 axes in 3D%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_rotate|map_rotate]]**
<code c>
Eina_Bool efl_gfx_map_rotate(Eo *obj, double degrees, double cx, double cy);
</code>

%%Change the map to apply the given rotation.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_zoom|map_zoom]]**
<code c>
Eina_Bool efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>

%%Change the map to apply the given zooming.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Alpha flag for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>

%%Clockwise state of a map (read-only).%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

%%Color of a vertex in the map.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_move_sync|map_move_sync]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_move_sync_get(const Eo *obj);
void efl_gfx_map_move_sync_set(Eo *obj, Eina_Bool enable);
</code>

%%Status of object move synchronization for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_coord|map_point_coord]]** //**(get, set)**//
<code c>
void efl_gfx_map_point_coord_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_point_coord_set(Eo *obj, int idx, double x, double y, double z);
</code>

%%Map point's coordinate.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_image_uv|map_point_image_uv]]** //**(get, set)**//
<code c>
void efl_gfx_map_point_image_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_point_image_uv_set(Eo *obj, int idx, double u, double v);
</code>

%%Map point's U and V texture source point.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_point_z|map_point_z]]** //**(get)**//
<code c>
double efl_gfx_map_point_z_get(const Eo *obj, int idx);
</code>

%%Value of Z coordinate of point %%''idx''%%.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>

%%Smoothing state for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:name|name]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
const char *elm_interface_atspi_accessible_name_get(const Eo *obj);
void elm_interface_atspi_accessible_name_set(Eo *obj, const char *name);
</code>

%%String describing AT-SPI widget role name. Should be free by a user.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Elm_Interface_Atspi_Accessible *elm_interface_atspi_accessible_parent_get(const Eo *obj);
void elm_interface_atspi_accessible_parent_set(Eo *obj, Elm_Interface_Atspi_Accessible *parent);
</code>

%%Widget accessible parent.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:relationship_append|relationship_append]]**
<code c>
Eina_Bool elm_interface_atspi_accessible_relationship_append(Eo *obj, Elm_Atspi_Relation_Type type, const Elm_Interface_Atspi_Accessible *relation_object);
</code>

%%Defines the relationship between two accessible objects.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:relationship_remove|relationship_remove]]**
<code c>
void elm_interface_atspi_accessible_relationship_remove(Eo *obj, Elm_Atspi_Relation_Type type, const Elm_Interface_Atspi_Accessible *relation_object);
</code>

%%Removes the relationship between two accessible objects.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:relationships_clear|relationships_clear]]**
<code c>
void elm_interface_atspi_accessible_relationships_clear(Eo *obj);
</code>

%%Removes all relationships in accessible object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:description|description]]** //**(get, set)**//
<code c>
const char *elm_interface_atspi_accessible_description_get(const Eo *obj);
void elm_interface_atspi_accessible_description_set(Eo *obj, const char *description);
</code>

%%Widget contextual information.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:role|role]]** //**(get, set)**//
<code c>
Elm_Atspi_Role elm_interface_atspi_accessible_role_get(const Eo *obj);
void elm_interface_atspi_accessible_role_set(Eo *obj, Elm_Atspi_Role role);
</code>

%%The role of the widget in AT-SPI Accessibility domain.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:root|root]]** //**(get)**//
<code c>
Efl_Object *elm_interface_atspi_accessible_root_get(const Eo *obj);
</code>

%%Get root object of accessible object hierarchy%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:translation_domain|translation_domain]]** //**(get, set)**//
<code c>
const char *elm_interface_atspi_accessible_translation_domain_get(const Eo *obj);
void elm_interface_atspi_accessible_translation_domain_set(Eo *obj, const char *domain);
</code>

%%Sets the translation domain of "name" and "description" properties.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:type|type]]** //**(get, set)**//
<code c>
Elm_Atspi_Type elm_interface_atspi_accessible_type_get(const Eo *obj);
void elm_interface_atspi_accessible_type_set(Eo *obj, Elm_Atspi_Type type);
</code>

%%Type of accessibility object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:progressbar:method:group_add|group_add]]** //[Overridden here]// ''protected''
<code c>
void efl_canvas_group_add(Eo *obj);
</code>

%%Internal constructor function.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:progressbar:method:group_del|group_del]]** //[Overridden here]// ''protected''
<code c>
void efl_canvas_group_del(Eo *obj);
</code>

%%Internal destructor function.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:legacy_ctor|legacy_ctor]]** ''protected''
<code c>
void efl_canvas_object_legacy_ctor(Eo *obj);
</code>

%%Internal function. Do not use.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// ''protected''
<code c>
Efl_Canvas_Object *efl_canvas_object_render_parent_get(const Eo *obj);
</code>

%%Gets the parent smart object of a given Evas object, if it has one.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:type|type]]** //**(set)**// ''protected''
<code c>
void efl_canvas_object_type_set(Eo *obj, const char *type);
</code>

%%Sets the legacy type name of this Evas object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:progressbar:property:content_aliases|content_aliases]]** //**(get)**// //[Overridden here]// ''protected''
<code c>
const Elm_Layout_Part_Alias_Description *elm_obj_layout_content_aliases_get(const Eo *obj);
</code>

%%Content aliases property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:progressbar:property:text_aliases|text_aliases]]** //**(get)**// //[Overridden here]// ''protected''
<code c>
const Elm_Layout_Part_Alias_Description *elm_obj_layout_text_aliases_get(const Eo *obj);
</code>

%%Text aliases property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:widget_parent|widget_parent]]** //**(get, set)**// ''protected''
<code c>
Efl_Canvas_Object *elm_obj_widget_parent_get(const Eo *obj);
void elm_obj_widget_parent_set(Eo *obj, Efl_Canvas_Object *parent);
</code>

%%The internal widget parent%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:attributes|attributes]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_accessible_attributes_get(const Eo *obj);
</code>

%%Gets key-value pairs indentifying widget extra attributes. Must be free by a user.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:children|children]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_accessible_children_get(const Eo *obj);
</code>

%%Gets widget's accessible children.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:state_set|state_set]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Elm_Atspi_State_Set elm_interface_atspi_accessible_state_set_get(const Eo *obj);
</code>

%%Gets set describing widget accessible states.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:event_emit|event_emit]]** ''protected''
<code c>
void elm_interface_atspi_accessible_event_emit(const Eo *obj, Elm_Interface_Atspi_Accessible *accessible, const Efl_Event_Description *event, void *event_info);
</code>

%%Emit event%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:event_handler_add|event_handler_add]]** ''protected''
<code c>
Elm_Atspi_Event_Handler *elm_interface_atspi_accessible_event_handler_add(const Eo *obj, Efl_Event_Cb cb, void *data);
</code>

%%Register accessibility event listener%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:event_handler_del|event_handler_del]]** ''protected''
<code c>
void elm_interface_atspi_accessible_event_handler_del(const Eo *obj, Elm_Atspi_Event_Handler *handler);
</code>

%%Deregister accessibility event listener%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:index_in_parent|index_in_parent]]** //**(get)**// ''protected''
<code c>
int elm_interface_atspi_accessible_index_in_parent_get(const Eo *obj);
</code>

%%Gets index of the child in parent's children list.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:localized_role_name|localized_role_name]]** //**(get)**// ''protected''
<code c>
const char *elm_interface_atspi_accessible_localized_role_name_get(const Eo *obj);
</code>

%%Gets an localized string describing AT-SPI widget role name.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:relation_set|relation_set]]** //**(get)**// ''protected''
<code c>
Elm_Atspi_Relation_Set elm_interface_atspi_accessible_relation_set_get(const Eo *obj);
</code>

%%Gets an string describing AT-SPI widget role name. Lists and elements Should be free by a user.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:role_name|role_name]]** //**(get)**// ''protected''
<code c>
const char *elm_interface_atspi_accessible_role_name_get(const Eo *obj);
</code>

%%Gets human-readable string indentifying widget accessibility role.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:class:elm:widget:method:focus_grab|focus_grab]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_component_focus_grab(Eo *obj);
</code>

%%Focuses accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:method:accessible_at_point_get|accessible_at_point_get]]** ''protected''
<code c>
Efl_Object *elm_interface_atspi_component_accessible_at_point_get(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Gets top component object occupying space at given coordinates.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:method:contains|contains]]** ''protected''
<code c>
Eina_Bool elm_interface_atspi_component_contains(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Contains accessible widget%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:alpha|alpha]]** //**(get)**// ''protected''
<code c>
double elm_interface_atspi_component_alpha_get(const Eo *obj);
</code>

%%Gets alpha of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:extents|extents]]** //**(get, set)**// ''protected''
<code c>
void elm_interface_atspi_component_extents_get(const Eo *obj, Eina_Bool screen_coords, int *x, int *y, int *w, int *h);
Eina_Bool elm_interface_atspi_component_extents_set(Eo *obj, Eina_Bool screen_coords, int x, int y, int w, int h);
</code>

%%Geometry of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:layer|layer]]** //**(get)**// ''protected''
<code c>
int elm_interface_atspi_component_layer_get(const Eo *obj);
</code>

%%Evas layer of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:position|position]]** //**(get, set)**// ''protected''
<code c>
void elm_interface_atspi_component_position_get(const Eo *obj, Eina_Bool screen_coords, int *x, int *y);
Eina_Bool elm_interface_atspi_component_position_set(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Position of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:size|size]]** //**(get, set)**// ''protected''
<code c>
void elm_interface_atspi_component_size_get(const Eo *obj, int *w, int *h);
Eina_Bool elm_interface_atspi_component_size_set(Eo *obj, int w, int h);
</code>

%%Size of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:z_order|z_order]]** //**(get)**// ''protected''
<code c>
int elm_interface_atspi_component_z_order_get(const Eo *obj);
</code>

%%Gets the depth at which the component is shown in relation to other components in the same container.%%\\ 
\\ 

===== Events =====

**[[:docs:efl:auto:class:elm:progressbar:event:changed|changed]]**
<code c>
ELM_PROGRESSBAR_EVENT_CHANGED(void)
</code>

%%Called when progressbar changed%%\\ 
\\ 
==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:event:theme_changed|theme,changed]]**
<code c>
ELM_LAYOUT_EVENT_THEME_CHANGED(void)
</code>

%%Called when theme changed%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:access_changed|access,changed]]**
<code c>
ELM_WIDGET_EVENT_ACCESS_CHANGED(void)
</code>

%%Called when accessibility changed%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:focused|focused]]**
<code c>
ELM_WIDGET_EVENT_FOCUSED(void)
</code>

%%Called when widget was focused%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:language_changed|language,changed]]**
<code c>
ELM_WIDGET_EVENT_LANGUAGE_CHANGED(void)
</code>

%%Called when widget language changed%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:moved|moved]]**
<code c>
ELM_WIDGET_EVENT_MOVED(void)
</code>

%%Called when widget moved%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:unfocused|unfocused]]**
<code c>
ELM_WIDGET_EVENT_UNFOCUSED(void)
</code>

%%Called when widget was unfocused%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:animator|Efl.Animator]].**[[:docs:efl:auto:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:active_descendant_changed|active,descendant,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_ACTIVE_DESCENDANT_CHANGED(void)
</code>

%%Called when active state of descendant has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:added|added]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_ADDED(void)
</code>

%%Called when item was added%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:bounds_changed|bounds,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_BOUNDS_CHANGED(Elm_Atspi_Event_Geometry_Changed_Data)
</code>

%%Called when bounds have changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:children_changed|children,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_CHILDREN_CHANGED(Elm_Atspi_Event_Children_Changed_Data)
</code>

%%Called when children have changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:property_changed|property,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_PROPERTY_CHANGED(const char *)
</code>

%%Called when roperty has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:removed|removed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_REMOVED(void)
</code>

%%Called when item was removed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:state_changed|state,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_STATE_CHANGED(Elm_Atspi_Event_State_Changed_Data)
</code>

%%Called when tate has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:visible_data_changed|visible,data,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_VISIBLE_DATA_CHANGED(void)
</code>

%%Called when visibility has changed%%\\ 
\\ 
