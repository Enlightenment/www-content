<title>Elm.Bg.color</title>
===== Signature =====

<code>
@property Elm.Bg.color {
    get {
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
    set {
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void elm_obj_bg_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void elm_obj_bg_color_set(Eo *obj, int r, int g, int b, int a);
</code>

===== Values =====

  * **r** - %%The red color component's value%%
  * **g** - %%The green color component's value%%
  * **b** - %%The blue color component's value%%
  * **a** - %%The alpha color component's value%%
===== Description =====

%%The color on a given background widget%%

{{page>:docs:efl:user:class:elm:bg:property:color:description&nodate&nolink&nouser}}

==== Getter ====

<note>
%%Use %%''null''%% pointers on the file components you're not interested in: they'll be ignored by the function.%%
</note>

{{page>:docs:efl:user:class:elm:bg:property:color:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%This sets the color used for the background rectangle, in RGB format. Each color component's range is from 0 to 255.%%

<note>
%%You probably only want to use this function if you haven't previously called %%[[:docs:efl:auto:interface:efl:file:property:file|Efl.File.file.set]]%%, so that you just want a solid color background.%%
</note>

<note>
%%You can reset the color by setting %%''r''%%, %%''g''%%, %%''b''%% as -1, -1, -1.%%
</note>{{page>:docs:efl:user:class:elm:bg:property:color:getter_description&nodate&nolink&nouser}}


