<title>Elm.Mapbuf</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_mapbuf [fillcolor = "black", label = "Elm.Mapbuf", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget [fillcolor = "gray15", label = "Elm.Widget", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_accessible [fillcolor = "gray15", label = "Elm.Interface.Atspi_Accessible", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_component [fillcolor = "gray15", label = "Elm.Interface.Atspi_Component", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    elm_mapbuf -> elm_widget
    elm_widget -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    elm_widget -> elm_interface_atspi_accessible
    elm_interface_atspi_accessible -> efl_interface
    elm_interface_atspi_accessible -> efl_object
    elm_widget -> elm_interface_atspi_component
    elm_mapbuf -> efl_container
    efl_container -> efl_gfx
    elm_mapbuf -> efl_part
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:elm:mapbuf|Elm.Mapbuf]] //(class)//**
    * [[:docs:efl:auto:class:elm:widget|Elm.Widget]] //(class)//
      * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
        * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
          * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
          * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
      * [[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]] //(mixin)//
        * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
        * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
      * [[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]] //(mixin)//
    * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
      * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
    * [[:docs:efl:auto:interface:efl:part|Efl.Part]] //(interface)//

===== Description =====

%%Elementary mapbuf class%%

{{page>:docs:efl:user:class:elm:mapbuf:description&nodate&nolink&nouser}}

===== Methods =====

^ Method name ^ Brief description ^
| [[:docs:efl:auto:class:elm:mapbuf:method:point_color_get|point_color_get]] | %%Get the color set on a vertex in the mapbuf%% |
| [[:docs:efl:auto:class:elm:mapbuf:method:point_color_set|point_color_set]] | %%Set the color of a vertex in the mapbuf%% |

===== Properties =====

^ Property name ^ Brief description ^
| [[:docs:efl:auto:class:elm:mapbuf:property:alpha|alpha]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:mapbuf:property:auto|auto]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:mapbuf:property:enabled|enabled]] //(get, set)// | No description supplied. |
| [[:docs:efl:auto:class:elm:mapbuf:property:smooth|smooth]] //(get, set)// | No description supplied. |

===== Events =====

This class does not define any events.
