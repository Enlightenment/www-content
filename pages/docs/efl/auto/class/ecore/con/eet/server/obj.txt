<title>Ecore.Con.Eet.Server.Obj</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    ecore_con_eet_server_obj [fillcolor = "black", label = "Ecore.Con.Eet.Server.Obj", color = "gray15", fontcolor = "white", style = "filled"]
    ecore_con_eet_base [fillcolor = "gray15", label = "Ecore.Con.Eet.Base", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    ecore_con_eet_server_obj -> ecore_con_eet_base
    ecore_con_eet_base -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:ecore:con:eet:server:obj|Ecore.Con.Eet.Server.Obj]] //(class)//**
    * [[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Ecore Connection Eet Server class.%%

{{page>:docs:efl:user:class:ecore:con:eet:server:obj:description&nodate&nolink&nouser}}

==== Inherited ====

[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:method:data_callback_del|data_callback_del]]**
<code c>
void ecore_con_eet_base_data_callback_del(Eo *obj, const char *name);
</code>

%%Function to delete the %%[[:docs:efl:auto:class:ecore:con:eet:base:property:data_callback|Ecore.Con.Eet.Base.data_callback]]%%.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:method:raw_data_callback_del|raw_data_callback_del]]**
<code c>
void ecore_con_eet_base_raw_data_callback_del(Eo *obj, const char *name);
</code>

%%Function to delete the %%[[:docs:efl:auto:class:ecore:con:eet:base:property:raw_data_callback|Ecore.Con.Eet.Base.raw_data_callback]]%%.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:method:raw_send|raw_send]]**
<code c>
void ecore_con_eet_base_raw_send(Eo *obj, Ecore_Con_Reply *reply, const char *protocol_name, const char *section, void *value, unsigned int length);
</code>

%%Function to send raw data.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:method:register|register]]**
<code c>
void ecore_con_eet_base_register(Eo *obj, const char *name, Eet_Data_Descriptor *edd);
</code>

%%Function to register a @ref Eet.Data.Descriptor to the ecore_con_eet object.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:method:send|send]]**
<code c>
void ecore_con_eet_base_send(Eo *obj, Ecore_Con_Reply *reply, const char *name, void *value);
</code>

%%Function to send data.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:property:data_callback|data_callback]]** //**(set)**//
<code c>
void ecore_con_eet_base_data_callback_set(Eo *obj, const char *name, Ecore_Con_Eet_Data_Cb func, const void *data);
</code>

%%A callback function which should be called when data is received by ecore_con_eet_object.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:property:raw_data_callback|raw_data_callback]]** //**(set)**//
<code c>
void ecore_con_eet_base_raw_data_callback_set(Eo *obj, const char *name, Ecore_Con_Eet_Raw_Data_Cb func, const void *data);
</code>

%%A callback function which should be calledn when raw data is received by ecore_con_eet_object.%%\\ 
\\ 
[[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]].**[[:docs:efl:auto:class:ecore:con:eet:base:property:server|server]]** //**(get, set)**//
<code c>
Ecore_Con_Server *ecore_con_eet_base_server_get(const Eo *obj);
void ecore_con_eet_base_server_set(Eo *obj, Ecore_Con_Server *data);
</code>

%%The server object to which we send and receive.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:ecore:con:eet:base:method:finalize|finalize]]** //[Overridden in [[:docs:efl:auto:class:ecore:con:eet:base|Ecore.Con.Eet.Base]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:ecore:con:eet:server:obj:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:ecore:con:eet:server:obj:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
