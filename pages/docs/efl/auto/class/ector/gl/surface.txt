<title>Ector.GL.Surface</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    ector_gl_surface [fillcolor = "black", label = "Ector.GL.Surface", color = "gray15", fontcolor = "white", style = "filled"]
    ector_gl_buffer [fillcolor = "gray15", label = "Ector.GL.Buffer", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    ector_gl_buffer_base [fillcolor = "gray15", label = "Ector.GL.Buffer.Base", color = "deepskyblue", fontcolor = "white", style = "filled"]
    ector_buffer [fillcolor = "gray15", label = "Ector.Buffer", color = "deepskyblue", fontcolor = "white", style = "filled"]
    ector_surface [fillcolor = "gray15", label = "Ector.Surface", color = "deepskyblue", fontcolor = "white", style = "filled"]
    ector_buffer [fillcolor = "gray15", label = "Ector.Buffer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    ector_gl_surface -> ector_gl_buffer
    ector_gl_buffer -> efl_object
    ector_gl_buffer -> ector_gl_buffer_base
    ector_gl_buffer_base -> ector_buffer
    ector_gl_surface -> ector_surface
    ector_surface -> ector_buffer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:ector:gl:surface|Ector.GL.Surface]] //(class)//**
    * [[:docs:efl:auto:class:ector:gl:buffer|Ector.GL.Buffer]] //(class)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
      * [[:docs:efl:auto:mixin:ector:gl:buffer:base|Ector.GL.Buffer.Base]] //(mixin)//
        * [[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]] //(mixin)//
    * [[:docs:efl:auto:mixin:ector:surface|Ector.Surface]] //(mixin)//
      * [[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]] //(mixin)//

===== Description =====

%%Ector GL surface class%%

{{page>:docs:efl:user:class:ector:gl:surface:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:ector:gl:surface:method:push|push]]**
<code c>
Eina_Bool ector_gl_surface_push(Eo *obj, uint64_t flags, GLshort *vertex, unsigned int vertex_count, unsigned int mul_col);
</code>

%%Push surface to GPU%%\\ 
\\ 
**[[:docs:efl:auto:class:ector:gl:surface:method:shader_get|shader_get]]**
<code c>
unsigned int ector_gl_surface_shader_get(Eo *obj, uint64_t flags);
</code>

%%Get shader%%\\ 
\\ 
**[[:docs:efl:auto:class:ector:gl:surface:method:state_define|state_define]]**
<code c>
Eina_Bool ector_gl_surface_state_define(Eo *obj, Efl_Gfx_Render_Op op, Eina_Array *clips);
</code>

%%Define state%%\\ 
\\ 

===== Overrides =====

**[[:docs:efl:auto:class:ector:gl:surface:method:constructor|constructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:ector:gl:surface:method:destructor|destructor]]** //[from [[:docs:efl:auto:class:efl:object|Efl.Object]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
**[[:docs:efl:auto:class:ector:gl:surface:method:renderer_factory_new|renderer_factory_new]]** //[from [[:docs:efl:auto:mixin:ector:surface|Ector.Surface]]]//
<code c>
Efl_Object *ector_surface_renderer_factory_new(Eo *obj, const Efl_Class *type);
</code>

%%Create a new renderer factory for the given type%%\\ 
\\ 
**[[:docs:efl:auto:class:ector:gl:surface:property:reference_point|reference_point]]** //**(set)**// //[from [[:docs:efl:auto:mixin:ector:surface|Ector.Surface]]]//
<code c>
void ector_surface_reference_point_set(Eo *obj, int x, int y);
</code>

%%This define where is (0,0) in pixels coordinate inside the surface%%\\ 
\\ 

===== Others =====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:dbg_info_get|dbg_info_get]]**
<code c>
void efl_dbg_info_get(Eo *obj, Efl_Dbg_Info *root_node);
</code>

%%Get debug information from the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_del|event_callback_array_del]]**
<code c>
Eina_Bool efl_event_callback_array_del(Eo *obj, const Efl_Callback_Array_Item *array, const void *user_data);
</code>

%%Del a callback array with a specific data associated to it for an event. The callbacks from the array will never be emitted again after this call, even if a event emission is going on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_array_priority_add|event_callback_array_priority_add]]**
<code c>
Eina_Bool efl_event_callback_array_priority_add(Eo *obj, const Efl_Callback_Array_Item *array, Efl_Callback_Priority priority, const void *data);
</code>

%%Add an array of callbacks created by @ref EFL_CALLBACKS_ARRAY_DEFINE for an event with a specific priority. The array need to be sorted with @ref efl_callbacks_cmp if you are not using the @ref EFL_CALLBACKS_ARRAY_DEFINE macro.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_call|event_callback_call]]**
<code c>
Eina_Bool efl_event_callback_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_del|event_callback_del]]**
<code c>
Eina_Bool efl_event_callback_del(Eo *obj, const Efl_Event_Description *desc, Efl_Event_Cb func, const void *user_data);
</code>

%%Delete a callback with a specific data associated to it for an event.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_legacy_call|event_callback_legacy_call]]**
<code c>
Eina_Bool efl_event_callback_legacy_call(Eo *obj, const Efl_Event_Description *desc, void *event_info);
</code>

%%Call the callbacks for an event of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_priority_add|event_callback_priority_add]]**
<code c>
Eina_Bool efl_event_callback_priority_add(Eo *obj, const Efl_Event_Description *desc, Efl_Callback_Priority priority, Efl_Event_Cb cb, const void *data);
</code>

%%Add a callback for an event with a specific priority.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:future_link|future_link]]**
<code c>
Eina_Bool efl_future_link(Eo *obj, Efl_Future *link);
</code>

%%Track a future life cycle and cancel it if the object die%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_add|wref_add]]**
<code c>
void efl_wref_add(Eo *obj, Efl_Object **wref);
</code>

%%Add a new weak reference to obj.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:wref_del|wref_del]]**
<code c>
void efl_wref_del(Eo *obj, Efl_Object **wref);
</code>

%%Delete the weak reference passed.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_data|key_data]]** //**(get, set)**//
<code c>
void *efl_key_data_get(const Eo *obj, const char *key);
void efl_key_data_set(Eo *obj, const char *key, const void *data);
</code>

%%Generic data with string key on an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_ref|key_ref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_ref_get(const Eo *obj, const char *key);
void efl_key_ref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_value|key_value]]** //**(get, set)**//
<code c>
Eina_Value *efl_key_value_get(const Eo *obj, const char *key);
void efl_key_value_set(Eo *obj, const char *key, Eina_Value *value);
</code>

%%Value on with string key on the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:key_wref|key_wref]]** //**(get, set)**//
<code c>
Efl_Object *efl_key_wref_get(const Eo *obj, const char *key);
void efl_key_wref_set(Eo *obj, const char *key, const Efl_Object *objdata);
</code>

%%Generic weak object reference with string key to object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:method:map|map]]**
<code c>
void *ector_buffer_map(Eo *obj, unsigned int *length, Ector_Buffer_Access_Flag mode, unsigned int x, unsigned int y, unsigned int w, unsigned int h, Efl_Gfx_Colorspace cspace, unsigned int *stride);
</code>

%%Map a region of this buffer for read or write access by the CPU, fetch data from the GPU if needed. This operation may be slow if cpu_readable_fast or cpu_writeable_fast are not true, or if the required colorspace is different from the internal one.%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:method:pixels_set|pixels_set]]**
<code c>
Eina_Bool ector_buffer_pixels_set(Eo *obj, void *pixels, int width, int height, int stride, Efl_Gfx_Colorspace cspace, Eina_Bool writable, unsigned char l, unsigned char r, unsigned char t, unsigned char b);
</code>

%%Set the source pixels for this buffer, or allocate a new memory region%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:method:span_free|span_free]]**
<code c>
void ector_buffer_span_free(Eo *obj, uint8_t *data);
</code>

%%Must be called as soon as possible after span_get%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:method:span_get|span_get]]**
<code c>
uint8_t *ector_buffer_span_get(Eo *obj, int x, int y, unsigned int w, Efl_Gfx_Colorspace cspace, unsigned int *length);
</code>

%%Get a single horizontal span of length w starting from (x,y)%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:method:unmap|unmap]]**
<code c>
void ector_buffer_unmap(Eo *obj, void *data, unsigned int length);
</code>

%%Unmap a region of this buffer, and upload data to the GPU (if needed).%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:property:border|border]]** //**(get)**//
<code c>
void ector_buffer_border_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>

%%Duplicated pixel borders of this buffer, used for GL scaling%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:property:cspace|cspace]]** //**(get)**//
<code c>
Efl_Gfx_Colorspace ector_buffer_cspace_get(const Eo *obj);
</code>

%%The colorspace of the pixel buffer.%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:property:flags|flags]]** //**(get)**//
<code c>
Ector_Buffer_Flag ector_buffer_flags_get(const Eo *obj);
</code>

%%The capabilities of this buffer%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:buffer|Ector.Buffer]].**[[:docs:efl:auto:mixin:ector:buffer:property:size|size]]** //**(get)**//
<code c>
void ector_buffer_size_get(const Eo *obj, int *w, int *h);
</code>

%%The (rectangular) size of the pixel buffer.%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:gl:buffer:base|Ector.GL.Buffer.Base]].**[[:docs:efl:auto:mixin:ector:gl:buffer:base:method:attach|attach]]**
<code c>
void ector_gl_buffer_base_attach(Eo *obj, int texid, int fboid, Efl_Gfx_Colorspace cspace, int imw, int imh, int tx, int ty, int tw, int th, int l, int r, int t, int b);
</code>

%%Attach to an existing texture (or FBO). Used from child classes.%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:gl:buffer:base|Ector.GL.Buffer.Base]].**[[:docs:efl:auto:mixin:ector:gl:buffer:base:property:fbo|fbo]]** //**(get)**//
<code c>
int ector_gl_buffer_base_fbo_get(const Eo *obj);
</code>

%%Framebuffer object ID%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:gl:buffer:base|Ector.GL.Buffer.Base]].**[[:docs:efl:auto:mixin:ector:gl:buffer:base:property:texture|texture]]** //**(get)**//
<code c>
int ector_gl_buffer_base_texture_get(const Eo *obj);
</code>

%%GL texture ID%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:gl:buffer:base|Ector.GL.Buffer.Base]].**[[:docs:efl:auto:mixin:ector:gl:buffer:base:property:vertices|vertices]]** //**(get)**//
<code c>
void ector_gl_buffer_base_vertices_get(const Eo *obj, double *x, double *y, double *w, double *h);
</code>

%%Returns the texture vertices to draw this image with no rotation%%\\ 
\\ 
[[:docs:efl:auto:mixin:ector:gl:buffer:base|Ector.GL.Buffer.Base]].**[[:docs:efl:auto:mixin:ector:gl:buffer:base:property:whole|whole]]** //**(get)**//
<code c>
Eina_Bool ector_gl_buffer_base_whole_get(const Eo *obj);
</code>

%%If %%''true''%%, the image is covering the entire GL texture, ie. it's not part of an atlas.%%\\ 
\\ 

===== Inherited Events =====

^ Event name ^ Brief description ^
| [[:docs:efl:auto:class:efl:object:event:callback_add|Efl.Object.callback,add]] | %%A callback was added.%% |
| [[:docs:efl:auto:class:efl:object:event:callback_del|Efl.Object.callback,del]] | %%A callback was deleted.%% |
| [[:docs:efl:auto:class:efl:object:event:del|Efl.Object.del]] | %%Object is being deleted.%% |
| [[:docs:efl:auto:mixin:ector:buffer:event:detached|Ector.Buffer.detached]] | %%Emitted whenever the previously attached pixels are detached during pixels_set%% |
| [[:docs:efl:auto:mixin:ector:buffer:event:detached|Ector.Buffer.detached]] | %%Emitted whenever the previously attached pixels are detached during pixels_set%% |
