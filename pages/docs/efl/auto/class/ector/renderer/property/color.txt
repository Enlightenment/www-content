<title>Ector.Renderer.color</title>
===== Signature =====

<code>
@property color {
    get {
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
    set {
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void ector_renderer_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void ector_renderer_color_set(Eo *obj, int r, int g, int b, int a);
</code>

===== Values =====

  * **r** - %%The red component of the given color.%%
  * **g** - %%The green component of the given color.%%
  * **b** - %%The blue component of the given color.%%
  * **a** - %%The alpha component of the given color.%%
===== Description =====

%%Retrieves the general/main color of the given Ector renderer.%%

%%Retrieves the main color's RGB component (and alpha channel) values, which range from 0 to 255. For the alpha channel, which defines the object's transparency level, 0 means totally transparent, while 255 means opaque. These color values are premultiplied by the alpha value.%%

%%Use null pointers on the components you're not interested in, they'll be ignored by the function.%%{{page>:docs:efl:user:class:ector:renderer:property:color:description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Ector.Renderer.color**
  * [[:docs:efl:auto:class:ector:renderer:cairo:property:color|Ector.Renderer.Cairo.color]]

