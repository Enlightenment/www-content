<title>Efl.Ui.Win.Type</title>
===== Signature =====

<code>
enum Efl.Ui.Win.Type {
    unknown: -1,
    basic,
    dialog_basic,
    desktop,
    dock,
    toolbar,
    menu,
    utility,
    splash,
    dropdown_menu,
    popup_menu,
    tooltip,
    notification,
    combo,
    dnd,
    inlined_image,
    socket_image,
    fake
}
</code>

===== C signature =====

<code c>
typedef enum {
    EFL_UI_WIN_UNKNOWN = -1,
    EFL_UI_WIN_BASIC,
    EFL_UI_WIN_DIALOG_BASIC,
    EFL_UI_WIN_DESKTOP,
    EFL_UI_WIN_DOCK,
    EFL_UI_WIN_TOOLBAR,
    EFL_UI_WIN_MENU,
    EFL_UI_WIN_UTILITY,
    EFL_UI_WIN_SPLASH,
    EFL_UI_WIN_DROPDOWN_MENU,
    EFL_UI_WIN_POPUP_MENU,
    EFL_UI_WIN_TOOLTIP,
    EFL_UI_WIN_NOTIFICATION,
    EFL_UI_WIN_COMBO,
    EFL_UI_WIN_DND,
    EFL_UI_WIN_INLINED_IMAGE,
    EFL_UI_WIN_SOCKET_IMAGE,
    EFL_UI_WIN_FAKE
} Efl_Ui_Win_Type;
</code>

===== Description =====

%%Defines the types of window that can be created%%

%%These are hints set on the window so that a running Window Manager knows how the window should be handled and/or what kind of decorations it should have.%%

%%Currently, only the X11 backed engines use them.%%

{{page>:docs:efl:user:enum:efl:ui:win:type:description&nodate&nolink&nouser}}

===== Fields =====

{{page>:docs:efl:user:enum:efl:ui:win:type:fields&nodate&nolink&nouser}}

  * **unknown** - %%Default, unknown, type%%
  * **basic** - %%A normal window. Indicates a normal, top-level window. Almost every window will be created with this type.%%
  * **dialog_basic** - %%Used for simple dialog windows.%%
  * **desktop** - %%For special desktop windows, like a background window holding desktop icons.%%
  * **dock** - %%The window is used as a dock or panel. Usually would be kept on top of any other window by the Window Manager.%%
  * **toolbar** - %%The window is used to hold a floating toolbar, or similar.%%
  * **menu** - %%Similar to #ELM_WIN_TOOLBAR.%%
  * **utility** - %%A persistent utility window, like a toolbox or palette.%%
  * **splash** - %%Splash window for a starting up application.%%
  * **dropdown_menu** - %%The window is a dropdown menu, as when an  entry in a menubar is clicked. This hint exists for completion only, as the EFL way of implementing a menu would not normally use a separate window for its contents.%%
  * **popup_menu** - %%Like #ELM_WIN_DROPDOWN_MENU, but for the menu triggered by right-clicking an object.%%
  * **tooltip** - %%The window is a tooltip. A short piece of explanatory text that typically appear after the mouse cursor hovers over an object for a while. Typically not very commonly used in the EFL.%%
  * **notification** - %%A notification window, like a warning about battery life or a new E-Mail received.%%
  * **combo** - %%A window holding the contents of a combo box. Not usually used in the EFL.%%
  * **dnd** - %%Used to indicate the window is a representation of an object being dragged across different windows, or even applications. Typically used with elm_win_override_set().%%
  * **inlined_image** - %%The window is rendered onto an image buffer. No actual window is created for this type, instead the window and all of its contents will be rendered to an image buffer. This allows to have children window inside a parent one just like any other object would be, and do other things like applying @ref Evas_Map effects to it. This is the only type of window that requires the parent parameter of @ref elm_win_add to be a valid %%[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]%%.%%
  * **socket_image** - %%The window is rendered onto an image buffer and can be shown other process's plug image object. No actual window is created for this type, instead the window and all of its contents will be rendered to an image buffer and can be shown other process's plug image object.%%
  * **fake** - %%This window was created using a pre-existing canvas. The window widget can be deleted, but the canvas must be managed externally.%%

