<title>Efl.Ui.Text.Anchor_Hover_Info</title>
===== Signature =====

<code>
struct Efl.Ui.Text.Anchor_Hover_Info {
    anchor_info: ptr(const(Efl.Ui.Text.Anchor_Info));
    hover: Elm.Hover;
    hover_parent: Efl.Ui.Text.Hover_Parent;
    hover_left: bool;
    hover_right: bool;
    hover_top: bool;
    hover_bottom: bool;
}
</code>

===== C signature =====

<code c>
typedef struct _Efl_Ui_Text_Anchor_Hover_Info {
    const Efl_Ui_Text_Anchor_Info *anchor_info;
    Elm_Hover *hover;
    Efl_Ui_Text_Hover_Parent hover_parent;
    Eina_Bool hover_left;
    Eina_Bool hover_right;
    Eina_Bool hover_top;
    Eina_Bool hover_bottom;
} Efl_Ui_Text_Anchor_Hover_Info;
</code>

===== Description =====

%%EFL text anchor hover information%%

{{page>:docs:efl:user:struct:efl:ui:text:anchor_hover_info:description&nodate&nolink&nouser}}

===== Fields =====

{{page>:docs:efl:user:struct:efl:ui:text:anchor_hover_info:fields&nodate&nolink&nouser}}

  * **anchor_info** - %%The actual anchor info.%%
  * **hover** - %%The hover object to use for the popup.%%
  * **hover_parent** - %%Hover parent widget%%
  * **hover_left** - %%Hint indicating if there's space for content on the left side of the hover. Before calling the callback, the widget will make the necessary calculations to check which sides are fit to be set with content, based on the position the hover is activated and its distance to the edges of its parent object%%
  * **hover_right** - %%Hint indicating content fits on the right side of the hover. See @.hover_left.%%
  * **hover_top** - %%Hint indicating content fits on top of the hover. @.hover_left.%%
  * **hover_bottom** - %%Hint indicating content fits below the hover. See @.hover_left.%%

