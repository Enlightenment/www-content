---
~~Title: Log Levels~~
---

# Log Levels #

EFL uses a common method to log error messages, called ``Eina_Log``, which allows you to adjust the verbosity of the logs using environment variables.

The ``Eina_Log`` module provides logging facilities for libraries and applications. It provides colored logging, basic logging levels (error, warning, debug, info, critical) and *logging domains*, or *loggers*. For those unfamiliar with this term, it offers a way to separate a set of log messages into a specific context (e.g. a module) and provides a way of controlling this set as a whole.

## Available Log Levels ##

| Level   | Number | Macro                         |
|---------|--------|-------------------------------|
|Critical |      0 | ``EINA_LOG_LEVEL_CRITICAL()`` |
|Error    |      1 | ``EINA_LOG_ERR()``            |
|Warning  |      2 | ``EINA_LOG_WARN()``           |
|Info     |      3 | ``EINA_LOG_INFO()``           |
|Debug    |      4 | ``EINA_LOG_DBG()``            |

## Logging Domains ##

Logging domains are a way to separate a set of log messages into a context (e.g. a module) and provide a way of controlling this set as a whole.

Suppose you have three different modules in your application and you want to get logging only from one of them (i.e. to create some sort of filter). To achieve that all you need to do is create a logging domain for each module so that all logging inside a module can be considered as a whole.

Logging domains are specified by a name, color applied to the name and the level. The first two (log name and log color) are set through code inside your application, module or library.

The log level is used to control which messages should appear. It specifies the lowest level that should be displayed, i.e. a message with level 2 being logged on a domain with level set to 3 would be displayed while a message with level 4 wouldn't.

## Setting the Log Level ##

Logging of domain and global messages can be controlled at runtime using the following environment variables.

> **NOTE:**
> If you compiled Eina without debug mode, execution will yield only one log message: "argument is negative".

### Domain Logging ###

Domain level logging is set during runtime, in contrast with the name and color, through the environment variable ``EINA_LOG_LEVELS``.

You can also use finer-grained control via the ``EINA_LOG_LEVELS`` environment variable:

```bash
EINA_LOG_LEVELS=module1:4,module2:2,module3:0 ./{application}
```

In this example the command would set the log level of ``module1`` to 4, ``module2`` to 2, and ``module3`` to 0.

### General Logging ###

The global logger to which ``EINA_LOG_{ERR, DBG, INFO, CRIT, WARN}`` macros log is created internally by ``Eina_Log`` with an empty name and can be used for general logging, where logging domains do not apply.

Since this global logger doesn't have a name, you can't set its level through the ``EINA_LOG_LEVELS`` variable. Instead, it is controlled via the ``EINA_LOG_LEVEL`` variable.

To set the general log level use the ``EINA_LOG_LEVEL`` environment variable:

```bash
EINA_LOG_LEVEL={N} ./{application}
```

Where ``{N}`` is the log level number and ``{application}`` the binary you are currently debugging.

The global ``EINA_LOG_LEVEL`` can also be set within your code using the ``eina_log_level_set()`` function.

While developing your libraries or applications, you may notice that ``EINA_LOG_DOM_{ERR, DBG, INFO, CRIT, WARN}`` macros also print out messages from ``eina`` itself. To tidy up the logging output use the following command to disable logging of intenal ``eina`` code:

```bash
EINA_LOG_LEVEL={N} EINA_LOG_LEVELS_GLOB=eina_*:0 ./{application}
```

Removing these internal logs from the output makes it easier for you to see your own domain messages.

## Eina_Log_Print() ##

``Eina`` provides ``eina_log_print()``, a standard function to manage all logging messages. This function may be called directly or using helper macros including ``EINA_LOG_DBG()``, ``EINA_LOG_ERR()`` or those that take a specific domain as an argument as with ``EINA_LOG_DOM_DBG()`` and ``EINA_LOG_DOM_ERR()``. Internally, ``eina_log_print()`` will call the function defined with ``eina_log_print_cb_set()``, which defaults to ``eina_log_print_cb_stderr()`` but may be changed to do whatever you need such as networking or syslog logging.

The logging system is thread-safe once initialized with ``eina_log_threads_enable()``. The thread that calls this function first is considered "main thread" and other threads will have their thread id (``pthread_self()``) printed in the log message so it is easy to detect from where the messages are coming.

The different logging levels serve to customize the amount of debugging information and may be used to automatically call ``abort()`` once a message of a given level is printed. This is controlled by the environment variable ``EINA_LOG_ABORT`` and the level to be considered critical with ``EINA_LOG_ABORT_LEVEL``. These can be changed with ``eina_log_abort_on_critical_set()`` and ``eina_log_abort_on_critical_level_set()``.

The default maximum level to print is defined by the environment variable ``EINA_LOG_LEVEL`` but may be set per-domain with ``EINA_LOG_LEVELS``. It will default to ``EINA_LOG_ERR``. This can be changed with ``eina_log_level_set()``.

To use the log system ``Eina`` must be initialized with ``eina_init()`` and later shut down with ``eina_shutdown()``.

### Controlling Print Callbacks ###

The log module allows the user to change the way ``eina_log_print()`` displays messages. It suffices to pass to ``eina_log_print_cb_set()`` the function used to display the message. That function must be of type ``#Eina_Log_Print_Cb``. As custom data can be passed to that callback, customized messages can be displayed.

It is suggested to not use ``__FILE__``, ``__FUNCTION__`` or ``__LINE__`` when writing that callback, but when defining macros like ``EINA_LOG_ERR()`` and others.