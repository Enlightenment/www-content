<title>Efl.Access.relationship_append</title>
===== Signature =====

<code>
relationship_append {
    params {
        @in type: Efl.Access.Relation_Type;
        @in relation_object: free(const(Efl.Access), efl_del);
    }
    return: bool;
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_access_relationship_append(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>

===== Parameters =====

  * **type** //(in)// - %%Relation type%%
  * **relation_object** //(in)// - %%Object to relate to%%

===== Description =====

%%Defines the relationship between two accessible objects.%%

%%Adds unique relation between source object and relation_object of a given type.%%

%%Relationships can be queried by Assistive Technology clients to provide customized feedback, improving overall user experience.%%

%%Relationship_append API is asymmetric, which means that appending, for example, relation EFL_ACCESS_RELATION_FLOWS_TO from object A to B, do NOT append relation EFL_ACCESS_RELATION_FLOWS_FROM from object B to object A.%%
{{page>:develop:api:user:mixin:efl:access:method:relationship_append:description&nouser&nolink&nodate}}

===== Implemented by =====

  * **Efl.Access.relationship_append**

