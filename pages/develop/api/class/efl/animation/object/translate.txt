<title>Efl.Animation.Object.Translate</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_animation_object_translate [fillcolor = "black", label = "Efl.Animation.Object.Translate", color = "gray15", fontcolor = "white", style = "filled"]
    efl_animation_object [fillcolor = "gray15", label = "Efl.Animation.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_animation_object_translate -> efl_animation_object
    efl_animation_object -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:efl:animation:object:translate|Efl.Animation.Object.Translate]] //(class)//**
    * [[:develop:api:class:efl:animation:object|Efl.Animation.Object]] //(class)//
      * [[:develop:api:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Efl translate animation object class%%

{{page>:develop:api:user:class:efl:animation:object:translate:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:cancel|cancel]]**
<code c>
void efl_animation_object_cancel(Eo *obj);
</code>

%%Cancel animation.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:pause|pause]]**
<code c>
void efl_animation_object_pause(Eo *obj);
</code>

%%Pause animation.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:resume|resume]]**
<code c>
void efl_animation_object_resume(Eo *obj);
</code>

%%Resume animation.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:start|start]]**
<code c>
void efl_animation_object_start(Eo *obj);
</code>

%%Start animation.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:property:auto_del|auto_del]]** //**(get, set)**//
<code c>
Eina_Bool efl_animation_object_auto_del_get(const Eo *obj);
void efl_animation_object_auto_del_set(Eo *obj, Eina_Bool auto_del);
</code>

\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:animation:object:method:destructor|destructor]]** //[Overridden in [[:develop:api:class:efl:animation:object|Efl.Animation.Object]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:animation:object:translate:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:target_map_reset|target_map_reset]]** ''protected''
<code c>
void efl_animation_object_target_map_reset(Eo *obj);
</code>

%%Reset the map effect of the target.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:target_state_reset|target_state_reset]]** ''protected''
<code c>
void efl_animation_object_target_state_reset(Eo *obj);
</code>

%%Reset the state of the target to the previously saved state.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:method:target_state_save|target_state_save]]** ''protected''
<code c>
void efl_animation_object_target_state_save(Eo *obj);
</code>

%%Save the state of the target.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:translate:method:progress_set|progress_set]]** //[Overridden here]// ''protected''
<code c>
void efl_animation_object_progress_set(Eo *obj, double progress);
</code>

%%Display the moment of animation according to the given progress.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:event:ended|ended]]**
<code c>
EFL_ANIMATION_OBJECT_EVENT_ENDED(void)
</code>

%%Animation is ended.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:event:running|running]]**
<code c>
EFL_ANIMATION_OBJECT_EVENT_RUNNING(void)
</code>

%%Animation is running.%%\\ 
\\ 
[[:develop:api:class:efl:animation:object|Efl.Animation.Object]].**[[:develop:api:class:efl:animation:object:event:started|started]]**
<code c>
EFL_ANIMATION_OBJECT_EVENT_STARTED(void)
</code>

%%Animation is started.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
