<title>Efl.Canvas.Text</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas_text [fillcolor = "black", label = "Efl.Canvas.Text", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_text [fillcolor = "gray15", label = "Efl.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_properties [fillcolor = "gray15", label = "Efl.Text.Properties", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_filter_internal [fillcolor = "gray15", label = "Efl.Canvas.Filter.Internal", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_gfx_filter [fillcolor = "gray15", label = "Efl.Gfx.Filter", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_text_font [fillcolor = "gray15", label = "Efl.Text.Font", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_style [fillcolor = "gray15", label = "Efl.Text.Style", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_format [fillcolor = "gray15", label = "Efl.Text.Format", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_cursor [fillcolor = "gray15", label = "Efl.Text.Cursor", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_annotate [fillcolor = "gray15", label = "Efl.Text.Annotate", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_markup [fillcolor = "gray15", label = "Efl.Text.Markup", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_cursor [fillcolor = "gray15", label = "Efl.Text.Cursor", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_canvas_text -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    efl_canvas_text -> efl_text
    efl_canvas_text -> efl_text_properties
    efl_canvas_text -> efl_canvas_filter_internal
    efl_canvas_filter_internal -> efl_gfx_filter
    efl_canvas_filter_internal -> efl_object
    efl_canvas_text -> efl_text_font
    efl_canvas_text -> efl_text_style
    efl_canvas_text -> efl_text_format
    efl_canvas_text -> efl_text_cursor
    efl_canvas_text -> efl_text_annotate
    efl_canvas_text -> efl_text_markup
    efl_text_markup -> efl_text_cursor
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:efl:canvas:text|Efl.Canvas.Text]] //(class)//**
    * [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
      * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
      * [[:develop:api:interface:efl:animator|Efl.Animator]] //(interface)//
      * [[:develop:api:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
      * [[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
      * [[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
        * [[:develop:api:interface:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:class:efl:loop_user|Efl.Loop_User]] //(class)//
        * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:interface:efl:text|Efl.Text]] //(interface)//
    * [[:develop:api:interface:efl:text:properties|Efl.Text.Properties]] //(interface)//
    * [[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]] //(mixin)//
      * [[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//
      * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:interface:efl:text:font|Efl.Text.Font]] //(interface)//
    * [[:develop:api:interface:efl:text:style|Efl.Text.Style]] //(interface)//
    * [[:develop:api:interface:efl:text:format|Efl.Text.Format]] //(interface)//
    * [[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]] //(interface)//
    * [[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]] //(interface)//
    * [[:develop:api:interface:efl:text:markup|Efl.Text.Markup]] //(interface)//
      * [[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]] //(interface)//

===== Description =====

%%Efl canvas text class%%

{{page>:develop:user:class:efl:canvas:text:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:class:efl:canvas:text:method:async_layout|async_layout]]**
<code c>
Eina_Future *efl_canvas_text_async_layout(Eo *obj);
</code>

%%Requests to layout the text off the mainloop.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:obstacle_add|obstacle_add]]**
<code c>
Eina_Bool efl_canvas_text_obstacle_add(Eo *obj, Efl_Canvas_Object *eo_obs);
</code>

%%Add obstacle evas object %%''eo_obs''%% to be observed during layout of text.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:obstacle_del|obstacle_del]]**
<code c>
Eina_Bool efl_canvas_text_obstacle_del(Eo *obj, Efl_Canvas_Object *eo_obs);
</code>

%%Removes %%''eo_obs''%% from observation during text layout.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:obstacles_update|obstacles_update]]**
<code c>
void efl_canvas_text_obstacles_update(Eo *obj);
</code>

%%Triggers for relayout due to obstacles' state change.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:range_delete|range_delete]]**
<code c>
void efl_canvas_text_range_delete(Eo *obj, Efl_Text_Cursor_Cursor *cur1, Efl_Text_Cursor_Cursor *cur2);
</code>

%%Deletes the range between given cursors.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:range_geometry_get|range_geometry_get]]**
<code c>
Eina_Iterator *efl_canvas_text_range_geometry_get(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Get the geometry of a range in the text.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:range_simple_geometry_get|range_simple_geometry_get]]**
<code c>
Eina_Iterator *efl_canvas_text_range_simple_geometry_get(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Get the "simple" geometry of a range.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:range_text_get|range_text_get]]**
<code c>
char *efl_canvas_text_range_text_get(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Returns the text in the range between %%''cur1''%% and %%''cur2''%%.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:method:visible_range_get|visible_range_get]]**
<code c>
Eina_Bool efl_canvas_text_visible_range_get(Eo *obj, Efl_Text_Cursor_Cursor *start, Efl_Text_Cursor_Cursor *end);
</code>

%%Returns the currently visible range.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:bidi_delimiters|bidi_delimiters]]** //**(get, set)**//
<code c>
const char *efl_canvas_text_bidi_delimiters_get(const Eo *obj);
void efl_canvas_text_bidi_delimiters_set(Eo *obj, const char *delim);
</code>

%%BiDi delimiters are used for in-paragraph separation of bidi segments. This is useful for example in recipients fields of e-mail clients where bidi oddities can occur when mixing RTL and LTR.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:is_empty|is_empty]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_text_is_empty_get(const Eo *obj);
</code>

%%Whether the object is empty (no text) or not%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:legacy_newline|legacy_newline]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_text_legacy_newline_get(const Eo *obj);
void efl_canvas_text_legacy_newline_set(Eo *obj, Eina_Bool mode);
</code>

%%When %%''true''%%, newline character will behave as a paragraph separator.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:size_formatted|size_formatted]]** //**(get)**//
<code c>
void efl_canvas_text_size_formatted_get(const Eo *obj, int *w, int *h);
</code>

%%The formatted width and height.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:size_native|size_native]]** //**(get)**//
<code c>
void efl_canvas_text_size_native_get(const Eo *obj, int *w, int *h);
</code>

%%The native width and height.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:style_insets|style_insets]]** //**(get)**//
<code c>
void efl_canvas_text_style_insets_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>

%%Gets the left, right, top and bottom insets of the text.%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:property:style|style]]** //**(get, set)**//
<code c>
const char *efl_canvas_text_style_get(const Eo *obj, const char *key);
void efl_canvas_text_style_set(Eo *obj, const char *key, const char *style);
</code>

%%The text style of the object.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:clipees_has|clipees_has]]**
<code c>
Eina_Bool efl_canvas_object_clipees_has(const Eo *obj);
</code>

%%Test if any object is clipped by %%''obj''%%.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:event_animation_get|event_animation_get]]**
<code c>
Efl_Object *efl_canvas_object_event_animation_get(Eo *obj, const Efl_Event_Description *event_type);
</code>

%%Get the %%''animation''%% which starts when the given %%''event''%% happens to the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:event_animation_set|event_animation_set]]**
<code c>
void efl_canvas_object_event_animation_set(Eo *obj, const Efl_Event_Description *event_type, Efl_Object *animation);
</code>

%%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:key_grab|key_grab]]**
<code c>
Eina_Bool efl_canvas_object_key_grab(Eo *obj, const char *keyname, Efl_Input_Modifier modifiers, Efl_Input_Modifier not_modifiers, Eina_Bool exclusive);
</code>

%%Requests %%''keyname''%% key events be directed to %%''obj''%%.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:key_ungrab|key_ungrab]]**
<code c>
void efl_canvas_object_key_ungrab(Eo *obj, const char *keyname, Efl_Input_Modifier modifiers, Efl_Input_Modifier not_modifiers);
</code>

%%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:pointer_coords_inside_get|pointer_coords_inside_get]]**
<code c>
Eina_Bool efl_canvas_object_pointer_coords_inside_get(Eo *obj, int x, int y);
</code>

%%Returns whether the coords are logically inside the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:seat_focus_add|seat_focus_add]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_add(Eo *obj, Efl_Input_Device *seat);
</code>

%%Add a seat to the focus list.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:seat_focus_check|seat_focus_check]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_check(Eo *obj, Efl_Input_Device *seat);
</code>

%%Check if this object is focused by a given seat%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:method:seat_focus_del|seat_focus_del]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_del(Eo *obj, Efl_Input_Device *seat);
</code>

%%Remove a seat from the focus list.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_anti_alias_get(const Eo *obj);
void efl_canvas_object_anti_alias_set(Eo *obj, Eina_Bool anti_alias);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:clipees|clipees]]** //**(get)**//
<code c>
Eina_Iterator *efl_canvas_object_clipees_get(const Eo *obj);
</code>

%%Return a list of objects currently clipped by %%''obj''%%.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:clip|clip]]** //**(get, set)**//
<code c>
Efl_Canvas_Object *efl_canvas_object_clip_get(const Eo *obj);
void efl_canvas_object_clip_set(Eo *obj, Efl_Canvas_Object *clip);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:is_frame_object|is_frame_object]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_is_frame_object_get(const Eo *obj);
void efl_canvas_object_is_frame_object_set(Eo *obj, Eina_Bool is_frame);
</code>

%%If %%''true''%% the object belongs to the window border decorations.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_key_focus_get(const Eo *obj);
void efl_canvas_object_key_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Indicates that this object is the keyboard event receiver on its canvas.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:no_render|no_render]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_no_render_get(const Eo *obj);
void efl_canvas_object_no_render_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_pass_events_get(const Eo *obj);
void efl_canvas_object_pass_events_set(Eo *obj, Eina_Bool pass);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pointer_device_in|pointer_device_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_device_in_get(const Eo *obj, Efl_Input_Device *pointer);
</code>

%%Read-only value indicating whether a pointer is in the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pointer_inside_by_device|pointer_inside_by_device]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_inside_by_device_get(const Eo *obj, Efl_Input_Device *dev);
</code>

%%Returns whether the mouse pointer is logically inside the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the default mouse pointer is logically inside the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pointer_in|pointer_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_in_get(const Eo *obj);
</code>

%%Read-only value indicating whether the main pointer is in the object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_by_device_get(const Eo *obj, Efl_Input_Device *dev);
Eina_Bool efl_canvas_object_pointer_mode_by_device_set(Eo *obj, Efl_Input_Device *dev, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour by device. See %%[[:develop:api:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_get(const Eo *obj);
Eina_Bool efl_canvas_object_pointer_mode_set(Eo *obj, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_propagate_events_get(const Eo *obj);
void efl_canvas_object_propagate_events_set(Eo *obj, Eina_Bool propagate);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**//
<code c>
Efl_Gfx_Render_Op efl_canvas_object_render_op_get(const Eo *obj);
void efl_canvas_object_render_op_set(Eo *obj, Efl_Gfx_Render_Op render_op);
</code>

%%Render mode to be used for compositing the Evas object.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_repeat_events_get(const Eo *obj);
void efl_canvas_object_repeat_events_set(Eo *obj, Eina_Bool repeat);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:scale|scale]]** //**(get, set)**//
<code c>
double efl_canvas_object_scale_get(const Eo *obj);
void efl_canvas_object_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_seat_focus_get(const Eo *obj);
</code>

%%Check if this object is focused.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:text:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Bidirectional_Type efl_canvas_object_paragraph_direction_get(const Eo *obj);
void efl_canvas_object_paragraph_direction_set(Eo *obj, Efl_Text_Bidirectional_Type dir);
</code>

%%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%%\\ 
\\ 
[[:develop:api:class:efl:loop_user|Efl.Loop_User]].**[[:develop:api:class:efl:canvas:object:property:loop|loop]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:object:method:debug_name_override|debug_name_override]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:object:method:del|del]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:object:method:finalize|finalize]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:object:method:provider_find|provider_find]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:text:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:text:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:develop:api:class:efl:canvas:text:property:filter_data|filter_data]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_gfx_filter_data_get(const Eo *obj, const char *name, const char **value, Eina_Bool *execute);
void efl_gfx_filter_data_set(Eo *obj, const char *name, const char *value, Eina_Bool execute);
</code>

%%Extra data used by the filter program.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:develop:api:class:efl:canvas:text:property:filter_program|filter_program]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_gfx_filter_program_get(const Eo *obj, const char **code, const char **name);
void efl_gfx_filter_program_set(Eo *obj, const char *code, const char *name);
</code>

\\ 
[[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:develop:api:class:efl:canvas:text:property:filter_source|filter_source]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>

%%Bind an object to use as a mask or texture in a filter program.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:develop:api:mixin:efl:canvas:filter:internal:property:filter_padding|filter_padding]]** //**(get)**// //[Overridden in [[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]]]//
<code c>
void efl_gfx_filter_padding_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>

%%Required padding to apply this filter without cropping.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]].**[[:develop:api:mixin:efl:canvas:filter:internal:property:filter_state|filter_state]]** //**(get, set)**// //[Overridden in [[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]]]//
<code c>
void efl_gfx_filter_state_get(const Eo *obj, const char **cur_state, double *cur_val, const char **next_state, double *next_val, double *pos);
void efl_gfx_filter_state_set(Eo *obj, const char *cur_state, double cur_val, const char *next_state, double next_val, double pos);
</code>

%%Set the current state of the filter.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, Eina_Size2D *sz);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, Eina_Size2D sz);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_hint_combined_min_get(const Eo *obj);
</code>

%%Read-only minimum size combining both %%[[:develop:api:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_hint_max_get(const Eo *obj);
void efl_gfx_size_hint_max_set(Eo *obj, Eina_Size2D sz);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_hint_min_get(const Eo *obj);
void efl_gfx_size_hint_min_set(Eo *obj, Eina_Size2D sz);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]// ''protected set''
<code c>
Eina_Size2D efl_gfx_size_hint_restricted_min_get(const Eo *obj);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, Eina_Size2D sz);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:class:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_base_get(const Eo *obj);
void efl_gfx_size_hint_base_set(Eo *obj, Eina_Size2D sz);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_step_get(const Eo *obj);
void efl_gfx_size_hint_step_set(Eo *obj, Eina_Size2D sz);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:method:lower|lower]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:method:raise|raise]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:method:stack_above|stack_above]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:method:stack_below|stack_below]]** //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:property:above|above]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:property:below|below]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:canvas:object:property:layer|layer]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:canvas:object:property:color|color]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Rect efl_gfx_geometry_get(const Eo *obj);
void efl_gfx_geometry_set(Eo *obj, Eina_Rect rect);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:canvas:object:property:position|position]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:canvas:object:property:size|size]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:canvas:object:property:visible|visible]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

%%The visibility of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:class:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:method:annotation_del|annotation_del]]** //[Overridden here]//
<code c>
Eina_Bool efl_text_annotation_del(Eo *obj, Efl_Text_Annotate_Annotation *annotation);
</code>

%%Deletes given annotation.%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:method:annotation_insert|annotation_insert]]** //[Overridden here]//
<code c>
Efl_Text_Annotate_Annotation *efl_text_annotation_insert(Eo *obj, Efl_Text_Cursor_Cursor *start, Efl_Text_Cursor_Cursor *end, const char *format);
</code>

%%Inserts an annotation format in a specified range [%%''start''%%, %%''end''%% - 1].%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:method:annotation_positions_get|annotation_positions_get]]** //[Overridden here]//
<code c>
void efl_text_annotation_positions_get(Eo *obj, const Efl_Text_Annotate_Annotation *annotation, Efl_Text_Cursor_Cursor *start, Efl_Text_Cursor_Cursor *end);
</code>

%%Sets given cursors to the start and end positions of the annotation.%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:method:cursor_object_item_insert|cursor_object_item_insert]]** //[Overridden here]//
<code c>
Efl_Text_Annotate_Annotation *efl_text_cursor_object_item_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *format);
</code>

%%Inserts a object item at specified position.%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:method:object_item_geometry_get|object_item_geometry_get]]** //[Overridden here]//
<code c>
Eina_Bool efl_text_object_item_geometry_get(Eo *obj, const Efl_Text_Annotate_Annotation *an, int *x, int *y, int *w, int *h);
</code>

%%Queries a given object item for its geometry.%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:method:range_annotations_get|range_annotations_get]]** //[Overridden here]//
<code c>
Eina_Iterator *efl_text_range_annotations_get(Eo *obj, const Efl_Text_Cursor_Cursor *start, const Efl_Text_Cursor_Cursor *end);
</code>

%%Returns an iterator of all the handles in a range.%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:property:annotation|annotation]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_annotation_get(const Eo *obj, Efl_Text_Annotate_Annotation *annotation);
Eina_Bool efl_text_annotation_set(Eo *obj, Efl_Text_Annotate_Annotation *annotation, const char *format);
</code>

%%A new format for %%''annotation''%%.%%\\ 
\\ 
[[:develop:api:interface:efl:text:annotate|Efl.Text.Annotate]].**[[:develop:api:class:efl:canvas:text:property:cursor_object_item_annotation|cursor_object_item_annotation]]** //**(get)**// //[Overridden here]//
<code c>
Efl_Text_Annotate_Annotation *efl_text_cursor_object_item_annotation_get(const Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%The object-item annotation at the cursor's position.%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_char_delete|cursor_char_delete]]** //[Overridden here]//
<code c>
void efl_text_cursor_char_delete(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Deletes a single character from position pointed by given cursor.%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_char_next|cursor_char_next]]** //[Overridden here]//
<code c>
void efl_text_cursor_char_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the next character%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_char_prev|cursor_char_prev]]** //[Overridden here]//
<code c>
void efl_text_cursor_char_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the previous character%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_compare|cursor_compare]]** //[Overridden here]//
<code c>
int efl_text_cursor_compare(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Compare two cursors%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_coord_set|cursor_coord_set]]** //[Overridden here]//
<code c>
void efl_text_cursor_coord_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int x, int y);
</code>

%%Set cursor coordinates%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_copy|cursor_copy]]** //[Overridden here]//
<code c>
void efl_text_cursor_copy(Eo *obj, Efl_Text_Cursor_Cursor *dst, const Efl_Text_Cursor_Cursor *src);
</code>

%%Copy existing cursor%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_equal|cursor_equal]]** //[Overridden here]//
<code c>
Eina_Bool efl_text_cursor_equal(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Check if two cursors are equal%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_free|cursor_free]]** //[Overridden here]//
<code c>
void efl_text_cursor_free(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Free existing cursor%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_line_char_first|cursor_line_char_first]]** //[Overridden here]//
<code c>
void efl_text_cursor_line_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current line first character%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_line_char_last|cursor_line_char_last]]** //[Overridden here]//
<code c>
void efl_text_cursor_line_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current line last character%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_line_jump_by|cursor_line_jump_by]]** //[Overridden here]//
<code c>
void efl_text_cursor_line_jump_by(Eo *obj, Efl_Text_Cursor_Cursor *cur, int by);
</code>

%%Jump the cursor by the given number of lines%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_new|cursor_new]]** //[Overridden here]//
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_new(Eo *obj);
</code>

%%Create new cursor%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]** //[Overridden here]//
<code c>
void efl_text_cursor_paragraph_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the first character in this paragraph%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]** //[Overridden here]//
<code c>
void efl_text_cursor_paragraph_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the last character in this paragraph%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_paragraph_first|cursor_paragraph_first]]** //[Overridden here]//
<code c>
void efl_text_cursor_paragraph_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current paragraph first character%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_paragraph_last|cursor_paragraph_last]]** //[Overridden here]//
<code c>
void efl_text_cursor_paragraph_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current paragraph last character%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_paragraph_next|cursor_paragraph_next]]** //[Overridden here]//
<code c>
void efl_text_cursor_paragraph_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the start of the next text node%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_paragraph_prev|cursor_paragraph_prev]]** //[Overridden here]//
<code c>
void efl_text_cursor_paragraph_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the end of the previous text node%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_text_insert|cursor_text_insert]]** //[Overridden here]//
<code c>
int efl_text_cursor_text_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *text);
</code>

%%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_word_end|cursor_word_end]]** //[Overridden here]//
<code c>
void efl_text_cursor_word_end(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current word end%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:method:cursor_word_start|cursor_word_start]]** //[Overridden here]//
<code c>
void efl_text_cursor_word_start(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current word start%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:property:cursor_content|cursor_content]]** //**(get)**// //[Overridden here]//
<code c>
Eina_Unicode efl_text_cursor_content_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur);
</code>

%%The content of the cursor (the character under the cursor)%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:property:cursor_geometry|cursor_geometry]]** //**(get)**// //[Overridden here]//
<code c>
Eina_Bool efl_text_cursor_geometry_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur, Efl_Text_Cursor_Cursor_Type ctype, int *cx, int *cy, int *cw, int *ch, int *cx2, int *cy2, int *cw2, int *ch2);
</code>

%%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:property:cursor_position|cursor_position]]** //**(get, set)**// //[Overridden here]//
<code c>
int efl_text_cursor_position_get(const Eo *obj, Efl_Text_Cursor_Cursor *cur);
void efl_text_cursor_position_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int position);
</code>

%%Cursor position%%\\ 
\\ 
[[:develop:api:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:api:class:efl:canvas:text:property:cursor|cursor]]** //**(get)**// //[Overridden here]//
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_get(const Eo *obj, Efl_Text_Cursor_Cursor_Get_Type get_type);
</code>

%%The object's main cursor.%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_bitmap_scalable|font_bitmap_scalable]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Font_Bitmap_Scalable efl_text_font_bitmap_scalable_get(const Eo *obj);
void efl_text_font_bitmap_scalable_set(Eo *obj, Efl_Text_Font_Bitmap_Scalable scalable);
</code>

%%The bitmap fonts have fixed size glyphs for several available sizes. Basically, it is not scalable. But, it needs to be scalable for some use cases. (ex. colorful emoji fonts)%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_fallbacks|font_fallbacks]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_font_fallbacks_get(const Eo *obj);
void efl_text_font_fallbacks_set(Eo *obj, const char *font_fallbacks);
</code>

%%Comma-separated list of font fallbacks%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_lang|font_lang]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_font_lang_get(const Eo *obj);
void efl_text_font_lang_set(Eo *obj, const char *lang);
</code>

%%Specific language of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_slant|font_slant]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Font_Slant efl_text_font_slant_get(const Eo *obj);
void efl_text_font_slant_set(Eo *obj, Efl_Text_Font_Slant style);
</code>

%%Type of slant of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_source|font_source]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_font_source_get(const Eo *obj);
void efl_text_font_source_set(Eo *obj, const char *font_source);
</code>

%%The source that will be used to lookup the font of the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_weight|font_weight]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Font_Weight efl_text_font_weight_get(const Eo *obj);
void efl_text_font_weight_set(Eo *obj, Efl_Text_Font_Weight font_weight);
</code>

%%Type of weight of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font_width|font_width]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Font_Width efl_text_font_width_get(const Eo *obj);
void efl_text_font_width_set(Eo *obj, Efl_Text_Font_Width width);
</code>

%%Type of width of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:class:efl:canvas:text:property:font|font]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_font_get(const Eo *obj, const char **font, int *size);
void efl_text_font_set(Eo *obj, const char *font, int size);
</code>

%%The font name and size that is used for the displayed text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:ellipsis|ellipsis]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_text_ellipsis_get(const Eo *obj);
void efl_text_ellipsis_set(Eo *obj, double value);
</code>

%%Ellipsis value (number from -1.0 to 1.0)%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:halign|halign]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Format_Horizontal_Alignment_Type efl_text_halign_get(const Eo *obj);
void efl_text_halign_set(Eo *obj, Efl_Text_Format_Horizontal_Alignment_Type value);
</code>

%%Horizontal alignment of text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:linegap|linegap]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_text_linegap_get(const Eo *obj);
void efl_text_linegap_set(Eo *obj, double value);
</code>

%%Minimal line gap (top and bottom) for each line in the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:linerelgap|linerelgap]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_text_linerelgap_get(const Eo *obj);
void efl_text_linerelgap_set(Eo *obj, double value);
</code>

%%Relative line gap (top and bottom) for each line in the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:multiline|multiline]]** //**(get, set)**// //[Overridden here]//
<code c>
Eina_Bool efl_text_multiline_get(const Eo *obj);
void efl_text_multiline_set(Eo *obj, Eina_Bool enabled);
</code>

%%Multiline is enabled or not%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:password|password]]** //**(get, set)**// //[Overridden here]//
<code c>
Eina_Bool efl_text_password_get(const Eo *obj);
void efl_text_password_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether text is a password%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:replacement_char|replacement_char]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_replacement_char_get(const Eo *obj);
void efl_text_replacement_char_set(Eo *obj, const char *repch);
</code>

%%The character used to replace characters that can not be displayed%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:tabstops|tabstops]]** //**(get, set)**// //[Overridden here]//
<code c>
int efl_text_tabstops_get(const Eo *obj);
void efl_text_tabstops_set(Eo *obj, int value);
</code>

%%Tabstops value%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:valign|valign]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Format_Vertical_Alignment_Type efl_text_valign_get(const Eo *obj);
void efl_text_valign_set(Eo *obj, Efl_Text_Format_Vertical_Alignment_Type value);
</code>

%%Vertical alignment of text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:class:efl:canvas:text:property:wrap|wrap]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Format_Wrap efl_text_wrap_get(const Eo *obj);
void efl_text_wrap_set(Eo *obj, Efl_Text_Format_Wrap wrap);
</code>

%%Wrap mode for use in the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:markup|Efl.Text.Markup]].**[[:develop:api:class:efl:canvas:text:method:cursor_markup_insert|cursor_markup_insert]]** //[Overridden here]//
<code c>
void efl_text_markup_cursor_markup_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *markup);
</code>

%%Inserts a markup text to the text object in a given cursor position%%\\ 
\\ 
[[:develop:api:interface:efl:text:markup|Efl.Text.Markup]].**[[:develop:api:class:efl:canvas:text:property:markup|markup]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_markup_get(const Eo *obj);
void efl_text_markup_set(Eo *obj, const char *markup);
</code>

\\ 
[[:develop:api:interface:efl:text:properties|Efl.Text.Properties]].**[[:develop:api:interface:efl:text:properties:property:font_source|font_source]]** //**(get, set)**//
<code c>
const char *efl_text_properties_font_source_get(const Eo *obj);
void efl_text_properties_font_source_set(Eo *obj, const char *font_source);
</code>

\\ 
[[:develop:api:interface:efl:text:properties|Efl.Text.Properties]].**[[:develop:api:interface:efl:text:properties:property:font|font]]** //**(get, set)**//
<code c>
void efl_text_properties_font_get(const Eo *obj, const char **font, Efl_Font_Size *size);
void efl_text_properties_font_set(Eo *obj, const char *font, Efl_Font_Size size);
</code>

\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:backing_color|backing_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_backing_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_backing_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Backing color%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:backing_type|backing_type]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Style_Backing_Type efl_text_backing_type_get(const Eo *obj);
void efl_text_backing_type_set(Eo *obj, Efl_Text_Style_Backing_Type type);
</code>

%%Enable or disable backing type%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:effect_type|effect_type]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Style_Effect_Type efl_text_effect_type_get(const Eo *obj);
void efl_text_effect_type_set(Eo *obj, Efl_Text_Style_Effect_Type type);
</code>

%%Type of effect used for the displayed text%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:gfx_filter|gfx_filter]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_gfx_filter_get(const Eo *obj);
void efl_text_gfx_filter_set(Eo *obj, const char *code);
</code>

%%Program that applies a special filter%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:glow2_color|glow2_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_glow2_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_glow2_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Second color of the glow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:glow_color|glow_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_glow_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_glow_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of glow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:normal_color|normal_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_normal_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_normal_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of text, excluding style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:outline_color|outline_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_outline_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_outline_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of outline effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:shadow_color|shadow_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_shadow_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_shadow_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of shadow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:shadow_direction|shadow_direction]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Style_Shadow_Direction efl_text_shadow_direction_get(const Eo *obj);
void efl_text_shadow_direction_set(Eo *obj, Efl_Text_Style_Shadow_Direction type);
</code>

%%Direction of shadow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:strikethrough_color|strikethrough_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_strikethrough_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_strikethrough_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of strikethrough_style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:strikethrough_type|strikethrough_type]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Style_Strikethrough_Type efl_text_strikethrough_type_get(const Eo *obj);
void efl_text_strikethrough_type_set(Eo *obj, Efl_Text_Style_Strikethrough_Type type);
</code>

%%Type of strikethrough style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline2_color|underline2_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_underline2_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_underline2_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of underline2 style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline2_type|underline2_type]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Style_Underline_Type efl_text_underline2_type_get(const Eo *obj);
void efl_text_underline2_type_set(Eo *obj, Efl_Text_Style_Underline_Type type);
</code>

%%Type of underline2 style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline_color|underline_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_underline_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_underline_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of normal underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline_dashed_color|underline_dashed_color]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_text_underline_dashed_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_underline_dashed_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of dashed underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline_dashed_gap|underline_dashed_gap]]** //**(get, set)**// //[Overridden here]//
<code c>
int efl_text_underline_dashed_gap_get(const Eo *obj);
void efl_text_underline_dashed_gap_set(Eo *obj, int gap);
</code>

%%Gap of dashed underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline_dashed_width|underline_dashed_width]]** //**(get, set)**// //[Overridden here]//
<code c>
int efl_text_underline_dashed_width_get(const Eo *obj);
void efl_text_underline_dashed_width_set(Eo *obj, int width);
</code>

%%Width of dashed underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline_height|underline_height]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_text_underline_height_get(const Eo *obj);
void efl_text_underline_height_set(Eo *obj, double height);
</code>

%%Height of underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:class:efl:canvas:text:property:underline_type|underline_type]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Text_Style_Underline_Type efl_text_underline_type_get(const Eo *obj);
void efl_text_underline_type_set(Eo *obj, Efl_Text_Style_Underline_Type type);
</code>

%%Sets an underline style on the text%%\\ 
\\ 
[[:develop:api:interface:efl:text|Efl.Text]].**[[:develop:api:class:efl:canvas:text:property:text|text]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_text_get(const Eo *obj);
void efl_text_set(Eo *obj, const char *text);
</code>

\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]**
<code c>
void efl_gfx_map_lightning_3d_absolute(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Apply a lightning effect on the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:lightning_3d|lightning_3d]]**
<code c>
void efl_gfx_map_lightning_3d(Eo *obj, const Efl_Gfx *pivot, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Apply a lightning effect on the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:map_has|map_has]]**
<code c>
Eina_Bool efl_gfx_map_has(Eo *obj);
</code>

%%Read-only property indicating whether an object is mapped.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:map_reset|map_reset]]**
<code c>
void efl_gfx_map_reset(Eo *obj);
</code>

%%Resets the map transformation to its default state.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]**
<code c>
void efl_gfx_map_perspective_3d_absolute(Eo *obj, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:perspective_3d|perspective_3d]]**
<code c>
void efl_gfx_map_perspective_3d(Eo *obj, const Efl_Gfx *pivot, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]**
<code c>
void efl_gfx_map_rotate_3d_absolute(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>

%%Rotate the object around 3 axes in 3D, using absolute coordinates.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:rotate_3d|rotate_3d]]**
<code c>
void efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>

%%Rotate the object around 3 axes in 3D.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:rotate_absolute|rotate_absolute]]**
<code c>
void efl_gfx_map_rotate_absolute(Eo *obj, double degrees, double cx, double cy);
</code>

%%Apply a rotation to the object, using absolute coordinates.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]**
<code c>
void efl_gfx_map_rotate_quat_absolute(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

%%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:rotate_quat|rotate_quat]]**
<code c>
void efl_gfx_map_rotate_quat(Eo *obj, double qx, double qy, double qz, double qw, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>

%%Rotate the object in 3D using a unit quaternion.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:rotate|rotate]]**
<code c>
void efl_gfx_map_rotate(Eo *obj, double degrees, const Efl_Gfx *pivot, double cx, double cy);
</code>

%%Apply a rotation to the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:translate|translate]]**
<code c>
void efl_gfx_map_translate(Eo *obj, double dx, double dy, double dz);
</code>

%%Apply a translation to the object using map.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:zoom_absolute|zoom_absolute]]**
<code c>
void efl_gfx_map_zoom_absolute(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>

%%Apply a zoom to the object, using absolute coordinates.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:method:zoom|zoom]]**
<code c>
void efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, const Efl_Gfx *pivot, double cx, double cy);
</code>

%%Apply a zoom to the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Alpha flag for map rendering.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>

%%Clockwise state of a map (read-only).%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

%%Color of a vertex in the map.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**//
<code c>
void efl_gfx_map_coord_absolute_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_coord_absolute_set(Eo *obj, int idx, double x, double y, double z);
</code>

%%A point's absolute coordinate on the canvas.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**//
<code c>
int efl_gfx_map_point_count_get(const Eo *obj);
void efl_gfx_map_point_count_set(Eo *obj, int count);
</code>

%%Number of points of a map.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>

%%Smoothing state for map rendering.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:api:mixin:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**//
<code c>
void efl_gfx_map_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_uv_set(Eo *obj, int idx, double u, double v);
</code>

%%Map point's U and V texture source point.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:api:class:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// ''protected''
<code c>
Efl_Canvas_Object *efl_canvas_object_render_parent_get(const Eo *obj);
</code>

%%Gets the parent smart object of a given Evas object, if it has one.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:class:efl:canvas:text:method:filter_dirty|filter_dirty]]** //[Overridden here]// ''protected''
<code c>
void evas_filter_dirty(Eo *obj);
</code>

%%Called when the filter changes must trigger a redraw of the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:class:efl:canvas:text:method:filter_input_render|filter_input_render]]** //[Overridden here]// ''protected''
<code c>
Eina_Bool evas_filter_input_render(Eo *obj, void *filter, void *engine, void *output, void *drawctx, void *data, int l, int r, int t, int b, int x, int y, Eina_Bool do_async);
</code>

%%Called by Efl.Canvas.Filter.Internal when the parent class must render the input.%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:class:efl:canvas:text:method:filter_state_prepare|filter_state_prepare]]** //[Overridden here]// ''protected''
<code c>
void evas_filter_state_prepare(Eo *obj, Efl_Canvas_Filter_State *state, void *data);
</code>

%%Called by Efl.Canvas.Filter.Internal to request the parent class for state information (color, etc...).%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:mixin:efl:canvas:filter:internal:method:filter_input_alpha|filter_input_alpha]]** ''protected''
<code c>
Eina_Bool evas_filter_input_alpha(Eo *obj);
</code>

%%Called by Efl.Canvas.Filter.Internal to determine whether the input is alpha or rgba.%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:mixin:efl:canvas:filter:internal:property:filter_changed|filter_changed]]** //**(set)**// ''protected''
<code c>
void evas_filter_changed_set(Eo *obj, Eina_Bool val);
</code>

%%Marks this filter as changed.%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:mixin:efl:canvas:filter:internal:property:filter_invalid|filter_invalid]]** //**(set)**// ''protected''
<code c>
void evas_filter_invalid_set(Eo *obj, Eina_Bool val);
</code>

%%Marks this filter as invalid.%%\\ 
\\ 
[[:develop:api:mixin:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]].**[[:develop:api:mixin:efl:canvas:filter:internal:property:filter_output_buffer|filter_output_buffer]]** //**(get)**// ''protected''
<code c>
void *evas_filter_output_buffer_get(const Eo *obj);
</code>

%%Retrieve cached output buffer, if any.%%\\ 
\\ 

===== Events =====

**[[:develop:api:class:efl:canvas:text:event:changed|changed]]**
<code c>
EFL_CANVAS_TEXT_EVENT_CHANGED(void)
</code>

%%Called when canvas text changed%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:event:cursor_changed|cursor,changed]]**
<code c>
EFL_CANVAS_TEXT_EVENT_CURSOR_CHANGED(void)
</code>

%%Called when cursor changed%%\\ 
\\ 
**[[:develop:api:class:efl:canvas:text:event:style_insets_changed|style_insets,changed]]**
<code c>
EFL_CANVAS_TEXT_EVENT_STYLE_INSETS_CHANGED(void)
</code>

%%Called when the property %%[[:develop:api:class:efl:canvas:text:property:style_insets|Efl.Canvas.Text.style_insets]]%% changed.%%\\ 
\\ 
==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:interface:efl:animator|Efl.Animator]].**[[:develop:api:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:api:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:develop:api:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:api:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
