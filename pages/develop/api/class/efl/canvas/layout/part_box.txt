<title>Efl.Canvas.Layout.Part_Box</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas_layout_part_box [fillcolor = "black", label = "Efl.Canvas.Layout.Part_Box", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_layout_part [fillcolor = "gray15", label = "Efl.Canvas.Layout.Part", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_drag [fillcolor = "gray15", label = "Efl.Ui.Drag", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack_linear [fillcolor = "gray15", label = "Efl.Pack.Linear", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack [fillcolor = "gray15", label = "Efl.Pack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_direction [fillcolor = "gray15", label = "Efl.Ui.Direction", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_canvas_layout_part_box -> efl_canvas_layout_part
    efl_canvas_layout_part -> efl_object
    efl_canvas_layout_part -> efl_gfx
    efl_canvas_layout_part -> efl_ui_drag
    efl_canvas_layout_part_box -> efl_pack_linear
    efl_pack_linear -> efl_pack
    efl_pack -> efl_container
    efl_container -> efl_gfx
    efl_canvas_layout_part_box -> efl_ui_direction
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:efl:canvas:layout:part_box|Efl.Canvas.Layout.Part_Box]] //(class)//**
    * [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] //(class)//
      * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]] //(interface)//
    * [[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]] //(interface)//
      * [[:develop:api:interface:efl:pack|Efl.Pack]] //(interface)//
        * [[:develop:api:interface:efl:container|Efl.Container]] //(interface)//
          * [[:develop:api:interface:efl:gfx|Efl.Gfx]] //(interface)//
    * [[:develop:api:interface:efl:ui:direction|Efl.Ui.Direction]] //(interface)//

===== Description =====

%%Represents a Box created as part of a layout.%%

%%Its lifetime is limited to one function call only, unless an extra reference is explicitely held.%%

{{page>:develop:api:user:class:efl:canvas:layout:part_box:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]].**[[:develop:api:class:efl:canvas:layout:part:property:part_type|part_type]]** //**(get)**//
<code c>
Efl_Canvas_Layout_Part_Type efl_canvas_layout_part_type_get(const Eo *obj);
</code>

%%Type of this part in the layout.%%\\ 
\\ 
[[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]].**[[:develop:api:class:efl:canvas:layout:part:property:state|state]]** //**(get)**//
<code c>
void efl_canvas_layout_part_state_get(const Eo *obj, const char **state, double *val);
</code>

%%The name and value of the current state of this part (read-only).%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:canvas:layout:part:method:finalize|finalize]]** //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:constructor|constructor]]**
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:destructor|destructor]]**
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:class:efl:canvas:layout:part_box:method:content_count|content_count]]** //[Overridden here]//
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:class:efl:canvas:layout:part_box:method:content_iterate|content_iterate]]** //[Overridden here]//
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:class:efl:canvas:layout:part_box:method:content_remove|content_remove]]** //[Overridden here]//
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:method:content_unset|content_unset]]**
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:property:content|content]]** //**(get, set)**//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:canvas:layout:part:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Rect efl_gfx_geometry_get(const Eo *obj);
void efl_gfx_geometry_set(Eo *obj, Eina_Rect rect);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:property:color|color]]** //**(get, set)**//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:property:position|position]]** //**(get, set)**//
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:property:size|size]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:property:visible|visible]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

%%The visibility of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_after|pack_after]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_after(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Append item after other sub object.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_at|pack_at]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_at(Eo *obj, Efl_Gfx *subobj, int index);
</code>

%%Inserts %%''subobj''%% at the specified %%''index''%%.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_before|pack_before]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_before(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Prepend item before other sub object.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_begin|pack_begin]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_begin(Eo *obj, Efl_Gfx *subobj);
</code>

%%Prepend an object at the beginning of this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_content_get|pack_content_get]]** //[Overridden here]//
<code c>
Efl_Gfx *efl_pack_content_get(Eo *obj, int index);
</code>

%%Content at a given index in this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_end|pack_end]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_end(Eo *obj, Efl_Gfx *subobj);
</code>

%%Append object at the end of this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_index_get|pack_index_get]]** //[Overridden here]//
<code c>
int efl_pack_index_get(Eo *obj, const Efl_Gfx *subobj);
</code>

%%Get the index of a child in this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_unpack_at|pack_unpack_at]]** //[Overridden here]//
<code c>
Efl_Gfx *efl_pack_unpack_at(Eo *obj, int index);
</code>

%%Pop out item at specified %%''index''%%.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack_clear|pack_clear]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_clear(Eo *obj);
</code>

%%Removes all packed contents, and unreferences them.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:class:efl:canvas:layout:part_box:method:pack|pack]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Adds an item to this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:class:efl:canvas:layout:part_box:method:unpack_all|unpack_all]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_unpack_all(Eo *obj);
</code>

%%Removes all packed contents, without unreferencing them.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:class:efl:canvas:layout:part_box:method:unpack|unpack]]** //[Overridden here]//
<code c>
Eina_Bool efl_pack_unpack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Removes an existing item from the container, without deleting it.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:property:pack_align|pack_align]]** //**(get, set)**//
<code c>
void efl_pack_align_get(const Eo *obj, double *align_horiz, double *align_vert);
void efl_pack_align_set(Eo *obj, double align_horiz, double align_vert);
</code>

%%Alignment of the container within its bounds%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**//
<code c>
void efl_pack_padding_get(const Eo *obj, double *pad_horiz, double *pad_vert, Eina_Bool *scalable);
void efl_pack_padding_set(Eo *obj, double pad_horiz, double pad_vert, Eina_Bool scalable);
</code>

%%Padding between items contained in this object.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:direction|Efl.Ui.Direction]].**[[:develop:api:class:efl:canvas:layout:part_box:property:direction|direction]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Ui_Dir efl_ui_direction_get(const Eo *obj);
void efl_ui_direction_set(Eo *obj, Efl_Ui_Dir dir);
</code>

%%Returns %%''default''%% if unknown.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:method:drag_page_move|drag_page_move]]** //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_drag_page_move(Eo *obj, double dx, double dy);
</code>

%%Moves the dragable by %%''dx''%%,%%''dy''%% pages.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:method:drag_step_move|drag_step_move]]** //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_drag_step_move(Eo *obj, double dx, double dy);
</code>

%%Moves the dragable by %%''dx''%%,%%''dy''%% steps.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:property:drag_dir|drag_dir]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Efl_Ui_Drag_Dir efl_ui_drag_dir_get(const Eo *obj);
</code>

%%Determines the dragable directions (read-only).%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:property:drag_page|drag_page]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_drag_page_get(const Eo *obj, double *dx, double *dy);
Eina_Bool efl_ui_drag_page_set(Eo *obj, double dx, double dy);
</code>

%%The page step increments.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:property:drag_size|drag_size]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_drag_size_get(const Eo *obj, double *dw, double *dh);
Eina_Bool efl_ui_drag_size_set(Eo *obj, double dw, double dh);
</code>

%%The dragable object relative size.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:property:drag_step|drag_step]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_drag_step_get(const Eo *obj, double *dx, double *dy);
Eina_Bool efl_ui_drag_step_set(Eo *obj, double dx, double dy);
</code>

%%The drag step increment.%%\\ 
\\ 
[[:develop:api:interface:efl:ui:drag|Efl.Ui.Drag]].**[[:develop:api:class:efl:canvas:layout:part:property:drag_value|drag_value]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:canvas:layout:part|Efl.Canvas.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_drag_value_get(const Eo *obj, double *dx, double *dy);
Eina_Bool efl_ui_drag_value_set(Eo *obj, double dx, double dy);
</code>

%%The dragable object relative location.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:event:layout_updated|layout,updated]]**
<code c>
EFL_PACK_EVENT_LAYOUT_UPDATED(void)
</code>

%%Sent after the layout was updated.%%\\ 
\\ 
