~~Title: Efl.Io.Buffered_Stream.line_delimiter~~
===== Signature =====

<code>
@property line_delimiter {
    get {
        values {
            slice: const(Eina.Slice);
        }
    }
    set {
        values {
            slice: const(Eina.Slice);
        }
    }
}
</code>

===== C signature =====

<code c>
const Eina_Slice efl_io_buffered_stream_line_delimiter_get(const Eo *obj);
void efl_io_buffered_stream_line_delimiter_set(Eo *obj, const Eina_Slice slice);
</code>

===== Values =====

  * **slice** - %%The contents may contain 0 and will be copied%%
===== Description =====

%%If set, incoming data will be checked for the delimiter and "line" events are The line may include the delimiter, unless it's end-of-stream on %%[[:develop:api:class:efl:io:buffered_stream:property:max_queue_size_input|Efl.Io.Buffered_Stream.max_queue_size_input]]%% was reached.%%

//Since 1.19//


{{page>:develop:api:user:class:efl:io:buffered_stream:property:line_delimiter:description&nouser&nolink&nodate}}

==== Setter ====

%%Changes line delimiter to use. If empty, no delimiter is to be used%%

//Since 1.19//
{{page>:develop:api:user:class:efl:io:buffered_stream:property:line_delimiter:getter_description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Efl.Io.Buffered_Stream.line_delimiter**

