<title>Efl.VG.Gradient.Radial</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_vg_gradient_radial [fillcolor = "black", label = "Efl.VG.Gradient.Radial", color = "gray15", fontcolor = "white", style = "filled"]
    efl_vg_gradient [fillcolor = "gray15", label = "Efl.VG.Gradient", color = "gray15", fontcolor = "white", style = "filled"]
    efl_vg [fillcolor = "gray15", label = "Efl.VG", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_gradient [fillcolor = "gray15", label = "Efl.Gfx.Gradient", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_gradient_radial [fillcolor = "gray15", label = "Efl.Gfx.Gradient.Radial", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_gradient [fillcolor = "gray15", label = "Efl.Gfx.Gradient", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_vg_gradient_radial -> efl_vg_gradient
    efl_vg_gradient -> efl_vg
    efl_vg -> efl_object
    efl_vg -> efl_gfx
    efl_vg -> efl_gfx_stack
    efl_vg_gradient -> efl_gfx_gradient
    efl_vg_gradient_radial -> efl_gfx_gradient_radial
    efl_gfx_gradient_radial -> efl_gfx_gradient
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:efl:vg:gradient:radial|Efl.VG.Gradient.Radial]] //(class)//**
    * [[:develop:api:class:efl:vg:gradient|Efl.VG.Gradient]] //(class)//
      * [[:develop:api:class:efl:vg|Efl.VG]] //(class)//
        * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:interface:efl:gfx|Efl.Gfx]] //(interface)//
        * [[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
      * [[:develop:api:interface:efl:gfx:gradient|Efl.Gfx.Gradient]] //(interface)//
    * [[:develop:api:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]] //(interface)//
      * [[:develop:api:interface:efl:gfx:gradient|Efl.Gfx.Gradient]] //(interface)//

===== Description =====

%%Efl vector graphics gradient radial class%%

{{page>:develop:api:user:class:efl:vg:gradient:radial:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:vg:gradient:radial:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:vg:gradient:radial:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:vg:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:gradient:radial:method:bounds_get|bounds_get]]** //[Overridden here]//
<code c>
void efl_vg_bounds_get(Eo *obj, Eina_Rect *r);
</code>

%%Give the bounding box in screen coordinate as being drawn.%%\\ 
\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:gradient:radial:method:dup|dup]]** //[Overridden here]//
<code c>
void efl_vg_dup(Eo *obj, const Efl_VG *from);
</code>

%%Duplicate vector graphics object%%\\ 
\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:gradient:radial:method:interpolate|interpolate]]** //[Overridden here]//
<code c>
Eina_Bool efl_vg_interpolate(Eo *obj, const Efl_VG *from, const Efl_VG *to, double pos_map);
</code>

%%Interpolate a given vector graphics object%%\\ 
\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:property:mask|mask]]** //**(get, set)**//
<code c>
Efl_VG *efl_vg_mask_get(const Eo *obj);
void efl_vg_mask_set(Eo *obj, Efl_VG *m);
</code>

%%Vector graphics object mask%%\\ 
\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_vg_name_get(const Eo *obj);
void efl_vg_name_set(Eo *obj, const char *name);
</code>

\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:property:origin|origin]]** //**(get, set)**//
<code c>
void efl_vg_origin_get(const Eo *obj, double *x, double *y);
void efl_vg_origin_set(Eo *obj, double x, double y);
</code>

\\ 
[[:develop:api:class:efl:vg|Efl.VG]].**[[:develop:api:class:efl:vg:property:transformation|transformation]]** //**(get, set)**//
<code c>
const Eina_Matrix3 *efl_vg_transformation_get(const Eo *obj);
void efl_vg_transformation_set(Eo *obj, const Eina_Matrix3 *m);
</code>

\\ 
[[:develop:api:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]].**[[:develop:api:class:efl:vg:gradient:radial:property:center|center]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_gfx_gradient_radial_center_get(const Eo *obj, double *x, double *y);
void efl_gfx_gradient_radial_center_set(Eo *obj, double x, double y);
</code>

\\ 
[[:develop:api:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]].**[[:develop:api:class:efl:vg:gradient:radial:property:focal|focal]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_gfx_gradient_radial_focal_get(const Eo *obj, double *x, double *y);
void efl_gfx_gradient_radial_focal_set(Eo *obj, double x, double y);
</code>

\\ 
[[:develop:api:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]].**[[:develop:api:class:efl:vg:gradient:radial:property:radius|radius]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_gfx_gradient_radial_radius_get(const Eo *obj);
void efl_gfx_gradient_radial_radius_set(Eo *obj, double r);
</code>

\\ 
[[:develop:api:interface:efl:gfx:gradient|Efl.Gfx.Gradient]].**[[:develop:api:class:efl:vg:gradient:property:spread|spread]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg:gradient|Efl.VG.Gradient]]]//
<code c>
Efl_Gfx_Gradient_Spread efl_gfx_gradient_spread_get(const Eo *obj);
void efl_gfx_gradient_spread_set(Eo *obj, Efl_Gfx_Gradient_Spread s);
</code>

\\ 
[[:develop:api:interface:efl:gfx:gradient|Efl.Gfx.Gradient]].**[[:develop:api:class:efl:vg:gradient:property:stop|stop]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg:gradient|Efl.VG.Gradient]]]//
<code c>
void efl_gfx_gradient_stop_get(const Eo *obj, const Efl_Gfx_Gradient_Stop **colors, unsigned int *length);
void efl_gfx_gradient_stop_set(Eo *obj, const Efl_Gfx_Gradient_Stop *colors, unsigned int length);
</code>

\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:vg:method:lower|lower]]** //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:vg:method:raise|raise]]** //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:vg:method:stack_above|stack_above]]** //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:vg:method:stack_below|stack_below]]** //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:vg:property:above|above]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:class:efl:vg:property:below|below]]** //**(get)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:interface:efl:gfx:stack:property:layer|layer]]** //**(get, set)**//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:vg:property:color|color]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:vg:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Eina_Rect efl_gfx_geometry_get(const Eo *obj);
void efl_gfx_geometry_set(Eo *obj, Eina_Rect rect);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:vg:property:position|position]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:vg:property:size|size]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:class:efl:vg:property:visible|visible]]** //**(get, set)**// //[Overridden in [[:develop:api:class:efl:vg|Efl.VG]]]//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

%%The visibility of a canvas object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:api:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:api:interface:efl:gfx|Efl.Gfx]].**[[:develop:api:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
