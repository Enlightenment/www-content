<title>Efl.Loop_User.parent</title>
//Overridden from [[:develop:api:class:efl:object:property:parent|Efl.Object.parent]] **(set)**.//===== Signature =====

<code>
@property parent {
    get {
        values {
            parent: free(Efl.Object, efl_del) @nullable;
        }
    }
    set {
        values {
            parent: free(Efl.Object, efl_del) @nullable;
        }
    }
}
</code>

===== C signature =====

<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

===== Values =====

  * **parent** - %%The new parent%%
===== Description =====

%%The parent of an object.%%

%%Parents keep references to their children so in order to delete objects that have parents you need to set parent to NULL or use efl_del() that does that for you (and also unrefs the object).%%

%%The Eo parent is conceptually user set. That means that a parent should not be changed behind the scenes in a surprising manner.%%

%%For example: if you have a widget that has a box internally, and when you swallow into that widget the object you swallow ends up in the box, the parent should be the widget, and not the box.%%{{page>:develop:api:user:class:efl:loop_user:property:parent:description&nouser&nolink&nodate}}


===== Implemented by =====

  * [[:develop:api:class:efl:object:property:parent|Efl.Object.parent]]
  * **Efl.Loop_User.parent**

