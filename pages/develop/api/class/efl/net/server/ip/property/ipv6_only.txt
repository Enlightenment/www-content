<title>Efl.Net.Server.Ip.ipv6_only</title>
===== Signature =====

<code>
@property ipv6_only {
    get {
        values {
            ipv6_only: bool;
        }
    }
    set {
        values {
            ipv6_only: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_net_server_ip_ipv6_only_get(const Eo *obj);
void efl_net_server_ip_ipv6_only_set(Eo *obj, Eina_Bool ipv6_only);
</code>

===== Values =====

  * **ipv6_only** - %%If %%''true''%% the server will only accept IPv6 clients, %%''false''%% otherwise%%
===== Description =====

%%Whenever IPv6 listen address will accept only same-family clients or will allow IPv4 to connect as well.%%

%%Since Linux 2.4.21, Windows Vista and MacOS X these control whenever a server that did bind to an IPv6 address will accept only IPv6 clients or will also accept IPv4 by automatically converting them in an IPv6 address, allowing a single socket to handle both protocols.%%

%%If an IPv6 address was used in %%[[:develop:api:interface:efl:net:server:property:address|Efl.Net.Server.address]]%%, this property is %%''false''%% and an IPv4 connects, then an address such as [::ffff:IPv4]:PORT will be used, such as [::ffff:192.168.0.2]:1234, where the IPv4 address can be extracted.%%

%%If an IPv4 address was used in %%[[:develop:api:interface:efl:net:server:property:address|Efl.Net.Server.address]]%%, this has no effect.%%

%%Systems can configure their default value, usually true (allows only IPv6 clients).%%

//Since 1.20//{{page>:develop:user:class:efl:net:server:ip:property:ipv6_only:description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Efl.Net.Server.Ip.ipv6_only**

