<title>Efl.Net.Ssl.Context</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_ssl_context [fillcolor = "black", label = "Efl.Net.Ssl.Context", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_net_ssl_context -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:efl:net:ssl:context|Efl.Net.Ssl.Context]] //(class)//**
    * [[:develop:api:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%A SSL Context that is used to start a SSL socket wrapper.%%

%%The context will contain common configurations such as certificates, private keys, certificate revocation lists (CRLs), certificate authorities (CAs) and so on.%%

%%The method %%[[:develop:api:class:efl:net:ssl:context:method:setup|Efl.Net.Ssl.Context.setup]]%% must be called once before %%[[:develop:api:class:efl:object:method:finalize|Efl.Object.finalize]]%% in order to define the mandatory operational parameters.%%

%%@note All setter methods must be called before %%[[:develop:api:class:efl:object:method:finalize|Efl.Object.finalize]]%%.%%

//Since 1.19//

{{page>:develop:api:user:class:efl:net:ssl:context:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:class:efl:net:ssl:context:method:setup|setup]]**
<code c>
void efl_net_ssl_context_setup(Eo *obj, Efl_Net_Ssl_Cipher cipher, Eina_Bool is_dialer);
</code>

%%Defines the context mandatory operation parameters%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:certificate_authorities|certificate_authorities]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_certificate_authorities_get(const Eo *obj);
void efl_net_ssl_context_certificate_authorities_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to CA (certificate authoritie) to use.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:certificate_revocation_lists|certificate_revocation_lists]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_certificate_revocation_lists_get(const Eo *obj);
void efl_net_ssl_context_certificate_revocation_lists_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to CRL (certificate revocation list) to use.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:certificates|certificates]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_certificates_get(const Eo *obj);
void efl_net_ssl_context_certificates_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to certificates to use.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:default_dialer|default_dialer]]** //**(get)**//
<code c>
Efl_Net_Ssl_Context *efl_net_ssl_context_default_dialer_get(const Eo *obj);
</code>

%%The default context for dialers.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:default_paths_load|default_paths_load]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_ssl_context_default_paths_load_get(const Eo *obj);
void efl_net_ssl_context_default_paths_load_set(Eo *obj, Eina_Bool default_paths_load);
</code>

%%If %%''true''%%, will use system's default certificate storage%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:hostname_verify|hostname_verify]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_ssl_context_hostname_verify_get(const Eo *obj);
void efl_net_ssl_context_hostname_verify_set(Eo *obj, Eina_Bool hostname_verify);
</code>

%%Defines if hostname should be verified.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:hostname|hostname]]** //**(get, set)**//
<code c>
const char *efl_net_ssl_context_hostname_get(const Eo *obj);
void efl_net_ssl_context_hostname_set(Eo *obj, const char *hostname);
</code>

%%Defines the hostname to use for sockets.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:private_keys|private_keys]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_private_keys_get(const Eo *obj);
void efl_net_ssl_context_private_keys_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to private keys to use.%%\\ 
\\ 
**[[:develop:api:class:efl:net:ssl:context:property:verify_mode|verify_mode]]** //**(get, set)**//
<code c>
Efl_Net_Ssl_Verify_Mode efl_net_ssl_context_verify_mode_get(const Eo *obj);
void efl_net_ssl_context_verify_mode_set(Eo *obj, Efl_Net_Ssl_Verify_Mode verify_mode);
</code>

%%How to verify the remote peer.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:net:ssl:context:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:net:ssl:context:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:net:ssl:context:method:finalize|finalize]]** //[Overridden here]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
