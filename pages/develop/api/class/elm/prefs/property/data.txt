~~Title: Elm.Prefs.data~~
===== Signature =====

<code>
@property data {
    get {
        values {
            data: ptr(Elm_Prefs_Data) @nullable;
        }
    }
    set {
        values {
            data: ptr(Elm_Prefs_Data) @nullable;
        }
        return: bool;
    }
}
</code>

===== C signature =====

<code c>
Elm_Prefs_Data *elm_obj_prefs_data_get(const Eo *obj);
Eina_Bool elm_obj_prefs_data_set(Eo *obj, Elm_Prefs_Data *data);
</code>

===== Values =====

  * **data** - %%A valid prefs_data handle%%
===== Description =====

%%Set user data for a given prefs widget%%

%%Once a prefs widget is created, after elm_prefs_file_set() is issued on it, all of its UI elements will get default values, when declared on that file. To fetch an user's own, personal set of those values, one gets to pair a prefs data handle to the prefs widget. This is what this call is intended for.%%

%%Prefs data values from %%''prefs_data''%% with keys matching the ones present on the file passed on elm_prefs_file_set() to %%''obj''%% will have their values applied to the respective UI elements of the widget.%%

%%When %%''obj''%% dies, the values of the elements declared on its .epb file (the one set on elm_prefs_file_set()) marked as permanent will be written back to prefs_data, if it is writable. One is also able to make this writing event to take place automatically after each UI element modification by using elm_prefs_autosave_set().%%

<note>
%%%%''obj''%% will keep a reference of its own for %%''prefs_data''%%, but you should still unreference it by yourself, after the widget is gone.%%
</note>

//Since 1.8//
{{page>:develop:api:user:class:elm:prefs:property:data:description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Elm.Prefs.data**

