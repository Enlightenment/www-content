<title>Elm.Mapbuf.point_color</title>
===== Signature =====

<code>
@property point_color {
    get {
        keys {
            idx: int;
        }
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
    set {
        keys {
            idx: int;
        }
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void elm_private_mapbuf_point_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void elm_private_mapbuf_point_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

===== Keys =====

  * **idx** - %%Index of point to change, from 0 to 3.%%
===== Values =====

  * **r** - %%Red (0 - 255)%%
  * **g** - %%Green (0 - 255)%%
  * **b** - %%Blue (0 - 255)%%
  * **a** - %%Alpha (0 - 255)%%
===== Description =====

%%The color of a point (vertex) in the mapbuf.%%

%%This represents the color of the vertex in the mapbuf. Colors will be linearly interpolated between vertex points through the mapbuf. Color will multiply the "texture" pixels (like GL_MODULATE in OpenGL). The default color of a vertex in a mapbuf is white solid (255, 255, 255, 255) which means it will have no effect on modifying the texture pixels.%%

//Since 1.9//{{page>:develop:user:class:elm:mapbuf:property:point_color:description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Elm.Mapbuf.point_color**

