<title>Elm.Entry.markup_filter_append</title>
===== Signature =====

<code>
markup_filter_append {
    params {
        @in func: Elm_Entry_Filter_Cb;
        @in data: void_ptr @optional;
    }
}
</code>

===== C signature =====

<code c>
void elm_obj_entry_markup_filter_append(Eo *obj, Elm_Entry_Filter_Cb func, void *data);
</code>

===== Parameters =====

  * **func** //(in)// - %%The function to use as text filter.%%
  * **data** //(in)// - %%User data to pass to %%''func''%%.%%

===== Description =====

%%Append a markup filter function for text inserted in the entry%%

%%Append the given callback to the list. This functions will be called whenever any text is inserted into the entry, with the text to be inserted as a parameter. The type of given text is always markup. The callback function is free to alter the text in any way it wants, but it must remember to free the given pointer and update it. If the new text is to be discarded, the function can free it and set its text parameter to %%''null''%%. This will also prevent any following filters from being called.%%
{{page>:develop:api:user:class:elm:entry:method:markup_filter_append:description&nouser&nolink&nodate}}

===== Implemented by =====

  * **Elm.Entry.markup_filter_append**

