~~Title: Elm.Genlist.Item~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_genlist_item [fillcolor = "black", label = "Elm.Genlist.Item", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget_item_static_focus [fillcolor = "gray15", label = "Elm.Widget.Item.Static_Focus", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget_item [fillcolor = "gray15", label = "Elm.Widget.Item", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_access [fillcolor = "gray15", label = "Efl.Access", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_access_component [fillcolor = "gray15", label = "Efl.Access.Component", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_focus_object [fillcolor = "gray15", label = "Efl.Ui.Focus.Object", color = "deepskyblue", fontcolor = "white", style = "filled"]

    elm_genlist_item -> elm_widget_item_static_focus
    elm_widget_item_static_focus -> elm_widget_item
    elm_widget_item -> efl_object
    elm_widget_item -> efl_access
    efl_access -> efl_interface
    efl_access -> efl_object
    elm_widget_item -> efl_access_component
    elm_widget_item_static_focus -> efl_ui_focus_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:elm:genlist:item|Elm.Genlist.Item]] //(class)//**
    * [[:develop:api:class:elm:widget:item:static_focus|Elm.Widget.Item.Static_Focus]] //(class)//
      * [[:develop:api:class:elm:widget:item|Elm.Widget.Item]] //(class)//
        * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:mixin:efl:access|Efl.Access]] //(mixin)//
          * [[:develop:api:interface:efl:interface|Efl.Interface]] //(interface)//
          * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:mixin:efl:access:component|Efl.Access.Component]] //(mixin)//
      * [[:develop:api:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//

===== Description =====

%%Elementary genlist item class%%

{{page>:develop:api:user:class:elm:genlist:item:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:class:elm:genlist:item:method:all_contents_unset|all_contents_unset]]**
<code c>
void elm_obj_genlist_item_all_contents_unset(Eo *obj, Eina_List **l);
</code>

%%Unset all contents fetched by the item class.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:bring_in|bring_in]]**
<code c>
void elm_obj_genlist_item_bring_in(Eo *obj, Elm_Genlist_Item_Scrollto_Type type);
</code>

%%Animatedly bring in, to the visible area of a genlist, a given item on it.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:decorate_mode_set|decorate_mode_set]]**
<code c>
void elm_obj_genlist_item_decorate_mode_set(Eo *obj, const char *decorate_it_type, Eina_Bool decorate_it_set);
</code>

%%Activate a genlist mode on an item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:demote|demote]]**
<code c>
void elm_obj_genlist_item_demote(Eo *obj);
</code>

%%Demote an item to the end of the list.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:fields_update|fields_update]]**
<code c>
void elm_obj_genlist_item_fields_update(Eo *obj, const char *parts, Elm_Genlist_Item_Field_Type itf);
</code>

%%Update the part of an item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:item_class_update|item_class_update]]**
<code c>
void elm_obj_genlist_item_class_update(Eo *obj, const Elm_Genlist_Item_Class *itc);
</code>

%%Update the item class of an item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:promote|promote]]**
<code c>
void elm_obj_genlist_item_promote(Eo *obj);
</code>

%%Promote an item to the top of the list.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:show|show]]**
<code c>
void elm_obj_genlist_item_show(Eo *obj, Elm_Genlist_Item_Scrollto_Type type);
</code>

%%Show the portion of a genlist's internal list containing a given item, immediately.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:subitems_clear|subitems_clear]]**
<code c>
void elm_obj_genlist_item_subitems_clear(Eo *obj);
</code>

%%Remove all sub-items (children) of the given item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:subitems_count|subitems_count]]**
<code c>
unsigned int elm_obj_genlist_item_subitems_count(Eo *obj);
</code>

%%Get the number of subitems of a given item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:method:update|update]]**
<code c>
void elm_obj_genlist_item_update(Eo *obj);
</code>

%%Update all the contents of an item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:decorate_mode|decorate_mode]]** //**(get)**//
<code c>
const char *elm_obj_genlist_item_decorate_mode_get(const Eo *obj);
</code>

%%Get the item's decorate mode.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:expanded_depth|expanded_depth]]** //**(get)**//
<code c>
int elm_obj_genlist_item_expanded_depth_get(const Eo *obj);
</code>

%%Get the depth of expanded item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:expanded|expanded]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_genlist_item_expanded_get(const Eo *obj);
void elm_obj_genlist_item_expanded_set(Eo *obj, Eina_Bool expanded);
</code>

\\ 
**[[:develop:api:class:elm:genlist:item:property:flip|flip]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_genlist_item_flip_get(const Eo *obj);
void elm_obj_genlist_item_flip_set(Eo *obj, Eina_Bool flip);
</code>

\\ 
**[[:develop:api:class:elm:genlist:item:property:index|index]]** //**(get)**//
<code c>
int elm_obj_genlist_item_index_get(const Eo *obj);
</code>

%%Get the index of the item. It is only valid once displayed.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:item_class|item_class]]** //**(get)**//
<code c>
const Elm_Genlist_Item_Class *elm_obj_genlist_item_class_get(const Eo *obj);
</code>

%%Get the Genlist Item class for the given Genlist Item.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:next|next]]** //**(get)**//
<code c>
Elm_Widget_Item *elm_obj_genlist_item_next_get(const Eo *obj);
</code>

%%Get the next item in a genlist widget's internal lis of items, given a handle to one of those items.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:parent|parent]]** //**(get)**//
<code c>
Elm_Widget_Item *elm_obj_genlist_item_parent_get(const Eo *obj);
</code>

%%Get the parent item of the given item%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:pin|pin]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_genlist_item_pin_get(const Eo *obj);
void elm_obj_genlist_item_pin_set(Eo *obj, Eina_Bool pin);
</code>

\\ 
**[[:develop:api:class:elm:genlist:item:property:prev|prev]]** //**(get)**//
<code c>
Elm_Widget_Item *elm_obj_genlist_item_prev_get(const Eo *obj);
</code>

%%Get the previous item in a genlist widget's internal list of items, given a handle to one of those items.%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:select_mode|select_mode]]** //**(get, set)**//
<code c>
Elm_Object_Select_Mode elm_obj_genlist_item_select_mode_get(const Eo *obj);
void elm_obj_genlist_item_select_mode_set(Eo *obj, Elm_Object_Select_Mode mode);
</code>

\\ 
**[[:develop:api:class:elm:genlist:item:property:selected|selected]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_genlist_item_selected_get(const Eo *obj);
void elm_obj_genlist_item_selected_set(Eo *obj, Eina_Bool selected);
</code>

\\ 
**[[:develop:api:class:elm:genlist:item:property:subitems|subitems]]** //**(get)**//
<code c>
const Eina_List *elm_obj_genlist_item_subitems_get(const Eo *obj);
</code>

%%et the list of subitems of a given item%%\\ 
\\ 
**[[:develop:api:class:elm:genlist:item:property:type|type]]** //**(get)**//
<code c>
Elm_Genlist_Item_Type elm_obj_genlist_item_type_get(const Eo *obj);
</code>

%%Get the Item's type.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:elm:genlist:item:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:elm:widget:item:method:destructor|destructor]]** //[Overridden in [[:develop:api:class:elm:widget:item|Elm.Widget.Item]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:cursor_unset|cursor_unset]]** //[Overridden here]//
<code c>
void elm_wdg_item_cursor_unset(Eo *obj);
</code>

%%Unset any custom mouse pointer/cursor decoration set to be shown, when the mouse pointer is over the given item, thus making it show the default cursor again.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:signal_emit|signal_emit]]** //[Overridden here]//
<code c>
void elm_wdg_item_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Send a signal to the edje object of the widget item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:tooltip_content_cb_set|tooltip_content_cb_set]]** //[Overridden here]//
<code c>
void elm_wdg_item_tooltip_content_cb_set(Eo *obj, Elm_Tooltip_Item_Content_Cb func, const void *data, Evas_Smart_Cb del_cb);
</code>

%%Set the content to be shown in the tooltip item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:tooltip_text_set|tooltip_text_set]]** //[Overridden here]//
<code c>
void elm_wdg_item_tooltip_text_set(Eo *obj, const char *text);
</code>

%%Set the text to be shown in a given object item's tooltips.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:tooltip_unset|tooltip_unset]]** //[Overridden here]//
<code c>
void elm_wdg_item_tooltip_unset(Eo *obj);
</code>

%%Unset tooltip from item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:cursor|cursor]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *elm_wdg_item_cursor_get(const Eo *obj);
void elm_wdg_item_cursor_set(Eo *obj, const char *cursor);
</code>

%%Control the type of mouse pointer/cursor decoration to be shown, when the mouse pointer is over the given item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:focus|focus]]** //**(get, set)**// //[Overridden here]//
<code c>
Eina_Bool elm_wdg_item_focus_get(const Eo *obj);
void elm_wdg_item_focus_set(Eo *obj, Eina_Bool focused);
</code>

%%Control the object item focused%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:part_content|part_content]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Canvas_Object *elm_wdg_item_part_content_get(const Eo *obj, const char *part);
void elm_wdg_item_part_content_set(Eo *obj, const char *part, Efl_Canvas_Object *content);
</code>

%%Control a content of an object item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:part_text|part_text]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *elm_wdg_item_part_text_get(const Eo *obj, const char *part);
void elm_wdg_item_part_text_set(Eo *obj, const char *part, const char *label);
</code>

%%Control a label of an object item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:style|style]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *elm_wdg_item_style_get(const Eo *obj);
void elm_wdg_item_style_set(Eo *obj, const char *style);
</code>

%%Control the style of an object item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:tooltip_style|tooltip_style]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *elm_wdg_item_tooltip_style_get(const Eo *obj);
void elm_wdg_item_tooltip_style_set(Eo *obj, const char *style);
</code>

%%Control a different style for this item tooltip.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:property:tooltip_window_mode|tooltip_window_mode]]** //**(get, set)**// //[Overridden here]//
<code c>
Eina_Bool elm_wdg_item_tooltip_window_mode_get(const Eo *obj);
Eina_Bool elm_wdg_item_tooltip_window_mode_set(Eo *obj, Eina_Bool disable);
</code>

%%Control size restriction state of an object's tooltip%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_info_set|access_info_set]]**
<code c>
void elm_wdg_item_access_info_set(Eo *obj, const char *txt);
</code>

%%Set the text to read out when in accessibility mode%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_object_get|access_object_get]]**
<code c>
Efl_Canvas_Object *elm_wdg_item_access_object_get(const Eo *obj);
</code>

%%Get an accessible object of the object item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_order_get|access_order_get]]**
<code c>
const Eina_List *elm_wdg_item_access_order_get(Eo *obj);
</code>

%%Get highlight order%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_order_set|access_order_set]]**
<code c>
void elm_wdg_item_access_order_set(Eo *obj, Eina_List *objs);
</code>

%%Set highlight order%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_order_unset|access_order_unset]]**
<code c>
void elm_wdg_item_access_order_unset(Eo *obj);
</code>

%%Unset highlight order%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_register|access_register]]**
<code c>
Efl_Canvas_Object *elm_wdg_item_access_register(Eo *obj);
</code>

%%Register object item as an accessible object.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:access_unregister|access_unregister]]**
<code c>
void elm_wdg_item_access_unregister(Eo *obj);
</code>

%%Unregister accessible object of the object item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:del_cb_set|del_cb_set]]**
<code c>
void elm_wdg_item_del_cb_set(Eo *obj, Evas_Smart_Cb del_cb);
</code>

%%Set the function to be called when an item from the widget is freed.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:del|del]]**
<code c>
void elm_wdg_item_del(Eo *obj);
</code>

%%Delete the given item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:domain_part_text_translatable_set|domain_part_text_translatable_set]]**
<code c>
void elm_wdg_item_domain_part_text_translatable_set(Eo *obj, const char *part, const char *domain, Eina_Bool translatable);
</code>

%%Mark the part text to be translatable or not.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:domain_translatable_part_text_set|domain_translatable_part_text_set]]**
<code c>
void elm_wdg_item_domain_translatable_part_text_set(Eo *obj, const char *part, const char *domain, const char *label);
</code>

%%Set the text for an object item's part, marking it as translatable.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:focus_next_item_get|focus_next_item_get]]**
<code c>
Elm_Widget_Item *elm_wdg_item_focus_next_item_get(const Eo *obj, Efl_Ui_Focus_Direction dir);
</code>

%%Get the next object item with specific focus direction.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:focus_next_item_set|focus_next_item_set]]**
<code c>
void elm_wdg_item_focus_next_item_set(Eo *obj, Elm_Widget_Item *next_item, Efl_Ui_Focus_Direction dir);
</code>

%%Set the next object item with specific focus direction.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:focus_next_object_get|focus_next_object_get]]**
<code c>
Efl_Canvas_Object *elm_wdg_item_focus_next_object_get(const Eo *obj, Efl_Ui_Focus_Direction dir);
</code>

%%Get the next object with specific focus direction.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:focus_next_object_set|focus_next_object_set]]**
<code c>
void elm_wdg_item_focus_next_object_set(Eo *obj, Efl_Canvas_Object *next, Efl_Ui_Focus_Direction dir);
</code>

%%Set the next object with specific focus direction.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:part_content_unset|part_content_unset]]**
<code c>
Efl_Canvas_Object *elm_wdg_item_part_content_unset(Eo *obj, const char *part);
</code>

%%Unset a content of an object item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:signal_callback_add|signal_callback_add]]**
<code c>
void elm_wdg_item_signal_callback_add(Eo *obj, const char *emission, const char *source, Elm_Object_Item_Signal_Cb func, void *data);
</code>

%%Add a callback for a signal emitted by object item edje.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:signal_callback_del|signal_callback_del]]**
<code c>
void *elm_wdg_item_signal_callback_del(Eo *obj, const char *emission, const char *source, Elm_Object_Item_Signal_Cb func);
</code>

%%Remove a signal-triggered callback from a object item edje object.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:track_get|track_get]]**
<code c>
int elm_wdg_item_track_get(const Eo *obj);
</code>

%%Get the track object reference count.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:track|track]]**
<code c>
Efl_Canvas_Object *elm_wdg_item_track(Eo *obj);
</code>

%%This returns track object of the item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:translatable_part_text_get|translatable_part_text_get]]**
<code c>
const char *elm_wdg_item_translatable_part_text_get(const Eo *obj, const char *part);
</code>

%%Get the original string set as translatable for an object item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:untrack|untrack]]**
<code c>
void elm_wdg_item_untrack(Eo *obj);
</code>

%%This retrieve the track object of the item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:widget_get|widget_get]]**
<code c>
Efl_Canvas_Object *elm_wdg_item_widget_get(const Eo *obj);
</code>

%%Get the widget object's handle which contains a given item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:property:cursor_engine_only|cursor_engine_only]]** //**(get, set)**//
<code c>
Eina_Bool elm_wdg_item_cursor_engine_only_get(const Eo *obj);
void elm_wdg_item_cursor_engine_only_set(Eo *obj, Eina_Bool engine_only);
</code>

%%Control if the (custom)cursor for a given item should be searched in its theme, also, or should only rely on the rendering engine.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:property:cursor_style|cursor_style]]** //**(get, set)**//
<code c>
const char *elm_wdg_item_cursor_style_get(const Eo *obj);
void elm_wdg_item_cursor_style_set(Eo *obj, const char *style);
</code>

%%Control a different %%''style''%% for a given custom cursor set for an item.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:property:disabled|disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_wdg_item_disabled_get(const Eo *obj);
void elm_wdg_item_disabled_set(Eo *obj, Eina_Bool disable);
</code>

%%Control the disabled state of a widget item.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:class:elm:genlist:item:property:name|name]]** //**(get, set)**// //[Overridden here]//
<code c>
const char *efl_access_name_get(const Eo *obj);
void efl_access_name_set(Eo *obj, const char *name);
</code>

%%Accessible name of the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:attribute_append|attribute_append]]**
<code c>
void efl_access_attribute_append(Eo *obj, const char *key, const char *value);
</code>

%%Add key-value pair identifying object extra attributes%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:attributes_clear|attributes_clear]]**
<code c>
void efl_access_attributes_clear(Eo *obj);
</code>

%%Removes all attributes in accessible object.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:relationship_append|relationship_append]]**
<code c>
Eina_Bool efl_access_relationship_append(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>

%%Defines the relationship between two accessible objects.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:relationship_remove|relationship_remove]]**
<code c>
void efl_access_relationship_remove(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>

%%Removes the relationship between two accessible objects.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:relationships_clear|relationships_clear]]**
<code c>
void efl_access_relationships_clear(Eo *obj);
</code>

%%Removes all relationships in accessible object.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:description|description]]** //**(get, set)**//
<code c>
const char *efl_access_description_get(const Eo *obj);
void efl_access_description_set(Eo *obj, const char *description);
</code>

%%Contextual information about object.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Access *efl_access_parent_get(const Eo *obj);
void efl_access_parent_set(Eo *obj, Efl_Access *parent);
</code>

%%Object's accessible parent.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:role|role]]** //**(get, set)**//
<code c>
Efl_Access_Role efl_access_role_get(const Eo *obj);
void efl_access_role_set(Eo *obj, Efl_Access_Role role);
</code>

%%The role of the object in accessibility domain.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:root|root]]** //**(get)**//
<code c>
Efl_Object *efl_access_root_get(const Eo *obj);
</code>

%%Get root object of accessible object hierarchy%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**//
<code c>
const char *efl_access_translation_domain_get(const Eo *obj);
void efl_access_translation_domain_set(Eo *obj, const char *domain);
</code>

%%The translation domain of "name" and "description" properties.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:type|type]]** //**(get, set)**//
<code c>
Efl_Access_Type efl_access_type_get(const Eo *obj);
void efl_access_type_set(Eo *obj, Efl_Access_Type type);
</code>

%%Type of accessibility object%%\\ 
\\ 
[[:develop:api:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:api:class:elm:genlist:item:method:prepare_logical|prepare_logical]]** //[Overridden here]//
<code c>
void efl_ui_focus_object_prepare_logical(Eo *obj);
</code>

%%Tells the object that the children of it will be queried soon by the given manager.%%\\ 
\\ 
[[:develop:api:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:api:mixin:efl:ui:focus:object:property:focus_geometry|focus_geometry]]** //**(get)**//
<code c>
Eina_Rect efl_ui_focus_object_focus_geometry_get(const Eo *obj);
</code>

%%The geometry to use to calculate the relations to other objects.%%\\ 
\\ 
[[:develop:api:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:api:mixin:efl:ui:focus:object:property:focus|focus]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_ui_focus_object_focus_get(const Eo *obj);
void efl_ui_focus_object_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%This gets called by the manager and should never be called by someone else.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:del_pre|del_pre]]** //[Overridden here]// ''protected''
<code c>
Eina_Bool elm_wdg_item_del_pre(Eo *obj);
</code>

%%Delete pre widget item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:genlist:item:method:disable|disable]]** //[Overridden here]// ''protected''
<code c>
void elm_wdg_item_disable(Eo *obj);
</code>

%%Disable widget item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:part_text_custom_update|part_text_custom_update]]** ''protected''
<code c>
void elm_wdg_item_part_text_custom_update(Eo *obj);
</code>

%%Update additional text part content%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:pre_notify_del|pre_notify_del]]** ''protected''
<code c>
void elm_wdg_item_pre_notify_del(Eo *obj);
</code>

%%notify deletion of widget item%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:tooltip_translatable_text_set|tooltip_translatable_text_set]]** ''protected''
<code c>
void elm_wdg_item_tooltip_translatable_text_set(Eo *obj, const char *text);
</code>

%%Set widget item tooltip as a text string%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:track_cancel|track_cancel]]** ''protected''
<code c>
void elm_wdg_item_track_cancel(Eo *obj);
</code>

%%Query track_cancel%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:method:translate|translate]]** ''protected''
<code c>
void elm_wdg_item_translate(Eo *obj);
</code>

%%Query translate%%\\ 
\\ 
[[:develop:api:class:elm:widget:item|Elm.Widget.Item]].**[[:develop:api:class:elm:widget:item:property:part_text_custom|part_text_custom]]** //**(get, set)**// ''protected''
<code c>
const char *elm_wdg_item_part_text_custom_get(const Eo *obj, const char *part);
void elm_wdg_item_part_text_custom_set(Eo *obj, const char *part, const char *label);
</code>

\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:class:elm:widget:item:method:focus_grab|focus_grab]]** //[Overridden in [[:develop:api:class:elm:widget:item|Elm.Widget.Item]]]// ''protected''
<code c>
Eina_Bool efl_access_component_focus_grab(Eo *obj);
</code>

%%Focuses accessible widget.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:class:elm:widget:item:property:alpha|alpha]]** //**(get)**// //[Overridden in [[:develop:api:class:elm:widget:item|Elm.Widget.Item]]]// ''protected''
<code c>
double efl_access_component_alpha_get(const Eo *obj);
</code>

%%Gets alpha of accessible widget.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:class:elm:widget:item:property:extents|extents]]** //**(get, set)**// //[Overridden in [[:develop:api:class:elm:widget:item|Elm.Widget.Item]]]// ''protected''
<code c>
Eina_Rect efl_access_component_extents_get(const Eo *obj, Eina_Bool screen_coords);
Eina_Bool efl_access_component_extents_set(Eo *obj, Eina_Bool screen_coords, Eina_Rect rect);
</code>

%%Geometry of accessible widget.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:class:elm:widget:item:property:layer|layer]]** //**(get)**// //[Overridden in [[:develop:api:class:elm:widget:item|Elm.Widget.Item]]]// ''protected''
<code c>
int efl_access_component_layer_get(const Eo *obj);
</code>

%%Evas layer of accessible widget.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:mixin:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** ''protected''
<code c>
Efl_Object *efl_access_component_accessible_at_point_get(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Gets top component object occupying space at given coordinates.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:mixin:efl:access:component:method:contains|contains]]** ''protected''
<code c>
Eina_Bool efl_access_component_contains(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Contains accessible widget%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:mixin:efl:access:component:property:position|position]]** //**(get, set)**// ''protected''
<code c>
void efl_access_component_position_get(const Eo *obj, Eina_Bool screen_coords, int *x, int *y);
Eina_Bool efl_access_component_position_set(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Position of accessible widget.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:mixin:efl:access:component:property:size|size]]** //**(get, set)**// ''protected''
<code c>
void efl_access_component_size_get(const Eo *obj, int *w, int *h);
Eina_Bool efl_access_component_size_set(Eo *obj, int w, int h);
</code>

%%Size of accessible widget.%%\\ 
\\ 
[[:develop:api:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:api:mixin:efl:access:component:property:z_order|z_order]]** //**(get)**// ''protected''
<code c>
int efl_access_component_z_order_get(const Eo *obj);
</code>

%%Gets the depth at which the component is shown in relation to other components in the same container.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:class:elm:genlist:item:property:state_set|state_set]]** //**(get)**// //[Overridden here]// ''protected''
<code c>
Efl_Access_State_Set efl_access_state_set_get(const Eo *obj);
</code>

%%Gets set describing object accessible states.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:class:elm:widget:item:property:attributes|attributes]]** //**(get)**// //[Overridden in [[:develop:api:class:elm:widget:item|Elm.Widget.Item]]]// ''protected''
<code c>
Eina_List *efl_access_attributes_get(const Eo *obj);
</code>

%%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:event_emit|event_emit]]** ''protected''
<code c>
void efl_access_event_emit(const Eo *obj, Efl_Access *accessible, const Efl_Event_Description *event, void *event_info);
</code>

%%Emit event%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:event_handler_add|event_handler_add]]** ''protected''
<code c>
Efl_Access_Event_Handler *efl_access_event_handler_add(const Eo *obj, Efl_Event_Cb cb, void *data);
</code>

%%Register accessibility event listener%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:method:event_handler_del|event_handler_del]]** ''protected''
<code c>
void efl_access_event_handler_del(const Eo *obj, Efl_Access_Event_Handler *handler);
</code>

%%Deregister accessibility event listener%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:children|children]]** //**(get)**// ''protected''
<code c>
Eina_List *efl_access_children_get(const Eo *obj);
</code>

%%Gets object's accessible children.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// ''protected''
<code c>
int efl_access_index_in_parent_get(const Eo *obj);
</code>

%%Gets index of the child in parent's children list.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// ''protected''
<code c>
const char *efl_access_localized_role_name_get(const Eo *obj);
</code>

%%Gets an localized string describing accessible object role name.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:relation_set|relation_set]]** //**(get)**// ''protected''
<code c>
Efl_Access_Relation_Set efl_access_relation_set_get(const Eo *obj);
</code>

%%Gets an all relations between accessible object and other accessible objects.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:property:role_name|role_name]]** //**(get)**// ''protected''
<code c>
const char *efl_access_role_name_get(const Eo *obj);
</code>

%%Gets human-readable string indentifying object accessibility role.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:active_descendant_changed|active,descendant,changed]]**
<code c>
EFL_ACCESS_EVENT_ACTIVE_DESCENDANT_CHANGED(void)
</code>

%%Called when active state of descendant has changed%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:added|added]]**
<code c>
EFL_ACCESS_EVENT_ADDED(void)
</code>

%%Called when item was added%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:bounds_changed|bounds,changed]]**
<code c>
EFL_ACCESS_EVENT_BOUNDS_CHANGED(Efl_Access_Event_Geometry_Changed_Data)
</code>

%%Called when bounds have changed%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:children_changed|children,changed]]**
<code c>
EFL_ACCESS_EVENT_CHILDREN_CHANGED(Efl_Access_Event_Children_Changed_Data)
</code>

%%Called when children have changed%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:property_changed|property,changed]]**
<code c>
EFL_ACCESS_EVENT_PROPERTY_CHANGED(const char *)
</code>

%%Called when roperty has changed%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:removed|removed]]**
<code c>
EFL_ACCESS_EVENT_REMOVED(void)
</code>

%%Called when item was removed%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:state_changed|state,changed]]**
<code c>
EFL_ACCESS_EVENT_STATE_CHANGED(Efl_Access_Event_State_Changed_Data)
</code>

%%Called when tate has changed%%\\ 
\\ 
[[:develop:api:mixin:efl:access|Efl.Access]].**[[:develop:api:mixin:efl:access:event:visible_data_changed|visible,data,changed]]**
<code c>
EFL_ACCESS_EVENT_VISIBLE_DATA_CHANGED(void)
</code>

%%Called when visibility has changed%%\\ 
\\ 
[[:develop:api:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:api:mixin:efl:ui:focus:object:event:focus_changed|focus,changed]]**
<code c>
EFL_UI_FOCUS_OBJECT_EVENT_FOCUS_CHANGED(Eina_Bool)
</code>

%%Emitted if the focus state has changed%%\\ 
\\ 
