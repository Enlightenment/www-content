~~Title: Elm.Genlist.homogeneous~~
===== Signature =====

<code>
@property homogeneous {
    get {
        values {
            homogeneous: bool;
        }
    }
    set {
        values {
            homogeneous: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool elm_obj_genlist_homogeneous_get(const Eo *obj);
void elm_obj_genlist_homogeneous_set(Eo *obj, Eina_Bool homogeneous);
</code>

===== Values =====

  * **homogeneous** - %%Assume the items within the genlist are of the same height and width. Default is %%''false''%%.%%
===== Description =====




{{page>:develop:api:user:class:elm:genlist:property:homogeneous:description&nouser&nolink&nodate}}

==== Getter ====

%%Get whether the homogeneous mode is enabled.%%


{{page>:develop:api:user:class:elm:genlist:property:homogeneous:getter_description&nouser&nolink&nodate}}

==== Setter ====

%%Enable/disable homogeneous mode.%%

%%This will enable the homogeneous mode where items are of the same height and width so that genlist may do the lazy-loading at its maximum (which increases the performance for scrolling the list). In the normal mode, genlist will pre-calculate all the items' sizes even though they are not in use. So items' callbacks are called many times than expected. But homogeneous mode will skip the item size pre-calculation  process so items' callbacks are called only when the item is needed.%%

<note>
%%This also works well with group index.%%
</note>
{{page>:develop:api:user:class:elm:genlist:property:homogeneous:getter_description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Elm.Genlist.homogeneous**

