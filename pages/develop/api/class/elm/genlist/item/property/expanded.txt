~~Title: Elm.Genlist.Item.expanded~~
===== Signature =====

<code>
@property expanded {
    get {
        values {
            expanded: bool;
        }
    }
    set {
        values {
            expanded: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool elm_obj_genlist_item_expanded_get(const Eo *obj);
void elm_obj_genlist_item_expanded_set(Eo *obj, Eina_Bool expanded);
</code>

===== Values =====

  * **expanded** - %%The expanded state (%%''true''%% expanded, %%''false''%% not expanded).%%
===== Description =====




{{page>:develop:api:user:class:elm:genlist:item:property:expanded:description&nouser&nolink&nodate}}

==== Getter ====

%%Get the expanded state of an item%%

%%This gets the expanded state of an item.%%


{{page>:develop:api:user:class:elm:genlist:item:property:expanded:getter_description&nouser&nolink&nodate}}

==== Setter ====

%%Sets the expanded state of an item.%%

%%This function flags the item of type #ELM_GENLIST_ITEM_TREE as expanded or not.%%

%%The theme will respond to this change visually, and a signal "expanded" or "contracted" will be sent from the genlist with a pointer to the item that has been expanded/contracted.%%

%%Calling this function won't show or hide any child of this item (if it is a parent). You must manually delete and create them on the callbacks of the "expanded" or "contracted" signals.%%
{{page>:develop:api:user:class:elm:genlist:item:property:expanded:getter_description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Elm.Genlist.Item.expanded**

