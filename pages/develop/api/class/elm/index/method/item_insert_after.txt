~~Title: Elm.Index.item_insert_after~~
===== Signature =====

<code>
item_insert_after {
    params {
        @in after: free(Elm.Widget.Item, efl_del);
        @in letter: free(string, free);
        @in func: Evas_Smart_Cb @optional;
        @in data: const(void_ptr) @optional;
    }
    return: free(Elm.Widget.Item, efl_del);
}
</code>

===== C signature =====

<code c>
Elm_Widget_Item *elm_obj_index_item_insert_after(Eo *obj, Elm_Widget_Item *after, const char *letter, Evas_Smart_Cb func, const void *data);
</code>

===== Parameters =====

  * **after** //(in)// - %%The index item to insert after.%%
  * **letter** //(in)// - %%Letter under which the item should be indexed%%
  * **func** //(in)// - %%The function to call when the item is clicked.%%
  * **data** //(in)// - %%The item data to set for the index's item%%

===== Description =====

%%Insert a new item into the index object after item %%''after''%%.%%

%%Despite the most common usage of the %%''letter''%% argument is for single char strings, one could use arbitrary strings as index entries.%%

%%%%''item''%% will be the pointer returned back on $"changed", "delay,changed" and $"selected" smart events.%%

<note>
%%If %%''relative''%% is %%''NULL''%% this function will behave as elm_index_item_append().%%
</note>
{{page>:develop:api:user:class:elm:index:method:item_insert_after:description&nouser&nolink&nodate}}

===== Implemented by =====

  * **Elm.Index.item_insert_after**

