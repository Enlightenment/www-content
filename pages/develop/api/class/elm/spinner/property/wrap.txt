<title>Elm.Spinner.wrap</title>
===== Signature =====

<code>
@property wrap {
    get {
        values {
            wrap: bool;
        }
    }
    set {
        values {
            wrap: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool elm_obj_spinner_wrap_get(const Eo *obj);
void elm_obj_spinner_wrap_set(Eo *obj, Eina_Bool wrap);
</code>

===== Values =====

  * **wrap** - %%%%''true''%% to enable wrap or %%''false''%% to disable it.%%
===== Description =====

%%Control whether the spinner should wrap when it reaches its minimum or maximum value.%%

%%Disabled by default. If disabled, when the user tries to increment the value, but displayed value plus step value is bigger than maximum value, the new value will be the maximum value. The same happens when the user tries to decrement it, but the value less step is less than minimum value. In this case, the new displayed value will be the minimum value.%%

%%When wrap is enabled, when the user tries to increment the value, but displayed value plus step value is bigger than maximum value, the new value will be the minimum value. When the the user tries to decrement it, but the value less step is less than minimum value, the new displayed value will be the maximum value.%%

%%E.g.: %%''min''%% = 10 %%''max''%% = 50 %%''step''%% = 20 %%''displayed''%% = 20%%

%%When the user decrement value (using left or bottom arrow), it will displays $50.%%{{page>:develop:api:user:class:elm:spinner:property:wrap:description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Elm.Spinner.wrap**

