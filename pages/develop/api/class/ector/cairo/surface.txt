<title>Ector.Cairo.Surface</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    ector_cairo_surface [fillcolor = "black", label = "Ector.Cairo.Surface", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    ector_surface [fillcolor = "gray15", label = "Ector.Surface", color = "deepskyblue", fontcolor = "white", style = "filled"]
    ector_buffer [fillcolor = "gray15", label = "Ector.Buffer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    ector_cairo_surface -> efl_object
    ector_cairo_surface -> ector_surface
    ector_surface -> ector_buffer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:ector:cairo:surface|Ector.Cairo.Surface]] //(class)//**
    * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:mixin:ector:surface|Ector.Surface]] //(mixin)//
      * [[:develop:api:mixin:ector:buffer|Ector.Buffer]] //(mixin)//

===== Description =====

%%Ector surface on a cairo backend%%

%%Used to render ector content into a cairo backend.%%

{{page>:develop:user:class:ector:cairo:surface:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:class:ector:cairo:surface:method:symbol_get|symbol_get]]**
<code c>
void *ector_cairo_surface_symbol_get(Eo *obj, const char *name);
</code>

%%Lookup symbal name in cairo lib%%\\ 
\\ 
**[[:develop:api:class:ector:cairo:surface:property:context|context]]** //**(get, set)**//
<code c>
cairo_t *ector_cairo_surface_context_get(const Eo *obj);
void ector_cairo_surface_context_set(Eo *obj, cairo_t *ctx);
</code>

%%Cairo context%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:ector:cairo:surface:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:ector:cairo:surface:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:method:map|map]]**
<code c>
void *ector_buffer_map(Eo *obj, unsigned int *length, Ector_Buffer_Access_Flag mode, unsigned int x, unsigned int y, unsigned int w, unsigned int h, Efl_Gfx_Colorspace cspace, unsigned int *stride);
</code>

%%Map a region of this buffer for read or write access by the CPU, fetch data from the GPU if needed. This operation may be slow if cpu_readable_fast or cpu_writeable_fast are not true, or if the required colorspace is different from the internal one.%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:method:pixels_set|pixels_set]]**
<code c>
Eina_Bool ector_buffer_pixels_set(Eo *obj, void *pixels, int width, int height, Efl_Gfx_Colorspace cspace, Eina_Bool writable);
</code>

%%Sets the source pixels for this buffer, or allocate a new memory region%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:method:unmap|unmap]]**
<code c>
void ector_buffer_unmap(Eo *obj, void *data, unsigned int length);
</code>

%%Unmap a region of this buffer, and upload data to the GPU (if needed).%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:property:cspace|cspace]]** //**(get)**//
<code c>
Efl_Gfx_Colorspace ector_buffer_cspace_get(const Eo *obj);
</code>

%%The colorspace of the pixel buffer.%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:property:flags|flags]]** //**(get)**//
<code c>
Ector_Buffer_Flag ector_buffer_flags_get(const Eo *obj);
</code>

%%The capabilities of this buffer%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:property:size|size]]** //**(get)**//
<code c>
void ector_buffer_size_get(const Eo *obj, int *w, int *h);
</code>

%%The (rectangular) size of the pixel buffer.%%\\ 
\\ 
[[:develop:api:mixin:ector:surface|Ector.Surface]].**[[:develop:api:class:ector:cairo:surface:method:renderer_factory_new|renderer_factory_new]]** //[Overridden here]//
<code c>
Efl_Object *ector_surface_renderer_factory_new(Eo *obj, const Efl_Class *type);
</code>

%%Create a new renderer factory for the given type%%\\ 
\\ 
[[:develop:api:mixin:ector:surface|Ector.Surface]].**[[:develop:api:class:ector:cairo:surface:property:reference_point|reference_point]]** //**(set)**// //[Overridden here]//
<code c>
void ector_surface_reference_point_set(Eo *obj, int x, int y);
</code>

%%This defines where (0,0) is in pixel coordinates inside the surface%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:mixin:ector:buffer|Ector.Buffer]].**[[:develop:api:mixin:ector:buffer:event:detached|detached]]**
<code c>
ECTOR_BUFFER_EVENT_DETACHED(void)
</code>

%%Emitted whenever the previously attached pixels are detached during pixels_set%%\\ 
\\ 
