~~Title: Ector.Renderer.GL.Shape~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    ector_renderer_gl_shape [fillcolor = "black", label = "Ector.Renderer.GL.Shape", color = "gray15", fontcolor = "white", style = "filled"]
    ector_renderer_gl [fillcolor = "gray15", label = "Ector.Renderer.GL", color = "gray15", fontcolor = "white", style = "filled"]
    ector_renderer [fillcolor = "gray15", label = "Ector.Renderer", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    ector_renderer_shape [fillcolor = "gray15", label = "Ector.Renderer.Shape", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_gfx_shape [fillcolor = "gray15", label = "Efl.Gfx.Shape", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_gfx_path [fillcolor = "gray15", label = "Efl.Gfx.Path", color = "deepskyblue", fontcolor = "white", style = "filled"]

    ector_renderer_gl_shape -> ector_renderer_gl
    ector_renderer_gl -> ector_renderer
    ector_renderer -> efl_object
    ector_renderer_gl_shape -> ector_renderer_shape
    ector_renderer_shape -> efl_gfx_shape
    efl_gfx_shape -> efl_gfx_path
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:ector:renderer:gl:shape|Ector.Renderer.GL.Shape]] //(class)//**
    * [[:develop:api:class:ector:renderer:gl|Ector.Renderer.GL]] //(class)//
      * [[:develop:api:class:ector:renderer|Ector.Renderer]] //(class)//
        * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:mixin:ector:renderer:shape|Ector.Renderer.Shape]] //(mixin)//
      * [[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]] //(mixin)//
        * [[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]] //(mixin)//

===== Description =====

%%Ector GL renderer shape class%%

{{page>:develop:api:user:class:ector:renderer:gl:shape:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:api:class:ector:renderer:gl|Ector.Renderer.GL]].**[[:develop:api:class:ector:renderer:gl:shape:method:fill|fill]]** //[Overridden here]//
<code c>
Eina_Bool ector_renderer_gl_fill(Eo *obj, uint64_t flags, GLshort *vertex, unsigned int vertex_count, unsigned int mul_col);
</code>

%%Fill operation%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:gl:shape:method:bounds_get|bounds_get]]** //[Overridden here]//
<code c>
void ector_renderer_bounds_get(Eo *obj, Eina_Rect *r);
</code>

%%Retrieves the bounds of the renderer%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:gl:shape:method:draw|draw]]** //[Overridden here]//
<code c>
Eina_Bool ector_renderer_draw(Eo *obj, Efl_Gfx_Render_Op op, Eina_Array *clips, unsigned int mul_col);
</code>

%%Actual draw operation%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:gl:shape:method:prepare|prepare]]** //[Overridden here]//
<code c>
Eina_Bool ector_renderer_prepare(Eo *obj);
</code>

%%Prepare for rendering%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:gl:shape:property:crc|crc]]** //**(get)**// //[Overridden here]//
<code c>
unsigned int ector_renderer_crc_get(const Eo *obj);
</code>

%%Cyclic redundancy check%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:method:done|done]]**
<code c>
Eina_Bool ector_renderer_done(Eo *obj);
</code>

%%Done with rendering%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:color|color]]** //**(get, set)**//
<code c>
void ector_renderer_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void ector_renderer_color_set(Eo *obj, int r, int g, int b, int a);
</code>

%%Retrieves the general/main color of the given Ector renderer.%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:mask|mask]]** //**(get, set)**//
<code c>
Ector_Renderer *ector_renderer_mask_get(const Eo *obj);
void ector_renderer_mask_set(Eo *obj, Ector_Renderer *r);
</code>

%%Rendering mask%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:origin|origin]]** //**(get, set)**//
<code c>
void ector_renderer_origin_get(const Eo *obj, double *x, double *y);
void ector_renderer_origin_set(Eo *obj, double x, double y);
</code>

%%Renderer origin%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:quality|quality]]** //**(get, set)**//
<code c>
Ector_Quality ector_renderer_quality_get(const Eo *obj);
void ector_renderer_quality_set(Eo *obj, Ector_Quality q);
</code>

%%Quality of the renderer%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:surface|surface]]** //**(get, set)**//
<code c>
Ector_Surface *ector_renderer_surface_get(const Eo *obj);
void ector_renderer_surface_set(Eo *obj, Ector_Surface *s);
</code>

%%Surface associated with this renderer%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:transformation|transformation]]** //**(get, set)**//
<code c>
const Eina_Matrix3 *ector_renderer_transformation_get(const Eo *obj);
void ector_renderer_transformation_set(Eo *obj, const Eina_Matrix3 *m);
</code>

%%Transformation property%%\\ 
\\ 
[[:develop:api:class:ector:renderer|Ector.Renderer]].**[[:develop:api:class:ector:renderer:property:visibility|visibility]]** //**(get, set)**//
<code c>
Eina_Bool ector_renderer_visibility_get(const Eo *obj);
void ector_renderer_visibility_set(Eo *obj, Eina_Bool v);
</code>

%%The given Ector renderer can be visible or invisible.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:ector:renderer:gl:shape:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:ector:renderer:gl:shape:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:ector:renderer:method:finalize|finalize]]** //[Overridden in [[:develop:api:class:ector:renderer|Ector.Renderer]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:mixin:ector:renderer:shape|Ector.Renderer.Shape]].**[[:develop:api:mixin:ector:renderer:shape:property:fill|fill]]** //**(get, set)**//
<code c>
const Ector_Renderer *ector_renderer_shape_fill_get(const Eo *obj);
void ector_renderer_shape_fill_set(Eo *obj, const Ector_Renderer *r);
</code>

%%Fill property%%\\ 
\\ 
[[:develop:api:mixin:ector:renderer:shape|Ector.Renderer.Shape]].**[[:develop:api:mixin:ector:renderer:shape:property:stroke_fill|stroke_fill]]** //**(get, set)**//
<code c>
const Ector_Renderer *ector_renderer_shape_stroke_fill_get(const Eo *obj);
void ector_renderer_shape_stroke_fill_set(Eo *obj, const Ector_Renderer *r);
</code>

%%Stroke fill property%%\\ 
\\ 
[[:develop:api:mixin:ector:renderer:shape|Ector.Renderer.Shape]].**[[:develop:api:mixin:ector:renderer:shape:property:stroke_marker|stroke_marker]]** //**(get, set)**//
<code c>
const Ector_Renderer *ector_renderer_shape_stroke_marker_get(const Eo *obj);
void ector_renderer_shape_stroke_marker_set(Eo *obj, const Ector_Renderer *r);
</code>

%%Stroke marker property%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_arc_to|append_arc_to]]**
<code c>
void efl_gfx_path_append_arc_to(Eo *obj, double x, double y, double rx, double ry, double angle, Eina_Bool large_arc, Eina_Bool sweep);
</code>

%%Append an arc that connects from the current point int the point list to the given point (x,y). The arc is defined by the given radius in  x-direction (rx) and radius in y direction (ry).%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_arc|append_arc]]**
<code c>
void efl_gfx_path_append_arc(Eo *obj, double x, double y, double w, double h, double start_angle, double sweep_length);
</code>

%%Append an arc that enclosed in the given rectangle (x, y, w, h). The angle is defined in counter clock wise , use -ve angle for clockwise arc.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_circle|append_circle]]**
<code c>
void efl_gfx_path_append_circle(Eo *obj, double x, double y, double radius);
</code>

%%Append a circle with given center and radius.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_close|append_close]]**
<code c>
void efl_gfx_path_append_close(Eo *obj);
</code>

%%Closes the current subpath by drawing a line to the beginning of the subpath, automatically starting a new path. The current point of the new path is (0, 0).%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_cubic_to|append_cubic_to]]**
<code c>
void efl_gfx_path_append_cubic_to(Eo *obj, double ctrl_x0, double ctrl_y0, double ctrl_x1, double ctrl_y1, double x, double y);
</code>

%%Adds a cubic Bezier curve between the current position and the given end point (x,y) using the control points specified by (ctrl_x0, ctrl_y0), and (ctrl_x1, ctrl_y1). After the path is drawn, the current position is updated to be at the end point of the path.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_line_to|append_line_to]]**
<code c>
void efl_gfx_path_append_line_to(Eo *obj, double x, double y);
</code>

%%Adds a straight line from the current position to the given end point. After the line is drawn, the current position is updated to be at the end point of the line.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_move_to|append_move_to]]**
<code c>
void efl_gfx_path_append_move_to(Eo *obj, double x, double y);
</code>

%%Moves the current point to the given point,  implicitly starting a new subpath and closing the previous one.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_quadratic_to|append_quadratic_to]]**
<code c>
void efl_gfx_path_append_quadratic_to(Eo *obj, double x, double y, double ctrl_x, double ctrl_y);
</code>

%%Adds a quadratic Bezier curve between the current position and the given end point (x,y) using the control points specified by (ctrl_x, ctrl_y). After the path is drawn, the current position is updated to be at the end point of the path.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_rect|append_rect]]**
<code c>
void efl_gfx_path_append_rect(Eo *obj, double x, double y, double w, double h, double rx, double ry);
</code>

%%Append the given rectangle with rounded corner to the path.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_scubic_to|append_scubic_to]]**
<code c>
void efl_gfx_path_append_scubic_to(Eo *obj, double x, double y, double ctrl_x, double ctrl_y);
</code>

%%Same as efl_gfx_path_append_cubic_to() api only difference is that it uses the current control point to draw the bezier.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_squadratic_to|append_squadratic_to]]**
<code c>
void efl_gfx_path_append_squadratic_to(Eo *obj, double x, double y);
</code>

%%Same as efl_gfx_path_append_quadratic_to() api only difference is that it uses the current control point to draw the bezier.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:append_svg_path|append_svg_path]]**
<code c>
void efl_gfx_path_append_svg_path(Eo *obj, const char *svg_path_data);
</code>

%%Append SVG path data%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:bounds_get|bounds_get]]**
<code c>
void efl_gfx_path_bounds_get(Eo *obj, Eina_Rect *r);
</code>

%%Compute and return the bounding box of the currently set path%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:dup|dup]]**
<code c>
void efl_gfx_path_dup(Eo *obj, const Efl_Object *dup_from);
</code>

%%Copy the shape data from the object specified.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:equal_commands|equal_commands]]**
<code c>
Eina_Bool efl_gfx_path_equal_commands(Eo *obj, const Efl_Object *with);
</code>

%%Equal commands in object%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:interpolate|interpolate]]**
<code c>
Eina_Bool efl_gfx_path_interpolate(Eo *obj, const Efl_Object *from, const Efl_Object *to, double pos_map);
</code>

%%Creates intermediary path part-way between two paths%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:method:reset|reset]]**
<code c>
void efl_gfx_path_reset(Eo *obj);
</code>

%%Reset the shape data of the shape object.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:property:current_ctrl|current_ctrl]]** //**(get)**//
<code c>
void efl_gfx_path_current_ctrl_get(const Eo *obj, double *x, double *y);
</code>

%%Current control point coordinates%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:property:current|current]]** //**(get)**//
<code c>
void efl_gfx_path_current_get(const Eo *obj, double *x, double *y);
</code>

%%Current point coordinates%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:property:length|length]]** //**(get)**//
<code c>
void efl_gfx_path_length_get(const Eo *obj, unsigned int *commands, unsigned int *points);
</code>

%%Path length property%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:property:path|path]]** //**(get, set)**//
<code c>
void efl_gfx_path_get(const Eo *obj, const Efl_Gfx_Path_Command_Type **op, const double **points);
void efl_gfx_path_set(Eo *obj, const Efl_Gfx_Path_Command_Type *op, const double *points);
</code>

%%Set the list of commands and points to be used to create the content of shape.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:method:dup|dup]]**
<code c>
void efl_gfx_shape_dup(Eo *obj, const Efl_Object *dup_from);
</code>

%%Copy the shape data from the object specified.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:method:interpolate|interpolate]]**
<code c>
Eina_Bool efl_gfx_shape_interpolate(Eo *obj, const Efl_Object *from, const Efl_Object *to, double pos_map);
</code>

%%Creates intermediary shape part-way between two shapes%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:fill_rule|fill_rule]]** //**(get, set)**//
<code c>
Efl_Gfx_Fill_Rule efl_gfx_shape_fill_rule_get(const Eo *obj);
void efl_gfx_shape_fill_rule_set(Eo *obj, Efl_Gfx_Fill_Rule fill_rule);
</code>

%%The fill rule of the given shape object. %%''EFL_GFX_FILL_RULE_WINDING''%%, or %%''EFL_GFX_FILL_RULE_ODD_EVEN''%%.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_cap|stroke_cap]]** //**(get, set)**//
<code c>
Efl_Gfx_Cap efl_gfx_shape_stroke_cap_get(const Eo *obj);
void efl_gfx_shape_stroke_cap_set(Eo *obj, Efl_Gfx_Cap c);
</code>

%%The cap style to be used for stroking the path. The cap will be used for capping the end point of a open subpath.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_color|stroke_color]]** //**(get, set)**//
<code c>
void efl_gfx_shape_stroke_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_shape_stroke_color_set(Eo *obj, int r, int g, int b, int a);
</code>

%%The color to be used for stroking the path.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_dash|stroke_dash]]** //**(get, set)**//
<code c>
void efl_gfx_shape_stroke_dash_get(const Eo *obj, const Efl_Gfx_Dash **dash, unsigned int *length);
void efl_gfx_shape_stroke_dash_set(Eo *obj, const Efl_Gfx_Dash *dash, unsigned int length);
</code>

%%Not implemented%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_join|stroke_join]]** //**(get, set)**//
<code c>
Efl_Gfx_Join efl_gfx_shape_stroke_join_get(const Eo *obj);
void efl_gfx_shape_stroke_join_set(Eo *obj, Efl_Gfx_Join j);
</code>

%%The join style to be used for stroking the path. The join style will be used for joining the two line segment while stroking the path.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_location|stroke_location]]** //**(get, set)**//
<code c>
double efl_gfx_shape_stroke_location_get(const Eo *obj);
void efl_gfx_shape_stroke_location_set(Eo *obj, double centered);
</code>

%%Not implemented%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_scale|stroke_scale]]** //**(get, set)**//
<code c>
double efl_gfx_shape_stroke_scale_get(const Eo *obj);
void efl_gfx_shape_stroke_scale_set(Eo *obj, double s);
</code>

%%The stroke scale to be used for stroking the path. Will be used along with stroke width property.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:shape|Efl.Gfx.Shape]].**[[:develop:api:mixin:efl:gfx:shape:property:stroke_width|stroke_width]]** //**(get, set)**//
<code c>
double efl_gfx_shape_stroke_width_get(const Eo *obj);
void efl_gfx_shape_stroke_width_set(Eo *obj, double w);
</code>

%%The stroke width to be used for stroking the path.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:mixin:efl:gfx:path|Efl.Gfx.Path]].**[[:develop:api:mixin:efl:gfx:path:event:changed|changed]]**
<code c>
EFL_GFX_PATH_EVENT_CHANGED(void)
</code>

%%Graphics path was changed.%%\\ 
\\ 
