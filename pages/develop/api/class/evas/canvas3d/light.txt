<title>Evas.Canvas3D.Light</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    evas_canvas3d_light [fillcolor = "black", label = "Evas.Canvas3D.Light", color = "gray15", fontcolor = "white", style = "filled"]
    evas_canvas3d_object [fillcolor = "gray15", label = "Evas.Canvas3D.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    evas_canvas3d_light -> evas_canvas3d_object
    evas_canvas3d_object -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:evas:canvas3d:light|Evas.Canvas3D.Light]] //(class)//**
    * [[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]] //(class)//
      * [[:develop:api:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Evas 3D canvas light class%%

{{page>:develop:api:user:class:evas:canvas3d:light:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:class:evas:canvas3d:light:method:ambient_get|ambient_get]]**
<code c>
void evas_canvas3d_light_ambient_get(const Eo *obj, Evas_Real *r, Evas_Real *g, Evas_Real *b, Evas_Real *a);
</code>

%%Get the ambient color of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:ambient_set|ambient_set]]**
<code c>
void evas_canvas3d_light_ambient_set(Eo *obj, Evas_Real r, Evas_Real g, Evas_Real b, Evas_Real a);
</code>

%%Set the ambient color of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:attenuation_get|attenuation_get]]**
<code c>
void evas_canvas3d_light_attenuation_get(const Eo *obj, Evas_Real *constant, Evas_Real *linear, Evas_Real *quadratic);
</code>

%%Get the attenuation of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:attenuation_set|attenuation_set]]**
<code c>
void evas_canvas3d_light_attenuation_set(Eo *obj, Evas_Real constant, Evas_Real linear, Evas_Real quadratic);
</code>

%%Set the attenuation of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:diffuse_get|diffuse_get]]**
<code c>
void evas_canvas3d_light_diffuse_get(const Eo *obj, Evas_Real *r, Evas_Real *g, Evas_Real *b, Evas_Real *a);
</code>

%%Get the diffuse color of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:diffuse_set|diffuse_set]]**
<code c>
void evas_canvas3d_light_diffuse_set(Eo *obj, Evas_Real r, Evas_Real g, Evas_Real b, Evas_Real a);
</code>

%%Set the diffuse color of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:projection_frustum_set|projection_frustum_set]]**
<code c>
void evas_canvas3d_light_projection_frustum_set(Eo *obj, Evas_Real left, Evas_Real right, Evas_Real bottom, Evas_Real top, Evas_Real dnear, Evas_Real dfar);
</code>

%%Set the projection matrix of the given light source with frustum projection.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:projection_matrix_get|projection_matrix_get]]**
<code c>
void evas_canvas3d_light_projection_matrix_get(const Eo *obj, Evas_Real *matrix);
</code>

%%Get the projection matrix of the given light source.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:projection_matrix_set|projection_matrix_set]]**
<code c>
void evas_canvas3d_light_projection_matrix_set(Eo *obj, const Evas_Real *matrix);
</code>

%%Set the projection matrix of the given light source.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:projection_ortho_set|projection_ortho_set]]**
<code c>
void evas_canvas3d_light_projection_ortho_set(Eo *obj, Evas_Real left, Evas_Real right, Evas_Real bottom, Evas_Real top, Evas_Real dnear, Evas_Real dfar);
</code>

%%Set the projection matrix of the given light source with orthogonal projection.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:projection_perspective_set|projection_perspective_set]]**
<code c>
void evas_canvas3d_light_projection_perspective_set(Eo *obj, Evas_Real fovy, Evas_Real aspect, Evas_Real dnear, Evas_Real dfar);
</code>

%%Set the projection matrix of the given light source with perspective projection.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:specular_get|specular_get]]**
<code c>
void evas_canvas3d_light_specular_get(const Eo *obj, Evas_Real *r, Evas_Real *g, Evas_Real *b, Evas_Real *a);
</code>

%%Get the specular color of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:method:specular_set|specular_set]]**
<code c>
void evas_canvas3d_light_specular_set(Eo *obj, Evas_Real r, Evas_Real g, Evas_Real b, Evas_Real a);
</code>

%%Set the specular color of the given light.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:light:property:attenuation_enable|attenuation_enable]]** //**(get, set)**//
<code c>
Eina_Bool evas_canvas3d_light_attenuation_enable_get(const Eo *obj);
void evas_canvas3d_light_attenuation_enable_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:light:property:directional|directional]]** //**(get, set)**//
<code c>
Eina_Bool evas_canvas3d_light_directional_get(const Eo *obj);
void evas_canvas3d_light_directional_set(Eo *obj, Eina_Bool directional);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:light:property:spot_cutoff|spot_cutoff]]** //**(get, set)**//
<code c>
Evas_Real evas_canvas3d_light_spot_cutoff_get(const Eo *obj);
void evas_canvas3d_light_spot_cutoff_set(Eo *obj, Evas_Real cutoff);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:light:property:spot_exponent|spot_exponent]]** //**(get, set)**//
<code c>
Evas_Real evas_canvas3d_light_spot_exponent_get(const Eo *obj);
void evas_canvas3d_light_spot_exponent_set(Eo *obj, Evas_Real exponent);
</code>

\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:evas:canvas3d:light:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:evas:canvas3d:light:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:evas:canvas3d:object:method:provider_find|provider_find]]** //[Overridden in [[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:light:method:change_notify|change_notify]]** //[Overridden here]//
<code c>
void evas_canvas3d_object_change_notify(Eo *obj, Evas_Canvas3D_State state, Evas_Canvas3D_Object *ref);
</code>

%%Pure virtual change_notify function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:light:method:update_notify|update_notify]]** //[Overridden here]//
<code c>
void evas_canvas3d_object_update_notify(Eo *obj);
</code>

%%Pure virtual update_notify function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:callback_register|callback_register]]**
<code c>
void evas_canvas3d_object_callback_register(Eo *obj, const char *event, const void *data);
</code>

%%Pure virtual register samrt callback function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:callback_unregister|callback_unregister]]**
<code c>
void evas_canvas3d_object_callback_unregister(Eo *obj, const char *event);
</code>

%%Pure virtual unregister smart callback function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:change|change]]**
<code c>
void evas_canvas3d_object_change(Eo *obj, Evas_Canvas3D_State state, Evas_Canvas3D_Object *ref);
</code>

%%Notify the object regarding its  state change.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:dirty_get|dirty_get]]**
<code c>
Eina_Bool evas_canvas3d_object_dirty_get(const Eo *obj, Evas_Canvas3D_State state);
</code>

%%Returns the status of a particular state of the object.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:type_get|type_get]]**
<code c>
Evas_Canvas3D_Object_Type evas_canvas3d_object_type_get(const Eo *obj);
</code>

%%Returns the type of the object.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:type_set|type_set]]**
<code c>
void evas_canvas3d_object_type_set(Eo *obj, Evas_Canvas3D_Object_Type type);
</code>

%%Sets the type of the object.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:update|update]]**
<code c>
void evas_canvas3d_object_update(Eo *obj);
</code>

%%Update request for the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:event:clicked|clicked]]**
<code c>
EVAS_CANVAS3D_OBJECT_EVENT_CLICKED(void)
</code>

%%Clicked Event.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:event:collision|collision]]**
<code c>
EVAS_CANVAS3D_OBJECT_EVENT_COLLISION(void)
</code>

%%Collision Event.%%\\ 
\\ 
