<title>Evas.Canvas3D.Mesh</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    evas_canvas3d_mesh [fillcolor = "black", label = "Evas.Canvas3D.Mesh", color = "gray15", fontcolor = "white", style = "filled"]
    evas_canvas3d_object [fillcolor = "gray15", label = "Evas.Canvas3D.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "deepskyblue", fontcolor = "white", style = "filled"]

    evas_canvas3d_mesh -> evas_canvas3d_object
    evas_canvas3d_object -> efl_object
    evas_canvas3d_mesh -> efl_file
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:class:evas:canvas3d:mesh|Evas.Canvas3D.Mesh]] //(class)//**
    * [[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]] //(class)//
      * [[:develop:api:class:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:mixin:efl:file|Efl.File]] //(mixin)//

===== Description =====

%%Evas 3D canvas mesh class%%

{{page>:develop:api:user:class:evas:canvas3d:mesh:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:class:evas:canvas3d:mesh:method:blending_func_get|blending_func_get]]**
<code c>
void evas_canvas3d_mesh_blending_func_get(Eo *obj, Evas_Canvas3D_Blend_Func *sfactor, Evas_Canvas3D_Blend_Func *dfactor);
</code>

%%Get blending function for given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:blending_func_set|blending_func_set]]**
<code c>
void evas_canvas3d_mesh_blending_func_set(Eo *obj, Evas_Canvas3D_Blend_Func sfactor, Evas_Canvas3D_Blend_Func dfactor);
</code>

%%Set the blending function for given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:convex_hull_data_get|convex_hull_data_get]]**
<code c>
void evas_canvas3d_mesh_convex_hull_data_get(Eo *obj, int frame, Eina_Inarray *vertex, Eina_Inarray *index);
</code>

%%Get the vertex and index data of convex hull around the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:fog_color_get|fog_color_get]]**
<code c>
void evas_canvas3d_mesh_fog_color_get(Eo *obj, Evas_Real *r, Evas_Real *g, Evas_Real *b, Evas_Real *a);
</code>

%%Set the fog color and density for the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:fog_color_set|fog_color_set]]**
<code c>
void evas_canvas3d_mesh_fog_color_set(Eo *obj, Evas_Real r, Evas_Real g, Evas_Real b, Evas_Real a);
</code>

%%Set the fog color and density for the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_add|frame_add]]**
<code c>
void evas_canvas3d_mesh_frame_add(Eo *obj, int frame);
</code>

%%Add a key frame to the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_del|frame_del]]**
<code c>
void evas_canvas3d_mesh_frame_del(Eo *obj, int frame);
</code>

%%Delete a key frame from the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_exist|frame_exist]]**
<code c>
Eina_Bool evas_canvas3d_mesh_frame_exist(Eo *obj, int frame);
</code>

%%Returns %%''true''%% if frame was added and %%''false''%% in other case.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_data_copy_set|frame_vertex_data_copy_set]]**
<code c>
void evas_canvas3d_mesh_frame_vertex_data_copy_set(Eo *obj, int frame, Evas_Canvas3D_Vertex_Attrib attrib, int stride, const void *data);
</code>

%%Set the vertex data of the key frame of the given mesh by copying from a buffer. This function allocates internal vertex buffer and copy from the given buffer. So you can release the buffer. If you want to modify the vertex data use %%[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_data_map|Evas.Canvas3D.Mesh.frame_vertex_data_map]]%%. After finishing the modifications, you should call %%[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_data_unmap|Evas.Canvas3D.Mesh.frame_vertex_data_unmap]]%%.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_data_map|frame_vertex_data_map]]**
<code c>
void *evas_canvas3d_mesh_frame_vertex_data_map(Eo *obj, int frame, Evas_Canvas3D_Vertex_Attrib attrib);
</code>

%%Map the vertex buffer of the key frame of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_data_set|frame_vertex_data_set]]**
<code c>
void evas_canvas3d_mesh_frame_vertex_data_set(Eo *obj, int frame, Evas_Canvas3D_Vertex_Attrib attrib, int stride, const void *data);
</code>

%%Set the vertex data of the key frame of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_data_unmap|frame_vertex_data_unmap]]**
<code c>
void evas_canvas3d_mesh_frame_vertex_data_unmap(Eo *obj, int frame, Evas_Canvas3D_Vertex_Attrib attrib);
</code>

%%Unmap the vertex buffer of the key frame of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:frame_vertex_stride_get|frame_vertex_stride_get]]**
<code c>
int evas_canvas3d_mesh_frame_vertex_stride_get(const Eo *obj, int frame, Evas_Canvas3D_Vertex_Attrib attrib);
</code>

%%Get the vertex buffer stride of the key frame of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:from_primitive_set|from_primitive_set]]**
<code c>
void evas_canvas3d_mesh_from_primitive_set(Eo *obj, int frame, Evas_Canvas3D_Primitive *primitive);
</code>

%%Set the data of given mesh frame from the given primitive.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:index_count_get|index_count_get]]**
<code c>
int evas_canvas3d_mesh_index_count_get(const Eo *obj);
</code>

%%Get the count of the index data of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:index_data_copy_set|index_data_copy_set]]**
<code c>
void evas_canvas3d_mesh_index_data_copy_set(Eo *obj, Evas_Canvas3D_Index_Format format, int count, const void *indices);
</code>

%%Set the vertex index data of the given mesh by copying from a buffer.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:index_data_map|index_data_map]]**
<code c>
void *evas_canvas3d_mesh_index_data_map(Eo *obj);
</code>

%%Map the index buffer of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:index_data_set|index_data_set]]**
<code c>
void evas_canvas3d_mesh_index_data_set(Eo *obj, Evas_Canvas3D_Index_Format format, int count, const void *indices);
</code>

%%Set the vertex index data of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:index_data_unmap|index_data_unmap]]**
<code c>
void evas_canvas3d_mesh_index_data_unmap(Eo *obj);
</code>

%%Unmap the index buffer of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:method:index_format_get|index_format_get]]**
<code c>
Evas_Canvas3D_Index_Format evas_canvas3d_mesh_index_format_get(const Eo *obj);
</code>

%%Get the format of the index data of the given mesh.%%\\ 
\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:alpha_func|alpha_func]]** //**(get, set)**//
<code c>
void evas_canvas3d_mesh_alpha_func_get(const Eo *obj, Evas_Canvas3D_Comparison *comparison_func, Evas_Real *ref_value);
void evas_canvas3d_mesh_alpha_func_set(Eo *obj, Evas_Canvas3D_Comparison comparison_func, Evas_Real ref_value);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:alpha_test_enable|alpha_test_enable]]** //**(get, set)**//
<code c>
Eina_Bool evas_canvas3d_mesh_alpha_test_enable_get(const Eo *obj);
void evas_canvas3d_mesh_alpha_test_enable_set(Eo *obj, Eina_Bool enabled);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:blending_enable|blending_enable]]** //**(get, set)**//
<code c>
Eina_Bool evas_canvas3d_mesh_blending_enable_get(const Eo *obj);
void evas_canvas3d_mesh_blending_enable_set(Eo *obj, Eina_Bool blending);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:color_pick_enable|color_pick_enable]]** //**(get, set)**//
<code c>
Eina_Bool evas_canvas3d_mesh_color_pick_enable_get(const Eo *obj);
void evas_canvas3d_mesh_color_pick_enable_set(Eo *obj, Eina_Bool enabled);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:fog_enable|fog_enable]]** //**(get, set)**//
<code c>
Eina_Bool evas_canvas3d_mesh_fog_enable_get(const Eo *obj);
void evas_canvas3d_mesh_fog_enable_set(Eo *obj, Eina_Bool enabled);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:frame_material|frame_material]]** //**(get, set)**//
<code c>
Evas_Canvas3D_Material *evas_canvas3d_mesh_frame_material_get(const Eo *obj, int frame);
void evas_canvas3d_mesh_frame_material_set(Eo *obj, int frame, Evas_Canvas3D_Material *material);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:lod_boundary|lod_boundary]]** //**(get, set)**//
<code c>
void evas_canvas3d_mesh_lod_boundary_get(const Eo *obj, Evas_Real *near_lod, Evas_Real *far_lod);
void evas_canvas3d_mesh_lod_boundary_set(Eo *obj, Evas_Real near_lod, Evas_Real far_lod);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:shader_mode|shader_mode]]** //**(get, set)**//
<code c>
Evas_Canvas3D_Shader_Mode evas_canvas3d_mesh_shader_mode_get(const Eo *obj);
void evas_canvas3d_mesh_shader_mode_set(Eo *obj, Evas_Canvas3D_Shader_Mode mode);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:shadows_constant_bias|shadows_constant_bias]]** //**(get, set)**//
<code c>
Evas_Real evas_canvas3d_mesh_shadows_constant_bias_get(const Eo *obj);
void evas_canvas3d_mesh_shadows_constant_bias_set(Eo *obj, Evas_Real bias);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:shadows_edges_filtering|shadows_edges_filtering]]** //**(get, set)**//
<code c>
void evas_canvas3d_mesh_shadows_edges_filtering_get(const Eo *obj, int *blur_level, Evas_Real *edges_size);
void evas_canvas3d_mesh_shadows_edges_filtering_set(Eo *obj, int blur_level, Evas_Real edges_size);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:vertex_assembly|vertex_assembly]]** //**(get, set)**//
<code c>
Evas_Canvas3D_Vertex_Assembly evas_canvas3d_mesh_vertex_assembly_get(const Eo *obj);
void evas_canvas3d_mesh_vertex_assembly_set(Eo *obj, Evas_Canvas3D_Vertex_Assembly assembly);
</code>

\\ 
**[[:develop:api:class:evas:canvas3d:mesh:property:vertex_count|vertex_count]]** //**(get, set)**//
<code c>
unsigned int evas_canvas3d_mesh_vertex_count_get(const Eo *obj);
void evas_canvas3d_mesh_vertex_count_set(Eo *obj, unsigned int count);
</code>

\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:evas:canvas3d:mesh:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:evas:canvas3d:mesh:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:evas:canvas3d:object:method:provider_find|provider_find]]** //[Overridden in [[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:mesh:method:change_notify|change_notify]]** //[Overridden here]//
<code c>
void evas_canvas3d_object_change_notify(Eo *obj, Evas_Canvas3D_State state, Evas_Canvas3D_Object *ref);
</code>

%%Pure virtual change_notify function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:mesh:method:update_notify|update_notify]]** //[Overridden here]//
<code c>
void evas_canvas3d_object_update_notify(Eo *obj);
</code>

%%Pure virtual update_notify function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:callback_register|callback_register]]**
<code c>
void evas_canvas3d_object_callback_register(Eo *obj, const char *event, const void *data);
</code>

%%Pure virtual register samrt callback function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:callback_unregister|callback_unregister]]**
<code c>
void evas_canvas3d_object_callback_unregister(Eo *obj, const char *event);
</code>

%%Pure virtual unregister smart callback function.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:change|change]]**
<code c>
void evas_canvas3d_object_change(Eo *obj, Evas_Canvas3D_State state, Evas_Canvas3D_Object *ref);
</code>

%%Notify the object regarding its  state change.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:dirty_get|dirty_get]]**
<code c>
Eina_Bool evas_canvas3d_object_dirty_get(const Eo *obj, Evas_Canvas3D_State state);
</code>

%%Returns the status of a particular state of the object.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:type_get|type_get]]**
<code c>
Evas_Canvas3D_Object_Type evas_canvas3d_object_type_get(const Eo *obj);
</code>

%%Returns the type of the object.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:type_set|type_set]]**
<code c>
void evas_canvas3d_object_type_set(Eo *obj, Evas_Canvas3D_Object_Type type);
</code>

%%Sets the type of the object.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:method:update|update]]**
<code c>
void evas_canvas3d_object_update(Eo *obj);
</code>

%%Update request for the object.%%\\ 
\\ 
[[:develop:api:mixin:efl:file|Efl.File]].**[[:develop:api:class:evas:canvas3d:mesh:method:save|save]]** //[Overridden here]//
<code c>
Eina_Bool efl_file_save(const Eo *obj, const char *file, const char *key, const char *flags);
</code>

%%Save the given image object's contents to an (image) file.%%\\ 
\\ 
[[:develop:api:mixin:efl:file|Efl.File]].**[[:develop:api:class:evas:canvas3d:mesh:property:file|file]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

\\ 
[[:develop:api:mixin:efl:file|Efl.File]].**[[:develop:api:class:evas:canvas3d:mesh:property:mmap|mmap]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_file_mmap_get(const Eo *obj, const Eina_File **f, const char **key);
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>

\\ 
[[:develop:api:mixin:efl:file|Efl.File]].**[[:develop:api:mixin:efl:file:property:load_error|load_error]]** //**(get)**//
<code c>
Efl_Image_Load_Error efl_file_load_error_get(const Eo *obj);
</code>

%%Gets the (last) file loading error for a given Edje object%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:api:class:efl:object|Efl.Object]].**[[:develop:api:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:event:clicked|clicked]]**
<code c>
EVAS_CANVAS3D_OBJECT_EVENT_CLICKED(void)
</code>

%%Clicked Event.%%\\ 
\\ 
[[:develop:api:class:evas:canvas3d:object|Evas.Canvas3D.Object]].**[[:develop:api:class:evas:canvas3d:object:event:collision|collision]]**
<code c>
EVAS_CANVAS3D_OBJECT_EVENT_COLLISION(void)
</code>

%%Collision Event.%%\\ 
\\ 
