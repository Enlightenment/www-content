~~Title: Efl.Object~~
====== Efl.Object (class) ======

===== Description =====

%%Abstract Efl object class%%

{{page>:develop:api-include:efl:object:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//\\
> %%Allow an object to be deleted by unref even if it has a parent.%%
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>
\\
**[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**\\
> %%Get an iterator on all childrens%%
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//\\
> %%A human readable comment for the object%%
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>
\\
**[[:develop:api:efl:object:method:composite_attach|composite_attach]]**\\
> %%Make an object a composite object of another.%%
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>
\\
**[[:develop:api:efl:object:method:composite_detach|composite_detach]]**\\
> %%Detach a composite object from another object.%%
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>
\\
**[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**\\
> %%Check if an object is part of a composite object.%%
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:constructor|constructor]]**\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**\\
> %%Build a read-only name for this object used for debugging.%%
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>
\\
**[[:develop:api:efl:object:method:del|del]]**\\
> %%Unrefs the object and reparents it to NULL.%%
<code c>
void efl_del(const Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:destructor|destructor]]**\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**\\
> %%Add an event callback forwarder for an event and an object.%%
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>
\\
**[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**\\
> %%Remove an event callback forwarder for an event and an object.%%
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>
\\
**[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**\\
> %%Stop the current callback call.%%
<code c>
void efl_event_callback_stop(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:event_freeze|event_freeze]]**\\
> %%Freeze events of object.%%
<code c>
void efl_event_freeze(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//\\
> %%Return freeze events of object.%%
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** ''class''\\
> %%Freeze events of object.%%
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>
\\
**[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// ''class''\\
> %%Return freeze events of object.%%
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** ''class''\\
> %%Thaw events of object.%%
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:event_thaw|event_thaw]]**\\
> %%Thaw events of object.%%
<code c>
void efl_event_thaw(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:method:finalize|finalize]]**\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//\\
> %%True if the object is already finalized, otherwise false.%%
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//\\
> %%The name of the object.%%
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>
\\
**[[:develop:api:efl:object:method:name_find|name_find]]**\\
> %%Find a child object with the given name and return it.%%
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>
\\
**[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**//\\
> %%The parent of an object.%%
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>
\\
**[[:develop:api:efl:object:method:provider_find|provider_find]]**\\
> %%Searches upwards in the object tree for a provider which knows the given class/interface.%%
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>
\\

===== Events =====

**[[:develop:api:efl:object:event:callback_add|callback,add]]**\\
> %%A callback was added.%%
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>
\\ **[[:develop:api:efl:object:event:callback_del|callback,del]]**\\
> %%A callback was deleted.%%
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>
\\ **[[:develop:api:efl:object:event:del|del]]**\\
> %%Object is being deleted.%%
<code c>
EFL_EVENT_DEL(void, @hot)
</code>
\\ 