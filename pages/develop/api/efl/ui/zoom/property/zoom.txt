~~Title: Efl.Ui.Zoom.zoom~~
===== Description =====




{{page>:develop:api-include:efl:ui:zoom:property:zoom:description&nouser&nolink&nodate}}

===== Values =====

  * **zoom** - %%The zoom level to set%%
==== Getter ====

%%Get the zoom level of the photo%%

%%This returns the current zoom level of the zoomable object. Note that if you set the fill mode to other than #EFL_UI_ZOOM_MODE_MANUAL (which is the default), the zoom level may be changed at any time by the  zoomable object itself to account for photo size and zoomable viewport size.%%


{{page>:develop:api-include:efl:ui:zoom:property:zoom:getter_description&nouser&nolink&nodate}}

==== Setter ====

%%Set the zoom level of the photo%%

%%This sets the zoom level. If %%''zoom''%% is 1, it means no zoom. If it's smaller than 1, it means zoom in. If it's bigger than 1, it means zoom out. For  example, %%''zoom''%% 1 will be 1:1 pixel for pixel. %%''zoom''%% 2 will be 2:1 (that is 2x2 photo pixels will display as 1 on-screen pixel) which is a zoom out. 4:1 will be 4x4 photo pixels as 1 screen pixel, and so on. The %%''zoom''%% parameter must be greater than 0. It is suggested to stick to powers of 2. (1, 2, 4, 8, 16, 32, etc.).%%
{{page>:develop:api-include:efl:ui:zoom:property:zoom:getter_description&nouser&nolink&nodate}}


===== Signature =====

<code>
@property zoom @pure_virtual {
    get {
        values {
            zoom: double;
        }
    }
    set {
        values {
            zoom: double;
        }
    }
}
</code>

===== C signature =====

<code c>
double efl_ui_zoom_get(const Eo *obj);
void efl_ui_zoom_set(Eo *obj, double zoom);
</code>

===== Implemented by =====

  * **Efl.Ui.Zoom.zoom**

