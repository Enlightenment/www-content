~~Title: Efl.Ui.Scrollable.Interactive~~
====== Efl.Ui.Scrollable.Interactive (interface) ======

===== Description =====

No description supplied.

{{page>:develop:api-include:efl:ui:scrollable:interactive:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:scrollable:interactive:property:bounce_enabled|bounce_enabled]]** //**(get, set)**//\\
> %%Bouncing behavior%%
<code c>
void efl_ui_scrollable_bounce_enabled_get(const Eo *obj, Eina_Bool *horiz, Eina_Bool *vert);
void efl_ui_scrollable_bounce_enabled_set(Eo *obj, Eina_Bool horiz, Eina_Bool vert);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:content_pos|content_pos]]** //**(get, set)**//\\
> %%The content position%%
<code c>
Eina_Position2D efl_ui_scrollable_content_pos_get(const Eo *obj);
void efl_ui_scrollable_content_pos_set(Eo *obj, Eina_Position2D pos);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:content_size|content_size]]** //**(get)**//\\
> %%The content size%%
<code c>
Eina_Size2D efl_ui_scrollable_content_size_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:gravity|gravity]]** //**(get, set)**//\\
> %%Control scrolling gravity on the scrollable%%
<code c>
void efl_ui_scrollable_gravity_get(const Eo *obj, double *x, double *y);
void efl_ui_scrollable_gravity_set(Eo *obj, double x, double y);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:looping|looping]]** //**(get, set)**//\\
> %%Controls an infinite loop for a scroller.%%
<code c>
void efl_ui_scrollable_looping_get(const Eo *obj, Eina_Bool *loop_h, Eina_Bool *loop_v);
void efl_ui_scrollable_looping_set(Eo *obj, Eina_Bool loop_h, Eina_Bool loop_v);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:match_content|match_content]]** //**(set)**//\\
> %%Prevent the scrollable from being smaller than the minimum size of the content.%%
<code c>
void efl_ui_scrollable_match_content_set(Eo *obj, Eina_Bool w, Eina_Bool h);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:movement_block|movement_block]]** //**(get, set)**//\\
> %%Blocking of scrolling (per axis)%%
<code c>
Efl_Ui_Scroll_Block efl_ui_scrollable_movement_block_get(const Eo *obj);
void efl_ui_scrollable_movement_block_set(Eo *obj, Efl_Ui_Scroll_Block block);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:method:scroll|scroll]]**\\
> %%Show a specific virtual region within the scroller content object.%%
<code c>
void efl_ui_scrollable_scroll(Eo *obj, Eina_Rect rect, Eina_Bool animation);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:scroll_freeze|scroll_freeze]]** //**(get, set)**//\\
> %%Freeze property This function will freeze scrolling movement (by input of a user). Unlike efl_ui_scrollable_movement_block_set, this function freezes bidirectionally. If you want to freeze in only one direction, See %%[[:develop:api:efl:ui:scrollable:interactive:property:movement_block|Efl.Ui.Scrollable.Interactive.movement_block.set]]%%.%%
<code c>
Eina_Bool efl_ui_scrollable_scroll_freeze_get(const Eo *obj);
void efl_ui_scrollable_scroll_freeze_set(Eo *obj, Eina_Bool freeze);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:scroll_hold|scroll_hold]]** //**(get, set)**//\\
> %%Hold property When hold turns on, it only scrolls by holding action.%%
<code c>
Eina_Bool efl_ui_scrollable_scroll_hold_get(const Eo *obj);
void efl_ui_scrollable_scroll_hold_set(Eo *obj, Eina_Bool hold);
</code>
\\
**[[:develop:api:efl:ui:scrollable:interactive:property:viewport_geometry|viewport_geometry]]** //**(get)**//\\
> %%The viewport geometry%%
<code c>
Eina_Rect efl_ui_scrollable_viewport_geometry_get(const Eo *obj);
</code>
\\

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] ^^^
|  | **[[:develop:api:efl:ui:scrollable:event:edge_down|edge,down]]** | %%Called when hitting the bottom edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_left|edge,left]]** | %%Called when hitting the left edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_right|edge,right]]** | %%Called when hitting the right edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_up|edge,up]]** | %%Called when hitting the top edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll|scroll]]** | %%Called when scrolling%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_start|scroll,anim,start]]** | %%Called when scroll animation starts%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_stop|scroll,anim,stop]]** | %%Called when scroll animation stopps%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_down|scroll,down]]** | %%Called when scrolling downwards%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_start|scroll,drag,start]]** | %%Called when scroll drag starts%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_stop|scroll,drag,stop]]** | %%Called when scroll drag stops%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_left|scroll,left]]** | %%Called when scrolling left%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_right|scroll,right]]** | %%Called when scrolling right%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_start|scroll,start]]** | %%Called when scroll operation starts%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_stop|scroll,stop]]** | %%Called when scroll operation stops%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_up|scroll,up]]** | %%Called when scrolling upwards%% |
