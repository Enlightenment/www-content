~~Title: Efl.Ui.Widget.Part_Shadow~~
====== Efl.Ui.Widget.Part_Shadow (class) ======

===== Description =====

%%A drop-shadow or glow effect around any widget.%%

%%A simple drop-shadow effect can be applied to any widget by setting the color and blur radius on this part.%%

%%For instance, a blue glow can be achieved with: obj.shadow().color_set(0, 128, 255, 255); obj.shadow().grow_set(2); obj.shadow().radius_set(3, 3);%%

%%As another example, here's a black drop-shadow: obj.shadow().color_set(0, 0, 0, 255); obj.shadow().grow_set(1); obj.shadow().radius_set(5, 5); obj.shadow().offset_set(5, 5);%%

%%It is also possible to manually specify which %%[[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]%% program to use.%%

{{page>:develop:api-include:efl:ui:widget:part_shadow:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
  * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
  * [[:develop:api:efl:gfx:blur|Efl.Gfx.Blur]] //(interface)//
  * [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:widget:part_shadow:property:color|color]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:color|Efl.Gfx.Color]]]//\\
> 
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:filter_data|filter_data]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Extra data used by the filter program.%%
<code c>
void efl_gfx_filter_data_get(const Eo *obj, const char *name, const char **value, Eina_Bool *execute);
void efl_gfx_filter_data_set(Eo *obj, const char *name, const char *value, Eina_Bool execute);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:filter_padding|filter_padding]]** //**(get)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Required padding to apply this filter without cropping.%%
<code c>
void efl_gfx_filter_padding_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:filter_program|filter_program]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> 
<code c>
void efl_gfx_filter_program_get(const Eo *obj, const char **code, const char **name);
void efl_gfx_filter_program_set(Eo *obj, const char *code, const char *name);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:filter_source|filter_source]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Bind an object to use as a mask or texture in a filter program.%%
<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:filter_state|filter_state]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Set the current state of the filter.%%
<code c>
void efl_gfx_filter_state_get(const Eo *obj, const char **cur_state, double *cur_val, const char **next_state, double *next_val, double *pos);
void efl_gfx_filter_state_set(Eo *obj, const char *cur_state, double cur_val, const char *next_state, double next_val, double pos);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:grow|grow]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:blur|Efl.Gfx.Blur]]]//\\
> %%How much the original image should be "grown" before blurring.%%
<code c>
double efl_gfx_blur_grow_get(const Eo *obj);
void efl_gfx_blur_grow_set(Eo *obj, double radius);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:offset|offset]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:blur|Efl.Gfx.Blur]]]//\\
> %%An offset relative to the original pixels.%%
<code c>
void efl_gfx_blur_offset_get(const Eo *obj, double *ox, double *oy);
void efl_gfx_blur_offset_set(Eo *obj, double ox, double oy);
</code>
\\
**[[:develop:api:efl:ui:widget:part_shadow:property:radius|radius]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:blur|Efl.Gfx.Blur]]]//\\
> %%The blur radius in pixels.%%
<code c>
void efl_gfx_blur_radius_get(const Eo *obj, double *rx, double *ry);
void efl_gfx_blur_radius_set(Eo *obj, double rx, double ry);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:gfx:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:gfx:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
^ [[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]] ^^^
|  | **[[:develop:api:efl:ui:widget:part:method:destructor|destructor]]** | %%Call the object's destructor.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
