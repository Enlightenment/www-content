~~Title: Efl.Ui.Widget.Part_Bg~~
====== Efl.Ui.Widget.Part_Bg (class) ======

===== Description =====

%%Elementary widget internal part background class%%

{{page>:develop:api-include:efl:ui:widget:part_bg:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
  * [[:develop:api:efl:ui:bg|Efl.Ui.Bg]] //(interface)//
    * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
    * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
    * [[:develop:api:efl:image|Efl.Image]] //(interface)//
    * [[:develop:api:efl:file|Efl.File]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:ui:widget:part_bg:property:color|color]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:color|Efl.Gfx.Color]]]//\\
> 
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>
\\
**[[:develop:api:efl:ui:widget:part_bg:property:file|file]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:file|Efl.File]]]//\\
> 
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>
\\
**[[:develop:api:efl:ui:widget:part_bg:property:scale_type|scale_type]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image|Efl.Image]]]//\\
> %%Control how the image is scaled.%%
<code c>
Efl_Image_Scale_Type efl_image_scale_type_get(const Eo *obj);
void efl_image_scale_type_set(Eo *obj, Efl_Image_Scale_Type scale_type);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:file|Efl.File]] ^^^
|  | **[[:develop:api:efl:file:property:load_error|load_error]]** //**(get)**// | %%Gets the (last) file loading error for a given object.%% |
|  | **[[:develop:api:efl:file:property:mmap|mmap]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:file:method:save|save]]** | %%Save the given image object's contents to an (image) file.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:gfx:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:gfx:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:property:border|border]]** //**(get, set)**// | %%Dimensions of this image's border, a region that does not scale with the center area.%% |
|  | **[[:develop:api:efl:image:property:border_center_fill|border_center_fill]]** //**(get, set)**// | %%Specifies how the center part of the object (not the borders) should be drawn when EFL is rendering it.%% |
|  | **[[:develop:api:efl:image:property:border_scale|border_scale]]** //**(get, set)**// | %%Scaling factor applied to the image borders.%% |
|  | **[[:develop:api:efl:image:property:content_hint|content_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:property:image_size|image_size]]** //**(get)**// | %%This represents the size of the original image in pixels.%% |
|  | **[[:develop:api:efl:image:property:ratio|ratio]]** //**(get)**// | %%The native width/height ratio of the image.%% |
|  | **[[:develop:api:efl:image:property:scale_hint|scale_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:property:smooth_scale|smooth_scale]]** //**(get, set)**// | %%Whether to use high-quality image scaling algorithm for this image.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
^ [[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]] ^^^
|  | **[[:develop:api:efl:ui:widget:part:method:destructor|destructor]]** | %%Call the object's destructor.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:event:preload|preload]]** | %%Image data has been preloaded.%% |
|  | **[[:develop:api:efl:image:event:unload|unload]]** | %%Image data has been unloaded (by some mechanism in EFL that threw out the original image data).%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
