~~Title: Efl.Ui.Scroll.Manager~~
====== Efl.Ui.Scroll.Manager (class) ======

===== Description =====

%%Efl ui scroll manager class%%

{{page>:develop:api-include:efl:ui:scroll:manager:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
  * [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]] //(interface)//
    * [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
  * [[:develop:api:efl:ui:scrollbar|Efl.Ui.Scrollbar]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:scroll:manager:property:bar_mode|bar_mode]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollbar|Efl.Ui.Scrollbar]]]//\\
> %%Scrollbar visibility policy%%
<code c>
void efl_ui_scrollbar_bar_mode_get(const Eo *obj, Efl_Ui_Scrollbar_Mode *hbar, Efl_Ui_Scrollbar_Mode *vbar);
void efl_ui_scrollbar_bar_mode_set(Eo *obj, Efl_Ui_Scrollbar_Mode hbar, Efl_Ui_Scrollbar_Mode vbar);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:bar_position|bar_position]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollbar|Efl.Ui.Scrollbar]]]//\\
> %%Scrollbar position. It is calculated based on current position-maximum positions.%%
<code c>
void efl_ui_scrollbar_bar_position_get(const Eo *obj, double *posx, double *posy);
void efl_ui_scrollbar_bar_position_set(Eo *obj, double posx, double posy);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:bar_size|bar_size]]** //**(get)**//// [Overridden from [[:develop:api:efl:ui:scrollbar|Efl.Ui.Scrollbar]]]//\\
> %%Scrollbar size. It is calculated based on viewport size-content sizes.%%
<code c>
void efl_ui_scrollbar_bar_size_get(const Eo *obj, double *width, double *height);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:bounce_enabled|bounce_enabled]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Bouncing behavior%%
<code c>
void efl_ui_scrollable_bounce_enabled_get(const Eo *obj, Eina_Bool *horiz, Eina_Bool *vert);
void efl_ui_scrollable_bounce_enabled_set(Eo *obj, Eina_Bool horiz, Eina_Bool vert);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:content_pos|content_pos]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%The content position%%
<code c>
Eina_Position2D efl_ui_scrollable_content_pos_get(const Eo *obj);
void efl_ui_scrollable_content_pos_set(Eo *obj, Eina_Position2D pos);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:content_size|content_size]]** //**(get)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%The content size%%
<code c>
Eina_Size2D efl_ui_scrollable_content_size_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:gravity|gravity]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Control scrolling gravity on the scrollable%%
<code c>
void efl_ui_scrollable_gravity_get(const Eo *obj, double *x, double *y);
void efl_ui_scrollable_gravity_set(Eo *obj, double x, double y);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:looping|looping]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Controls an infinite loop for a scroller.%%
<code c>
void efl_ui_scrollable_looping_get(const Eo *obj, Eina_Bool *loop_h, Eina_Bool *loop_v);
void efl_ui_scrollable_looping_set(Eo *obj, Eina_Bool loop_h, Eina_Bool loop_v);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:match_content|match_content]]** //**(set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Prevent the scrollable from being smaller than the minimum size of the content.%%
<code c>
void efl_ui_scrollable_match_content_set(Eo *obj, Eina_Bool w, Eina_Bool h);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:mirrored|mirrored]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:base|Efl.Ui.Base]]]//\\
> %%Whether this object should be mirrored.%%
<code c>
Eina_Bool efl_ui_mirrored_get(const Eo *obj);
void efl_ui_mirrored_set(Eo *obj, Eina_Bool rtl);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:movement_block|movement_block]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Blocking of scrolling (per axis)%%
<code c>
Efl_Ui_Scroll_Block efl_ui_scrollable_movement_block_get(const Eo *obj);
void efl_ui_scrollable_movement_block_set(Eo *obj, Efl_Ui_Scroll_Block block);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:method:scroll|scroll]]**// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Show a specific virtual region within the scroller content object.%%
<code c>
void efl_ui_scrollable_scroll(Eo *obj, Eina_Rect rect, Eina_Bool animation);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:scroll_freeze|scroll_freeze]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Freeze property This function will freeze scrolling movement (by input of a user). Unlike efl_ui_scrollable_movement_block_set, this function freezes bidirectional. If you want to freeze only one direction, See %%[[:develop:api:efl:ui:scrollable:interactive:property:movement_block|Efl.Ui.Scrollable.Interactive.movement_block.set]]%%.%%
<code c>
Eina_Bool efl_ui_scrollable_scroll_freeze_get(const Eo *obj);
void efl_ui_scrollable_scroll_freeze_set(Eo *obj, Eina_Bool freeze);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:scroll_hold|scroll_hold]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%Hold property When hold turns on, it only scrolls by holding action.%%
<code c>
Eina_Bool efl_ui_scrollable_scroll_hold_get(const Eo *obj);
void efl_ui_scrollable_scroll_hold_set(Eo *obj, Eina_Bool hold);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:viewport_geometry|viewport_geometry]]** //**(get)**//// [Overridden from [[:develop:api:efl:ui:scrollable:interactive|Efl.Ui.Scrollable.Interactive]]]//\\
> %%The viewport geometry%%
<code c>
Eina_Rect efl_ui_scrollable_viewport_geometry_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:method:bar_visibility_update|bar_visibility_update]]** ''protected''// [Overridden from [[:develop:api:efl:ui:scrollbar|Efl.Ui.Scrollbar]]]//\\
> %%Update bar visibility.%%
<code c>
void efl_ui_scrollbar_bar_visibility_update(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:scroll:manager:property:pan|pan]]** //**(set)**// ''protected''\\
> %%This is the internal canvas object managed by scroll manager.%%
<code c>
void efl_ui_scroll_manager_pan_set(Eo *obj, Efl_Canvas_Object *pan);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
^ [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] ^^^
|  | **[[:develop:api:efl:ui:scrollable:event:edge_down|edge,down]]** | %%Called when hitting the bottom edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_left|edge,left]]** | %%Called when hitting the left edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_right|edge,right]]** | %%Called when hitting the right edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_up|edge,up]]** | %%Called when hitting the top edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll|scroll]]** | %%Called when scroll operation%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_start|scroll,anim,start]]** | %%Called when scroll animation started%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_stop|scroll,anim,stop]]** | %%Called when scroll animation stopped%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_down|scroll,down]]** | %%Called when scrolling to downwards%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_start|scroll,drag,start]]** | %%Called when scroll drag started%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_stop|scroll,drag,stop]]** | %%Called when scroll drag stopped%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_left|scroll,left]]** | %%Called when scrolling to left%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_right|scroll,right]]** | %%Called when scrolling to right%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_start|scroll,start]]** | %%Called when scroll operation started%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_stop|scroll,stop]]** | %%Called when scroll operation stopped%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_up|scroll,up]]** | %%Called when scrolling to upwards%% |
^ [[:develop:api:efl:ui:scrollbar|Efl.Ui.Scrollbar]] ^^^
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_drag|bar,drag]]** | %%Called when bar is dragged%% |
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_hide|bar,hide]]** | %%Called when bar is hidden%% |
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_pos_changed|bar,pos,changed]]** | %%Called when bar position is changed%% |
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_press|bar,press]]** | %%Called when bar is pressed%% |
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_show|bar,show]]** | %%Callend when bar is shown%% |
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_size_changed|bar,size,changed]]** | %%Called when bar size is changed%% |
|  | **[[:develop:api:efl:ui:scrollbar:event:bar_unpress|bar,unpress]]** | %%Called when bar is unpressed%% |
