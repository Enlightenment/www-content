~~Title: Efl.Ui.Range~~
====== Efl.Ui.Range (interface) ======

===== Description =====

%%Efl UI progress interface%%

{{page>:develop:api-include:efl:ui:range:description&nouser&nolink&nodate}}

===== Inheritance =====


++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_ui_range [fillcolor = "dodgerblue4", label = "Efl.Ui.Range", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

++++ Full hierarchy |



++++
===== Members =====

**[[:develop:api:efl:ui:range:property:range_min_max|range_min_max]]** //**(get, set)**//
<code c>
void efl_ui_range_min_max_get(const Eo *obj, double *min, double *max);
void efl_ui_range_min_max_set(Eo *obj, double min, double max);
</code>
\\
**[[:develop:api:efl:ui:range:property:range_step|range_step]]** //**(get, set)**//\\
> %%Control the step used to increment or decrement values for given widget.%%
<code c>
double efl_ui_range_step_get(const Eo *obj);
void efl_ui_range_step_set(Eo *obj, double step);
</code>
\\
**[[:develop:api:efl:ui:range:property:range_value|range_value]]** //**(get, set)**//\\
> %%Control the range value (in percentage) on a given range widget%%
<code c>
double efl_ui_range_value_get(const Eo *obj);
void efl_ui_range_value_set(Eo *obj, double val);
</code>
\\

===== Events =====

