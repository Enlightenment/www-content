~~Title: Efl.Ui.Text.Interactive~~
====== Efl.Ui.Text.Interactive (interface) ======

===== Description =====

%%This is an interface interactive text inputs should implement%%

{{page>:develop:api-include:efl:ui:text:interactive:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:text|Efl.Text]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:text|Efl.Text]] //(interface)//
  * [[:develop:api:efl:text:font|Efl.Text.Font]] //(interface)//
  * [[:develop:api:efl:text:format|Efl.Text.Format]] //(interface)//
  * [[:develop:api:efl:text:style|Efl.Text.Style]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:text:interactive:property:editable|editable]]** //**(get, set)**//\\
> %%Whether the entry is editable.%%
<code c>
Eina_Bool efl_ui_text_interactive_editable_get(const Eo *obj);
void efl_ui_text_interactive_editable_set(Eo *obj, Eina_Bool editable);
</code>
\\
**[[:develop:api:efl:ui:text:interactive:property:selection_allowed|selection_allowed]]** //**(get, set)**//\\
> %%Whether or not selection is allowed on this object%%
<code c>
Eina_Bool efl_ui_text_interactive_selection_allowed_get(const Eo *obj);
void efl_ui_text_interactive_selection_allowed_set(Eo *obj, Eina_Bool allowed);
</code>
\\
**[[:develop:api:efl:ui:text:interactive:property:selection_cursors|selection_cursors]]** //**(get)**//\\
> %%The cursors used for selection handling.%%
<code c>
void efl_ui_text_interactive_selection_cursors_get(const Eo *obj, Efl_Text_Cursor_Cursor **start, Efl_Text_Cursor_Cursor **end);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:text|Efl.Text]] ^^^
|  | **[[:develop:api:efl:text:property:text|text]]** //**(get, set)**// |  |
^ [[:develop:api:efl:text:font|Efl.Text.Font]] ^^^
|  | **[[:develop:api:efl:text:font:property:font|font]]** //**(get, set)**// | %%The font name and size that is used for the displayed text%% |
|  | **[[:develop:api:efl:text:font:property:font_bitmap_scalable|font_bitmap_scalable]]** //**(get, set)**// | %%The bitmap fonts have fixed size glyphs for several available sizes. Basically, it is not scalable. But, it needs to be scalable for some use cases. (ex. colorful emoji fonts)%% |
|  | **[[:develop:api:efl:text:font:property:font_fallbacks|font_fallbacks]]** //**(get, set)**// | %%Comma-separated list of font fallbacks%% |
|  | **[[:develop:api:efl:text:font:property:font_lang|font_lang]]** //**(get, set)**// | %%Specific language of the displayed font%% |
|  | **[[:develop:api:efl:text:font:property:font_slant|font_slant]]** //**(get, set)**// | %%Type of slant of the displayed font%% |
|  | **[[:develop:api:efl:text:font:property:font_source|font_source]]** //**(get, set)**// | %%The source that will be used to lookup the font of the text%% |
|  | **[[:develop:api:efl:text:font:property:font_weight|font_weight]]** //**(get, set)**// | %%Type of weight of the displayed font%% |
|  | **[[:develop:api:efl:text:font:property:font_width|font_width]]** //**(get, set)**// | %%Type of width of the displayed font%% |
^ [[:develop:api:efl:text:format|Efl.Text.Format]] ^^^
|  | **[[:develop:api:efl:text:format:property:ellipsis|ellipsis]]** //**(get, set)**// | %%Ellipsis value (number from -1.0 to 1.0)%% |
|  | **[[:develop:api:efl:text:format:property:halign|halign]]** //**(get, set)**// | %%Horizontal alignment of text%% |
|  | **[[:develop:api:efl:text:format:property:halign_auto_type|halign_auto_type]]** //**(get, set)**// | %%Horizontal alignment of text%% |
|  | **[[:develop:api:efl:text:format:property:linegap|linegap]]** //**(get, set)**// | %%Minimal line gap (top and bottom) for each line in the text%% |
|  | **[[:develop:api:efl:text:format:property:linerelgap|linerelgap]]** //**(get, set)**// | %%Relative line gap (top and bottom) for each line in the text%% |
|  | **[[:develop:api:efl:text:format:property:multiline|multiline]]** //**(get, set)**// | %%Multiline is enabled or not%% |
|  | **[[:develop:api:efl:text:format:property:password|password]]** //**(get, set)**// | %%Whether text is a password%% |
|  | **[[:develop:api:efl:text:format:property:replacement_char|replacement_char]]** //**(get, set)**// | %%The character used to replace characters that can't be displayed%% |
|  | **[[:develop:api:efl:text:format:property:tabstops|tabstops]]** //**(get, set)**// | %%Tabstops value%% |
|  | **[[:develop:api:efl:text:format:property:valign|valign]]** //**(get, set)**// | %%Vertical alignment of text%% |
|  | **[[:develop:api:efl:text:format:property:wrap|wrap]]** //**(get, set)**// | %%Wrap mode for use in the text%% |
^ [[:develop:api:efl:text:style|Efl.Text.Style]] ^^^
|  | **[[:develop:api:efl:text:style:property:backing_color|backing_color]]** //**(get, set)**// | %%Backing color%% |
|  | **[[:develop:api:efl:text:style:property:backing_type|backing_type]]** //**(get, set)**// | %%Enable or disable backing type%% |
|  | **[[:develop:api:efl:text:style:property:effect_type|effect_type]]** //**(get, set)**// | %%Type of effect used for the displayed text%% |
|  | **[[:develop:api:efl:text:style:property:gfx_filter|gfx_filter]]** //**(get, set)**// | %%Program that applies a special filter%% |
|  | **[[:develop:api:efl:text:style:property:glow2_color|glow2_color]]** //**(get, set)**// | %%Second color of the glow effect%% |
|  | **[[:develop:api:efl:text:style:property:glow_color|glow_color]]** //**(get, set)**// | %%Color of glow effect%% |
|  | **[[:develop:api:efl:text:style:property:normal_color|normal_color]]** //**(get, set)**// | %%Color of text, excluding style%% |
|  | **[[:develop:api:efl:text:style:property:outline_color|outline_color]]** //**(get, set)**// | %%Color of outline effect%% |
|  | **[[:develop:api:efl:text:style:property:shadow_color|shadow_color]]** //**(get, set)**// | %%Color of shadow effect%% |
|  | **[[:develop:api:efl:text:style:property:shadow_direction|shadow_direction]]** //**(get, set)**// | %%Direction of shadow effect%% |
|  | **[[:develop:api:efl:text:style:property:strikethrough_color|strikethrough_color]]** //**(get, set)**// | %%Color of strikethrough_style%% |
|  | **[[:develop:api:efl:text:style:property:strikethrough_type|strikethrough_type]]** //**(get, set)**// | %%Type of strikethrough style%% |
|  | **[[:develop:api:efl:text:style:property:underline2_color|underline2_color]]** //**(get, set)**// | %%Color of underline2 style%% |
|  | **[[:develop:api:efl:text:style:property:underline2_type|underline2_type]]** //**(get, set)**// | %%Type of underline2 style%% |
|  | **[[:develop:api:efl:text:style:property:underline_color|underline_color]]** //**(get, set)**// | %%Color of normal underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_dashed_color|underline_dashed_color]]** //**(get, set)**// | %%Color of dashed underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_dashed_gap|underline_dashed_gap]]** //**(get, set)**// | %%Gap of dashed underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_dashed_width|underline_dashed_width]]** //**(get, set)**// | %%Width of dashed underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_height|underline_height]]** //**(get, set)**// | %%Height of underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_type|underline_type]]** //**(get, set)**// | %%Sets an underline style on the text%% |

===== Events =====

**[[:develop:api:efl:ui:text:interactive:event:selection_changed|selection,changed]]**\\
> %%The selection on the object has changed. Query using %%[[:develop:api:efl:ui:text:interactive:property:selection_cursors|Efl.Ui.Text.Interactive.selection_cursors]]%%%%
<code c>
EFL_UI_TEXT_INTERACTIVE_EVENT_SELECTION_CHANGED(void)
</code>
\\ 