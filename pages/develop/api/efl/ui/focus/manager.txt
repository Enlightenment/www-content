~~Title: Efl.Ui.Focus.Manager~~
====== Efl.Ui.Focus.Manager (interface) ======

===== Description =====

%%Calculates the directions of Efl.Ui.Focus.Direction%%

%%Each registered item will get a other registered object into each direction, you can get those items for the currently focused item if you call request move.%%

//Since 1.20//

{{page>:develop:api-include:efl:ui:focus:manager:description&nouser&nolink&nodate}}

===== Inheritance =====


++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_ui_focus_manager [fillcolor = "dodgerblue4", label = "Efl.Ui.Focus.Manager", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

++++ Full hierarchy |



++++
===== Members =====

**[[:develop:api:efl:ui:focus:manager:method:fetch|fetch]]**\\
> %%This will fetch the data from a registered node.%%
<code c>
Efl_Ui_Focus_Relations *efl_ui_focus_manager_fetch(Eo *obj, Efl_Ui_Focus_Object *child);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:logical_end|logical_end]]**\\
> %%Return the last logical object.%%
<code c>
Efl_Ui_Focus_Manager_Logical_End_Detail efl_ui_focus_manager_logical_end(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:move|move]]**\\
> %%Move the focus into the given direction.%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:pop_history_stack|pop_history_stack]]**\\
> %%Removes the most upper history element, and gives the focus to the next one below%%
<code c>
void efl_ui_focus_manager_pop_history_stack(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:request_move|request_move]]**\\
> %%Returns the object which would be the next object to focus in the given direction.%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:request_subchild|request_subchild]]**\\
> %%Returns a widget that can receive focus%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_subchild(Eo *obj, Efl_Ui_Focus_Object *child);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:reset_history|reset_history]]**\\
> %%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%%
<code c>
void efl_ui_focus_manager_reset_history(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:method:setup_on_first_touch|setup_on_first_touch]]**\\
> %%Called when this manager is set as redirect%%
<code c>
void efl_ui_focus_manager_setup_on_first_touch(Eo *obj, Efl_Ui_Focus_Direction direction, Efl_Ui_Focus_Object *entry);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:property:border_elements|border_elements]]** //**(get)**//\\
> %%The list of elements which are at the border of the graph.%%
<code c>
Eina_Iterator *efl_ui_focus_manager_border_elements_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:property:manager_focus|manager_focus]]** //**(get, set)**//\\
> %%The element which is currently focused by this manager%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_focus_get(const Eo *obj);
void efl_ui_focus_manager_focus_set(Eo *obj, Efl_Ui_Focus_Object *focus);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**//\\
> %%Add a another manager to serve the move requests.%%
<code c>
Efl_Ui_Focus_Manager *efl_ui_focus_manager_redirect_get(const Eo *obj);
void efl_ui_focus_manager_redirect_set(Eo *obj, Efl_Ui_Focus_Manager *redirect);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:property:root|root]]** //**(get, set)**//\\
> %%Root node for all logical subtrees.%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_root_get(const Eo *obj);
Eina_Bool efl_ui_focus_manager_root_set(Eo *obj, Efl_Ui_Focus_Object *root);
</code>
\\

===== Events =====

**[[:develop:api:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]**\\
> %%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%%
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_COORDS_DIRTY(void)
</code>
\\ **[[:develop:api:efl:ui:focus:manager:event:flush_pre|flush,pre]]**\\
> %%Emitted once the graph calculationg will be performed%%
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FLUSH_PRE(void)
</code>
\\ **[[:develop:api:efl:ui:focus:manager:event:focused|focused]]**\\
> %%Emitted if the manager has focused an object, the passed focus object is the last focused object%%
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FOCUSED(Efl_Ui_Focus_Object *)
</code>
\\ **[[:develop:api:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]**\\
> %%Emitted when the redirect object has changed, the old manager is passed as event info%%
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_REDIRECT_CHANGED(Efl_Ui_Focus_Manager *)
</code>
\\ 