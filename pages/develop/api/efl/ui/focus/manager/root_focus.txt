~~Title: Efl.Ui.Focus.Manager.Root_Focus~~
====== Efl.Ui.Focus.Manager.Root_Focus (class) ======

===== Description =====

%%This class ensures that the root is at least focusable, if nothing else is focusable%%

{{page>:develop:api-include:efl:ui:focus:manager:root_focus:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:focus:manager:calc|Efl.Ui.Focus.Manager.Calc]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:focus:manager:calc|Efl.Ui.Focus.Manager.Calc]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:focus:manager:root_focus:property:border_elements|border_elements]]** //**(get)**//// [Overridden from [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]]]//\\
> %%The list of elements which are at the border of the graph.%%
<code c>
Eina_Iterator *efl_ui_focus_manager_border_elements_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:fetch|fetch]]**// [Overridden from [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]]]//\\
> %%This will fetch the data from a registered node.%%
<code c>
Efl_Ui_Focus_Relations *efl_ui_focus_manager_fetch(Eo *obj, Efl_Ui_Focus_Object *child);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:logical_end|logical_end]]**// [Overridden from [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]]]//\\
> %%Return the last logical object.%%
<code c>
Efl_Ui_Focus_Manager_Logical_End_Detail efl_ui_focus_manager_logical_end(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:property:manager_focus|manager_focus]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]]]//\\
> %%The element which is currently focused by this manager%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_focus_get(const Eo *obj);
void efl_ui_focus_manager_focus_set(Eo *obj, Efl_Ui_Focus_Object *focus);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:move|move]]**// [Overridden from [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]]]//\\
> %%Move the focus into the given direction.%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:register|register]]**// [Overridden from [[:develop:api:efl:ui:focus:manager:calc|Efl.Ui.Focus.Manager.Calc]]]//\\
> %%Register a new item in the graph.%%
<code c>
Eina_Bool efl_ui_focus_manager_calc_register(Eo *obj, Efl_Ui_Focus_Object *child, Efl_Ui_Focus_Object *parent, Efl_Ui_Focus_Manager *redirect);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:request_move|request_move]]**// [Overridden from [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]]]//\\
> %%Returns the object which would be the next object to focus in the given direction.%%
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>
\\
**[[:develop:api:efl:ui:focus:manager:root_focus:method:unregister|unregister]]**// [Overridden from [[:develop:api:efl:ui:focus:manager:calc|Efl.Ui.Focus.Manager.Calc]]]//\\
> %%Unregister the given item from the focus graph.%%
<code c>
void efl_ui_focus_manager_calc_unregister(Eo *obj, Efl_Ui_Focus_Object *child);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:ui:focus:manager:calc|Efl.Ui.Focus.Manager.Calc]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:pop_history_stack|pop_history_stack]]** | %%Removes the most upper history element, and gives the focus to the next one below%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:property:redirect|redirect]]** //**(get, set)**// | %%Add a another manager to serve the move requests.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:register_logical|register_logical]]** | %%Register a new item just for the logical parent.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:request_subchild|request_subchild]]** | %%Returns a widget that can receive focus%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:reset_history|reset_history]]** | %%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:property:root|root]]** //**(get, set)**// | %%Root node for all logical subtrees.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:setup_on_first_touch|setup_on_first_touch]]** | %%Called when this manager is set as redirect%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:update_children|update_children]]** | %%Give the list of children a different order.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:update_order|update_order]]** | %%Give the given order to the parent's child.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:update_parent|update_parent]]** | %%Set a new logical parent for the given child.%% |
|  | **[[:develop:api:efl:ui:focus:manager:calc:method:update_redirect|update_redirect]]** | %%Set a new redirect object for the given child.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]** | %%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:flush_pre|flush,pre]]** | %%Emitted once the graph calculationg will be performed%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:focused|focused]]** | %%Emitted if the manager has focused an object, the passed focus object is the last focused object%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]** | %%Emitted when the redirect object has changed, the old manager is passed as event info%% |
