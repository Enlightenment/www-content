~~Title: Efl.Ui.Box_Stack~~
====== Efl.Ui.Box_Stack (class) ======

===== Description =====

%%A custom layout engine for %%[[:develop:api:efl:ui:box|Efl.Ui.Box]]%% that stacks items.%%

%%Items will be stacked on top of each other (in the Z direction).%%

{{page>:develop:api-include:efl:ui:box_stack:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:box|Efl.Ui.Box]] //(class)// => [[:develop:api:elm:widget|Elm.Widget]] //(class)// => [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:box|Efl.Ui.Box]] //(class)//
    * [[:develop:api:elm:widget|Elm.Widget]] //(class)//
      * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
        * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
          * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
          * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
      * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
      * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
      * [[:develop:api:efl:part|Efl.Part]] //(interface)//
      * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
      * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
    * [[:develop:api:efl:pack:linear|Efl.Pack.Linear]] //(interface)//
      * [[:develop:api:efl:pack|Efl.Pack]] //(interface)//
        * [[:develop:api:efl:container|Efl.Container]] //(interface)//
    * [[:develop:api:efl:pack:layout|Efl.Pack.Layout]] //(interface)//
    * [[:develop:api:efl:ui:direction|Efl.Ui.Direction]] //(interface)//
  * [[:develop:api:efl:pack:layout|Efl.Pack.Layout]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:box_stack:method:layout_update|layout_update]]** ''protected''// [Overridden from [[:develop:api:efl:pack:layout|Efl.Pack.Layout]]]//\\
> %%Implementation of this container's layout algorithm.%%
<code c>
void efl_pack_layout_update(Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:method:attribute_append|attribute_append]]** | %%Add key-value pair identifying object extra attributes%% |
|  | **[[:develop:api:efl:access:method:attributes_clear|attributes_clear]]** | %%Removes all attributes in accessible object.%% |
|  | **[[:develop:api:efl:access:property:description|description]]** //**(get, set)**// | %%Contextual information about object.%% |
|  | **[[:develop:api:efl:access:method:relationship_append|relationship_append]]** | %%Defines the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationship_remove|relationship_remove]]** | %%Removes the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationships_clear|relationships_clear]]** | %%Removes all relationships in accessible object.%% |
|  | **[[:develop:api:efl:access:property:role|role]]** //**(get, set)**// | %%The role of the object in accessibility domain.%% |
|  ''class'' | **[[:develop:api:efl:access:property:root|root]]** //**(get)**// | %%Get root object of accessible object hierarchy%% |
|  | **[[:develop:api:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**// | %%The translation domain of "name" and "description" properties.%% |
|  | **[[:develop:api:efl:access:property:type|type]]** //**(get, set)**// | %%Type of accessibility object%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_emit|event_emit]]** | %%Emit event%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_add|event_handler_add]]** | %%Register accessibility event listener%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_del|event_handler_del]]** | %%Deregister accessibility event listener%% |
|  ''protected'' | **[[:develop:api:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// | %%Gets index of the child in parent's children list.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// | %%Gets an localized string describing accessible object role name.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:reading_info_type|reading_info_type]]** //**(get, set)**// |  |
|  ''protected'' | **[[:develop:api:efl:access:property:relation_set|relation_set]]** //**(get)**// | %%Gets an all relations between accessible object and other accessible objects.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:role_name|role_name]]** //**(get)**// | %%Gets human-readable string indentifying object accessibility role.%% |
^ [[:develop:api:efl:access:component|Efl.Access.Component]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** | %%Gets top component object occupying space at given coordinates.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:alpha|alpha]]** //**(get)**// | %%Gets alpha of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:method:contains|contains]]** | %%Contains accessible widget%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:extents|extents]]** //**(get, set)**// | %%Geometry of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:layer|layer]]** //**(get)**// | %%Evas layer of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:position|position]]** //**(get, set)**// | %%Position of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:size|size]]** //**(get, set)**// | %%Size of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:z_order|z_order]]** //**(get)**// | %%Gets the depth at which the component is shown in relation to other components in the same container.%% |
^ [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] ^^^
|  | **[[:develop:api:efl:canvas:group:method:group_change|group_change]]** | %%Marks the object as dirty.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_is|group_member_is]]** | %%Finds out if a given object is a member of this group.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_members_iterate|group_members_iterate]]** | %%Returns an iterator over the children of this object, that are canvas objects.%% |
|  | **[[:develop:api:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**// | %%Indicates that the group's layout need to be recalculated.%% |
|  | **[[:develop:api:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// | %%The internal clipper object used by this group.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:method:content_remove|content_remove]]** | %%Unswallow an object from this container.%% |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lightning effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lightning effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
^ [[:develop:api:efl:ui:box|Efl.Ui.Box]] ^^^
|  | **[[:develop:api:efl:ui:box:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:ui:box:method:content_count|content_count]]** | %%Returns the number of UI elements packed in this container.%% |
|  | **[[:develop:api:efl:ui:box:method:content_iterate|content_iterate]]** | %%Begin iterating over this object's contents.%% |
|  | **[[:develop:api:efl:ui:box:property:direction|direction]]** //**(get, set)**// | %%Control the direction of a given widget.%% |
|  | **[[:develop:api:efl:ui:box:method:group_calculate|group_calculate]]** | %%Triggers an immediate recalculation of this object's geometry.%% |
|  | **[[:develop:api:efl:ui:box:method:layout_request|layout_request]]** | %%Requests EFL to call the %%[[:develop:api:efl:pack:layout:method:layout_update|Efl.Pack.Layout.layout_update]]%% method on this object.%% |
|  | **[[:develop:api:efl:ui:box:method:pack|pack]]** | %%Adds an item to this container.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_after|pack_after]]** | %%Append item after other sub object.%% |
|  | **[[:develop:api:efl:ui:box:property:pack_align|pack_align]]** //**(get, set)**// | %%Alignment of the container within its bounds%% |
|  | **[[:develop:api:efl:ui:box:method:pack_at|pack_at]]** | %%Inserts %%''subobj''%% at the specified %%''index''%%.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_before|pack_before]]** | %%Prepend item before other sub object.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_begin|pack_begin]]** | %%Prepend an object at the beginning of this container.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_clear|pack_clear]]** | %%Removes all packed contents, and unreferences them.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_content_get|pack_content_get]]** | %%Content at a given index in this container.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_end|pack_end]]** | %%Append object at the end of this container.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_index_get|pack_index_get]]** | %%Get the index of a child in this container.%% |
|  | **[[:develop:api:efl:ui:box:property:pack_padding|pack_padding]]** //**(get, set)**// | %%Padding between items contained in this object.%% |
|  | **[[:develop:api:efl:ui:box:method:pack_unpack_at|pack_unpack_at]]** | %%Pop out item at specified %%''index''%%.%% |
|  | **[[:develop:api:efl:ui:box:method:unpack|unpack]]** | %%Removes an existing item from the container, without deleting it.%% |
|  | **[[:develop:api:efl:ui:box:method:unpack_all|unpack_all]]** | %%Removes all packed contents, without unreferencing them.%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:method:prepare_logical|prepare_logical]]** | %%Tells the object that the children of it will be queried soon by the given manager.%% |
^ [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] ^^^
|  | **[[:develop:api:efl:ui:translatable:property:translatable_text|translatable_text]]** //**(get, set)**// | %%A unique string to be translated.%% |
^ [[:develop:api:elm:widget|Elm.Widget]] ^^^
|  | **[[:develop:api:elm:widget:property:access_info|access_info]]** //**(get, set)**// | %%Accessibility information.%% |
|  | **[[:develop:api:elm:widget:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:cursor|cursor]]** //**(get, set)**// | %%The cursor to be shown when mouse is over the object%% |
|  | **[[:develop:api:elm:widget:property:cursor_style|cursor_style]]** //**(get, set)**// | %%A different style for the cursor.%% |
|  | **[[:develop:api:elm:widget:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// | %%Whether the cursor may be looked in the theme or not.%% |
|  | **[[:develop:api:elm:widget:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:elm:widget:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:elm:widget:property:disabled|disabled]]** //**(get, set)**// | %%Whether the widget is enabled (accepts and reacts to user inputs).%% |
|  | **[[:develop:api:elm:widget:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  ''protected set'' | **[[:develop:api:elm:widget:property:focus|focus]]** //**(get, set)**// | %%This gets called by the manager and should never be called by someone else.%% |
|  | **[[:develop:api:elm:widget:property:focus_allow|focus_allow]]** //**(get, set)**// | %%The ability for a widget to be focused.%% |
|  | **[[:develop:api:elm:widget:property:focus_geometry|focus_geometry]]** //**(get)**// | %%The geometry to use to calculate the relations to other objects.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_animate|focus_highlight_animate]]** //**(get, set)**// | %%Whether focus highlight should animate or not.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_enabled|focus_highlight_enabled]]** //**(get, set)**// | %%Whether focus highlight is enabled or not.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**// | %%Control the widget focus highlight style.%% |
|  | **[[:develop:api:elm:widget:property:focus_manager|focus_manager]]** //**(get)**// | %%Describes which manager is used to register.%% |
|  | **[[:develop:api:elm:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**// | %%The widget's focus move policy.%% |
|  | **[[:develop:api:elm:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**// | %%Control the widget's focus_move_policy mode setting.%% |
|  | **[[:develop:api:elm:widget:property:focus_parent|focus_parent]]** //**(get)**// | %%Describes which logical parent is used by this object.%% |
|  | **[[:develop:api:elm:widget:property:focused_item|focused_item]]** //**(get)**// | %%Get the focused widget item.%% |
|  | **[[:develop:api:elm:widget:method:group_member_add|group_member_add]]** | %%Set a canvas object as a member of a given group (or smart object).%% |
|  | **[[:develop:api:elm:widget:method:group_member_del|group_member_del]]** | %%Removes a member object from a given smart object.%% |
|  | **[[:develop:api:elm:widget:property:interest_region_mode|interest_region_mode]]** //**(get, set)**// | %%Defines how %%[[:develop:api:elm:widget:property:show_region|Elm.Widget.show_region]]%% should be calculated.%% |
|  | **[[:develop:api:elm:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:elm:widget:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:elm:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |
|  | **[[:develop:api:elm:widget:property:name|name]]** //**(get, set)**// | %%Accessible name of the object.%% |
|  | **[[:develop:api:elm:widget:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**// | %%Whether the widget's automatic orientation is disabled or not.%% |
|  | **[[:develop:api:elm:widget:property:parent|parent]]** //**(get, set)**// | %%Object's accessible parent.%% |
|  | **[[:develop:api:elm:widget:method:part|part]]** | %%Returns %%[[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]]%%.%% |
|  | **[[:develop:api:elm:widget:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:elm:widget:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:elm:widget:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:elm:widget:method:scroll_freeze_pop|scroll_freeze_pop]]** | %%Pop scroller freeze%% |
|  | **[[:develop:api:elm:widget:method:scroll_freeze_push|scroll_freeze_push]]** | %%Push scroller freeze%% |
|  | **[[:develop:api:elm:widget:method:scroll_hold_pop|scroll_hold_pop]]** | %%Pop scroller hold%% |
|  | **[[:develop:api:elm:widget:method:scroll_hold_push|scroll_hold_push]]** | %%Push scroll hold%% |
|  | **[[:develop:api:elm:widget:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  ''protected set'' | **[[:develop:api:elm:widget:property:style|style]]** //**(get, set)**// | %%The widget style to use.%% |
|  | **[[:develop:api:elm:widget:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  | **[[:develop:api:elm:widget:property:widget_top|widget_top]]** //**(get)**// | %%Root widget in the widget hierarchy.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:attributes|attributes]]** //**(get)**// | %%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:children|children]]** //**(get)**// | %%Gets object's accessible children.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_grab|focus_grab]]** | %%Focuses accessible widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:focus_highlight_geometry|focus_highlight_geometry]]** //**(get)**// | %%The rectangle region to be highlighted on focus.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_manager_create|focus_manager_create]]** | %%If the widget needs a focus manager, this function will be called.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_state_apply|focus_state_apply]]** | %%Register focus with the given configuration.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:interest_region|interest_region]]** //**(get)**// | %%Region of interest inside this widget, that should be given priority to be visible inside a scroller.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_access_activate|on_access_activate]]** | %%Hook function called when widget is activated through accessibility.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_access_update|on_access_update]]** | %%Hook function called when accessibility is changed on the widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_disabled_update|on_disabled_update]]** | %%Virtual function called when the widget becomes disabled.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_focus_update|on_focus_update]]** | %%Virtual function handling focus in/out events on the widget%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_orientation_update|on_orientation_update]]** | %%Virtual function handling canvas orientation changes.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**// | %%Hook function called when the %%[[:develop:api:elm:widget:property:show_region|Elm.Widget.show_region]]%% is changed.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:resize_object|resize_object]]** //**(set)**// | %%This is the internal canvas object managed by a widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:show_region|show_region]]** //**(get, set)**// | %%Region inside the widget to show.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:state_set|state_set]]** //**(get)**// | %%Gets set describing object accessible states.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:theme_apply|theme_apply]]** | %%Virtual function called when the widget needs to re-apply its theme.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:translation_update|translation_update]]** | %%This implements the calls to %%''gettext''%%() and %%''text_set''%%().%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:widget_event|widget_event]]** | %%Virtual function handling input events on the widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:widget_parent|widget_parent]]** //**(get, set)**// | %%The internal parent of this widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:widget_sub_object_add|widget_sub_object_add]]** | %%Virtual function handling sub objects being added.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:widget_sub_object_del|widget_sub_object_del]]** | %%Virtual function handling sub objects being removed.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:event:active_descendant_changed|active,descendant,changed]]** | %%Called when active state of descendant has changed%% |
|  | **[[:develop:api:efl:access:event:added|added]]** | %%Called when item was added%% |
|  | **[[:develop:api:efl:access:event:bounds_changed|bounds,changed]]** | %%Called when bounds have changed%% |
|  | **[[:develop:api:efl:access:event:children_changed|children,changed]]** | %%Called when children have changed%% |
|  | **[[:develop:api:efl:access:event:property_changed|property,changed]]** | %%Called when roperty has changed%% |
|  | **[[:develop:api:efl:access:event:removed|removed]]** | %%Called when item was removed%% |
|  | **[[:develop:api:efl:access:event:state_changed|state,changed]]** | %%Called when tate has changed%% |
|  | **[[:develop:api:efl:access:event:visible_data_changed|visible,data,changed]]** | %%Called when visibility has changed%% |
^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:event:content_added|content,added]]** | %%Sent after a new item was added.%% |
|  | **[[:develop:api:efl:container:event:content_removed|content,removed]]** | %%Sent after an item was removed, before unref.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
^ [[:develop:api:efl:pack|Efl.Pack]] ^^^
|  | **[[:develop:api:efl:pack:event:layout_updated|layout,updated]]** | %%Sent after the layout was updated.%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:event:focus_changed|focus,changed]]** | %%Emitted if the focus state has changed%% |
^ [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] ^^^
|  | **[[:develop:api:efl:ui:focus:user:event:logical_changed|logical,changed]]** | %%Emitted when a new logical parent should be used.%% |
|  | **[[:develop:api:efl:ui:focus:user:event:manager_changed|manager,changed]]** | %%Emitted when a new manager is the parent for this object.%% |
^ [[:develop:api:elm:widget|Elm.Widget]] ^^^
|  | **[[:develop:api:elm:widget:event:access_changed|access,changed]]** | %%Called when accessibility changed%% |
|  | **[[:develop:api:elm:widget:event:language_changed|language,changed]]** | %%Called when widget language changed%% |
|  | **[[:develop:api:elm:widget:event:moved|moved]]** | %%Called when widget moved%% |
