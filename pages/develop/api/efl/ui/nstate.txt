~~Title: Efl.Ui.Nstate~~
====== Efl.Ui.Nstate (class) ======

===== Description =====

%%Efl UI nstate class%%

{{page>:develop:api-include:efl:ui:nstate:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:button|Efl.Ui.Button]] //(class)// => [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] //(class)// => [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] //(class)// => [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:button|Efl.Ui.Button]] //(class)//
    * [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] //(class)//
      * [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] //(class)//
        * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
            * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
            * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
              * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
              * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
            * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
        * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
          * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
        * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
        * [[:develop:api:efl:part|Efl.Part]] //(interface)//
        * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
        * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
        * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
        * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
        * [[:develop:api:efl:selection|Efl.Selection]] //(mixin)//
        * [[:develop:api:efl:ui:dnd|Efl.Ui.Dnd]] //(mixin)//
      * [[:develop:api:efl:part|Efl.Part]] //(interface)//
      * [[:develop:api:efl:container|Efl.Container]] //(interface)//
      * [[:develop:api:efl:file|Efl.File]] //(mixin)//
      * [[:develop:api:efl:ui:view|Efl.Ui.View]] //(interface)//
      * [[:develop:api:efl:ui:model:connect|Efl.Ui.Model.Connect]] //(interface)//
      * [[:develop:api:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]] //(interface)//
      * [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] //(interface)//
      * [[:develop:api:efl:layout:signal|Efl.Layout.Signal]] //(interface)//
      * [[:develop:api:efl:layout:group|Efl.Layout.Group]] //(interface)//
    * [[:develop:api:efl:ui:clickable|Efl.Ui.Clickable]] //(interface)//
    * [[:develop:api:efl:ui:autorepeat|Efl.Ui.Autorepeat]] //(interface)//
    * [[:develop:api:efl:text|Efl.Text]] //(interface)//
    * [[:develop:api:efl:text:markup|Efl.Text.Markup]] //(interface)//
      * [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] //(interface)//
    * [[:develop:api:efl:content|Efl.Content]] //(interface)//
    * [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]] //(mixin)//
      * [[:develop:api:efl:access:action|Efl.Access.Action]] //(mixin)//
    * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:nstate:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:nstate:property:count|count]]** //**(get, set)**//\\
> %%Maximum number of states%%
<code c>
int efl_ui_nstate_count_get(const Eo *obj);
void efl_ui_nstate_count_set(Eo *obj, int nstate);
</code>
\\
**[[:develop:api:efl:ui:nstate:property:value|value]]** //**(get, set)**//\\
> 
<code c>
int efl_ui_nstate_value_get(const Eo *obj);
void efl_ui_nstate_value_set(Eo *obj, int state);
</code>
\\
**[[:develop:api:efl:ui:nstate:method:activate|activate]]** ''protected''\\
> %%Activate widget%%
<code c>
void efl_ui_nstate_activate(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:nstate:method:theme_apply|theme_apply]]** ''protected''// [Overridden from [[:develop:api:efl:ui:widget|Efl.Ui.Widget]]]//\\
> %%Virtual function called when the widget needs to re-apply its theme.%%
<code c>
Efl_Ui_Theme_Apply efl_ui_widget_theme_apply(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:nstate:method:widget_event|widget_event]]** ''protected''// [Overridden from [[:develop:api:efl:ui:widget|Efl.Ui.Widget]]]//\\
> %%Virtual function handling input events on the widget.%%
<code c>
Eina_Bool efl_ui_widget_event(Eo *obj, const Efl_Event *eo_event, Efl_Canvas_Object *source);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:method:attribute_append|attribute_append]]** | %%Add key-value pair identifying object extra attributes%% |
|  | **[[:develop:api:efl:access:method:attributes_clear|attributes_clear]]** | %%Removes all attributes in accessible object.%% |
|  | **[[:develop:api:efl:access:property:description|description]]** //**(get, set)**// | %%Contextual information about object.%% |
|  | **[[:develop:api:efl:access:method:relationship_append|relationship_append]]** | %%Defines the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationship_remove|relationship_remove]]** | %%Removes the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationships_clear|relationships_clear]]** | %%Removes all relationships in accessible object.%% |
|  | **[[:develop:api:efl:access:property:role|role]]** //**(get, set)**// | %%The role of the object in accessibility domain.%% |
|  ''class'' | **[[:develop:api:efl:access:property:root|root]]** //**(get)**// | %%Get root object of accessible object hierarchy%% |
|  | **[[:develop:api:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**// | %%The translation domain of "name" and "description" properties.%% |
|  | **[[:develop:api:efl:access:property:type|type]]** //**(get, set)**// | %%Type of accessibility object%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_emit|event_emit]]** | %%Emit event%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_add|event_handler_add]]** | %%Register accessibility event listener%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_del|event_handler_del]]** | %%Deregister accessibility event listener%% |
|  ''protected'' | **[[:develop:api:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// | %%Gets index of the child in parent's children list.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// | %%Gets an localized string describing accessible object role name.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:reading_info_type|reading_info_type]]** //**(get, set)**// |  |
|  ''protected'' | **[[:develop:api:efl:access:property:relation_set|relation_set]]** //**(get)**// | %%Gets an all relations between accessible object and other accessible objects.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:role_name|role_name]]** //**(get)**// | %%Gets human-readable string indentifying object accessibility role.%% |
^ [[:develop:api:efl:access:action|Efl.Access.Action]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:action:property:action_localized_name|action_localized_name]]** //**(get)**// | %%Gets localized action name for given id%% |
^ [[:develop:api:efl:access:component|Efl.Access.Component]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** | %%Gets top component object occupying space at given coordinates.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:alpha|alpha]]** //**(get)**// | %%Gets alpha of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:method:contains|contains]]** | %%Contains accessible widget%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:extents|extents]]** //**(get, set)**// | %%Geometry of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:layer|layer]]** //**(get)**// | %%Evas layer of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:position|position]]** //**(get, set)**// | %%Position of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:size|size]]** //**(get, set)**// | %%Size of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:z_order|z_order]]** //**(get)**// | %%Gets the depth at which the component is shown in relation to other components in the same container.%% |
^ [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:action_description|action_description]]** //**(get, set)**// | %%Action description for given id%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:method:action_do|action_do]]** | %%Performs action on given widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:method:action_keybinding_get|action_keybinding_get]]** | %%Gets configured keybinding for specific action and widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:action_name|action_name]]** //**(get)**// | %%Gets action name for given id%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:actions|actions]]** //**(get)**// | %%Get list of available widget actions%% |
^ [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] ^^^
|  | **[[:develop:api:efl:canvas:group:method:group_change|group_change]]** | %%Marks the object as dirty.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_is|group_member_is]]** | %%Finds out if a given object is a member of this group.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_members_iterate|group_members_iterate]]** | %%Returns an iterator over the children of this object, which are canvas objects.%% |
|  | **[[:develop:api:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**// | %%Indicates that the group's layout needs to be recalculated.%% |
|  | **[[:develop:api:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// | %%The internal clipper object used by this group.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:file|Efl.File]] ^^^
|  | **[[:develop:api:efl:file:property:load_error|load_error]]** //**(get)**// | %%Gets the (last) file loading error for a given object.%% |
|  | **[[:develop:api:efl:file:method:save|save]]** | %%Save the given image object's contents to an (image) file.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lighting effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lighting effect to the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] ^^^
|  | **[[:develop:api:efl:layout:calc:property:calc_auto_update_hints|calc_auto_update_hints]]** //**(get, set)**// | %%Whether this object updates its size hints automatically.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_parts_extends|calc_parts_extends]]** | %%Calculates the geometry of the region, relative to a given layout object's area, occupied by all parts in the object.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_size_min|calc_size_min]]** | %%Calculates the minimum required size for a given layout object.%% |
|  ''protected'' | **[[:develop:api:efl:layout:calc:method:calc_force|calc_force]]** | %%Forces a Size/Geometry calculation.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:selection|Efl.Selection]] ^^^
|  | **[[:develop:api:efl:selection:method:has_owner|has_owner]]** | %%Determine whether the selection data has owner%% |
|  | **[[:develop:api:efl:selection:method:selection_clear|selection_clear]]** | %%Clear the selection data from the object%% |
|  | **[[:develop:api:efl:selection:method:selection_get|selection_get]]** | %%Get the data from the object that has selection%% |
|  | **[[:develop:api:efl:selection:method:selection_set|selection_set]]** | %%Set the selection data to the object%% |
^ [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] ^^^
|  | **[[:develop:api:efl:text:cursor:property:cursor|cursor]]** //**(get)**// | %%The object's main cursor.%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_char_delete|cursor_char_delete]]** | %%Deletes a single character from position pointed by given cursor.%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_char_next|cursor_char_next]]** | %%Advances to the next character%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_char_prev|cursor_char_prev]]** | %%Advances to the previous character%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_compare|cursor_compare]]** | %%Compare two cursors%% |
|  | **[[:develop:api:efl:text:cursor:property:cursor_content|cursor_content]]** //**(get)**// | %%The content of the cursor (the character under the cursor)%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_coord_set|cursor_coord_set]]** | %%Set cursor coordinates%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_copy|cursor_copy]]** | %%Copy existing cursor%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_equal|cursor_equal]]** | %%Check if two cursors are equal%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_free|cursor_free]]** | %%Free existing cursor%% |
|  | **[[:develop:api:efl:text:cursor:property:cursor_geometry|cursor_geometry]]** //**(get)**// | %%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_line_char_first|cursor_line_char_first]]** | %%Advance to current line first character%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_line_char_last|cursor_line_char_last]]** | %%Advance to current line last character%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_line_jump_by|cursor_line_jump_by]]** | %%Jump the cursor by the given number of lines%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_new|cursor_new]]** | %%Create new cursor%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]** | %%Advances to the first character in this paragraph%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]** | %%Advances to the last character in this paragraph%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_first|cursor_paragraph_first]]** | %%Advance to current paragraph first character%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_last|cursor_paragraph_last]]** | %%Advance to current paragraph last character%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_next|cursor_paragraph_next]]** | %%Advances to the start of the next text node%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_prev|cursor_paragraph_prev]]** | %%Advances to the end of the previous text node%% |
|  | **[[:develop:api:efl:text:cursor:property:cursor_position|cursor_position]]** //**(get, set)**// | %%Cursor position%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_text_insert|cursor_text_insert]]** | %%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_word_end|cursor_word_end]]** | %%Advance to current word end%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_word_start|cursor_word_start]]** | %%Advance to current word start%% |
^ [[:develop:api:efl:text:markup|Efl.Text.Markup]] ^^^
|  | **[[:develop:api:efl:text:markup:method:cursor_markup_insert|cursor_markup_insert]]** | %%Inserts a markup text to the text object in a given cursor position%% |
|  | **[[:develop:api:efl:text:markup:property:markup|markup]]** //**(get, set)**// | %%Markup property%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
^ [[:develop:api:efl:ui:button|Efl.Ui.Button]] ^^^
|  | **[[:develop:api:efl:ui:button:property:autorepeat_enabled|autorepeat_enabled]]** //**(get, set)**// | %%Turn on/off the autorepeat event generated when the button is kept pressed%% |
|  | **[[:develop:api:efl:ui:button:property:autorepeat_gap_timeout|autorepeat_gap_timeout]]** //**(get, set)**// | %%The interval between each generated autorepeat event%% |
|  | **[[:develop:api:efl:ui:button:property:autorepeat_initial_timeout|autorepeat_initial_timeout]]** //**(get, set)**// | %%The initial timeout before the autorepeat event is generated%% |
|  | **[[:develop:api:efl:ui:button:property:autorepeat_supported|autorepeat_supported]]** //**(get)**// | %%Whether the button supports autorepeat.%% |
|  | **[[:develop:api:efl:ui:button:property:content|content]]** //**(get, set)**// | %%Swallowed sub-object contained in this object.%% |
|  | **[[:develop:api:efl:ui:button:method:content_unset|content_unset]]** | %%Unswallow the object in the current container and return it.%% |
|  | **[[:develop:api:efl:ui:button:method:part|part]]** | %%Returns %%[[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]]%%.%% |
|  | **[[:develop:api:efl:ui:button:property:text|text]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:button:property:translatable_text|translatable_text]]** //**(get, set)**// | %%A unique string to be translated.%% |
|  ''protected'' | **[[:develop:api:efl:ui:button:property:elm_actions|elm_actions]]** //**(get)**// | %%Elementary actions%% |
|  ''protected'' | **[[:develop:api:efl:ui:button:method:on_access_activate|on_access_activate]]** | %%Hook function called when widget is activated through accessibility.%% |
|  ''protected'' | **[[:develop:api:efl:ui:button:method:widget_sub_object_del|widget_sub_object_del]]** | %%Virtual function handling sub objects being removed.%% |
^ [[:develop:api:efl:ui:dnd|Efl.Ui.Dnd]] ^^^
|  | **[[:develop:api:efl:ui:dnd:method:drag_action_set|drag_action_set]]** | %%Set the action for the drag%% |
|  | **[[:develop:api:efl:ui:dnd:method:drag_cancel|drag_cancel]]** | %%Cancel the on-going drag%% |
|  | **[[:develop:api:efl:ui:dnd:method:drag_start|drag_start]]** | %%Start a drag and drop process at the drag side. During dragging, there are three events emitted as belows: - EFL_UI_DND_EVENT_DRAG_POS - EFL_UI_DND_EVENT_DRAG_ACCEPT - EFL_UI_DND_EVENT_DRAG_DONE%% |
|  | **[[:develop:api:efl:ui:dnd:method:drop_target_add|drop_target_add]]** | %%Make the current object as drop targert. There are four events emitted: - EFL_UI_DND_EVENT_DRAG_ENTER - EFL_UI_DND_EVENT_DRAG_LEAVE - EFL_UI_DND_EVENT_DRAG_POS - EFL_UI_DND_EVENT_DRAG_DROP.%% |
|  | **[[:develop:api:efl:ui:dnd:method:drop_target_del|drop_target_del]]** | %%Delete the dropable status from object%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:method:prepare_logical|prepare_logical]]** | %%Tells the object that its children will be queried soon by the given manager.%% |
^ [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] ^^^
|  | **[[:develop:api:efl:ui:layout:method:calc_freeze|calc_freeze]]** | %%Freezes the layout object.%% |
|  | **[[:develop:api:efl:ui:layout:method:calc_thaw|calc_thaw]]** | %%Thaws the layout object.%% |
|  | **[[:develop:api:efl:ui:layout:method:connect|connect]]** | %%Connect property%% |
|  | **[[:develop:api:efl:ui:layout:method:connect|connect]]** | %%Connect factory%% |
|  | **[[:develop:api:efl:ui:layout:method:content_count|content_count]]** | %%Returns the number of UI elements packed in this container.%% |
|  | **[[:develop:api:efl:ui:layout:method:content_iterate|content_iterate]]** | %%Begin iterating over this object's contents.%% |
|  | **[[:develop:api:efl:ui:layout:method:content_remove|content_remove]]** | %%Unswallow an object from this container.%% |
|  | **[[:develop:api:efl:ui:layout:property:file|file]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:layout:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:ui:layout:method:group_calculate|group_calculate]]** | %%Triggers an immediate recalculation of this object's geometry.%% |
|  | **[[:develop:api:efl:ui:layout:property:group_data|group_data]]** //**(get)**// | %%Retrives an EDC data field's value from a given Edje object's group.%% |
|  | **[[:develop:api:efl:ui:layout:property:group_size_max|group_size_max]]** //**(get)**// | %%Gets the maximum size specified -- as an EDC property -- for a given Edje object%% |
|  | **[[:develop:api:efl:ui:layout:property:group_size_min|group_size_min]]** //**(get)**// | %%Gets the minimum size specified -- as an EDC property -- for a given Edje object%% |
|  | **[[:develop:api:efl:ui:layout:method:message_send|message_send]]** | %%Sends an (Edje) message to a given Edje object%% |
|  | **[[:develop:api:efl:ui:layout:property:mmap|mmap]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:layout:property:model|model]]** //**(get, set)**// | %%Model that is/will be%% |
|  | **[[:develop:api:efl:ui:layout:method:signal_callback_add|signal_callback_add]]** | %%Adds a callback for an arriving Edje signal, emitted by a given Edje object.%% |
|  | **[[:develop:api:efl:ui:layout:method:signal_callback_del|signal_callback_del]]** | %%Removes a signal-triggered callback from an object.%% |
|  | **[[:develop:api:efl:ui:layout:method:signal_emit|signal_emit]]** | %%Sends/emits an Edje signal to this layout.%% |
|  | **[[:develop:api:efl:ui:layout:method:signal_process|signal_process]]** | %%Processes an object's messages and signals queue.%% |
|  | **[[:develop:api:efl:ui:layout:property:theme|theme]]** //**(set)**// | %%The theme of this widget, defines which edje group will be used.%% |
|  ''protected'' | **[[:develop:api:efl:ui:layout:method:on_disabled_update|on_disabled_update]]** | %%Virtual function called when the widget becomes disabled.%% |
|  ''protected'' | **[[:develop:api:efl:ui:layout:method:on_focus_update|on_focus_update]]** | %%Virtual function handling focus in/out events on the widget%% |
|  ''protected'' | **[[:develop:api:efl:ui:layout:method:widget_sub_object_add|widget_sub_object_add]]** | %%Virtual function handling sub objects being added.%% |
^ [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] ^^^
|  | **[[:develop:api:efl:ui:widget:property:access_info|access_info]]** //**(get, set)**// | %%Accessibility information.%% |
|  | **[[:develop:api:efl:ui:widget:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:widget:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:widget:property:cursor|cursor]]** //**(get, set)**// | %%The cursor to be shown when mouse is over the object%% |
|  | **[[:develop:api:efl:ui:widget:property:cursor_style|cursor_style]]** //**(get, set)**// | %%A different style for the cursor.%% |
|  | **[[:develop:api:efl:ui:widget:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// | %%Whether the cursor may be looked in the theme or not.%% |
|  | **[[:develop:api:efl:ui:widget:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:ui:widget:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:ui:widget:property:disabled|disabled]]** //**(get, set)**// | %%Whether the widget is enabled (accepts and reacts to user inputs).%% |
|  ''protected set'' | **[[:develop:api:efl:ui:widget:property:focus|focus]]** //**(get, set)**// | %%This is called by the manager and should never be called by anyone else.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_allow|focus_allow]]** //**(get, set)**// | %%The ability for a widget to be focused.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_geometry|focus_geometry]]** //**(get)**// | %%The geometry used to calculate relationships between other objects.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_highlight_animate|focus_highlight_animate]]** //**(get, set)**// | %%Whether focus highlight should animate or not.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_highlight_enabled|focus_highlight_enabled]]** //**(get, set)**// | %%Whether focus highlight is enabled or not.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**// | %%Control the widget focus highlight style.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_manager|focus_manager]]** //**(get)**// | %%Describes which manager is used to register.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**// | %%The widget's focus move policy.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**// | %%Control the widget's focus_move_policy mode setting.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_parent|focus_parent]]** //**(get)**// | %%Describes which logical parent is used by this object.%% |
|  | **[[:develop:api:efl:ui:widget:property:focused_item|focused_item]]** //**(get)**// | %%Get the focused widget item.%% |
|  | **[[:develop:api:efl:ui:widget:method:group_member_add|group_member_add]]** | %%Set a canvas object as a member of a given group (or smart object).%% |
|  | **[[:develop:api:efl:ui:widget:method:group_member_del|group_member_del]]** | %%Removes a member object from a given smart object.%% |
|  | **[[:develop:api:efl:ui:widget:property:interest_region_mode|interest_region_mode]]** //**(get, set)**// | %%Defines how %%[[:develop:api:efl:ui:widget:property:show_region|Efl.Ui.Widget.show_region]]%% should be calculated.%% |
|  | **[[:develop:api:efl:ui:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:efl:ui:widget:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:efl:ui:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |
|  | **[[:develop:api:efl:ui:widget:property:name|name]]** //**(get, set)**// | %%Accessible name of the object.%% |
|  | **[[:develop:api:efl:ui:widget:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**// | %%Whether the widget's automatic orientation is disabled or not.%% |
|  | **[[:develop:api:efl:ui:widget:property:parent|parent]]** //**(get, set)**// | %%Object's accessible parent.%% |
|  | **[[:develop:api:efl:ui:widget:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:ui:widget:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:efl:ui:widget:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_freeze_pop|scroll_freeze_pop]]** | %%Pop scroller freeze%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_freeze_push|scroll_freeze_push]]** | %%Push scroller freeze%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_hold_pop|scroll_hold_pop]]** | %%Pop scroller hold%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_hold_push|scroll_hold_push]]** | %%Push scroll hold%% |
|  | **[[:develop:api:efl:ui:widget:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  ''protected set'' | **[[:develop:api:efl:ui:widget:property:style|style]]** //**(get, set)**// | %%The widget style to use.%% |
|  | **[[:develop:api:efl:ui:widget:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  | **[[:develop:api:efl:ui:widget:property:widget_top|widget_top]]** //**(get)**// | %%Root widget in the widget hierarchy.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:attributes|attributes]]** //**(get)**// | %%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:children|children]]** //**(get)**// | %%Gets object's accessible children.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:focus_grab|focus_grab]]** | %%Focuses accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:focus_highlight_geometry|focus_highlight_geometry]]** //**(get)**// | %%The rectangle region to be highlighted on focus.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:focus_manager_create|focus_manager_create]]** | %%If the widget needs a focus manager, this function will be called.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:focus_state_apply|focus_state_apply]]** | %%Register focus with the given configuration.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:interest_region|interest_region]]** //**(get)**// | %%Region of interest inside this widget, that should be given priority to be visible inside a scroller.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:on_access_update|on_access_update]]** | %%Hook function called when accessibility is changed on the widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:on_orientation_update|on_orientation_update]]** | %%Virtual function handling canvas orientation changes.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**// | %%Hook function called when the %%[[:develop:api:efl:ui:widget:property:show_region|Efl.Ui.Widget.show_region]]%% is changed.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:resize_object|resize_object]]** //**(set)**// | %%This is the internal canvas object managed by a widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:show_region|show_region]]** //**(get, set)**// | %%Region inside the widget to show.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:state_set|state_set]]** //**(get)**// | %%Gets set describing object accessible states.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:translation_update|translation_update]]** | %%This implements the calls to %%''gettext''%%() and %%''text_set''%%().%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:widget_parent|widget_parent]]** //**(get, set)**// | %%The internal parent of this widget.%% |

===== Events =====

**[[:develop:api:efl:ui:nstate:event:changed|changed]]**\\
> %%Called when the value changed.%%
<code c>
EFL_UI_NSTATE_EVENT_CHANGED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:event:active_descendant_changed|active,descendant,changed]]** | %%Called when active state of descendant has changed%% |
|  | **[[:develop:api:efl:access:event:added|added]]** | %%Called when item is added%% |
|  | **[[:develop:api:efl:access:event:bounds_changed|bounds,changed]]** | %%Called when boundaries have changed%% |
|  | **[[:develop:api:efl:access:event:children_changed|children,changed]]** | %%Called when children have changed%% |
|  | **[[:develop:api:efl:access:event:property_changed|property,changed]]** | %%Called when property has changed%% |
|  | **[[:develop:api:efl:access:event:removed|removed]]** | %%Called when item is removed%% |
|  | **[[:develop:api:efl:access:event:state_changed|state,changed]]** | %%Called when state has changed%% |
|  | **[[:develop:api:efl:access:event:visible_data_changed|visible,data,changed]]** | %%Called when visibility has changed%% |
^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:event:content_added|content,added]]** | %%Sent after a new item was added.%% |
|  | **[[:develop:api:efl:container:event:content_removed|content,removed]]** | %%Sent after an item was removed, before unref.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] ^^^
|  | **[[:develop:api:efl:layout:calc:event:circular_dependency|circular,dependency]]** | %%A circular dependency between parts of the object was found.%% |
|  | **[[:develop:api:efl:layout:calc:event:recalc|recalc]]** | %%The layout was recalculated.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
^ [[:develop:api:efl:selection|Efl.Selection]] ^^^
|  | **[[:develop:api:efl:selection:event:selection_changed|selection,changed]]** | %%Called when display server's selection has changed%% |
^ [[:develop:api:efl:ui:clickable|Efl.Ui.Clickable]] ^^^
|  | **[[:develop:api:efl:ui:clickable:event:clicked|clicked]]** | %%Called when object iss clicked%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_double|clicked,double]]** | %%Called when object receives a double click%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_right|clicked,right]]** | %%Called when object receives a right click%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_triple|clicked,triple]]** | %%Called when object receives a triple click%% |
|  | **[[:develop:api:efl:ui:clickable:event:longpressed|longpressed]]** | %%Called when the object receives a long press%% |
|  | **[[:develop:api:efl:ui:clickable:event:pressed|pressed]]** | %%Called when the object is pressed%% |
|  | **[[:develop:api:efl:ui:clickable:event:repeated|repeated]]** | %%Called when the object receives repeated presses/clicks%% |
|  | **[[:develop:api:efl:ui:clickable:event:unpressed|unpressed]]** | %%Called when the object is no longer pressed%% |
^ [[:develop:api:efl:ui:dnd|Efl.Ui.Dnd]] ^^^
|  | **[[:develop:api:efl:ui:dnd:event:drag_accept|drag,accept]]** | %%accept drag data%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_done|drag,done]]** | %%drag is done (mouse up)%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_drop|drag,drop]]** | %%called when the drag object dropped on this object%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_enter|drag,enter]]** | %%called when the drag object enters this object%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_leave|drag,leave]]** | %%called when the drag object leaves this object%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_pos|drag,pos]]** | %%called when the drag object changes drag position%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:event:focus_changed|focus,changed]]** | %%Emitted if the focus state has changed%% |
^ [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] ^^^
|  | **[[:develop:api:efl:ui:focus:user:event:logical_changed|logical,changed]]** | %%Emitted when a new logical parent should be used.%% |
|  | **[[:develop:api:efl:ui:focus:user:event:manager_changed|manager,changed]]** | %%Emitted when a new manager is the parent for this object.%% |
^ [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] ^^^
|  | **[[:develop:api:efl:ui:layout:event:theme_changed|theme,changed]]** | %%Called when theme changed%% |
^ [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] ^^^
|  | **[[:develop:api:efl:ui:widget:event:access_changed|access,changed]]** | %%Called when accessibility changed%% |
|  | **[[:develop:api:efl:ui:widget:event:language_changed|language,changed]]** | %%Called when widget language changed%% |
|  | **[[:develop:api:efl:ui:widget:event:moved|moved]]** | %%Called when widget moved%% |
