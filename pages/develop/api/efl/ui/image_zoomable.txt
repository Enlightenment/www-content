~~Title: Efl.Ui.Image_Zoomable~~
====== Efl.Ui.Image_Zoomable (class) ======

===== Description =====

%%Elementary Image Zoomable class%%

{{page>:develop:api-include:efl:ui:image_zoomable:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:elm:widget|Elm.Widget]] //(class)// => [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:elm:widget|Elm.Widget]] //(class)//
    * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
      * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
        * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
        * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
        * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
        * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
        * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
          * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
        * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
    * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
      * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
    * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
    * [[:develop:api:efl:part|Efl.Part]] //(interface)//
    * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
    * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
    * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
    * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
  * [[:develop:api:efl:ui:image|Efl.Ui.Image]] //(class)//
    * [[:develop:api:elm:widget|Elm.Widget]] //(class)//
      * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
        * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
          * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
          * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
      * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
      * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
      * [[:develop:api:efl:part|Efl.Part]] //(interface)//
      * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
      * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
    * [[:develop:api:efl:ui:clickable|Efl.Ui.Clickable]] //(interface)//
    * [[:develop:api:efl:ui:draggable|Efl.Ui.Draggable]] //(interface)//
    * [[:develop:api:efl:file|Efl.File]] //(mixin)//
    * [[:develop:api:efl:image|Efl.Image]] //(interface)//
    * [[:develop:api:efl:image:load|Efl.Image.Load]] //(interface)//
    * [[:develop:api:efl:player|Efl.Player]] //(interface)//
    * [[:develop:api:efl:gfx:view|Efl.Gfx.View]] //(interface)//
    * [[:develop:api:efl:access:image|Efl.Access.Image]] //(mixin)//
    * [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]] //(mixin)//
      * [[:develop:api:efl:access:action|Efl.Access.Action]] //(mixin)//
    * [[:develop:api:efl:orientation|Efl.Orientation]] //(interface)//
    * [[:develop:api:efl:flipable|Efl.Flipable]] //(interface)//
    * [[:develop:api:efl:ui:view|Efl.Ui.View]] //(interface)//
    * [[:develop:api:efl:ui:model:connect|Efl.Ui.Model.Connect]] //(interface)//
    * [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] //(interface)//
    * [[:develop:api:efl:layout:group|Efl.Layout.Group]] //(interface)//
    * [[:develop:api:efl:layout:signal|Efl.Layout.Signal]] //(interface)//
  * [[:develop:api:efl:ui:zoom|Efl.Ui.Zoom]] //(interface)//
  * [[:develop:api:elm:interface_scrollable|Elm.Interface_Scrollable]] //(mixin)//
    * [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
    * [[:develop:api:efl:ui:focus:manager:sub|Efl.Ui.Focus.Manager.Sub]] //(mixin)//
      * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
      * [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(interface)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:elm:widget|Elm.Widget]] //(class)//
      * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
        * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
          * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
          * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
      * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
      * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
      * [[:develop:api:efl:part|Efl.Part]] //(interface)//
      * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
      * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
  * [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:image_zoomable:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:file|file]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:file|Efl.File]]]//\\
> 
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:flip|flip]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:flipable|Efl.Flipable]]]//\\
> %%Control the flip of the given image%%
<code c>
Efl_Flip efl_flip_get(const Eo *obj);
void efl_flip_set(Eo *obj, Efl_Flip flip);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:gesture_enabled|gesture_enabled]]** //**(get, set)**//\\
> 
<code c>
Eina_Bool efl_ui_image_zoomable_gesture_enabled_get(const Eo *obj);
void efl_ui_image_zoomable_gesture_enabled_set(Eo *obj, Eina_Bool gesture);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:method:group_member_add|group_member_add]]**// [Overridden from [[:develop:api:efl:canvas:group|Efl.Canvas.Group]]]//\\
> %%Set a canvas object as a member of a given group (or smart object).%%
<code c>
void efl_canvas_group_member_add(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:group_size_max|group_size_max]]** //**(get)**//// [Overridden from [[:develop:api:efl:layout:group|Efl.Layout.Group]]]//\\
> %%Gets the maximum size specified -- as an EDC property -- for a given Edje object%%
<code c>
Eina_Size2D efl_layout_group_size_max_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:group_size_min|group_size_min]]** //**(get)**//// [Overridden from [[:develop:api:efl:layout:group|Efl.Layout.Group]]]//\\
> %%Gets the minimum size specified -- as an EDC property -- for a given Edje object%%
<code c>
Eina_Size2D efl_layout_group_size_min_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:icon|icon]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:image|Efl.Ui.Image]]]//\\
> 
<code c>
const char *efl_ui_image_icon_get(const Eo *obj);
Eina_Bool efl_ui_image_icon_set(Eo *obj, const char *name);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:image_region|image_region]]** //**(get, set)**//\\
> 
<code c>
Eina_Rect efl_ui_image_zoomable_image_region_get(const Eo *obj);
void efl_ui_image_zoomable_image_region_set(Eo *obj, Eina_Rect region);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:image_size|image_size]]** //**(get)**//// [Overridden from [[:develop:api:efl:image|Efl.Image]]]//\\
> %%This represents the size of the original image in pixels.%%
<code c>
Eina_Size2D efl_image_size_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:orientation|orientation]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:orientation|Efl.Orientation]]]//\\
> %%Control the orientation of a given object.%%
<code c>
Efl_Orient efl_orientation_get(const Eo *obj);
void efl_orientation_set(Eo *obj, Efl_Orient dir);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:play|play]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> 
<code c>
Eina_Bool efl_player_play_get(const Eo *obj);
void efl_player_play_set(Eo *obj, Eina_Bool play);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:playable|playable]]** //**(get)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> %%Whether or not the object data can be played.%%
<code c>
Eina_Bool efl_player_playable_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:position|position]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx|Efl.Gfx]]]//\\
> %%The 2D position of a canvas object.%%
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:method:region_bring_in|region_bring_in]]**// [Overridden from [[:develop:api:elm:interface_scrollable|Elm.Interface_Scrollable]]]//\\
> %%Show a specific virtual region within the scroller content object.%%
<code c>
void elm_interface_scrollable_region_bring_in(Eo *obj, int x, int y, int w, int h);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:size|size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx|Efl.Gfx]]]//\\
> %%The 2D size of a canvas object.%%
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:view_size|view_size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:view|Efl.Gfx.View]]]//\\
> %%The dimensions of this object's viewport.%%
<code c>
Eina_Size2D efl_gfx_view_size_get(const Eo *obj);
void efl_gfx_view_size_set(Eo *obj, Eina_Size2D size);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:zoom|zoom]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:zoom|Efl.Ui.Zoom]]]//\\
> 
<code c>
double efl_ui_zoom_get(const Eo *obj);
void efl_ui_zoom_set(Eo *obj, double zoom);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:zoom_animation|zoom_animation]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:zoom|Efl.Ui.Zoom]]]//\\
> 
<code c>
Eina_Bool efl_ui_zoom_animation_get(const Eo *obj);
void efl_ui_zoom_animation_set(Eo *obj, Eina_Bool paused);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:zoom_mode|zoom_mode]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:zoom|Efl.Ui.Zoom]]]//\\
> 
<code c>
Efl_Ui_Zoom_Mode efl_ui_zoom_mode_get(const Eo *obj);
void efl_ui_zoom_mode_set(Eo *obj, Efl_Ui_Zoom_Mode mode);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:property:elm_actions|elm_actions]]** //**(get)**// ''protected''// [Overridden from [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]]]//\\
> %%Elementary actions%%
<code c>
const Efl_Access_Action_Data *efl_access_widget_action_elm_actions_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:method:on_focus_update|on_focus_update]]** ''protected''// [Overridden from [[:develop:api:elm:widget|Elm.Widget]]]//\\
> %%Virtual function handling focus in/out events on the widget%%
<code c>
Eina_Bool efl_ui_widget_on_focus_update(Eo *obj, Elm_Widget_Item *item);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:method:theme_apply|theme_apply]]** ''protected''// [Overridden from [[:develop:api:elm:widget|Elm.Widget]]]//\\
> %%Virtual function called when the widget needs to re-apply its theme.%%
<code c>
Efl_Ui_Theme_Apply efl_ui_widget_theme_apply(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:image_zoomable:method:widget_event|widget_event]]** ''protected''// [Overridden from [[:develop:api:elm:widget|Elm.Widget]]]//\\
> %%Virtual function handling input events on the widget.%%
<code c>
Eina_Bool efl_ui_widget_event(Eo *obj, const Efl_Event *eo_event, Efl_Canvas_Object *source);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:method:attribute_append|attribute_append]]** | %%Add key-value pair identifying object extra attributes%% |
|  | **[[:develop:api:efl:access:method:attributes_clear|attributes_clear]]** | %%Removes all attributes in accessible object.%% |
|  | **[[:develop:api:efl:access:property:description|description]]** //**(get, set)**// | %%Contextual information about object.%% |
|  | **[[:develop:api:efl:access:method:relationship_append|relationship_append]]** | %%Defines the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationship_remove|relationship_remove]]** | %%Removes the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationships_clear|relationships_clear]]** | %%Removes all relationships in accessible object.%% |
|  | **[[:develop:api:efl:access:property:role|role]]** //**(get, set)**// | %%The role of the object in accessibility domain.%% |
|  | **[[:develop:api:efl:access:property:root|root]]** //**(get)**// | %%Get root object of accessible object hierarchy%% |
|  | **[[:develop:api:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**// | %%The translation domain of "name" and "description" properties.%% |
|  | **[[:develop:api:efl:access:property:type|type]]** //**(get, set)**// | %%Type of accessibility object%% |
|  ''protected'' | **[[:develop:api:efl:access:method:event_emit|event_emit]]** | %%Emit event%% |
|  ''protected'' | **[[:develop:api:efl:access:method:event_handler_add|event_handler_add]]** | %%Register accessibility event listener%% |
|  ''protected'' | **[[:develop:api:efl:access:method:event_handler_del|event_handler_del]]** | %%Deregister accessibility event listener%% |
|  ''protected'' | **[[:develop:api:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// | %%Gets index of the child in parent's children list.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// | %%Gets an localized string describing accessible object role name.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:reading_info_type|reading_info_type]]** //**(get, set)**// |  |
|  ''protected'' | **[[:develop:api:efl:access:property:relation_set|relation_set]]** //**(get)**// | %%Gets an all relations between accessible object and other accessible objects.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:role_name|role_name]]** //**(get)**// | %%Gets human-readable string indentifying object accessibility role.%% |
^ [[:develop:api:efl:access:action|Efl.Access.Action]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:action:property:action_localized_name|action_localized_name]]** //**(get)**// | %%Gets localized action name for given id%% |
^ [[:develop:api:efl:access:component|Efl.Access.Component]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** | %%Gets top component object occupying space at given coordinates.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:alpha|alpha]]** //**(get)**// | %%Gets alpha of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:method:contains|contains]]** | %%Contains accessible widget%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:extents|extents]]** //**(get, set)**// | %%Geometry of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:layer|layer]]** //**(get)**// | %%Evas layer of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:position|position]]** //**(get, set)**// | %%Position of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:size|size]]** //**(get, set)**// | %%Size of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:z_order|z_order]]** //**(get)**// | %%Gets the depth at which the component is shown in relation to other components in the same container.%% |
^ [[:develop:api:efl:access:image|Efl.Access.Image]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:image:property:description|description]]** //**(get, set)**// | %%Textual description of image%% |
|  ''protected'' | **[[:develop:api:efl:access:image:property:locale|locale]]** //**(get)**// | %%Gets locale of the image description.%% |
^ [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:action_description|action_description]]** //**(get, set)**// | %%Action description for given id%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:method:action_do|action_do]]** | %%Performs action on given widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:method:action_keybinding_get|action_keybinding_get]]** | %%Gets configured keybinding for specific action and widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:action_name|action_name]]** //**(get)**// | %%Gets action name for given id%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:actions|actions]]** //**(get)**// | %%Get list of available widget actions%% |
^ [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] ^^^
|  | **[[:develop:api:efl:canvas:group:method:group_change|group_change]]** | %%Marks the object as dirty.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_is|group_member_is]]** | %%Finds out if a given object is a member of this group.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_members_iterate|group_members_iterate]]** | %%Returns an iterator over the children of this object, that are canvas objects.%% |
|  | **[[:develop:api:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**// | %%Indicates that the group's layout need to be recalculated.%% |
|  | **[[:develop:api:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// | %%The internal clipper object used by this group.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:file|Efl.File]] ^^^
|  | **[[:develop:api:efl:file:property:load_error|load_error]]** //**(get)**// | %%Gets the (last) file loading error for a given object.%% |
|  | **[[:develop:api:efl:file:method:save|save]]** | %%Save the given image object's contents to an (image) file.%% |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lightning effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lightning effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:property:border|border]]** //**(get, set)**// | %%Dimensions of this image's border, a region that does not scale with the center area.%% |
|  | **[[:develop:api:efl:image:property:border_center_fill|border_center_fill]]** //**(get, set)**// | %%Specifies how the center part of the object (not the borders) should be drawn when EFL is rendering it.%% |
|  | **[[:develop:api:efl:image:property:border_scale|border_scale]]** //**(get, set)**// | %%Scaling factor applied to the image borders.%% |
|  | **[[:develop:api:efl:image:property:content_hint|content_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:property:ratio|ratio]]** //**(get)**// | %%The native width/height ratio of the image.%% |
|  | **[[:develop:api:efl:image:property:scale_hint|scale_hint]]** //**(get, set)**// |  |
^ [[:develop:api:efl:image:load|Efl.Image.Load]] ^^^
|  | **[[:develop:api:efl:image:load:method:load_async_cancel|load_async_cancel]]** | %%Cancel preloading an image object's image data in the background.%% |
|  | **[[:develop:api:efl:image:load:method:load_async_start|load_async_start]]** | %%Begin preloading an image object's image data in the background.%% |
|  | **[[:develop:api:efl:image:load:property:load_dpi|load_dpi]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:load:property:load_error|load_error]]** //**(get)**// | %%Retrieves a number representing any error that occurred during the last loading of the given image object's source image.%% |
|  | **[[:develop:api:efl:image:load:property:load_orientation|load_orientation]]** //**(get, set)**// | %%Defines whether the orientation information in the image file should be honored.%% |
|  | **[[:develop:api:efl:image:load:property:load_region|load_region]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:load:property:load_region_support|load_region_support]]** //**(get)**// | %%Indicates whether the %%[[:develop:api:efl:image:load:property:load_region|Efl.Image.Load.load_region]]%% property is supported for the current file.%% |
|  | **[[:develop:api:efl:image:load:property:load_scale_down|load_scale_down]]** //**(get, set)**// | %%The scale down factor is a divider on the original image size.%% |
|  | **[[:develop:api:efl:image:load:property:load_skip_header|load_skip_header]]** //**(get, set)**// | %%Initial load should skip header check and leave it all to data load%% |
^ [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] ^^^
|  | **[[:develop:api:efl:layout:calc:property:calc_auto_update_hints|calc_auto_update_hints]]** //**(get, set)**// | %%Whether this object updates its size hints automatically.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_freeze|calc_freeze]]** | %%Freezes the layout object.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_parts_extends|calc_parts_extends]]** | %%Calculates the geometry of the region, relative to a given layout object's area, occupied by all parts in the object.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_thaw|calc_thaw]]** | %%Thaws the layout object.%% |
^ [[:develop:api:efl:layout:group|Efl.Layout.Group]] ^^^
|  | **[[:develop:api:efl:layout:group:property:group_data|group_data]]** //**(get)**// | %%Retrives an EDC data field's value from a given Edje object's group.%% |
^ [[:develop:api:efl:layout:signal|Efl.Layout.Signal]] ^^^
|  | **[[:develop:api:efl:layout:signal:method:message_send|message_send]]** | %%Sends an (Edje) message to a given Edje object%% |
|  | **[[:develop:api:efl:layout:signal:method:signal_callback_add|signal_callback_add]]** | %%Adds a callback for an arriving Edje signal, emitted by a given Edje object.%% |
|  | **[[:develop:api:efl:layout:signal:method:signal_callback_del|signal_callback_del]]** | %%Removes a signal-triggered callback from an object.%% |
|  | **[[:develop:api:efl:layout:signal:method:signal_process|signal_process]]** | %%Processes an object's messages and signals queue.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:player|Efl.Player]] ^^^
|  | **[[:develop:api:efl:player:property:length|length]]** //**(get)**// | %%Get the length of play for the media file.%% |
|  | **[[:develop:api:efl:player:property:mute|mute]]** //**(get, set)**// | %%This property controls the audio mute state.%% |
|  | **[[:develop:api:efl:player:property:play_speed|play_speed]]** //**(get, set)**// | %%Control the play speed of the media file.%% |
|  | **[[:develop:api:efl:player:property:position|position]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:player:property:progress|progress]]** //**(get)**// | %%Get how much of the file has been played.%% |
|  | **[[:develop:api:efl:player:property:seekable|seekable]]** //**(get)**// | %%Get whether the media file is seekable.%% |
|  | **[[:develop:api:efl:player:property:volume|volume]]** //**(get, set)**// | %%Control the audio volume.%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:method:fetch|fetch]]** | %%This will fetch the data from a registered node.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:logical_end|logical_end]]** | %%Return the last logical object.%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:manager_focus|manager_focus]]** //**(get, set)**// | %%The element which is currently focused by this manager%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:move|move]]** | %%Move the focus into the given direction.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:pop_history_stack|pop_history_stack]]** | %%Removes the most upper history element, and gives the focus to the next one below%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**// | %%Add a another manager to serve the move requests.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:request_move|request_move]]** | %%Returns the object which would be the next object to focus in the given direction.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:request_subchild|request_subchild]]** | %%Returns a widget that can receive focus%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:reset_history|reset_history]]** | %%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:root|root]]** //**(get, set)**// | %%Root node for all logical subtrees.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:setup_on_first_touch|setup_on_first_touch]]** | %%Called when this manager is set as redirect%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:method:prepare_logical|prepare_logical]]** | %%Tells the object that the children of it will be queried soon by the given manager.%% |
^ [[:develop:api:efl:ui:image|Efl.Ui.Image]] ^^^
|  | **[[:develop:api:efl:ui:image:property:align|align]]** //**(get, set)**// | %%Control how the internal image is positioned inside an image object.%% |
|  | **[[:develop:api:efl:ui:image:method:calc_size_min|calc_size_min]]** | %%Calculates the minimum required size for a given layout object.%% |
|  | **[[:develop:api:efl:ui:image:method:connect|connect]]** | %%Connect property%% |
|  | **[[:develop:api:efl:ui:image:property:drag_target|drag_target]]** //**(get, set)**// | %%Control whether the object's content is changed by drag and drop.%% |
|  | **[[:develop:api:efl:ui:image:property:load_size|load_size]]** //**(get, set)**// | %%The load size of an image.%% |
|  | **[[:develop:api:efl:ui:image:property:mmap|mmap]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:image:property:model|model]]** //**(get, set)**// | %%Model that is/will be%% |
|  | **[[:develop:api:efl:ui:image:property:scalable|scalable]]** //**(get, set)**// | %%Enable or disable scaling up or down the internal image.%% |
|  | **[[:develop:api:efl:ui:image:property:scale_type|scale_type]]** //**(get, set)**// | %%Control how the internal image is scaled.%% |
|  | **[[:develop:api:efl:ui:image:method:signal_emit|signal_emit]]** | %%Sends/emits an Edje signal to this layout.%% |
|  | **[[:develop:api:efl:ui:image:property:smooth_scale|smooth_scale]]** //**(get, set)**// | %%Whether to use high-quality image scaling algorithm for this image.%% |
|  ''protected'' | **[[:develop:api:efl:ui:image:method:calc_force|calc_force]]** | %%Forces a Size/Geometry calculation.%% |
|  ''protected'' | **[[:develop:api:efl:ui:image:property:extents|extents]]** //**(get)**// | %%Gets an image extents.%% |
^ [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] ^^^
|  | **[[:develop:api:efl:ui:translatable:property:translatable_text|translatable_text]]** //**(get, set)**// | %%A unique string to be translated.%% |
^ [[:develop:api:elm:interface_scrollable|Elm.Interface_Scrollable]] ^^^
|  | **[[:develop:api:elm:interface_scrollable:property:animate_start_cb|animate_start_cb]]** //**(set)**// | %%Set the callback to run when the scrolling animation has started.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:animate_stop_cb|animate_stop_cb]]** //**(set)**// | %%Set the callback to run when the scrolling animation has stopped.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:border_elements|border_elements]]** //**(get)**// | %%The list of elements which are at the border of the graph.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:bounce_allow|bounce_allow]]** //**(get, set)**// | %%Bouncing behavior%% |
|  | **[[:develop:api:elm:interface_scrollable:property:bounce_animator_disabled|bounce_animator_disabled]]** //**(get, set)**// | %%Bounce animator%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content|content]]** //**(set)**// | %%Content property%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_min_limit|content_min_limit]]** | %%Prevent the scrollable from being smaller than the minimum size of the content.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_min_limit_cb|content_min_limit_cb]]** //**(set)**// | %%set the callback to run on minimal limit content%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_pos_get|content_pos_get]]** | %%Get content position%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_pos_set|content_pos_set]]** | %%Set the content position%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_region|content_region]]** //**(get, set)**// | %%Currently visible content region%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_region_show|content_region_show]]** | %%Show a specific virtual region within the scroller content object%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_size|content_size]]** //**(get)**// | %%Get the size of the content object%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_viewport_geometry|content_viewport_geometry]]** //**(get)**// | %%Content viewport geometry%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_viewport_resize_cb|content_viewport_resize_cb]]** //**(set)**// | %%When the viewport is resized, the callback is called.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:current_page|current_page]]** //**(get)**// | %%Get scroll current page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:drag_start_cb|drag_start_cb]]** //**(set)**// | %%Set the callback to run when dragging of the contents has started.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:drag_stop_cb|drag_stop_cb]]** //**(set)**// | %%Set the callback to run when dragging of the contents has stopped.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_bottom_cb|edge_bottom_cb]]** //**(set)**// | %%Set the callback to run when the bottom edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_left_cb|edge_left_cb]]** //**(set)**// | %%Set the callback to run when the left edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_right_cb|edge_right_cb]]** //**(set)**// | %%Set the callback to run when the right edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_top_cb|edge_top_cb]]** //**(set)**// | %%Set the callback to run when the top edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:extern_pan|extern_pan]]** //**(set)**// | %%Extern pan%% |
|  | **[[:develop:api:elm:interface_scrollable:property:freeze|freeze]]** //**(set)**// | %%Freeze property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:gravity|gravity]]** //**(get, set)**// | %%Control scrolling gravity on the scrollable%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hbar_drag_cb|hbar_drag_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is dragged.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hbar_press_cb|hbar_press_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is pressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hbar_unpress_cb|hbar_unpress_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is unpressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hold|hold]]** //**(set)**// | %%Hold property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:item_loop_enabled|item_loop_enabled]]** //**(get, set)**// | %%Whether scrolling should loop around.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:last_page|last_page]]** //**(get)**// | %%Get scroll last page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:loop|loop]]** //**(get, set)**// | %%Controls an infinite loop for a scroller.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:mirrored|mirrored]]** //**(set)**// | %%Mirroed property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:momentum_animator_disabled|momentum_animator_disabled]]** //**(get, set)**// | %%Momentum animator%% |
|  | **[[:develop:api:elm:interface_scrollable:property:movement_block|movement_block]]** //**(get, set)**// | %%Blocking of scrolling (per axis)%% |
|  | **[[:develop:api:elm:interface_scrollable:property:objects|objects]]** //**(set)**// | %%Object property%% |
|  | **[[:develop:api:elm:interface_scrollable:method:page_bring_in|page_bring_in]]** | %%Show a specific virtual region within the scroller content object by page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_change_cb|page_change_cb]]** //**(set)**// | %%Set the callback to run when the visible page changes.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_relative|page_relative]]** //**(set)**// | %%Set scroll page size relative to viewport size.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_scroll_limit|page_scroll_limit]]** //**(get, set)**// | %%Page scroll limit%% |
|  | **[[:develop:api:elm:interface_scrollable:method:page_show|page_show]]** | %%Show a specific virtual region within the scroller content object by page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_size|page_size]]** //**(get, set)**// | %%Scroll page size relative to viewport size.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_snap_allow|page_snap_allow]]** //**(get, set)**// | %%Page snapping behavior%% |
|  | **[[:develop:api:elm:interface_scrollable:property:paging|paging]]** //**(get, set)**// | %%Pagin property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:policy|policy]]** //**(get, set)**// | %%Scrollbar visibility policy%% |
|  | **[[:develop:api:elm:interface_scrollable:property:repeat_events|repeat_events]]** //**(get, set)**// | %%It decides whether the scrollable object propagates the events to content object or not.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_cb|scroll_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_down_cb|scroll_down_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved down.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_left_cb|scroll_left_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved to the left%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_right_cb|scroll_right_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved to the right.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_up_cb|scroll_up_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved up.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:single_direction|single_direction]]** //**(get, set)**// | %%Single direction scroll configuration%% |
|  | **[[:develop:api:elm:interface_scrollable:property:step_size|step_size]]** //**(get, set)**// | %%Step size%% |
|  | **[[:develop:api:elm:interface_scrollable:property:vbar_drag_cb|vbar_drag_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is dragged.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:vbar_press_cb|vbar_press_cb]]** //**(set)**// | %%Set the callback to run when the vertical scrollbar is pressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:vbar_unpress_cb|vbar_unpress_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is unpressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:wheel_disabled|wheel_disabled]]** //**(get, set)**// | %%Control Wheel disable Enable or disable mouse wheel to be used to scroll the scroller content. heel is enabled by default.%% |
^ [[:develop:api:elm:widget|Elm.Widget]] ^^^
|  | **[[:develop:api:elm:widget:property:access_info|access_info]]** //**(get, set)**// | %%Accessibility information.%% |
|  | **[[:develop:api:elm:widget:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:cursor|cursor]]** //**(get, set)**// | %%The cursor to be shown when mouse is over the object%% |
|  | **[[:develop:api:elm:widget:property:cursor_style|cursor_style]]** //**(get, set)**// | %%A different style for the cursor.%% |
|  | **[[:develop:api:elm:widget:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// | %%Whether the cursor may be looked in the theme or not.%% |
|  | **[[:develop:api:elm:widget:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:elm:widget:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:elm:widget:property:disabled|disabled]]** //**(get, set)**// | %%Whether the widget is enabled (accepts and reacts to user inputs).%% |
|  | **[[:develop:api:elm:widget:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  ''protected set'' | **[[:develop:api:elm:widget:property:focus|focus]]** //**(get, set)**// | %%This gets called by the manager and should never be called by someone else.%% |
|  | **[[:develop:api:elm:widget:property:focus_allow|focus_allow]]** //**(get, set)**// | %%The ability for a widget to be focused.%% |
|  | **[[:develop:api:elm:widget:property:focus_geometry|focus_geometry]]** //**(get)**// | %%The geometry to use to calculate the relations to other objects.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_animate|focus_highlight_animate]]** //**(get, set)**// | %%Whether focus highlight should animate or not.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_enabled|focus_highlight_enabled]]** //**(get, set)**// | %%Whether focus highlight is enabled or not.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**// | %%Control the widget focus highlight style.%% |
|  | **[[:develop:api:elm:widget:property:focus_manager|focus_manager]]** //**(get)**// | %%Describes which manager is used to register.%% |
|  | **[[:develop:api:elm:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**// | %%The widget's focus move policy.%% |
|  | **[[:develop:api:elm:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**// | %%Control the widget's focus_move_policy mode setting.%% |
|  | **[[:develop:api:elm:widget:property:focus_parent|focus_parent]]** //**(get)**// | %%Describes which logical parent is used by this object.%% |
|  | **[[:develop:api:elm:widget:property:focused_item|focused_item]]** //**(get)**// | %%Get the focused widget item.%% |
|  | **[[:develop:api:elm:widget:method:group_calculate|group_calculate]]** | %%Triggers an immediate recalculation of this object's geometry.%% |
|  | **[[:develop:api:elm:widget:method:group_member_del|group_member_del]]** | %%Removes a member object from a given smart object.%% |
|  | **[[:develop:api:elm:widget:property:interest_region_mode|interest_region_mode]]** //**(get, set)**// | %%Defines how %%[[:develop:api:elm:widget:property:show_region|Elm.Widget.show_region]]%% should be calculated.%% |
|  | **[[:develop:api:elm:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:elm:widget:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:elm:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |
|  | **[[:develop:api:elm:widget:property:name|name]]** //**(get, set)**// | %%Accessible name of the object.%% |
|  | **[[:develop:api:elm:widget:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**// | %%Whether the widget's automatic orientation is disabled or not.%% |
|  | **[[:develop:api:elm:widget:property:parent|parent]]** //**(get, set)**// | %%Object's accessible parent.%% |
|  | **[[:develop:api:elm:widget:method:part|part]]** | %%Returns %%[[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]]%%.%% |
|  | **[[:develop:api:elm:widget:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:elm:widget:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:elm:widget:method:scroll_freeze_pop|scroll_freeze_pop]]** | %%Pop scroller freeze%% |
|  | **[[:develop:api:elm:widget:method:scroll_freeze_push|scroll_freeze_push]]** | %%Push scroller freeze%% |
|  | **[[:develop:api:elm:widget:method:scroll_hold_pop|scroll_hold_pop]]** | %%Pop scroller hold%% |
|  | **[[:develop:api:elm:widget:method:scroll_hold_push|scroll_hold_push]]** | %%Push scroll hold%% |
|  ''protected set'' | **[[:develop:api:elm:widget:property:style|style]]** //**(get, set)**// | %%The widget style to use.%% |
|  | **[[:develop:api:elm:widget:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  | **[[:develop:api:elm:widget:property:widget_top|widget_top]]** //**(get)**// | %%Root widget in the widget hierarchy.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:attributes|attributes]]** //**(get)**// | %%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:children|children]]** //**(get)**// | %%Gets object's accessible children.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_grab|focus_grab]]** | %%Focuses accessible widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:focus_highlight_geometry|focus_highlight_geometry]]** //**(get)**// | %%The rectangle region to be highlighted on focus.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_manager_create|focus_manager_create]]** | %%If the widget needs a focus manager, this function will be called.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_state_apply|focus_state_apply]]** | %%Register focus with the given configuration.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:interest_region|interest_region]]** //**(get)**// | %%Region of interest inside this widget, that should be given priority to be visible inside a scroller.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_access_activate|on_access_activate]]** | %%Hook function called when widget is activated through accessibility.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_access_update|on_access_update]]** | %%Hook function called when accessibility is changed on the widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_disabled_update|on_disabled_update]]** | %%Virtual function called when the widget becomes disabled.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_orientation_update|on_orientation_update]]** | %%Virtual function handling canvas orientation changes.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**// | %%Hook function called when the %%[[:develop:api:elm:widget:property:show_region|Elm.Widget.show_region]]%% is changed.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:resize_object|resize_object]]** //**(set)**// | %%This is the internal canvas object managed by a widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:show_region|show_region]]** //**(get, set)**// | %%Region inside the widget to show.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:state_set|state_set]]** //**(get)**// | %%Gets set describing object accessible states.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:translation_update|translation_update]]** | %%This implements the calls to %%''gettext''%%() and %%''text_set''%%().%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:widget_parent|widget_parent]]** //**(get, set)**// | %%The internal parent of this widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:widget_sub_object_add|widget_sub_object_add]]** | %%Virtual function handling sub objects being added.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:widget_sub_object_del|widget_sub_object_del]]** | %%Virtual function handling sub objects being removed.%% |

===== Events =====

**[[:develop:api:efl:ui:image_zoomable:event:download_done|download,done]]**\\
> %%Called when photocam download finished%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_DOWNLOAD_DONE(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:download_error|download,error]]**\\
> %%Called when photocam download failed%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_DOWNLOAD_ERROR(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:download_progress|download,progress]]**\\
> %%Called when photocam download progress updated%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_DOWNLOAD_PROGRESS(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:download_start|download,start]]**\\
> %%Called when photocam download started%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_DOWNLOAD_START(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:load|load]]**\\
> %%Called when photocam loading started%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_LOAD(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:load_detail|load,detail]]**\\
> %%Called when photocal detail loading started%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_LOAD_DETAIL(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:loaded|loaded]]**\\
> %%Called when photocam loading finished%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_LOADED(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:loaded_detail|loaded,detail]]**\\
> %%Called when photocam detail loading finished%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_LOADED_DETAIL(void)
</code>
\\ **[[:develop:api:efl:ui:image_zoomable:event:press|press]]**\\
> %%Called when photocam got pressed%%
<code c>
EFL_UI_IMAGE_ZOOMABLE_EVENT_PRESS(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:event:active_descendant_changed|active,descendant,changed]]** | %%Called when active state of descendant has changed%% |
|  | **[[:develop:api:efl:access:event:added|added]]** | %%Called when item was added%% |
|  | **[[:develop:api:efl:access:event:bounds_changed|bounds,changed]]** | %%Called when bounds have changed%% |
|  | **[[:develop:api:efl:access:event:children_changed|children,changed]]** | %%Called when children have changed%% |
|  | **[[:develop:api:efl:access:event:property_changed|property,changed]]** | %%Called when roperty has changed%% |
|  | **[[:develop:api:efl:access:event:removed|removed]]** | %%Called when item was removed%% |
|  | **[[:develop:api:efl:access:event:state_changed|state,changed]]** | %%Called when tate has changed%% |
|  | **[[:develop:api:efl:access:event:visible_data_changed|visible,data,changed]]** | %%Called when visibility has changed%% |
^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:event:preload|preload]]** | %%Image data has been preloaded.%% |
|  | **[[:develop:api:efl:image:event:unload|unload]]** | %%Image data has been unloaded (by some mechanism in EFL that threw out the original image data).%% |
^ [[:develop:api:efl:image:load|Efl.Image.Load]] ^^^
|  | **[[:develop:api:efl:image:load:event:load_cancelled|load,cancelled]]** | %%Called when the image loading was cancelled%% |
|  | **[[:develop:api:efl:image:load:event:load_done|load,done]]** | %%Called when he image was loaded%% |
|  | **[[:develop:api:efl:image:load:event:load_error|load,error]]** | %%Called when an error happened during image loading%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] ^^^
|  | **[[:develop:api:efl:layout:calc:event:circular_dependency|circular,dependency]]** | %%A circular dependency between parts of the object was found.%% |
|  | **[[:develop:api:efl:layout:calc:event:recalc|recalc]]** | %%The layout was recalculated.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
^ [[:develop:api:efl:ui:clickable|Efl.Ui.Clickable]] ^^^
|  | **[[:develop:api:efl:ui:clickable:event:clicked|clicked]]** | %%Called when object was clicked%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_double|clicked,double]]** | %%Called when object received a double click%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_right|clicked,right]]** | %%Called when object received a right click%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_triple|clicked,triple]]** | %%Called when object received a triple click%% |
|  | **[[:develop:api:efl:ui:clickable:event:longpressed|longpressed]]** | %%Called when the object received a longpress%% |
|  | **[[:develop:api:efl:ui:clickable:event:pressed|pressed]]** | %%Called when the object was pressed%% |
|  | **[[:develop:api:efl:ui:clickable:event:repeated|repeated]]** | %%Called when the object received repeated presses/clicks%% |
|  | **[[:develop:api:efl:ui:clickable:event:unpressed|unpressed]]** | %%Called when the object is now longer pressed%% |
^ [[:develop:api:efl:ui:draggable|Efl.Ui.Draggable]] ^^^
|  | **[[:develop:api:efl:ui:draggable:event:drag|drag]]** | %%Called when drag operation starts%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_end|drag,end]]** | %%Called when drag operation ends%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_start|drag,start]]** | %%Called when drag started%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_start_down|drag,start,down]]** | %%Called when drag starts into down direction%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_start_left|drag,start,left]]** | %%Called when drag starts into left direction%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_start_right|drag,start,right]]** | %%Called when drag starts into right direction%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_start_up|drag,start,up]]** | %%Called when drag starts into up direction%% |
|  | **[[:develop:api:efl:ui:draggable:event:drag_stop|drag,stop]]** | %%Called when drag stopped%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]** | %%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:flush_pre|flush,pre]]** | %%Emitted once the graph calculationg will be performed%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:focused|focused]]** | %%Emitted if the manager has focused an object, the passed focus object is the last focused object%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]** | %%Emitted when the redirect object has changed, the old manager is passed as event info%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:event:focus_changed|focus,changed]]** | %%Emitted if the focus state has changed%% |
^ [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] ^^^
|  | **[[:develop:api:efl:ui:focus:user:event:logical_changed|logical,changed]]** | %%Emitted when a new logical parent should be used.%% |
|  | **[[:develop:api:efl:ui:focus:user:event:manager_changed|manager,changed]]** | %%Emitted when a new manager is the parent for this object.%% |
^ [[:develop:api:efl:ui:image|Efl.Ui.Image]] ^^^
|  | **[[:develop:api:efl:ui:image:event:drop|drop]]** | %%Called when drop from drag and drop happened%% |
^ [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] ^^^
|  | **[[:develop:api:efl:ui:scrollable:event:scroll|scroll]]** | %%Called when scroll operation started%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_start|scroll,anim,start]]** | %%Called when scroll animation started%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_stop|scroll,anim,stop]]** | %%Called when scroll animation stopped%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_start|scroll,drag,start]]** | %%Called when scroll drag started%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_stop|scroll,drag,stop]]** | %%Called when scroll drag stopped%% |
^ [[:develop:api:efl:ui:zoom|Efl.Ui.Zoom]] ^^^
|  | **[[:develop:api:efl:ui:zoom:event:zoom_change|zoom,change]]** | %%Called when zooming changed%% |
|  | **[[:develop:api:efl:ui:zoom:event:zoom_start|zoom,start]]** | %%Called when zooming started%% |
|  | **[[:develop:api:efl:ui:zoom:event:zoom_stop|zoom,stop]]** | %%Called when zooming stopped%% |
^ [[:develop:api:elm:interface_scrollable|Elm.Interface_Scrollable]] ^^^
|  | **[[:develop:api:elm:interface_scrollable:event:changed|changed]]** | %%Called when content changed%% |
^ [[:develop:api:elm:widget|Elm.Widget]] ^^^
|  | **[[:develop:api:elm:widget:event:access_changed|access,changed]]** | %%Called when accessibility changed%% |
|  | **[[:develop:api:elm:widget:event:language_changed|language,changed]]** | %%Called when widget language changed%% |
|  | **[[:develop:api:elm:widget:event:moved|moved]]** | %%Called when widget moved%% |
