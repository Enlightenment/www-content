~~Title: Efl.Ui.Internal.Text.Interactive~~
====== Efl.Ui.Internal.Text.Interactive (class) ======

===== Description =====

%%An internal object that is in charge of the interactive aspect of the text widget%%

%%This object is in charge of processing input, moving the text caret and etc.%%

{{page>:develop:api-include:efl:ui:internal:text:interactive:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:canvas:text|Efl.Canvas.Text]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:canvas:text|Efl.Canvas.Text]] //(class)//
    * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
      * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
      * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
      * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
      * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
    * [[:develop:api:efl:text|Efl.Text]] //(interface)//
    * [[:develop:api:efl:text:properties|Efl.Text.Properties]] //(interface)//
    * [[:develop:api:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]] //(mixin)//
      * [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:text:font|Efl.Text.Font]] //(interface)//
    * [[:develop:api:efl:text:style|Efl.Text.Style]] //(interface)//
    * [[:develop:api:efl:text:format|Efl.Text.Format]] //(interface)//
    * [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] //(interface)//
    * [[:develop:api:efl:text:annotate|Efl.Text.Annotate]] //(interface)//
    * [[:develop:api:efl:text:markup|Efl.Text.Markup]] //(interface)//
      * [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] //(interface)//
    * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
  * [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]] //(interface)//
    * [[:develop:api:efl:text|Efl.Text]] //(interface)//
    * [[:develop:api:efl:text:font|Efl.Text.Font]] //(interface)//
    * [[:develop:api:efl:text:format|Efl.Text.Format]] //(interface)//
    * [[:develop:api:efl:text:style|Efl.Text.Style]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:internal:text:interactive:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:internal:text:interactive:property:editable|editable]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]]]//\\
> %%Whether the entry is editable.%%
<code c>
Eina_Bool efl_ui_text_interactive_editable_get(const Eo *obj);
void efl_ui_text_interactive_editable_set(Eo *obj, Eina_Bool editable);
</code>
\\
**[[:develop:api:efl:ui:internal:text:interactive:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:internal:text:interactive:property:selection_allowed|selection_allowed]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]]]//\\
> %%Whether or not selection is allowed on this object%%
<code c>
Eina_Bool efl_ui_text_interactive_selection_allowed_get(const Eo *obj);
void efl_ui_text_interactive_selection_allowed_set(Eo *obj, Eina_Bool allowed);
</code>
\\
**[[:develop:api:efl:ui:internal:text:interactive:property:selection_cursors|selection_cursors]]** //**(get)**//// [Overridden from [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]]]//\\
> %%The cursors used for selection handling.%%
<code c>
void efl_ui_text_interactive_selection_cursors_get(const Eo *obj, Efl_Text_Cursor_Cursor **start, Efl_Text_Cursor_Cursor **end);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]] ^^^
|  | **[[:develop:api:efl:canvas:filter:internal:property:filter_padding|filter_padding]]** //**(get)**// | %%Required padding to apply this filter without cropping.%% |
|  | **[[:develop:api:efl:canvas:filter:internal:property:filter_state|filter_state]]** //**(get, set)**// | %%Set the current state of the filter.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:property:filter_changed|filter_changed]]** //**(set)**// | %%Marks this filter as changed.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:method:filter_input_alpha|filter_input_alpha]]** | %%Called by Efl.Canvas.Filter.Internal to determine whether the input is alpha or rgba.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:property:filter_invalid|filter_invalid]]** //**(set)**// | %%Marks this filter as invalid.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:property:filter_output_buffer|filter_output_buffer]]** //**(get)**// | %%Retrieve cached output buffer, if any.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:canvas:text|Efl.Canvas.Text]] ^^^
|  | **[[:develop:api:efl:canvas:text:property:annotation|annotation]]** //**(get, set)**// | %%A new format for %%''annotation''%%.%% |
|  | **[[:develop:api:efl:canvas:text:method:annotation_del|annotation_del]]** | %%Deletes given annotation.%% |
|  | **[[:develop:api:efl:canvas:text:method:annotation_insert|annotation_insert]]** | %%Inserts an annotation format in a specified range [%%''start''%%, %%''end''%% - 1].%% |
|  | **[[:develop:api:efl:canvas:text:method:annotation_positions_get|annotation_positions_get]]** | %%Sets given cursors to the start and end positions of the annotation.%% |
|  | **[[:develop:api:efl:canvas:text:method:async_layout|async_layout]]** | %%Requests to layout the text off the mainloop.%% |
|  | **[[:develop:api:efl:canvas:text:property:backing_color|backing_color]]** //**(get, set)**// | %%Backing color%% |
|  | **[[:develop:api:efl:canvas:text:property:backing_type|backing_type]]** //**(get, set)**// | %%Enable or disable backing type%% |
|  | **[[:develop:api:efl:canvas:text:property:bidi_delimiters|bidi_delimiters]]** //**(get, set)**// | %%BiDi delimiters are used for in-paragraph separation of bidi segments. This is useful for example in recipients fields of e-mail clients where bidi oddities can occur when mixing RTL and LTR.%% |
|  | **[[:develop:api:efl:canvas:text:property:cursor|cursor]]** //**(get)**// | %%The object's main cursor.%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_char_delete|cursor_char_delete]]** | %%Deletes a single character from position pointed by given cursor.%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_char_next|cursor_char_next]]** | %%Advances to the next character%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_char_prev|cursor_char_prev]]** | %%Advances to the previous character%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_compare|cursor_compare]]** | %%Compare two cursors%% |
|  | **[[:develop:api:efl:canvas:text:property:cursor_content|cursor_content]]** //**(get)**// | %%The content of the cursor (the character under the cursor)%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_coord_set|cursor_coord_set]]** | %%Set cursor coordinates%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_copy|cursor_copy]]** | %%Copy existing cursor%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_equal|cursor_equal]]** | %%Check if two cursors are equal%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_free|cursor_free]]** | %%Free existing cursor%% |
|  | **[[:develop:api:efl:canvas:text:property:cursor_geometry|cursor_geometry]]** //**(get)**// | %%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_line_char_first|cursor_line_char_first]]** | %%Advance to current line first character%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_line_char_last|cursor_line_char_last]]** | %%Advance to current line last character%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_line_jump_by|cursor_line_jump_by]]** | %%Jump the cursor by the given number of lines%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_markup_insert|cursor_markup_insert]]** | %%Inserts a markup text to the text object in a given cursor position%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_new|cursor_new]]** | %%Create new cursor%% |
|  | **[[:develop:api:efl:canvas:text:property:cursor_object_item_annotation|cursor_object_item_annotation]]** //**(get)**// | %%The object-item annotation at the cursor's position.%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_object_item_insert|cursor_object_item_insert]]** | %%Inserts a object item at specified position.%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]** | %%Advances to the first character in this paragraph%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]** | %%Advances to the last character in this paragraph%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_paragraph_first|cursor_paragraph_first]]** | %%Advance to current paragraph first character%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_paragraph_last|cursor_paragraph_last]]** | %%Advance to current paragraph last character%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_paragraph_next|cursor_paragraph_next]]** | %%Advances to the start of the next text node%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_paragraph_prev|cursor_paragraph_prev]]** | %%Advances to the end of the previous text node%% |
|  | **[[:develop:api:efl:canvas:text:property:cursor_position|cursor_position]]** //**(get, set)**// | %%Cursor position%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_text_insert|cursor_text_insert]]** | %%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_word_end|cursor_word_end]]** | %%Advance to current word end%% |
|  | **[[:develop:api:efl:canvas:text:method:cursor_word_start|cursor_word_start]]** | %%Advance to current word start%% |
|  | **[[:develop:api:efl:canvas:text:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:canvas:text:property:effect_type|effect_type]]** //**(get, set)**// | %%Type of effect used for the displayed text%% |
|  | **[[:develop:api:efl:canvas:text:property:ellipsis|ellipsis]]** //**(get, set)**// | %%Ellipsis value (number from -1.0 to 1.0)%% |
|  | **[[:develop:api:efl:canvas:text:property:filter_data|filter_data]]** //**(get, set)**// | %%Extra data used by the filter program.%% |
|  | **[[:develop:api:efl:canvas:text:property:filter_program|filter_program]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:text:property:filter_source|filter_source]]** //**(get, set)**// | %%Bind an object to use as a mask or texture in a filter program.%% |
|  | **[[:develop:api:efl:canvas:text:property:font|font]]** //**(get, set)**// | %%The font name and size that is used for the displayed text%% |
|  | **[[:develop:api:efl:canvas:text:property:font_bitmap_scalable|font_bitmap_scalable]]** //**(get, set)**// | %%The bitmap fonts have fixed size glyphs for several available sizes. Basically, it is not scalable. But, it needs to be scalable for some use cases. (ex. colorful emoji fonts)%% |
|  | **[[:develop:api:efl:canvas:text:property:font_fallbacks|font_fallbacks]]** //**(get, set)**// | %%Comma-separated list of font fallbacks%% |
|  | **[[:develop:api:efl:canvas:text:property:font_lang|font_lang]]** //**(get, set)**// | %%Specific language of the displayed font%% |
|  | **[[:develop:api:efl:canvas:text:property:font_slant|font_slant]]** //**(get, set)**// | %%Type of slant of the displayed font%% |
|  | **[[:develop:api:efl:canvas:text:property:font_source|font_source]]** //**(get, set)**// | %%The source that will be used to lookup the font of the text%% |
|  | **[[:develop:api:efl:canvas:text:property:font_weight|font_weight]]** //**(get, set)**// | %%Type of weight of the displayed font%% |
|  | **[[:develop:api:efl:canvas:text:property:font_width|font_width]]** //**(get, set)**// | %%Type of width of the displayed font%% |
|  | **[[:develop:api:efl:canvas:text:property:gfx_filter|gfx_filter]]** //**(get, set)**// | %%Program that applies a special filter%% |
|  | **[[:develop:api:efl:canvas:text:property:glow2_color|glow2_color]]** //**(get, set)**// | %%Second color of the glow effect%% |
|  | **[[:develop:api:efl:canvas:text:property:glow_color|glow_color]]** //**(get, set)**// | %%Color of glow effect%% |
|  | **[[:develop:api:efl:canvas:text:property:halign|halign]]** //**(get, set)**// | %%Horizontal alignment of text%% |
|  | **[[:develop:api:efl:canvas:text:property:halign_auto_type|halign_auto_type]]** //**(get, set)**// | %%Horizontal alignment of text%% |
|  | **[[:develop:api:efl:canvas:text:property:is_empty|is_empty]]** //**(get)**// | %%Whether the object is empty (no text) or not%% |
|  | **[[:develop:api:efl:canvas:text:property:legacy_newline|legacy_newline]]** //**(get, set)**// | %%When %%''true''%%, newline character will behave as a paragraph separator.%% |
|  | **[[:develop:api:efl:canvas:text:property:linegap|linegap]]** //**(get, set)**// | %%Minimal line gap (top and bottom) for each line in the text%% |
|  | **[[:develop:api:efl:canvas:text:property:linerelgap|linerelgap]]** //**(get, set)**// | %%Relative line gap (top and bottom) for each line in the text%% |
|  | **[[:develop:api:efl:canvas:text:property:markup|markup]]** //**(get, set)**// | %%Markup property%% |
|  | **[[:develop:api:efl:canvas:text:property:multiline|multiline]]** //**(get, set)**// | %%Multiline is enabled or not%% |
|  | **[[:develop:api:efl:canvas:text:property:normal_color|normal_color]]** //**(get, set)**// | %%Color of text, excluding style%% |
|  | **[[:develop:api:efl:canvas:text:method:object_item_geometry_get|object_item_geometry_get]]** | %%Queries a given object item for its geometry.%% |
|  | **[[:develop:api:efl:canvas:text:method:obstacle_add|obstacle_add]]** | %%Add obstacle evas object %%''eo_obs''%% to be observed during layout of text.%% |
|  | **[[:develop:api:efl:canvas:text:method:obstacle_del|obstacle_del]]** | %%Removes %%''eo_obs''%% from observation during text layout.%% |
|  | **[[:develop:api:efl:canvas:text:method:obstacles_update|obstacles_update]]** | %%Triggers for relayout due to obstacles' state change.%% |
|  | **[[:develop:api:efl:canvas:text:property:outline_color|outline_color]]** //**(get, set)**// | %%Color of outline effect%% |
|  | **[[:develop:api:efl:canvas:text:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  | **[[:develop:api:efl:canvas:text:property:password|password]]** //**(get, set)**// | %%Whether text is a password%% |
|  | **[[:develop:api:efl:canvas:text:method:range_annotations_get|range_annotations_get]]** | %%Returns an iterator of all the handles in a range.%% |
|  | **[[:develop:api:efl:canvas:text:method:range_delete|range_delete]]** | %%Deletes the range between given cursors.%% |
|  | **[[:develop:api:efl:canvas:text:method:range_geometry_get|range_geometry_get]]** | %%Get the geometry of a range in the text.%% |
|  | **[[:develop:api:efl:canvas:text:method:range_simple_geometry_get|range_simple_geometry_get]]** | %%Get the "simple" geometry of a range.%% |
|  | **[[:develop:api:efl:canvas:text:method:range_text_get|range_text_get]]** | %%Returns the text in the range between %%''cur1''%% and %%''cur2''%%.%% |
|  | **[[:develop:api:efl:canvas:text:property:replacement_char|replacement_char]]** //**(get, set)**// | %%The character used to replace characters that can not be displayed%% |
|  | **[[:develop:api:efl:canvas:text:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:canvas:text:property:shadow_color|shadow_color]]** //**(get, set)**// | %%Color of shadow effect%% |
|  | **[[:develop:api:efl:canvas:text:property:shadow_direction|shadow_direction]]** //**(get, set)**// | %%Direction of shadow effect%% |
|  | **[[:develop:api:efl:canvas:text:property:size_formatted|size_formatted]]** //**(get)**// | %%The formatted width and height.%% |
|  | **[[:develop:api:efl:canvas:text:property:size_native|size_native]]** //**(get)**// | %%The native width and height.%% |
|  | **[[:develop:api:efl:canvas:text:property:strikethrough_color|strikethrough_color]]** //**(get, set)**// | %%Color of strikethrough_style%% |
|  | **[[:develop:api:efl:canvas:text:property:strikethrough_type|strikethrough_type]]** //**(get, set)**// | %%Type of strikethrough style%% |
|  | **[[:develop:api:efl:canvas:text:property:style|style]]** //**(get, set)**// | %%The text style of the object.%% |
|  | **[[:develop:api:efl:canvas:text:property:style_insets|style_insets]]** //**(get)**// | %%Gets the left, right, top and bottom insets of the text.%% |
|  | **[[:develop:api:efl:canvas:text:property:tabstops|tabstops]]** //**(get, set)**// | %%Tabstops value%% |
|  | **[[:develop:api:efl:canvas:text:property:text|text]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:text:property:underline2_color|underline2_color]]** //**(get, set)**// | %%Color of underline2 style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline2_type|underline2_type]]** //**(get, set)**// | %%Type of underline2 style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline_color|underline_color]]** //**(get, set)**// | %%Color of normal underline style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline_dashed_color|underline_dashed_color]]** //**(get, set)**// | %%Color of dashed underline style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline_dashed_gap|underline_dashed_gap]]** //**(get, set)**// | %%Gap of dashed underline style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline_dashed_width|underline_dashed_width]]** //**(get, set)**// | %%Width of dashed underline style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline_height|underline_height]]** //**(get, set)**// | %%Height of underline style%% |
|  | **[[:develop:api:efl:canvas:text:property:underline_type|underline_type]]** //**(get, set)**// | %%Sets an underline style on the text%% |
|  | **[[:develop:api:efl:canvas:text:property:valign|valign]]** //**(get, set)**// | %%Vertical alignment of text%% |
|  | **[[:develop:api:efl:canvas:text:method:visible_range_get|visible_range_get]]** | %%Returns the currently visible range.%% |
|  | **[[:develop:api:efl:canvas:text:property:wrap|wrap]]** //**(get, set)**// | %%Wrap mode for use in the text%% |
|  ''protected'' | **[[:develop:api:efl:canvas:text:method:filter_dirty|filter_dirty]]** | %%Called when the filter changes must trigger a redraw of the object.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:text:method:filter_input_render|filter_input_render]]** | %%Called by Efl.Canvas.Filter.Internal when the parent class must render the input.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:text:method:filter_state_prepare|filter_state_prepare]]** | %%Called by Efl.Canvas.Filter.Internal to request the parent class for state information (color, etc...).%% |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lightning effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lightning effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:text:properties|Efl.Text.Properties]] ^^^
|  | **[[:develop:api:efl:text:properties:property:font|font]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:text:properties:property:font_source|font_source]]** //**(get, set)**// |  |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:canvas:text|Efl.Canvas.Text]] ^^^
|  | **[[:develop:api:efl:canvas:text:event:changed|changed]]** | %%Called when canvas text changed%% |
|  | **[[:develop:api:efl:canvas:text:event:cursor_changed|cursor,changed]]** | %%Called when cursor changed%% |
|  | **[[:develop:api:efl:canvas:text:event:style_insets_changed|style_insets,changed]]** | %%Called when the property %%[[:develop:api:efl:canvas:text:property:style_insets|Efl.Canvas.Text.style_insets]]%% changed.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
^ [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]] ^^^
|  | **[[:develop:api:efl:ui:text:interactive:event:selection_changed|selection,changed]]** | %%The selection on the object has changed. Query using %%[[:develop:api:efl:ui:text:interactive:property:selection_cursors|Efl.Ui.Text.Interactive.selection_cursors]]%%%% |
