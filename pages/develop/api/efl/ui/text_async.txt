~~Title: Efl.Ui.Text_Async~~
====== Efl.Ui.Text_Async (class) ======

===== Description =====

%%Efl UI text async class%%

//Since 1.21//

{{page>:develop:api-include:efl:ui:text_async:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:text|Efl.Ui.Text]] //(class)// => [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] //(class)// => [[:develop:api:elm:widget|Elm.Widget]] //(class)// => [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:text|Efl.Ui.Text]] //(class)//
    * [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] //(class)//
      * [[:develop:api:elm:widget|Elm.Widget]] //(class)//
        * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
            * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
            * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
              * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
              * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
            * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
        * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
          * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
        * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
        * [[:develop:api:efl:part|Efl.Part]] //(interface)//
        * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
        * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
        * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
        * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
      * [[:develop:api:efl:part|Efl.Part]] //(interface)//
      * [[:develop:api:efl:container|Efl.Container]] //(interface)//
      * [[:develop:api:efl:file|Efl.File]] //(mixin)//
      * [[:develop:api:efl:ui:view|Efl.Ui.View]] //(interface)//
      * [[:develop:api:efl:ui:model:connect|Efl.Ui.Model.Connect]] //(interface)//
      * [[:develop:api:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]] //(interface)//
      * [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] //(interface)//
      * [[:develop:api:efl:layout:signal|Efl.Layout.Signal]] //(interface)//
      * [[:develop:api:efl:layout:group|Efl.Layout.Group]] //(interface)//
    * [[:develop:api:elm:interface_scrollable|Elm.Interface_Scrollable]] //(mixin)//
      * [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
      * [[:develop:api:efl:ui:focus:manager:sub|Efl.Ui.Focus.Manager.Sub]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:elm:widget|Elm.Widget]] //(class)//
        * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
            * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
            * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
              * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
              * [[:develop:api:efl:object|Efl.Object]] //(class)//
            * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
            * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
        * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
          * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
        * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
        * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
        * [[:develop:api:efl:part|Efl.Part]] //(interface)//
        * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
        * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
        * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
        * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
    * [[:develop:api:efl:ui:clickable|Efl.Ui.Clickable]] //(interface)//
    * [[:develop:api:efl:access:text|Efl.Access.Text]] //(interface)//
    * [[:develop:api:efl:access:editable:text|Efl.Access.Editable.Text]] //(interface)//
    * [[:develop:api:efl:file|Efl.File]] //(mixin)//
    * [[:develop:api:efl:ui:selectable|Efl.Ui.Selectable]] //(interface)//
    * [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
    * [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]] //(interface)//
      * [[:develop:api:efl:text|Efl.Text]] //(interface)//
      * [[:develop:api:efl:text:font|Efl.Text.Font]] //(interface)//
      * [[:develop:api:efl:text:format|Efl.Text.Format]] //(interface)//
      * [[:develop:api:efl:text:style|Efl.Text.Style]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:text_async:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:method:attribute_append|attribute_append]]** | %%Add key-value pair identifying object extra attributes%% |
|  | **[[:develop:api:efl:access:method:attributes_clear|attributes_clear]]** | %%Removes all attributes in accessible object.%% |
|  | **[[:develop:api:efl:access:property:description|description]]** //**(get, set)**// | %%Contextual information about object.%% |
|  | **[[:develop:api:efl:access:method:relationship_append|relationship_append]]** | %%Defines the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationship_remove|relationship_remove]]** | %%Removes the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationships_clear|relationships_clear]]** | %%Removes all relationships in accessible object.%% |
|  | **[[:develop:api:efl:access:property:role|role]]** //**(get, set)**// | %%The role of the object in accessibility domain.%% |
|  ''class'' | **[[:develop:api:efl:access:property:root|root]]** //**(get)**// | %%Get root object of accessible object hierarchy%% |
|  | **[[:develop:api:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**// | %%The translation domain of "name" and "description" properties.%% |
|  | **[[:develop:api:efl:access:property:type|type]]** //**(get, set)**// | %%Type of accessibility object%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_emit|event_emit]]** | %%Emit event%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_add|event_handler_add]]** | %%Register accessibility event listener%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_del|event_handler_del]]** | %%Deregister accessibility event listener%% |
|  ''protected'' | **[[:develop:api:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// | %%Gets index of the child in parent's children list.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// | %%Gets an localized string describing accessible object role name.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:reading_info_type|reading_info_type]]** //**(get, set)**// |  |
|  ''protected'' | **[[:develop:api:efl:access:property:relation_set|relation_set]]** //**(get)**// | %%Gets an all relations between accessible object and other accessible objects.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:role_name|role_name]]** //**(get)**// | %%Gets human-readable string indentifying object accessibility role.%% |
^ [[:develop:api:efl:access:component|Efl.Access.Component]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** | %%Gets top component object occupying space at given coordinates.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:alpha|alpha]]** //**(get)**// | %%Gets alpha of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:method:contains|contains]]** | %%Contains accessible widget%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:extents|extents]]** //**(get, set)**// | %%Geometry of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:layer|layer]]** //**(get)**// | %%Evas layer of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:position|position]]** //**(get, set)**// | %%Position of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:size|size]]** //**(get, set)**// | %%Size of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:z_order|z_order]]** //**(get)**// | %%Gets the depth at which the component is shown in relation to other components in the same container.%% |
^ [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] ^^^
|  | **[[:develop:api:efl:canvas:group:method:group_change|group_change]]** | %%Marks the object as dirty.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_is|group_member_is]]** | %%Finds out if a given object is a member of this group.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_members_iterate|group_members_iterate]]** | %%Returns an iterator over the children of this object, which are canvas objects.%% |
|  | **[[:develop:api:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**// | %%Indicates that the group's layout needs to be recalculated.%% |
|  | **[[:develop:api:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// | %%The internal clipper object used by this group.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:file|Efl.File]] ^^^
|  | **[[:develop:api:efl:file:property:load_error|load_error]]** //**(get)**// | %%Gets the (last) file loading error for a given object.%% |
|  | **[[:develop:api:efl:file:method:save|save]]** | %%Save the given image object's contents to an (image) file.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lighting effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lighting effect to the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] ^^^
|  | **[[:develop:api:efl:layout:calc:property:calc_auto_update_hints|calc_auto_update_hints]]** //**(get, set)**// | %%Whether this object updates its size hints automatically.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_parts_extends|calc_parts_extends]]** | %%Calculates the geometry of the region, relative to a given layout object's area, occupied by all parts in the object.%% |
|  | **[[:develop:api:efl:layout:calc:method:calc_size_min|calc_size_min]]** | %%Calculates the minimum required size for a given layout object.%% |
|  ''protected'' | **[[:develop:api:efl:layout:calc:method:calc_force|calc_force]]** | %%Forces a Size/Geometry calculation.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:text|Efl.Text]] ^^^
|  | **[[:develop:api:efl:text:property:text|text]]** //**(get, set)**// |  |
^ [[:develop:api:efl:text:font|Efl.Text.Font]] ^^^
|  | **[[:develop:api:efl:text:font:property:font|font]]** //**(get, set)**// | %%The font name and size that is used for the displayed text%% |
|  | **[[:develop:api:efl:text:font:property:font_bitmap_scalable|font_bitmap_scalable]]** //**(get, set)**// | %%The bitmap fonts have fixed size glyphs for several available sizes. Basically, it is not scalable. But, it needs to be scalable for some use cases. (ex. colorful emoji fonts)%% |
|  | **[[:develop:api:efl:text:font:property:font_fallbacks|font_fallbacks]]** //**(get, set)**// | %%Comma-separated list of font fallbacks%% |
|  | **[[:develop:api:efl:text:font:property:font_lang|font_lang]]** //**(get, set)**// | %%Specific language of the displayed font%% |
|  | **[[:develop:api:efl:text:font:property:font_slant|font_slant]]** //**(get, set)**// | %%Type of slant of the displayed font%% |
|  | **[[:develop:api:efl:text:font:property:font_source|font_source]]** //**(get, set)**// | %%The source that will be used to lookup the font of the text%% |
|  | **[[:develop:api:efl:text:font:property:font_weight|font_weight]]** //**(get, set)**// | %%Type of weight of the displayed font%% |
|  | **[[:develop:api:efl:text:font:property:font_width|font_width]]** //**(get, set)**// | %%Type of width of the displayed font%% |
^ [[:develop:api:efl:text:format|Efl.Text.Format]] ^^^
|  | **[[:develop:api:efl:text:format:property:ellipsis|ellipsis]]** //**(get, set)**// | %%Ellipsis value (number from -1.0 to 1.0)%% |
|  | **[[:develop:api:efl:text:format:property:halign|halign]]** //**(get, set)**// | %%Horizontal alignment of text%% |
|  | **[[:develop:api:efl:text:format:property:halign_auto_type|halign_auto_type]]** //**(get, set)**// | %%Horizontal alignment of text%% |
|  | **[[:develop:api:efl:text:format:property:linegap|linegap]]** //**(get, set)**// | %%Minimal line gap (top and bottom) for each line in the text%% |
|  | **[[:develop:api:efl:text:format:property:linerelgap|linerelgap]]** //**(get, set)**// | %%Relative line gap (top and bottom) for each line in the text%% |
|  | **[[:develop:api:efl:text:format:property:multiline|multiline]]** //**(get, set)**// | %%Multiline is enabled or not%% |
|  | **[[:develop:api:efl:text:format:property:password|password]]** //**(get, set)**// | %%Whether text is a password%% |
|  | **[[:develop:api:efl:text:format:property:replacement_char|replacement_char]]** //**(get, set)**// | %%The character used to replace characters that can't be displayed%% |
|  | **[[:develop:api:efl:text:format:property:tabstops|tabstops]]** //**(get, set)**// | %%Tabstops value%% |
|  | **[[:develop:api:efl:text:format:property:valign|valign]]** //**(get, set)**// | %%Vertical alignment of text%% |
|  | **[[:develop:api:efl:text:format:property:wrap|wrap]]** //**(get, set)**// | %%Wrap mode for use in the text%% |
^ [[:develop:api:efl:text:style|Efl.Text.Style]] ^^^
|  | **[[:develop:api:efl:text:style:property:backing_color|backing_color]]** //**(get, set)**// | %%Backing color%% |
|  | **[[:develop:api:efl:text:style:property:backing_type|backing_type]]** //**(get, set)**// | %%Enable or disable backing type%% |
|  | **[[:develop:api:efl:text:style:property:effect_type|effect_type]]** //**(get, set)**// | %%Type of effect used for the displayed text%% |
|  | **[[:develop:api:efl:text:style:property:gfx_filter|gfx_filter]]** //**(get, set)**// | %%Program that applies a special filter%% |
|  | **[[:develop:api:efl:text:style:property:glow2_color|glow2_color]]** //**(get, set)**// | %%Second color of the glow effect%% |
|  | **[[:develop:api:efl:text:style:property:glow_color|glow_color]]** //**(get, set)**// | %%Color of glow effect%% |
|  | **[[:develop:api:efl:text:style:property:normal_color|normal_color]]** //**(get, set)**// | %%Color of text, excluding style%% |
|  | **[[:develop:api:efl:text:style:property:outline_color|outline_color]]** //**(get, set)**// | %%Color of outline effect%% |
|  | **[[:develop:api:efl:text:style:property:shadow_color|shadow_color]]** //**(get, set)**// | %%Color of shadow effect%% |
|  | **[[:develop:api:efl:text:style:property:shadow_direction|shadow_direction]]** //**(get, set)**// | %%Direction of shadow effect%% |
|  | **[[:develop:api:efl:text:style:property:strikethrough_color|strikethrough_color]]** //**(get, set)**// | %%Color of strikethrough_style%% |
|  | **[[:develop:api:efl:text:style:property:strikethrough_type|strikethrough_type]]** //**(get, set)**// | %%Type of strikethrough style%% |
|  | **[[:develop:api:efl:text:style:property:underline2_color|underline2_color]]** //**(get, set)**// | %%Color of underline2 style%% |
|  | **[[:develop:api:efl:text:style:property:underline2_type|underline2_type]]** //**(get, set)**// | %%Type of underline2 style%% |
|  | **[[:develop:api:efl:text:style:property:underline_color|underline_color]]** //**(get, set)**// | %%Color of normal underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_dashed_color|underline_dashed_color]]** //**(get, set)**// | %%Color of dashed underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_dashed_gap|underline_dashed_gap]]** //**(get, set)**// | %%Gap of dashed underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_dashed_width|underline_dashed_width]]** //**(get, set)**// | %%Width of dashed underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_height|underline_height]]** //**(get, set)**// | %%Height of underline style%% |
|  | **[[:develop:api:efl:text:style:property:underline_type|underline_type]]** //**(get, set)**// | %%Sets an underline style on the text%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:method:fetch|fetch]]** | %%This will fetch the data from a registered node.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:logical_end|logical_end]]** | %%Return the last logical object.%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:manager_focus|manager_focus]]** //**(get, set)**// | %%The element which is currently focused by this manager%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:move|move]]** | %%Move the focus into the given direction.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:pop_history_stack|pop_history_stack]]** | %%Removes the most upper history element, and gives the focus to the next one below%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**// | %%Add a another manager to serve the move requests.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:request_move|request_move]]** | %%Returns the object which would be the next object to focus in the given direction.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:request_subchild|request_subchild]]** | %%Returns a widget that can receive focus%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:reset_history|reset_history]]** | %%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:root|root]]** //**(get, set)**// | %%Root node for all logical subtrees.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:setup_on_first_touch|setup_on_first_touch]]** | %%Called when this manager is set as redirect%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:method:prepare_logical|prepare_logical]]** | %%Tells the object that the children of it will be queried soon by the given manager.%% |
^ [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] ^^^
|  | **[[:develop:api:efl:ui:layout:method:calc_freeze|calc_freeze]]** | %%Freezes the layout object.%% |
|  | **[[:develop:api:efl:ui:layout:method:calc_thaw|calc_thaw]]** | %%Thaws the layout object.%% |
|  | **[[:develop:api:efl:ui:layout:method:connect|connect]]** | %%Connect property%% |
|  | **[[:develop:api:efl:ui:layout:method:connect|connect]]** | %%Connect factory%% |
|  | **[[:develop:api:efl:ui:layout:method:content_count|content_count]]** | %%Returns the number of UI elements packed in this container.%% |
|  | **[[:develop:api:efl:ui:layout:method:content_iterate|content_iterate]]** | %%Begin iterating over this object's contents.%% |
|  | **[[:develop:api:efl:ui:layout:method:content_remove|content_remove]]** | %%Unswallow an object from this container.%% |
|  | **[[:develop:api:efl:ui:layout:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:ui:layout:method:group_calculate|group_calculate]]** | %%Triggers an immediate recalculation of this object's geometry.%% |
|  | **[[:develop:api:efl:ui:layout:property:group_data|group_data]]** //**(get)**// | %%Retrives an EDC data field's value from a given Edje object's group.%% |
|  | **[[:develop:api:efl:ui:layout:property:group_size_max|group_size_max]]** //**(get)**// | %%Gets the maximum size specified -- as an EDC property -- for a given Edje object%% |
|  | **[[:develop:api:efl:ui:layout:property:group_size_min|group_size_min]]** //**(get)**// | %%Gets the minimum size specified -- as an EDC property -- for a given Edje object%% |
|  | **[[:develop:api:efl:ui:layout:method:message_send|message_send]]** | %%Sends an (Edje) message to a given Edje object%% |
|  | **[[:develop:api:efl:ui:layout:property:mmap|mmap]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:layout:property:model|model]]** //**(get, set)**// | %%Model that is/will be%% |
|  | **[[:develop:api:efl:ui:layout:method:part|part]]** | %%Returns %%[[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]]%%.%% |
|  | **[[:develop:api:efl:ui:layout:method:signal_process|signal_process]]** | %%Processes an object's messages and signals queue.%% |
|  | **[[:develop:api:efl:ui:layout:property:theme|theme]]** //**(set)**// | %%The theme of this widget, defines which edje group will be used.%% |
|  ''protected'' | **[[:develop:api:efl:ui:layout:method:widget_sub_object_add|widget_sub_object_add]]** | %%Virtual function handling sub objects being added.%% |
^ [[:develop:api:efl:ui:text|Efl.Ui.Text]] ^^^
|  | **[[:develop:api:efl:ui:text:property:autocapital_type|autocapital_type]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:bounce_allow|bounce_allow]]** //**(get, set)**// | %%Bouncing behavior%% |
|  | **[[:develop:api:efl:ui:text:property:cnp_mode|cnp_mode]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:context_menu_clear|context_menu_clear]]** | %%This clears and frees the items in a entry's contextual (longpress) menu.%% |
|  | **[[:develop:api:efl:ui:text:property:context_menu_disabled|context_menu_disabled]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:context_menu_item_add|context_menu_item_add]]** | %%This adds an item to the entry's contextual menu.%% |
|  | **[[:develop:api:efl:ui:text:method:cursor_new|cursor_new]]** | %%Creates and returns a new cursor for the text.%% |
|  | **[[:develop:api:efl:ui:text:method:cursor_selection_end|cursor_selection_end]]** | %%This ends a selection within the entry as though the user had just released the mouse button while making a selection.%% |
|  | **[[:develop:api:efl:ui:text:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:ui:text:property:editable|editable]]** //**(get, set)**// | %%Whether the entry is editable.%% |
|  | **[[:develop:api:efl:ui:text:property:file|file]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:group_member_add|group_member_add]]** | %%Set a canvas object as a member of a given group (or smart object).%% |
|  | **[[:develop:api:efl:ui:text:property:input_hint|input_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:input_panel_enabled|input_panel_enabled]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:input_panel_hide|input_panel_hide]]** | %%Hide the input panel (virtual keyboard).%% |
|  | **[[:develop:api:efl:ui:text:method:input_panel_imdata_get|input_panel_imdata_get]]** | %%Get the specific data of the current input panel.%% |
|  | **[[:develop:api:efl:ui:text:method:input_panel_imdata_set|input_panel_imdata_set]]** | %%Set the input panel-specific data to deliver to the input panel.%% |
|  | **[[:develop:api:efl:ui:text:property:input_panel_language|input_panel_language]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:input_panel_layout|input_panel_layout]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:input_panel_layout_variation|input_panel_layout_variation]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:input_panel_return_key_autoenabled|input_panel_return_key_autoenabled]]** //**(set)**// | %%Set whether the return key on the input panel is disabled automatically when entry has no text.%% |
|  | **[[:develop:api:efl:ui:text:property:input_panel_return_key_disabled|input_panel_return_key_disabled]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:input_panel_return_key_type|input_panel_return_key_type]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:input_panel_show|input_panel_show]]** | %%Show the input panel (virtual keyboard) based on the input panel property of entry such as layout, autocapital types, and so on.%% |
|  | **[[:develop:api:efl:ui:text:property:input_panel_show_on_demand|input_panel_show_on_demand]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:item_provider_append|item_provider_append]]** | %%This appends a custom item provider to the list for that entry%% |
|  | **[[:develop:api:efl:ui:text:method:item_provider_prepend|item_provider_prepend]]** | %%This prepends a custom item provider to the list for that entry%% |
|  | **[[:develop:api:efl:ui:text:method:item_provider_remove|item_provider_remove]]** | %%This removes a custom item provider to the list for that entry%% |
|  | **[[:develop:api:efl:ui:text:property:name|name]]** //**(get, set)**// | %%Accessible name of the object.%% |
|  | **[[:develop:api:efl:ui:text:property:password|password]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:policy|policy]]** //**(get, set)**// | %%Scrollbar visibility policy%% |
|  | **[[:develop:api:efl:ui:text:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:ui:text:property:prediction_allow|prediction_allow]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:property:scrollable|scrollable]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:selection_copy|selection_copy]]** | %%This executes a "copy" action on the selected text in the entry.%% |
|  | **[[:develop:api:efl:ui:text:method:selection_cut|selection_cut]]** | %%This executes a "cut" action on the selected text in the entry.%% |
|  | **[[:develop:api:efl:ui:text:property:selection_handler_disabled|selection_handler_disabled]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:text:method:selection_paste|selection_paste]]** | %%This executes a "paste" action in the entry.%% |
|  | **[[:develop:api:efl:ui:text:method:signal_callback_add|signal_callback_add]]** | %%Adds a callback for an arriving Edje signal, emitted by a given Edje object.%% |
|  | **[[:develop:api:efl:ui:text:method:signal_callback_del|signal_callback_del]]** | %%Removes a signal-triggered callback from an object.%% |
|  | **[[:develop:api:efl:ui:text:method:signal_emit|signal_emit]]** | %%Sends/emits an Edje signal to this layout.%% |
|  | **[[:develop:api:efl:ui:text:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:ui:text:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:attribute|attribute]]** //**(get)**// | %%Indicate if a text attribute with a given name is set%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:attributes|attributes]]** //**(get)**// | %%Gets list of all text attributes.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:bounded_ranges|bounded_ranges]]** //**(get)**// | %%Bounded ranges%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:caret_offset|caret_offset]]** //**(get, set)**// | %%Caret offset property%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:character|character]]** //**(get)**// | %%Gets single character present in accessible widget's text at given offset.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:character_count|character_count]]** //**(get)**// | %%Character count%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:character_extents|character_extents]]** //**(get)**// | %%Character extents%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:content|content]]** //**(set)**// | %%Editable content property%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:copy|copy]]** | %%Copy text between start and end parameter%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:cut|cut]]** | %%Cut text between start and end parameter%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:default_attributes|default_attributes]]** //**(get)**// | %%Default attributes%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:delete|delete]]** | %%Delete text between start and end parameter%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:insert|insert]]** | %%Insert text at given position%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:interest_region|interest_region]]** //**(get)**// | %%Region of interest inside this widget, that should be given priority to be visible inside a scroller.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:offset_at_point|offset_at_point]]** //**(get)**// | %%Offset at given point%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:on_access_activate|on_access_activate]]** | %%Hook function called when widget is activated through accessibility.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:on_disabled_update|on_disabled_update]]** | %%Virtual function called when the widget becomes disabled.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:on_focus_update|on_focus_update]]** | %%Virtual function handling focus in/out events on the widget%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:paste|paste]]** | %%Paste text at given position%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:range_extents|range_extents]]** //**(get)**// | %%Range extents%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:selection|selection]]** //**(get, set)**// | %%Selection property%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:selection_add|selection_add]]** | %%Add selection%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:selection_remove|selection_remove]]** | %%Remove selection%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:selections_count|selections_count]]** //**(get)**// | %%Selection count property%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:state_set|state_set]]** //**(get)**// | %%Gets set describing object accessible states.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:string|string]]** //**(get)**// | %%Gets string, start and end offset in text according to given initial offset and granularity.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:property:text|text]]** //**(get)**// | %%Gets text of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:theme_apply|theme_apply]]** | %%Virtual function called when the widget needs to re-apply its theme.%% |
|  ''protected'' | **[[:develop:api:efl:ui:text:method:widget_sub_object_del|widget_sub_object_del]]** | %%Virtual function handling sub objects being removed.%% |
^ [[:develop:api:efl:ui:text:interactive|Efl.Ui.Text.Interactive]] ^^^
|  | **[[:develop:api:efl:ui:text:interactive:property:selection_allowed|selection_allowed]]** //**(get, set)**// | %%Whether or not selection is allowed on this object%% |
|  | **[[:develop:api:efl:ui:text:interactive:property:selection_cursors|selection_cursors]]** //**(get)**// | %%The cursors used for selection handling.%% |
^ [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] ^^^
|  | **[[:develop:api:efl:ui:translatable:property:translatable_text|translatable_text]]** //**(get, set)**// | %%A unique string to be translated.%% |
^ [[:develop:api:elm:interface_scrollable|Elm.Interface_Scrollable]] ^^^
|  | **[[:develop:api:elm:interface_scrollable:property:animate_start_cb|animate_start_cb]]** //**(set)**// | %%Set the callback to run when the scrolling animation has started.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:animate_stop_cb|animate_stop_cb]]** //**(set)**// | %%Set the callback to run when the scrolling animation has stopped.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:border_elements|border_elements]]** //**(get)**// | %%The list of elements which are at the border of the graph.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:bounce_animator_disabled|bounce_animator_disabled]]** //**(get, set)**// | %%Bounce animator%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_min_limit|content_min_limit]]** | %%Prevent the scrollable from being smaller than the minimum size of the content.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_min_limit_cb|content_min_limit_cb]]** //**(set)**// | %%set the callback to run on minimal limit content%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_pos_get|content_pos_get]]** | %%Get content position%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_pos_set|content_pos_set]]** | %%Set the content position%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_region|content_region]]** //**(get, set)**// | %%Currently visible content region%% |
|  | **[[:develop:api:elm:interface_scrollable:method:content_region_show|content_region_show]]** | %%Show a specific virtual region within the scroller content object%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_size|content_size]]** //**(get)**// | %%Get the size of the content object%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_viewport_geometry|content_viewport_geometry]]** //**(get)**// | %%Content viewport geometry%% |
|  | **[[:develop:api:elm:interface_scrollable:property:content_viewport_resize_cb|content_viewport_resize_cb]]** //**(set)**// | %%When the viewport is resized, the callback is called.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:current_page|current_page]]** //**(get)**// | %%Get scroll current page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:drag_start_cb|drag_start_cb]]** //**(set)**// | %%Set the callback to run when dragging of the contents has started.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:drag_stop_cb|drag_stop_cb]]** //**(set)**// | %%Set the callback to run when dragging of the contents has stopped.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_bottom_cb|edge_bottom_cb]]** //**(set)**// | %%Set the callback to run when the bottom edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_left_cb|edge_left_cb]]** //**(set)**// | %%Set the callback to run when the left edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_right_cb|edge_right_cb]]** //**(set)**// | %%Set the callback to run when the right edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:edge_top_cb|edge_top_cb]]** //**(set)**// | %%Set the callback to run when the top edge of the content has been reached.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:extern_pan|extern_pan]]** //**(set)**// | %%Extern pan%% |
|  | **[[:develop:api:elm:interface_scrollable:property:freeze|freeze]]** //**(set)**// | %%Freeze property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:gravity|gravity]]** //**(get, set)**// | %%Control scrolling gravity on the scrollable%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hbar_drag_cb|hbar_drag_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is dragged.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hbar_press_cb|hbar_press_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is pressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hbar_unpress_cb|hbar_unpress_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is unpressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:hold|hold]]** //**(set)**// | %%Hold property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:item_loop_enabled|item_loop_enabled]]** //**(get, set)**// | %%Whether scrolling should loop around.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:last_page|last_page]]** //**(get)**// | %%Get scroll last page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:loop|loop]]** //**(get, set)**// | %%Controls an infinite loop for a scroller.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:mirrored|mirrored]]** //**(set)**// | %%Mirroed property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:momentum_animator_disabled|momentum_animator_disabled]]** //**(get, set)**// | %%Momentum animator%% |
|  | **[[:develop:api:elm:interface_scrollable:property:movement_block|movement_block]]** //**(get, set)**// | %%Blocking of scrolling (per axis)%% |
|  | **[[:develop:api:elm:interface_scrollable:property:objects|objects]]** //**(set)**// | %%Object property%% |
|  | **[[:develop:api:elm:interface_scrollable:method:page_bring_in|page_bring_in]]** | %%Show a specific virtual region within the scroller content object by page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_change_cb|page_change_cb]]** //**(set)**// | %%Set the callback to run when the visible page changes.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_relative|page_relative]]** //**(set)**// | %%Set scroll page size relative to viewport size.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_scroll_limit|page_scroll_limit]]** //**(get, set)**// | %%Page scroll limit%% |
|  | **[[:develop:api:elm:interface_scrollable:method:page_show|page_show]]** | %%Show a specific virtual region within the scroller content object by page number.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_size|page_size]]** //**(get, set)**// | %%Scroll page size relative to viewport size.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:page_snap_allow|page_snap_allow]]** //**(get, set)**// | %%Page snapping behavior%% |
|  | **[[:develop:api:elm:interface_scrollable:property:paging|paging]]** //**(get, set)**// | %%Pagin property%% |
|  | **[[:develop:api:elm:interface_scrollable:method:region_bring_in|region_bring_in]]** | %%Show a specific virtual region within the scroller content object.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:repeat_events|repeat_events]]** //**(get, set)**// | %%It decides whether the scrollable object propagates the events to content object or not.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_cb|scroll_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_down_cb|scroll_down_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved down.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_left_cb|scroll_left_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved to the left%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_right_cb|scroll_right_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved to the right.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scroll_up_cb|scroll_up_cb]]** //**(set)**// | %%Set the callback to run when the content has been moved up.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:scrollable_content|scrollable_content]]** //**(set)**// | %%Content property%% |
|  | **[[:develop:api:elm:interface_scrollable:property:single_direction|single_direction]]** //**(get, set)**// | %%Single direction scroll configuration%% |
|  | **[[:develop:api:elm:interface_scrollable:property:step_size|step_size]]** //**(get, set)**// | %%Step size%% |
|  | **[[:develop:api:elm:interface_scrollable:property:vbar_drag_cb|vbar_drag_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is dragged.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:vbar_press_cb|vbar_press_cb]]** //**(set)**// | %%Set the callback to run when the vertical scrollbar is pressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:vbar_unpress_cb|vbar_unpress_cb]]** //**(set)**// | %%Set the callback to run when the horizontal scrollbar is unpressed.%% |
|  | **[[:develop:api:elm:interface_scrollable:property:wheel_disabled|wheel_disabled]]** //**(get, set)**// | %%Control Wheel disable Enable or disable mouse wheel to be used to scroll the scroller content. heel is enabled by default.%% |
^ [[:develop:api:elm:widget|Elm.Widget]] ^^^
|  | **[[:develop:api:elm:widget:property:access_info|access_info]]** //**(get, set)**// | %%Accessibility information.%% |
|  | **[[:develop:api:elm:widget:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:cursor|cursor]]** //**(get, set)**// | %%The cursor to be shown when mouse is over the object%% |
|  | **[[:develop:api:elm:widget:property:cursor_style|cursor_style]]** //**(get, set)**// | %%A different style for the cursor.%% |
|  | **[[:develop:api:elm:widget:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// | %%Whether the cursor may be looked in the theme or not.%% |
|  | **[[:develop:api:elm:widget:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:elm:widget:property:disabled|disabled]]** //**(get, set)**// | %%Whether the widget is enabled (accepts and reacts to user inputs).%% |
|  ''protected set'' | **[[:develop:api:elm:widget:property:focus|focus]]** //**(get, set)**// | %%This gets called by the manager and should never be called by someone else.%% |
|  | **[[:develop:api:elm:widget:property:focus_allow|focus_allow]]** //**(get, set)**// | %%The ability for a widget to be focused.%% |
|  | **[[:develop:api:elm:widget:property:focus_geometry|focus_geometry]]** //**(get)**// | %%The geometry to use to calculate the relations to other objects.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_animate|focus_highlight_animate]]** //**(get, set)**// | %%Whether focus highlight should animate or not.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_enabled|focus_highlight_enabled]]** //**(get, set)**// | %%Whether focus highlight is enabled or not.%% |
|  | **[[:develop:api:elm:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**// | %%Control the widget focus highlight style.%% |
|  | **[[:develop:api:elm:widget:property:focus_manager|focus_manager]]** //**(get)**// | %%Describes which manager is used to register.%% |
|  | **[[:develop:api:elm:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**// | %%The widget's focus move policy.%% |
|  | **[[:develop:api:elm:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**// | %%Control the widget's focus_move_policy mode setting.%% |
|  | **[[:develop:api:elm:widget:property:focus_parent|focus_parent]]** //**(get)**// | %%Describes which logical parent is used by this object.%% |
|  | **[[:develop:api:elm:widget:property:focused_item|focused_item]]** //**(get)**// | %%Get the focused widget item.%% |
|  | **[[:develop:api:elm:widget:method:group_member_del|group_member_del]]** | %%Removes a member object from a given smart object.%% |
|  | **[[:develop:api:elm:widget:property:interest_region_mode|interest_region_mode]]** //**(get, set)**// | %%Defines how %%[[:develop:api:elm:widget:property:show_region|Elm.Widget.show_region]]%% should be calculated.%% |
|  | **[[:develop:api:elm:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:elm:widget:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:elm:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |
|  | **[[:develop:api:elm:widget:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:elm:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**// | %%Whether the widget's automatic orientation is disabled or not.%% |
|  | **[[:develop:api:elm:widget:property:parent|parent]]** //**(get, set)**// | %%Object's accessible parent.%% |
|  | **[[:develop:api:elm:widget:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:elm:widget:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:elm:widget:method:scroll_freeze_pop|scroll_freeze_pop]]** | %%Pop scroller freeze%% |
|  | **[[:develop:api:elm:widget:method:scroll_freeze_push|scroll_freeze_push]]** | %%Push scroller freeze%% |
|  | **[[:develop:api:elm:widget:method:scroll_hold_pop|scroll_hold_pop]]** | %%Pop scroller hold%% |
|  | **[[:develop:api:elm:widget:method:scroll_hold_push|scroll_hold_push]]** | %%Push scroll hold%% |
|  ''protected set'' | **[[:develop:api:elm:widget:property:style|style]]** //**(get, set)**// | %%The widget style to use.%% |
|  | **[[:develop:api:elm:widget:property:widget_top|widget_top]]** //**(get)**// | %%Root widget in the widget hierarchy.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:attributes|attributes]]** //**(get)**// | %%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:children|children]]** //**(get)**// | %%Gets object's accessible children.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_grab|focus_grab]]** | %%Focuses accessible widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:focus_highlight_geometry|focus_highlight_geometry]]** //**(get)**// | %%The rectangle region to be highlighted on focus.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_manager_create|focus_manager_create]]** | %%If the widget needs a focus manager, this function will be called.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:focus_state_apply|focus_state_apply]]** | %%Register focus with the given configuration.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_access_update|on_access_update]]** | %%Hook function called when accessibility is changed on the widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:on_orientation_update|on_orientation_update]]** | %%Virtual function handling canvas orientation changes.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**// | %%Hook function called when the %%[[:develop:api:elm:widget:property:show_region|Elm.Widget.show_region]]%% is changed.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:resize_object|resize_object]]** //**(set)**// | %%This is the internal canvas object managed by a widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:show_region|show_region]]** //**(get, set)**// | %%Region inside the widget to show.%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:translation_update|translation_update]]** | %%This implements the calls to %%''gettext''%%() and %%''text_set''%%().%% |
|  ''protected'' | **[[:develop:api:elm:widget:method:widget_event|widget_event]]** | %%Virtual function handling input events on the widget.%% |
|  ''protected'' | **[[:develop:api:elm:widget:property:widget_parent|widget_parent]]** //**(get, set)**// | %%The internal parent of this widget.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:event:active_descendant_changed|active,descendant,changed]]** | %%Called when active state of descendant has changed%% |
|  | **[[:develop:api:efl:access:event:added|added]]** | %%Called when item was added%% |
|  | **[[:develop:api:efl:access:event:bounds_changed|bounds,changed]]** | %%Called when bounds have changed%% |
|  | **[[:develop:api:efl:access:event:children_changed|children,changed]]** | %%Called when children have changed%% |
|  | **[[:develop:api:efl:access:event:property_changed|property,changed]]** | %%Called when roperty has changed%% |
|  | **[[:develop:api:efl:access:event:removed|removed]]** | %%Called when item was removed%% |
|  | **[[:develop:api:efl:access:event:state_changed|state,changed]]** | %%Called when tate has changed%% |
|  | **[[:develop:api:efl:access:event:visible_data_changed|visible,data,changed]]** | %%Called when visibility has changed%% |
^ [[:develop:api:efl:access:text|Efl.Access.Text]] ^^^
|  | **[[:develop:api:efl:access:text:event:access_text_attributes_changed|access,text,attributes,changed]]** | %%Text attributes have changed%% |
|  | **[[:develop:api:efl:access:text:event:access_text_bounds_changed|access,text,bounds,changed]]** | %%Text bounds have changed%% |
|  | **[[:develop:api:efl:access:text:event:access_text_caret_moved|access,text,caret,moved]]** | %%Caret moved%% |
|  | **[[:develop:api:efl:access:text:event:access_text_inserted|access,text,inserted]]** | %%Text was inserted%% |
|  | **[[:develop:api:efl:access:text:event:access_text_removed|access,text,removed]]** | %%Text was removed%% |
|  | **[[:develop:api:efl:access:text:event:access_text_selection_changed|access,text,selection,changed]]** | %%Text selection has changed%% |
^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:event:content_added|content,added]]** | %%Sent after a new item was added.%% |
|  | **[[:develop:api:efl:container:event:content_removed|content,removed]]** | %%Sent after an item was removed, before unref.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:layout:calc|Efl.Layout.Calc]] ^^^
|  | **[[:develop:api:efl:layout:calc:event:circular_dependency|circular,dependency]]** | %%A circular dependency between parts of the object was found.%% |
|  | **[[:develop:api:efl:layout:calc:event:recalc|recalc]]** | %%The layout was recalculated.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
^ [[:develop:api:efl:ui:clickable|Efl.Ui.Clickable]] ^^^
|  | **[[:develop:api:efl:ui:clickable:event:clicked|clicked]]** | %%Called when object iss clicked%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_double|clicked,double]]** | %%Called when object receives a double click%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_right|clicked,right]]** | %%Called when object receives a right click%% |
|  | **[[:develop:api:efl:ui:clickable:event:clicked_triple|clicked,triple]]** | %%Called when object receives a triple click%% |
|  | **[[:develop:api:efl:ui:clickable:event:longpressed|longpressed]]** | %%Called when the object receives a long press%% |
|  | **[[:develop:api:efl:ui:clickable:event:pressed|pressed]]** | %%Called when the object is pressed%% |
|  | **[[:develop:api:efl:ui:clickable:event:repeated|repeated]]** | %%Called when the object receives repeated presses/clicks%% |
|  | **[[:develop:api:efl:ui:clickable:event:unpressed|unpressed]]** | %%Called when the object is no longer pressed%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]** | %%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:flush_pre|flush,pre]]** | %%Emitted once the graph calculationg will be performed%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:focused|focused]]** | %%Emitted if the manager has focused an object, the passed focus object is the last focused object%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]** | %%Emitted when the redirect object has changed, the old manager is passed as event info%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:event:focus_changed|focus,changed]]** | %%Emitted if the focus state has changed%% |
^ [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] ^^^
|  | **[[:develop:api:efl:ui:focus:user:event:logical_changed|logical,changed]]** | %%Emitted when a new logical parent should be used.%% |
|  | **[[:develop:api:efl:ui:focus:user:event:manager_changed|manager,changed]]** | %%Emitted when a new manager is the parent for this object.%% |
^ [[:develop:api:efl:ui:layout|Efl.Ui.Layout]] ^^^
|  | **[[:develop:api:efl:ui:layout:event:theme_changed|theme,changed]]** | %%Called when theme changed%% |
^ [[:develop:api:efl:ui:scrollable|Efl.Ui.Scrollable]] ^^^
|  | **[[:develop:api:efl:ui:scrollable:event:edge_down|edge,down]]** | %%Called when hitting the bottom edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_left|edge,left]]** | %%Called when hitting the left edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_right|edge,right]]** | %%Called when hitting the right edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:edge_up|edge,up]]** | %%Called when hitting the top edge%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll|scroll]]** | %%Called when scrolling%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_start|scroll,anim,start]]** | %%Called when scroll animation starts%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_anim_stop|scroll,anim,stop]]** | %%Called when scroll animation stopps%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_down|scroll,down]]** | %%Called when scrolling downwards%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_start|scroll,drag,start]]** | %%Called when scroll drag starts%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_drag_stop|scroll,drag,stop]]** | %%Called when scroll drag stops%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_left|scroll,left]]** | %%Called when scrolling left%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_right|scroll,right]]** | %%Called when scrolling right%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_start|scroll,start]]** | %%Called when scroll operation starts%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_stop|scroll,stop]]** | %%Called when scroll operation stops%% |
|  | **[[:develop:api:efl:ui:scrollable:event:scroll_up|scroll,up]]** | %%Called when scrolling upwards%% |
^ [[:develop:api:efl:ui:selectable|Efl.Ui.Selectable]] ^^^
|  | **[[:develop:api:efl:ui:selectable:event:selected|selected]]** | %%Called when selected%% |
|  | **[[:develop:api:efl:ui:selectable:event:selection_changed|selection,changed]]** | %%Called when selection is changed%% |
|  | **[[:develop:api:efl:ui:selectable:event:selection_cleared|selection,cleared]]** | %%Called when selection is cleared%% |
|  | **[[:develop:api:efl:ui:selectable:event:selection_copy|selection,copy]]** | %%Called when selection is copied%% |
|  | **[[:develop:api:efl:ui:selectable:event:selection_cut|selection,cut]]** | %%Called when selection is cut%% |
|  | **[[:develop:api:efl:ui:selectable:event:selection_paste|selection,paste]]** | %%Called when selection is pasted%% |
|  | **[[:develop:api:efl:ui:selectable:event:selection_start|selection,start]]** | %%Called at selection start%% |
|  | **[[:develop:api:efl:ui:selectable:event:unselected|unselected]]** | %%Called when no longer selected%% |
^ [[:develop:api:efl:ui:text|Efl.Ui.Text]] ^^^
|  | **[[:develop:api:efl:ui:text:event:aborted|aborted]]** | %%Called when entry was aborted%% |
|  | **[[:develop:api:efl:ui:text:event:activated|activated]]** | %%Called when entry got activated%% |
|  | **[[:develop:api:efl:ui:text:event:anchor_clicked|anchor,clicked]]** | %%Called when anchor was clicked%% |
|  | **[[:develop:api:efl:ui:text:event:anchor_down|anchor,down]]** | %%Called on anchor down%% |
|  | **[[:develop:api:efl:ui:text:event:anchor_hover_opened|anchor,hover,opened]]** | %%Called when hover opened%% |
|  | **[[:develop:api:efl:ui:text:event:anchor_in|anchor,in]]** | %%Called on anchor in%% |
|  | **[[:develop:api:efl:ui:text:event:anchor_out|anchor,out]]** | %%Called on anchor out%% |
|  | **[[:develop:api:efl:ui:text:event:anchor_up|anchor,up]]** | %%called on anchor up%% |
|  | **[[:develop:api:efl:ui:text:event:changed|changed]]** | %%Called when entry changed%% |
|  | **[[:develop:api:efl:ui:text:event:changed_user|changed,user]]** | %%The text object has changed due to user interaction%% |
|  | **[[:develop:api:efl:ui:text:event:context_open|context,open]]** | %%Called when context menu was opened%% |
|  | **[[:develop:api:efl:ui:text:event:cursor_changed|cursor,changed]]** | %%Called on cursor changed%% |
|  | **[[:develop:api:efl:ui:text:event:cursor_changed_manual|cursor,changed,manual]]** | %%Called on manual cursor change%% |
|  | **[[:develop:api:efl:ui:text:event:maxlength_reached|maxlength,reached]]** | %%Called when maximum entry length has been reached%% |
|  | **[[:develop:api:efl:ui:text:event:preedit_changed|preedit,changed]]** | %%Called when entry preedit changed%% |
|  | **[[:develop:api:efl:ui:text:event:press|press]]** | %%Called when entry pressed%% |
|  | **[[:develop:api:efl:ui:text:event:redo_request|redo,request]]** | %%Called when redo was requested%% |
|  | **[[:develop:api:efl:ui:text:event:rejected|rejected]]** | %%Called when entry was rejected%% |
|  | **[[:develop:api:efl:ui:text:event:text_set_done|text,set,done]]** | %%Called when text set finished%% |
|  | **[[:develop:api:efl:ui:text:event:undo_request|undo,request]]** | %%Called when undo was requested%% |
|  | **[[:develop:api:efl:ui:text:event:validate|validate]]** | %%Called when validating%% |
^ [[:develop:api:elm:widget|Elm.Widget]] ^^^
|  | **[[:develop:api:elm:widget:event:access_changed|access,changed]]** | %%Called when accessibility changed%% |
|  | **[[:develop:api:elm:widget:event:language_changed|language,changed]]** | %%Called when widget language changed%% |
|  | **[[:develop:api:elm:widget:event:moved|moved]]** | %%Called when widget moved%% |
