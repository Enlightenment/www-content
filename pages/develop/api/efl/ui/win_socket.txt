~~Title: Efl.Ui.Win_Socket~~
====== Efl.Ui.Win_Socket (class) ======

===== Description =====

%%An off-screen window to be displayed in a remote process.%%

%%The window is rendered onto an image buffer to be displayed in another process' plug image object. No actual window is created for this type. The window contents can then be sent over a socket so that another process displays it inside a plug image.%%

{{page>:develop:api-include:efl:ui:win_socket:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:ui:win|Efl.Ui.Win]] //(class)// => [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] //(class)// => [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:ui:win|Efl.Ui.Win]] //(class)//
    * [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] //(class)//
      * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
        * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
          * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
          * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
          * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
          * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
          * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
          * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
            * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
            * [[:develop:api:efl:object|Efl.Object]] //(class)//
          * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
          * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
      * [[:develop:api:efl:access|Efl.Access]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
      * [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
      * [[:develop:api:efl:part|Efl.Part]] //(interface)//
      * [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
      * [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
      * [[:develop:api:efl:selection|Efl.Selection]] //(mixin)//
      * [[:develop:api:efl:ui:dnd|Efl.Ui.Dnd]] //(mixin)//
    * [[:develop:api:efl:canvas|Efl.Canvas]] //(interface)//
    * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
    * [[:develop:api:efl:access:window|Efl.Access.Window]] //(interface)//
    * [[:develop:api:efl:access:component|Efl.Access.Component]] //(mixin)//
    * [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]] //(mixin)//
      * [[:develop:api:efl:access:action|Efl.Access.Action]] //(mixin)//
    * [[:develop:api:efl:content|Efl.Content]] //(interface)//
    * [[:develop:api:efl:input:state|Efl.Input.State]] //(interface)//
    * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
    * [[:develop:api:efl:screen|Efl.Screen]] //(interface)//
    * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
    * [[:develop:api:efl:text|Efl.Text]] //(interface)//
    * [[:develop:api:efl:config:global|Efl.Config.Global]] //(class)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:config|Efl.Config]] //(interface)//
    * [[:develop:api:efl:part|Efl.Part]] //(interface)//
    * [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:ui:win_socket:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of efl_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:ui:win_socket:method:socket_listen|socket_listen]]**\\
> %%Create a socket to provide the service for Plug widget.%%
<code c>
Eina_Bool efl_ui_win_socket_listen(Eo *obj, const char *svcname, int svcnum, Eina_Bool svcsys);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:method:attribute_append|attribute_append]]** | %%Add key-value pair identifying object extra attributes%% |
|  | **[[:develop:api:efl:access:method:attributes_clear|attributes_clear]]** | %%Removes all attributes in accessible object.%% |
|  | **[[:develop:api:efl:access:property:description|description]]** //**(get, set)**// | %%Contextual information about object.%% |
|  | **[[:develop:api:efl:access:method:relationship_append|relationship_append]]** | %%Defines the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationship_remove|relationship_remove]]** | %%Removes the relationship between two accessible objects.%% |
|  | **[[:develop:api:efl:access:method:relationships_clear|relationships_clear]]** | %%Removes all relationships in accessible object.%% |
|  | **[[:develop:api:efl:access:property:role|role]]** //**(get, set)**// | %%The role of the object in accessibility domain.%% |
|  ''class'' | **[[:develop:api:efl:access:property:root|root]]** //**(get)**// | %%Get root object of accessible object hierarchy%% |
|  | **[[:develop:api:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**// | %%The translation domain of "name" and "description" properties.%% |
|  | **[[:develop:api:efl:access:property:type|type]]** //**(get, set)**// | %%Type of accessibility object%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_emit|event_emit]]** | %%Emit event%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_add|event_handler_add]]** | %%Register accessibility event listener%% |
|  ''class'' ''protected'' | **[[:develop:api:efl:access:method:event_handler_del|event_handler_del]]** | %%Deregister accessibility event listener%% |
|  ''protected'' | **[[:develop:api:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// | %%Gets index of the child in parent's children list.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// | %%Gets an localized string describing accessible object role name.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:reading_info_type|reading_info_type]]** //**(get, set)**// |  |
|  ''protected'' | **[[:develop:api:efl:access:property:relation_set|relation_set]]** //**(get)**// | %%Gets an all relations between accessible object and other accessible objects.%% |
|  ''protected'' | **[[:develop:api:efl:access:property:role_name|role_name]]** //**(get)**// | %%Gets human-readable string indentifying object accessibility role.%% |
^ [[:develop:api:efl:access:action|Efl.Access.Action]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:action:property:action_localized_name|action_localized_name]]** //**(get)**// | %%Gets localized action name for given id%% |
^ [[:develop:api:efl:access:component|Efl.Access.Component]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** | %%Gets top component object occupying space at given coordinates.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:alpha|alpha]]** //**(get)**// | %%Gets alpha of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:method:contains|contains]]** | %%Contains accessible widget%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:layer|layer]]** //**(get)**// | %%Evas layer of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:position|position]]** //**(get, set)**// | %%Position of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:size|size]]** //**(get, set)**// | %%Size of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:component:property:z_order|z_order]]** //**(get)**// | %%Gets the depth at which the component is shown in relation to other components in the same container.%% |
^ [[:develop:api:efl:access:widget:action|Efl.Access.Widget.Action]] ^^^
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:action_description|action_description]]** //**(get, set)**// | %%Action description for given id%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:method:action_do|action_do]]** | %%Performs action on given widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:method:action_keybinding_get|action_keybinding_get]]** | %%Gets configured keybinding for specific action and widget.%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:action_name|action_name]]** //**(get)**// | %%Gets action name for given id%% |
|  ''protected'' | **[[:develop:api:efl:access:widget:action:property:actions|actions]]** //**(get)**// | %%Get list of available widget actions%% |
^ [[:develop:api:efl:canvas|Efl.Canvas]] ^^^
|  | **[[:develop:api:efl:canvas:method:seats|seats]]** | %%Iterate over the input device seats.%% |
^ [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] ^^^
|  | **[[:develop:api:efl:canvas:group:method:group_change|group_change]]** | %%Marks the object as dirty.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_is|group_member_is]]** | %%Finds out if a given object is a member of this group.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_members_iterate|group_members_iterate]]** | %%Returns an iterator over the children of this object, which are canvas objects.%% |
|  | **[[:develop:api:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**// | %%Indicates that the group's layout needs to be recalculated.%% |
|  | **[[:develop:api:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// | %%The internal clipper object used by this group.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:config:global|Efl.Config.Global]] ^^^
|  | **[[:develop:api:efl:config:global:property:config|config]]** //**(get, set)**// | %%A generic configuration value, refered to by name.%% |
|  | **[[:develop:api:efl:config:global:property:profile|profile]]** //**(get, set)**// | %%The profile for the running application.%% |
|  | **[[:develop:api:efl:config:global:method:profile_dir_get|profile_dir_get]]** | %%Returns the directory where a profile is stored.%% |
|  | **[[:develop:api:efl:config:global:method:profile_exists|profile_exists]]** | %%Returns whether a profile exists or not.%% |
|  | **[[:develop:api:efl:config:global:method:profile_iterate|profile_iterate]]** | %%Returns the list of available profiles.%% |
|  ''protected'' | **[[:develop:api:efl:config:global:method:profile_derived_add|profile_derived_add]]** | %%Add a new profile of the given name to be derived from the current profile.%% |
|  ''protected'' | **[[:develop:api:efl:config:global:method:profile_derived_del|profile_derived_del]]** | %%Deletes a profile that is derived from the current one.%% |
|  ''protected'' | **[[:develop:api:efl:config:global:method:save|save]]** | %%Saves Elementary configuration to disk.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lighting effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lighting effect to the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:selection|Efl.Selection]] ^^^
|  | **[[:develop:api:efl:selection:method:has_owner|has_owner]]** | %%Determine whether the selection data has owner%% |
|  | **[[:develop:api:efl:selection:method:selection_clear|selection_clear]]** | %%Clear the selection data from the object%% |
|  | **[[:develop:api:efl:selection:method:selection_get|selection_get]]** | %%Get the data from the object that has selection%% |
|  | **[[:develop:api:efl:selection:method:selection_set|selection_set]]** | %%Set the selection data to the object%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
^ [[:develop:api:efl:ui:dnd|Efl.Ui.Dnd]] ^^^
|  | **[[:develop:api:efl:ui:dnd:method:drag_action_set|drag_action_set]]** | %%Set the action for the drag%% |
|  | **[[:develop:api:efl:ui:dnd:method:drag_cancel|drag_cancel]]** | %%Cancel the on-going drag%% |
|  | **[[:develop:api:efl:ui:dnd:method:drag_start|drag_start]]** | %%Start a drag and drop process at the drag side. During dragging, there are three events emitted as belows: - EFL_UI_DND_EVENT_DRAG_POS - EFL_UI_DND_EVENT_DRAG_ACCEPT - EFL_UI_DND_EVENT_DRAG_DONE%% |
|  | **[[:develop:api:efl:ui:dnd:method:drop_target_add|drop_target_add]]** | %%Make the current object as drop targert. There are four events emitted: - EFL_UI_DND_EVENT_DRAG_ENTER - EFL_UI_DND_EVENT_DRAG_LEAVE - EFL_UI_DND_EVENT_DRAG_POS - EFL_UI_DND_EVENT_DRAG_DROP.%% |
|  | **[[:develop:api:efl:ui:dnd:method:drop_target_del|drop_target_del]]** | %%Delete the dropable status from object%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:property:border_elements|border_elements]]** //**(get)**// | %%The list of elements which are at the border of the graph.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:fetch|fetch]]** | %%This will fetch the data from a registered node.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:logical_end|logical_end]]** | %%Return the last logical object.%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:manager_focus|manager_focus]]** //**(get, set)**// | %%The element which is currently focused by this manager%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:move|move]]** | %%Move the focus into the given direction.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:pop_history_stack|pop_history_stack]]** | %%Removes the most upper history element, and gives the focus to the next one below%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**// | %%Add a another manager to serve the move requests.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:request_move|request_move]]** | %%Returns the object which would be the next object to focus in the given direction.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:request_subchild|request_subchild]]** | %%Returns a widget that can receive focus%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:reset_history|reset_history]]** | %%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%% |
|  | **[[:develop:api:efl:ui:focus:manager:property:root|root]]** //**(get, set)**// | %%Root node for all logical subtrees.%% |
|  | **[[:develop:api:efl:ui:focus:manager:method:setup_on_first_touch|setup_on_first_touch]]** | %%Called when this manager is set as redirect%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:method:prepare_logical|prepare_logical]]** | %%Tells the object that its children will be queried soon by the given manager.%% |
^ [[:develop:api:efl:ui:translatable|Efl.Ui.Translatable]] ^^^
|  | **[[:develop:api:efl:ui:translatable:property:translatable_text|translatable_text]]** //**(get, set)**// | %%A unique string to be translated.%% |
^ [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] ^^^
|  | **[[:develop:api:efl:ui:widget:property:access_info|access_info]]** //**(get, set)**// | %%Accessibility information.%% |
|  | **[[:develop:api:efl:ui:widget:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:widget:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:widget:property:cursor|cursor]]** //**(get, set)**// | %%The cursor to be shown when mouse is over the object%% |
|  | **[[:develop:api:efl:ui:widget:property:cursor_style|cursor_style]]** //**(get, set)**// | %%A different style for the cursor.%% |
|  | **[[:develop:api:efl:ui:widget:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// | %%Whether the cursor may be looked in the theme or not.%% |
|  | **[[:develop:api:efl:ui:widget:property:disabled|disabled]]** //**(get, set)**// | %%Whether the widget is enabled (accepts and reacts to user inputs).%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_allow|focus_allow]]** //**(get, set)**// | %%The ability for a widget to be focused.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_geometry|focus_geometry]]** //**(get)**// | %%The geometry used to calculate relationships between other objects.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_manager|focus_manager]]** //**(get)**// | %%Describes which manager is used to register.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**// | %%The widget's focus move policy.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**// | %%Control the widget's focus_move_policy mode setting.%% |
|  | **[[:develop:api:efl:ui:widget:property:focus_parent|focus_parent]]** //**(get)**// | %%Describes which logical parent is used by this object.%% |
|  | **[[:develop:api:efl:ui:widget:property:focused_item|focused_item]]** //**(get)**// | %%Get the focused widget item.%% |
|  | **[[:develop:api:efl:ui:widget:method:group_calculate|group_calculate]]** | %%Triggers an immediate recalculation of this object's geometry.%% |
|  | **[[:develop:api:efl:ui:widget:method:group_member_add|group_member_add]]** | %%Set a canvas object as a member of a given group (or smart object).%% |
|  | **[[:develop:api:efl:ui:widget:method:group_member_del|group_member_del]]** | %%Removes a member object from a given smart object.%% |
|  | **[[:develop:api:efl:ui:widget:property:interest_region_mode|interest_region_mode]]** //**(get, set)**// | %%Defines how %%[[:develop:api:efl:ui:widget:property:show_region|Efl.Ui.Widget.show_region]]%% should be calculated.%% |
|  | **[[:develop:api:efl:ui:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:efl:ui:widget:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:efl:ui:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |
|  | **[[:develop:api:efl:ui:widget:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**// | %%Whether the widget's automatic orientation is disabled or not.%% |
|  | **[[:develop:api:efl:ui:widget:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_freeze_pop|scroll_freeze_pop]]** | %%Pop scroller freeze%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_freeze_push|scroll_freeze_push]]** | %%Push scroller freeze%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_hold_pop|scroll_hold_pop]]** | %%Pop scroller hold%% |
|  | **[[:develop:api:efl:ui:widget:method:scroll_hold_push|scroll_hold_push]]** | %%Push scroll hold%% |
|  ''protected set'' | **[[:develop:api:efl:ui:widget:property:style|style]]** //**(get, set)**// | %%The widget style to use.%% |
|  | **[[:develop:api:efl:ui:widget:property:widget_top|widget_top]]** //**(get)**// | %%Root widget in the widget hierarchy.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:attributes|attributes]]** //**(get)**// | %%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:children|children]]** //**(get)**// | %%Gets object's accessible children.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:focus_grab|focus_grab]]** | %%Focuses accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:focus_highlight_geometry|focus_highlight_geometry]]** //**(get)**// | %%The rectangle region to be highlighted on focus.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:focus_state_apply|focus_state_apply]]** | %%Register focus with the given configuration.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:interest_region|interest_region]]** //**(get)**// | %%Region of interest inside this widget, that should be given priority to be visible inside a scroller.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:on_access_activate|on_access_activate]]** | %%Hook function called when widget is activated through accessibility.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:on_access_update|on_access_update]]** | %%Hook function called when accessibility is changed on the widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:on_disabled_update|on_disabled_update]]** | %%Virtual function called when the widget becomes disabled.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:on_orientation_update|on_orientation_update]]** | %%Virtual function handling canvas orientation changes.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**// | %%Hook function called when the %%[[:develop:api:efl:ui:widget:property:show_region|Efl.Ui.Widget.show_region]]%% is changed.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:resize_object|resize_object]]** //**(set)**// | %%This is the internal canvas object managed by a widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:show_region|show_region]]** //**(get, set)**// | %%Region inside the widget to show.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:translation_update|translation_update]]** | %%This implements the calls to %%''gettext''%%() and %%''text_set''%%().%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:property:widget_parent|widget_parent]]** //**(get, set)**// | %%The internal parent of this widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:widget_sub_object_add|widget_sub_object_add]]** | %%Virtual function handling sub objects being added.%% |
|  ''protected'' | **[[:develop:api:efl:ui:widget:method:widget_sub_object_del|widget_sub_object_del]]** | %%Virtual function handling sub objects being removed.%% |
^ [[:develop:api:efl:ui:win|Efl.Ui.Win]] ^^^
|  | **[[:develop:api:efl:ui:win:property:accel_preference|accel_preference]]** //**(get, set)**// | %%The hardware acceleration preference for this window.%% |
|  | **[[:develop:api:efl:ui:win:method:activate|activate]]** | %%Activate a window object.%% |
|  | **[[:develop:api:efl:ui:win:property:alpha|alpha]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:autohide|autohide]]** //**(get, set)**// | %%Window's autohide state.%% |
|  | **[[:develop:api:efl:ui:win:property:borderless|borderless]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:method:center|center]]** | %%Center a window on the screen.%% |
|  | **[[:develop:api:efl:ui:win:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:ui:win:property:content|content]]** //**(get, set)**// | %%Swallowed sub-object contained in this object.%% |
|  | **[[:develop:api:efl:ui:win:method:content_unset|content_unset]]** | %%Unswallow the object in the current container and return it.%% |
|  | **[[:develop:api:efl:ui:win:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:ui:win:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:ui:win:property:device|device]]** //**(get)**// | %%An input device attached to this canvas, found by name.%% |
|  ''protected set'' | **[[:develop:api:efl:ui:win:property:focus|focus]]** //**(get, set)**// | %%This is called by the manager and should never be called by anyone else.%% |
|  | **[[:develop:api:efl:ui:win:property:focus_highlight_animate|focus_highlight_animate]]** //**(get, set)**// | %%Whether focus highlight should animate or not.%% |
|  | **[[:develop:api:efl:ui:win:property:focus_highlight_enabled|focus_highlight_enabled]]** //**(get, set)**// | %%Whether focus highlight is enabled or not.%% |
|  | **[[:develop:api:efl:ui:win:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**// | %%Control the widget focus highlight style.%% |
|  | **[[:develop:api:efl:ui:win:property:fullscreen|fullscreen]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:ui:win:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:ui:win:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:ui:win:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:ui:win:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:ui:win:property:icon_object|icon_object]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:iconified|iconified]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:image_max_size|image_max_size]]** //**(get)**// | %%Get the maximum image size evas can possibly handle.%% |
|  | **[[:develop:api:efl:ui:win:property:indicator_mode|indicator_mode]]** //**(get, set)**// | %%In some environments you may have an indicator that shows battery status, reception, time etc. This is the indicator.%% |
|  | **[[:develop:api:efl:ui:win:property:keyboard_mode|keyboard_mode]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:method:keygrab_set|keygrab_set]]** | %%Set keygrab value of the window%% |
|  | **[[:develop:api:efl:ui:win:method:keygrab_unset|keygrab_unset]]** | %%Unset keygrab value of the window%% |
|  | **[[:develop:api:efl:ui:win:property:lock_enabled|lock_enabled]]** //**(get)**// | %%Indicates whether a key lock is on, such as NumLock, CapsLock, ...%% |
|  | **[[:develop:api:efl:ui:win:method:lower|lower]]** | %%This action is ignored by the Window.%% |
|  | **[[:develop:api:efl:ui:win:property:maximized|maximized]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:modal|modal]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:modifier_enabled|modifier_enabled]]** //**(get)**// | %%Indicates whether a key modifier is on, such as Ctrl, Shift, ...%% |
|  | **[[:develop:api:efl:ui:win:method:move_resize_start|move_resize_start]]** | %%Start moving or resizing the window.%% |
|  | **[[:develop:api:efl:ui:win:property:name|name]]** //**(get, set)**// | %%Accessible name of the object.%% |
|  | **[[:develop:api:efl:ui:win:property:noblank|noblank]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:method:object_top_at_xy_get|object_top_at_xy_get]]** | %%Retrieve the object stacked at the top of a given position in a canvas.%% |
|  | **[[:develop:api:efl:ui:win:method:object_top_in_rectangle_get|object_top_in_rectangle_get]]** | %%Retrieve the Evas object stacked at the top of a given rectangular region in a canvas%% |
|  | **[[:develop:api:efl:ui:win:method:objects_at_xy_get|objects_at_xy_get]]** | %%Retrieve a list of objects lying over a given position in a canvas.%% |
|  | **[[:develop:api:efl:ui:win:method:objects_in_rectangle_get|objects_in_rectangle_get]]** | %%Retrieve a list of objects lying over a given rectangular region in a canvas.%% |
|  | **[[:develop:api:efl:ui:win:property:parent|parent]]** //**(get, set)**// | %%Object's accessible parent.%% |
|  | **[[:develop:api:efl:ui:win:method:part|part]]** | %%Returns %%[[:develop:api:efl:ui:widget:part|Efl.Ui.Widget.Part]]%%.%% |
|  | **[[:develop:api:efl:ui:win:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:ui:win:method:pointer_iterate|pointer_iterate]]** | %%Returns an iterator over the current known pointer positions.%% |
|  | **[[:develop:api:efl:ui:win:property:pointer_position|pointer_position]]** //**(get)**// | %%This function returns the current known pointer coordinates%% |
|  | **[[:develop:api:efl:ui:win:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:ui:win:property:prop_focus_skip|prop_focus_skip]]** //**(set)**// | %%Set the window to be skipped by keyboard focus.%% |
|  | **[[:develop:api:efl:ui:win:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:efl:ui:win:method:raise|raise]]** | %%Places the window at the top of the stack, so that it's not covered by any other window.%% |
|  | **[[:develop:api:efl:ui:win:property:screen_constrain|screen_constrain]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:screen_dpi|screen_dpi]]** //**(get)**// | %%Get screen dpi for the screen that a window is on.%% |
|  | **[[:develop:api:efl:ui:win:property:screen_rotation|screen_rotation]]** //**(get)**// | %%Get the rotation of the screen.%% |
|  | **[[:develop:api:efl:ui:win:property:screen_size|screen_size]]** //**(get)**// | %%Get screen geometry details for the screen that a window is on.%% |
|  | **[[:develop:api:efl:ui:win:property:seat|seat]]** //**(get)**// | %%A seat attached to this canvas, found by id.%% |
|  | **[[:develop:api:efl:ui:win:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:ui:win:method:smart_objects_calculate|smart_objects_calculate]]** | %%Call user-provided %%''calculate''%% smart functions and unset the flag signalling that the object needs to get recalculated to all smart objects in the canvas.%% |
|  | **[[:develop:api:efl:ui:win:property:stack_base|stack_base]]** //**(get, set)**// | %%The stack base state of this window%% |
|  | **[[:develop:api:efl:ui:win:property:stack_id|stack_id]]** //**(get)**// | %%Get the stack ID string of the window as an opaque string.%% |
|  | **[[:develop:api:efl:ui:win:property:stack_master_id|stack_master_id]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:method:stack_pop_to|stack_pop_to]]** | %%Pop (delete) all windows in the stack above this window.%% |
|  | **[[:develop:api:efl:ui:win:property:sticky|sticky]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:text|text]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:urgent|urgent]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:ui:win:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  | **[[:develop:api:efl:ui:win:property:win_name|win_name]]** //**(get, set)**// | %%The window name.%% |
|  | **[[:develop:api:efl:ui:win:property:win_role|win_role]]** //**(get, set)**// | %%The role of the window.%% |
|  | **[[:develop:api:efl:ui:win:property:win_type|win_type]]** //**(get, set)**// | %%The type of the window.%% |
|  | **[[:develop:api:efl:ui:win:property:wm_available_profiles|wm_available_profiles]]** //**(get, set)**// | %%Available profiles on a window.%% |
|  | **[[:develop:api:efl:ui:win:property:wm_available_rotations|wm_available_rotations]]** //**(get, set)**// | %%Defines which rotations this window supports.%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:property:elm_actions|elm_actions]]** //**(get)**// | %%Elementary actions%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:property:extents|extents]]** //**(get, set)**// | %%Geometry of accessible widget.%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:method:focus_manager_create|focus_manager_create]]** | %%If the widget needs a focus manager, this function will be called.%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:method:on_focus_update|on_focus_update]]** | %%Virtual function handling focus in/out events on the widget%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:property:state_set|state_set]]** //**(get)**// | %%Gets set describing object accessible states.%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:method:theme_apply|theme_apply]]** | %%Virtual function called when the widget needs to re-apply its theme.%% |
|  ''protected'' | **[[:develop:api:efl:ui:win:method:widget_event|widget_event]]** | %%Virtual function handling input events on the widget.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:access|Efl.Access]] ^^^
|  | **[[:develop:api:efl:access:event:active_descendant_changed|active,descendant,changed]]** | %%Called when active state of descendant has changed%% |
|  | **[[:develop:api:efl:access:event:added|added]]** | %%Called when item is added%% |
|  | **[[:develop:api:efl:access:event:bounds_changed|bounds,changed]]** | %%Called when boundaries have changed%% |
|  | **[[:develop:api:efl:access:event:children_changed|children,changed]]** | %%Called when children have changed%% |
|  | **[[:develop:api:efl:access:event:property_changed|property,changed]]** | %%Called when property has changed%% |
|  | **[[:develop:api:efl:access:event:removed|removed]]** | %%Called when item is removed%% |
|  | **[[:develop:api:efl:access:event:state_changed|state,changed]]** | %%Called when state has changed%% |
|  | **[[:develop:api:efl:access:event:visible_data_changed|visible,data,changed]]** | %%Called when visibility has changed%% |
^ [[:develop:api:efl:access:window|Efl.Access.Window]] ^^^
|  | **[[:develop:api:efl:access:window:event:window_activated|window,activated]]** | %%Called when window has been activated. (unfocused)%% |
|  | **[[:develop:api:efl:access:window:event:window_created|window,created]]** | %%Called when new window has been created.%% |
|  | **[[:develop:api:efl:access:window:event:window_deactivated|window,deactivated]]** | %%Called when window has been deactivated (unfocused).%% |
|  | **[[:develop:api:efl:access:window:event:window_destroyed|window,destroyed]]** | %%Called when window has been destroyed.%% |
|  | **[[:develop:api:efl:access:window:event:window_maximized|window,maximized]]** | %%Called when window has been maximmized%% |
|  | **[[:develop:api:efl:access:window:event:window_minimized|window,minimized]]** | %%Called when window has been minimized%% |
|  | **[[:develop:api:efl:access:window:event:window_restored|window,restored]]** | %%Called when window has been restored%% |
^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:canvas|Efl.Canvas]] ^^^
|  | **[[:develop:api:efl:canvas:event:device_added|device,added]]** | %%Called when input device was added%% |
|  | **[[:develop:api:efl:canvas:event:device_changed|device,changed]]** | %%Called when input device changed%% |
|  | **[[:develop:api:efl:canvas:event:device_removed|device,removed]]** | %%Called when input device was removed%% |
|  | **[[:develop:api:efl:canvas:event:object_focus_in|object,focus,in]]** | %%Called when object got focus%% |
|  | **[[:develop:api:efl:canvas:event:object_focus_out|object,focus,out]]** | %%Called when object lost focus%% |
|  | **[[:develop:api:efl:canvas:event:render_post|render,post]]** | %%Called when post render happens%% |
|  | **[[:develop:api:efl:canvas:event:render_pre|render,pre]]** | %%Called when pre render happens%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
^ [[:develop:api:efl:selection|Efl.Selection]] ^^^
|  | **[[:develop:api:efl:selection:event:selection_changed|selection,changed]]** | %%Called when display server's selection has changed%% |
^ [[:develop:api:efl:ui:dnd|Efl.Ui.Dnd]] ^^^
|  | **[[:develop:api:efl:ui:dnd:event:drag_accept|drag,accept]]** | %%accept drag data%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_done|drag,done]]** | %%drag is done (mouse up)%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_drop|drag,drop]]** | %%called when the drag object dropped on this object%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_enter|drag,enter]]** | %%called when the drag object enters this object%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_leave|drag,leave]]** | %%called when the drag object leaves this object%% |
|  | **[[:develop:api:efl:ui:dnd:event:drag_pos|drag,pos]]** | %%called when the drag object changes drag position%% |
^ [[:develop:api:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] ^^^
|  | **[[:develop:api:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]** | %%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:flush_pre|flush,pre]]** | %%Emitted once the graph calculationg will be performed%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:focused|focused]]** | %%Emitted if the manager has focused an object, the passed focus object is the last focused object%% |
|  | **[[:develop:api:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]** | %%Emitted when the redirect object has changed, the old manager is passed as event info%% |
^ [[:develop:api:efl:ui:focus:object|Efl.Ui.Focus.Object]] ^^^
|  | **[[:develop:api:efl:ui:focus:object:event:focus_changed|focus,changed]]** | %%Emitted if the focus state has changed%% |
^ [[:develop:api:efl:ui:focus:user|Efl.Ui.Focus.User]] ^^^
|  | **[[:develop:api:efl:ui:focus:user:event:logical_changed|logical,changed]]** | %%Emitted when a new logical parent should be used.%% |
|  | **[[:develop:api:efl:ui:focus:user:event:manager_changed|manager,changed]]** | %%Emitted when a new manager is the parent for this object.%% |
^ [[:develop:api:efl:ui:widget|Efl.Ui.Widget]] ^^^
|  | **[[:develop:api:efl:ui:widget:event:access_changed|access,changed]]** | %%Called when accessibility changed%% |
|  | **[[:develop:api:efl:ui:widget:event:language_changed|language,changed]]** | %%Called when widget language changed%% |
|  | **[[:develop:api:efl:ui:widget:event:moved|moved]]** | %%Called when widget moved%% |
^ [[:develop:api:efl:ui:win|Efl.Ui.Win]] ^^^
|  | **[[:develop:api:efl:ui:win:event:delete_request|delete,request]]** | %%Called when the window receives a delete request%% |
|  | **[[:develop:api:efl:ui:win:event:elm_action_block_menu|elm,action,block_menu]]** | %%Called when elementary block menu action occurs%% |
|  | **[[:develop:api:efl:ui:win:event:fullscreen|fullscreen]]** | %%Called when window is set to fullscreen%% |
|  | **[[:develop:api:efl:ui:win:event:iconified|iconified]]** | %%Called when window is iconified%% |
|  | **[[:develop:api:efl:ui:win:event:indicator_prop_changed|indicator,prop,changed]]** | %%Called when indicator is property changed%% |
|  | **[[:develop:api:efl:ui:win:event:ioerr|ioerr]]** | %%Called on input output error%% |
|  | **[[:develop:api:efl:ui:win:event:maximized|maximized]]** | %%Called when window is set to maximized%% |
|  | **[[:develop:api:efl:ui:win:event:normal|normal]]** | %%Called when window is set to normal state%% |
|  | **[[:develop:api:efl:ui:win:event:pause|pause]]** | %%Called when the window is not going be displayed for some time%% |
|  | **[[:develop:api:efl:ui:win:event:profile_changed|profile,changed]]** | %%Called when profile is changed%% |
|  | **[[:develop:api:efl:ui:win:event:resume|resume]]** | %%Called before a window is rendered after a pause event%% |
|  | **[[:develop:api:efl:ui:win:event:rotation_changed|rotation,changed]]** | %%Called when window rotation is changed%% |
|  | **[[:develop:api:efl:ui:win:event:stick|stick]]** | %%Called when window is set as sticky%% |
|  | **[[:develop:api:efl:ui:win:event:theme_changed|theme,changed]]** | %%Called when theme is changed%% |
|  | **[[:develop:api:efl:ui:win:event:unfullscreen|unfullscreen]]** | %%Called when window is no longer set to fullscreen%% |
|  | **[[:develop:api:efl:ui:win:event:unmaximized|unmaximized]]** | %%Called when window is no longer set to maximized%% |
|  | **[[:develop:api:efl:ui:win:event:unstick|unstick]]** | %%Called when window is no  longer set as sticky%% |
|  | **[[:develop:api:efl:ui:win:event:withdrawn|withdrawn]]** | %%Called when window is withdrawn%% |
|  | **[[:develop:api:efl:ui:win:event:wm_rotation_changed|wm,rotation,changed]]** | %%Called when window manager rotation is changed%% |
