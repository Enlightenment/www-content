~~Title: Efl.Selection.Manager~~
====== Efl.Selection.Manager (class) ======

===== Description =====

No description supplied.

{{page>:develop:api-include:efl:selection:manager:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:selection:manager:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:selection:manager:method:container_drag_item_add|container_drag_item_add]]**\\
> %%This registers a drag for items in a container. Many items can be dragged at a time. During dragging, there are three events emitted: - EFL_UI_DND_EVENT_DRAG_POS - EFL_UI_DND_EVENT_DRAG_ACCEPT - EFL_UI_DND_EVENT_DRAG_DONE.%%
<code c>
void efl_selection_manager_container_drag_item_add(Eo *obj, Efl_Object *cont, double time_to_drag, double anim_duration, Efl_Dnd_Drag_Data_Get data_func, Efl_Dnd_Item_Get item_func, Efl_Dnd_Drag_Icon_Create icon_func, Efl_Dnd_Drag_Icon_List_Create icon_list_func, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:container_drag_item_del|container_drag_item_del]]**\\
> %%Remove drag function of items in the container object.%%
<code c>
void efl_selection_manager_container_drag_item_del(Eo *obj, Efl_Object *cont, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:container_drop_item_add|container_drop_item_add]]**\\
> %%Add dropable target for a container in which items can drop to it%%
<code c>
void efl_selection_manager_container_drop_item_add(Eo *obj, Efl_Object *cont, Efl_Selection_Format format, Efl_Dnd_Item_Get item_func, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:container_drop_item_del|container_drop_item_del]]**\\
> %%Remove dropable target for the container%%
<code c>
void efl_selection_manager_container_drop_item_del(Eo *obj, Efl_Object *cont, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:selection:manager:method:drag_action_set|drag_action_set]]**\\
> %%This sets the action for the drag%%
<code c>
void efl_selection_manager_drag_action_set(Eo *obj, Efl_Object *drag_obj, Efl_Selection_Action action, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:drag_cancel|drag_cancel]]**\\
> %%This cancels the on-going drag%%
<code c>
void efl_selection_manager_drag_cancel(Eo *obj, Efl_Object *drag_obj, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:drag_start|drag_start]]**\\
> %%This starts a drag and drop process at the drag side. During dragging, there are three events emitted as belows: - EFL_UI_DND_EVENT_DRAG_POS - EFL_UI_DND_EVENT_DRAG_ACCEPT - EFL_UI_DND_EVENT_DRAG_DONE%%
<code c>
void efl_selection_manager_drag_start(Eo *obj, Efl_Object *drag_obj, Efl_Selection_Format format, Eina_Slice data, Efl_Selection_Action action, Efl_Dnd_Drag_Icon_Create icon_func, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:drop_target_add|drop_target_add]]**\\
> %%Add a dropable target. There are four events emitted: - EFL_UI_DND_DROP_DRAG_ENTER - EFL_UI_DND_DROP_DRAG_LEAVE - EFL_UI_DND_DROP_DRAG_POS - EFL_UI_DND_DROP_DRAG_DROP.%%
<code c>
Eina_Bool efl_selection_manager_drop_target_add(Eo *obj, Efl_Object *target_obj, Efl_Selection_Format format, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:drop_target_del|drop_target_del]]**\\
> %%Remove a dropable target%%
<code c>
void efl_selection_manager_drop_target_del(Eo *obj, Efl_Object *target_obj, Efl_Selection_Format format, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:selection_clear|selection_clear]]**\\
> 
<code c>
void efl_selection_manager_selection_clear(Eo *obj, Efl_Object *owner, Efl_Selection_Type type, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:selection_get|selection_get]]**\\
> %%Get selection%%
<code c>
void efl_selection_manager_selection_get(Eo *obj, const Efl_Object *request, Efl_Selection_Type type, Efl_Selection_Format format, Efl_Selection_Data_Ready data_func, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:selection_has_owner|selection_has_owner]]**\\
> %%Check if the request object has selection or not%%
<code c>
Eina_Bool efl_selection_manager_selection_has_owner(Eo *obj, Efl_Object *request, Efl_Selection_Type type, unsigned int seat);
</code>
\\
**[[:develop:api:efl:selection:manager:method:selection_set|selection_set]]**\\
> %%Set selection%%
<code c>
Eina_Future *efl_selection_manager_selection_set(Eo *obj, Efl_Object *owner, Efl_Selection_Type type, Efl_Selection_Format format, Eina_Slice data, unsigned int seat);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
