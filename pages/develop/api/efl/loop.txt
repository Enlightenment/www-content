~~Title: Efl.Loop~~
====== Efl.Loop (class) ======

===== Description =====

%%The Efl Main Loop%%

%%Efl main loop provide a clean and tiny event loop library with many modules to do lots of convenient things for a programmer, to save time and effort. It's small and lean, designed to work from embedded systems all the way up to large and powerful multi-cpu workstations. The main loop has a number of primitives to be used with its main loop. It serializes all the primitives and allows for great responsiveness without the need for threads (or any other concurrency), but provide them if you need to.%%

{{page>:develop:api-include:efl:loop:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:loop:property:app_efl_version|app_efl_version]]** //**(get)**//\\
> %%Indicates the version of EFL with which this application was compiled.%%
<code c>
const Efl_Version *efl_loop_app_efl_version_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:begin|begin]]**\\
> %%Runs the application main loop.%%
<code c>
Eina_Value *efl_loop_begin(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:property:efl_version|efl_version]]** //**(get)**//\\
> %%Indicates the currently running version of EFL.%%
<code c>
const Efl_Version *efl_loop_efl_version_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:idle|idle]]**\\
> %%A future promise that will be resolved from a clean main loop context as soon as the main loop is idle.%%
<code c>
Eina_Future *efl_loop_idle(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:iterate|iterate]]**\\
> %%Runs a single iteration of the main loop to process everything on the queue.%%
<code c>
void efl_loop_iterate(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:iterate_may_block|iterate_may_block]]**\\
> %%Runs a single iteration of the main loop to process everything on the queue with block/non-blocking status.%%
<code c>
int efl_loop_iterate_may_block(Eo *obj, int may_block);
</code>
\\
**[[:develop:api:efl:loop:method:job|job]]**\\
> %%A future promise that will be resolved from a clean main loop context as soon as possible.%%
<code c>
Eina_Future *efl_loop_job(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:property:main|main]]** //**(get)**//\\
> %%Points to the main loop instance of the application.%%
<code c>
Efl_Loop *efl_loop_main_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:method:provider_find|provider_find]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Searches up in the object tree for a provider which knows the given class/interface.%%
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>
\\
**[[:develop:api:efl:loop:method:quit|quit]]**\\
> %%Quits the main loop once all the events currently on the queue have been processed.%%
<code c>
void efl_loop_quit(Eo *obj, Eina_Value exit_code);
</code>
\\
**[[:develop:api:efl:loop:method:register|register]]**\\
> %%Will register a manager of a specific class to be answered by eo.provider_find.%%
<code c>
Eina_Bool efl_loop_register(Eo *obj, const Efl_Class *klass, const Efl_Object *provider);
</code>
\\
**[[:develop:api:efl:loop:method:timeout|timeout]]**\\
> %%A future promise that will be resolved from a clean main loop context after %%''time''%% seconds.%%
<code c>
Eina_Future *efl_loop_timeout(Eo *obj, double time);
</code>
\\
**[[:develop:api:efl:loop:method:unregister|unregister]]**\\
> %%Will unregister a manager of a specific class that was previously registered and answered by eo.provider_find.%%
<code c>
Eina_Bool efl_loop_unregister(Eo *obj, const Efl_Class *klass, const Efl_Object *provider);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |

===== Events =====

**[[:develop:api:efl:loop:event:arguments|arguments]]**\\
> %%Event happens when args are provided to the loop by args_add().%%
<code c>
EFL_LOOP_EVENT_ARGUMENTS(Efl_Loop_Arguments)
</code>
\\ **[[:develop:api:efl:loop:event:idle|idle]]**\\
> %%Event occurs once the main loop is idler. Be carefull, this will spin your CPU high if you keep listening on this event.%%
<code c>
EFL_LOOP_EVENT_IDLE(void, @restart)
</code>
\\ **[[:develop:api:efl:loop:event:idle_enter|idle,enter]]**\\
> %%Event occurs once the main loop enters the idle state.%%
<code c>
EFL_LOOP_EVENT_IDLE_ENTER(void, @restart)
</code>
\\ **[[:develop:api:efl:loop:event:idle_exit|idle,exit]]**\\
> %%Event occurs once the main loop exits the idle state.%%
<code c>
EFL_LOOP_EVENT_IDLE_EXIT(void, @restart)
</code>
\\ **[[:develop:api:efl:loop:event:pause|pause]]**\\
> %%Called when the window is going not be displayed for some time%%
<code c>
EFL_LOOP_EVENT_PAUSE(void)
</code>
\\ **[[:develop:api:efl:loop:event:poll_high|poll,high]]**\\
> %%Event occurs multiple time per second. The exact tick is undefined and could be adjusted system wide.%%
<code c>
EFL_LOOP_EVENT_POLL_HIGH(void)
</code>
\\ **[[:develop:api:efl:loop:event:poll_low|poll,low]]**\\
> %%Event occurs multiple time every 15 minutes. The exact tick is undefined and could be adjusted system wide.%%
<code c>
EFL_LOOP_EVENT_POLL_LOW(void)
</code>
\\ **[[:develop:api:efl:loop:event:poll_medium|poll,medium]]**\\
> %%Event occurs multiple time per minute. The exact tick is undefined and could be adjusted system wide.%%
<code c>
EFL_LOOP_EVENT_POLL_MEDIUM(void)
</code>
\\ **[[:develop:api:efl:loop:event:resume|resume]]**\\
> %%Called before a window get rendered after a pause event%%
<code c>
EFL_LOOP_EVENT_RESUME(void)
</code>
\\ **[[:develop:api:efl:loop:event:terminate|terminate]]**\\
> %%Called before starting the shutdown of elementary%%
<code c>
EFL_LOOP_EVENT_TERMINATE(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
