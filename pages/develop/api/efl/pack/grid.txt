~~Title: Efl.Pack.Grid~~
====== Efl.Pack.Grid (interface) ======

===== Description =====

%%2D containers aligned on a grid with rows and columns%%

{{page>:develop:api-include:efl:pack:grid:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:pack:linear|Efl.Pack.Linear]] //(interface)// => [[:develop:api:efl:pack|Efl.Pack]] //(interface)// => [[:develop:api:efl:container|Efl.Container]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:pack:linear|Efl.Pack.Linear]] //(interface)//
    * [[:develop:api:efl:pack|Efl.Pack]] //(interface)//
      * [[:develop:api:efl:container|Efl.Container]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:pack:grid:property:grid_columns|grid_columns]]** //**(get, set)**//\\
> %%Gird columns property%%
<code c>
int efl_pack_grid_columns_get(const Eo *obj);
void efl_pack_grid_columns_set(Eo *obj, int cols);
</code>
\\
**[[:develop:api:efl:pack:grid:method:grid_content_get|grid_content_get]]**\\
> %%Returns a child at a given position, see %%[[:develop:api:efl:pack:grid:method:grid_contents_get|Efl.Pack.Grid.grid_contents_get]]%%.%%
<code c>
Efl_Gfx *efl_pack_grid_content_get(Eo *obj, int col, int row);
</code>
\\
**[[:develop:api:efl:pack:grid:method:grid_contents_get|grid_contents_get]]**\\
> %%Returns all objects at a given position in this grid.%%
<code c>
Eina_Iterator *efl_pack_grid_contents_get(Eo *obj, int col, int row, Eina_Bool below);
</code>
\\
**[[:develop:api:efl:pack:grid:property:grid_direction|grid_direction]]** //**(get, set)**//\\
> %%Primary and secondary up/left/right/down directions for linear apis.%%
<code c>
void efl_pack_grid_direction_get(const Eo *obj, Efl_Ui_Dir *primary, Efl_Ui_Dir *secondary);
void efl_pack_grid_direction_set(Eo *obj, Efl_Ui_Dir primary, Efl_Ui_Dir secondary);
</code>
\\
**[[:develop:api:efl:pack:grid:property:grid_position|grid_position]]** //**(get)**//\\
> %%Position and span of the %%''subobj''%% in this container, may be modified to move the %%''subobj''%%%%
<code c>
Eina_Bool efl_pack_grid_position_get(const Eo *obj, Efl_Gfx *subobj, int *col, int *row, int *colspan, int *rowspan);
</code>
\\
**[[:develop:api:efl:pack:grid:property:grid_rows|grid_rows]]** //**(get, set)**//\\
> %%Grid rows property%%
<code c>
int efl_pack_grid_rows_get(const Eo *obj);
void efl_pack_grid_rows_set(Eo *obj, int rows);
</code>
\\
**[[:develop:api:efl:pack:grid:property:grid_size|grid_size]]** //**(get, set)**//\\
> %%Combines %%[[:develop:api:efl:pack:grid:property:grid_columns|Efl.Pack.Grid.grid_columns]]%% and %%[[:develop:api:efl:pack:grid:property:grid_rows|Efl.Pack.Grid.grid_rows]]%%%%
<code c>
void efl_pack_grid_size_get(const Eo *obj, int *cols, int *rows);
void efl_pack_grid_size_set(Eo *obj, int cols, int rows);
</code>
\\
**[[:develop:api:efl:pack:grid:method:pack_grid|pack_grid]]**\\
> %%Pack object at a given location in the grid.%%
<code c>
Eina_Bool efl_pack_grid(Eo *obj, Efl_Gfx *subobj, int col, int row, int colspan, int rowspan);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:method:content_count|content_count]]** | %%Returns the number of UI elements packed in this container.%% |
|  | **[[:develop:api:efl:container:method:content_iterate|content_iterate]]** | %%Begin iterating over this object's contents.%% |
|  | **[[:develop:api:efl:container:method:content_remove|content_remove]]** | %%Unswallow an object from this container.%% |
^ [[:develop:api:efl:pack|Efl.Pack]] ^^^
|  | **[[:develop:api:efl:pack:method:pack|pack]]** | %%Adds an item to this container.%% |
|  | **[[:develop:api:efl:pack:property:pack_align|pack_align]]** //**(get, set)**// | %%Alignment of the container within its bounds%% |
|  | **[[:develop:api:efl:pack:method:pack_clear|pack_clear]]** | %%Removes all packed contents, and unreferences them.%% |
|  | **[[:develop:api:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**// | %%Padding between items contained in this object.%% |
|  | **[[:develop:api:efl:pack:method:unpack|unpack]]** | %%Removes an existing item from the container, without deleting it.%% |
|  | **[[:develop:api:efl:pack:method:unpack_all|unpack_all]]** | %%Removes all packed contents, without unreferencing them.%% |
^ [[:develop:api:efl:pack:linear|Efl.Pack.Linear]] ^^^
|  | **[[:develop:api:efl:pack:linear:method:pack_after|pack_after]]** | %%Append item after other sub object.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_at|pack_at]]** | %%Inserts %%''subobj''%% at the specified %%''index''%%.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_before|pack_before]]** | %%Prepend item before other sub object.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_begin|pack_begin]]** | %%Prepend an object at the beginning of this container.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_content_get|pack_content_get]]** | %%Content at a given index in this container.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_end|pack_end]]** | %%Append object at the end of this container.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_index_get|pack_index_get]]** | %%Get the index of a child in this container.%% |
|  | **[[:develop:api:efl:pack:linear:method:pack_unpack_at|pack_unpack_at]]** | %%Pop out item at specified %%''index''%%.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:event:content_added|content,added]]** | %%Sent after a new item was added.%% |
|  | **[[:develop:api:efl:container:event:content_removed|content,removed]]** | %%Sent after an item was removed, before unref.%% |
^ [[:develop:api:efl:pack|Efl.Pack]] ^^^
|  | **[[:develop:api:efl:pack:event:layout_updated|layout,updated]]** | %%Sent after the layout was updated.%% |
