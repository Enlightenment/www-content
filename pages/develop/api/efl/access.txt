~~Title: Efl.Access~~
====== Efl.Access (mixin) ======

===== Description =====

%%Accessibility accessible mixin%%

{{page>:develop:api-include:efl:access:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:access:method:attribute_append|attribute_append]]**\\
> %%Add key-value pair identifying object extra attributes%%
<code c>
void efl_access_attribute_append(Eo *obj, const char *key, const char *value);
</code>
\\
**[[:develop:api:efl:access:method:attributes_clear|attributes_clear]]**\\
> %%Removes all attributes in accessible object.%%
<code c>
void efl_access_attributes_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:description|description]]** //**(get, set)**//\\
> %%Contextual information about object.%%
<code c>
const char *efl_access_description_get(const Eo *obj);
void efl_access_description_set(Eo *obj, const char *description);
</code>
\\
**[[:develop:api:efl:access:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:name|name]]** //**(get, set)**//\\
> %%Accessible name of the object.%%
<code c>
const char *efl_access_name_get(const Eo *obj);
void efl_access_name_set(Eo *obj, const char *name);
</code>
\\
**[[:develop:api:efl:access:property:parent|parent]]** //**(get, set)**//\\
> %%Object's accessible parent.%%
<code c>
Efl_Access *efl_access_parent_get(const Eo *obj);
void efl_access_parent_set(Eo *obj, Efl_Access *parent);
</code>
\\
**[[:develop:api:efl:access:method:relationship_append|relationship_append]]**\\
> %%Defines the relationship between two accessible objects.%%
<code c>
Eina_Bool efl_access_relationship_append(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>
\\
**[[:develop:api:efl:access:method:relationship_remove|relationship_remove]]**\\
> %%Removes the relationship between two accessible objects.%%
<code c>
void efl_access_relationship_remove(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>
\\
**[[:develop:api:efl:access:method:relationships_clear|relationships_clear]]**\\
> %%Removes all relationships in accessible object.%%
<code c>
void efl_access_relationships_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:role|role]]** //**(get, set)**//\\
> %%The role of the object in accessibility domain.%%
<code c>
Efl_Access_Role efl_access_role_get(const Eo *obj);
void efl_access_role_set(Eo *obj, Efl_Access_Role role);
</code>
\\
**[[:develop:api:efl:access:property:root|root]]** //**(get)**//\\
> %%Get root object of accessible object hierarchy%%
<code c>
Efl_Object *efl_access_root_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**//\\
> %%The translation domain of "name" and "description" properties.%%
<code c>
const char *efl_access_translation_domain_get(const Eo *obj);
void efl_access_translation_domain_set(Eo *obj, const char *domain);
</code>
\\
**[[:develop:api:efl:access:property:type|type]]** //**(get, set)**//\\
> %%Type of accessibility object%%
<code c>
Efl_Access_Type efl_access_type_get(const Eo *obj);
void efl_access_type_set(Eo *obj, Efl_Access_Type type);
</code>
\\
**[[:develop:api:efl:access:property:attributes|attributes]]** //**(get)**// ''protected''\\
> %%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%%
<code c>
Eina_List *efl_access_attributes_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:children|children]]** //**(get)**// ''protected''\\
> %%Gets object's accessible children.%%
<code c>
Eina_List *efl_access_children_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:method:event_emit|event_emit]]** ''protected''\\
> %%Emit event%%
<code c>
void efl_access_event_emit(const Eo *obj, Efl_Access *accessible, const Efl_Event_Description *event, void *event_info);
</code>
\\
**[[:develop:api:efl:access:method:event_handler_add|event_handler_add]]** ''protected''\\
> %%Register accessibility event listener%%
<code c>
Efl_Access_Event_Handler *efl_access_event_handler_add(const Eo *obj, Efl_Event_Cb cb, void *data);
</code>
\\
**[[:develop:api:efl:access:method:event_handler_del|event_handler_del]]** ''protected''\\
> %%Deregister accessibility event listener%%
<code c>
void efl_access_event_handler_del(const Eo *obj, Efl_Access_Event_Handler *handler);
</code>
\\
**[[:develop:api:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// ''protected''\\
> %%Gets index of the child in parent's children list.%%
<code c>
int efl_access_index_in_parent_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// ''protected''\\
> %%Gets an localized string describing accessible object role name.%%
<code c>
const char *efl_access_localized_role_name_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:reading_info_type|reading_info_type]]** //**(get, set)**// ''protected''\\
> 
<code c>
Efl_Access_Reading_Info_Type efl_access_reading_info_type_get(const Eo *obj);
void efl_access_reading_info_type_set(Eo *obj, Efl_Access_Reading_Info_Type reading_info);
</code>
\\
**[[:develop:api:efl:access:property:relation_set|relation_set]]** //**(get)**// ''protected''\\
> %%Gets an all relations between accessible object and other accessible objects.%%
<code c>
Efl_Access_Relation_Set efl_access_relation_set_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:role_name|role_name]]** //**(get)**// ''protected''\\
> %%Gets human-readable string indentifying object accessibility role.%%
<code c>
const char *efl_access_role_name_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:property:state_set|state_set]]** //**(get)**// ''protected''\\
> %%Gets set describing object accessible states.%%
<code c>
Efl_Access_State_Set efl_access_state_set_get(const Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:access:event:active_descendant_changed|active,descendant,changed]]**\\
> %%Called when active state of descendant has changed%%
<code c>
EFL_ACCESS_EVENT_ACTIVE_DESCENDANT_CHANGED(void)
</code>
\\ **[[:develop:api:efl:access:event:added|added]]**\\
> %%Called when item was added%%
<code c>
EFL_ACCESS_EVENT_ADDED(void)
</code>
\\ **[[:develop:api:efl:access:event:bounds_changed|bounds,changed]]**\\
> %%Called when bounds have changed%%
<code c>
EFL_ACCESS_EVENT_BOUNDS_CHANGED(Efl_Access_Event_Geometry_Changed_Data)
</code>
\\ **[[:develop:api:efl:access:event:children_changed|children,changed]]**\\
> %%Called when children have changed%%
<code c>
EFL_ACCESS_EVENT_CHILDREN_CHANGED(Efl_Access_Event_Children_Changed_Data)
</code>
\\ **[[:develop:api:efl:access:event:property_changed|property,changed]]**\\
> %%Called when roperty has changed%%
<code c>
EFL_ACCESS_EVENT_PROPERTY_CHANGED(const char *)
</code>
\\ **[[:develop:api:efl:access:event:removed|removed]]**\\
> %%Called when item was removed%%
<code c>
EFL_ACCESS_EVENT_REMOVED(void)
</code>
\\ **[[:develop:api:efl:access:event:state_changed|state,changed]]**\\
> %%Called when tate has changed%%
<code c>
EFL_ACCESS_EVENT_STATE_CHANGED(Efl_Access_Event_State_Changed_Data)
</code>
\\ **[[:develop:api:efl:access:event:visible_data_changed|visible,data,changed]]**\\
> %%Called when visibility has changed%%
<code c>
EFL_ACCESS_EVENT_VISIBLE_DATA_CHANGED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
