~~Title: Efl.Gfx.Map~~
====== Efl.Gfx.Map (mixin) ======

===== Description =====

%%Texture UV mapping for all objects (rotation, perspective, 3d, ...).%%

%%Evas allows different transformations to be applied to all kinds of objects. These are applied by means of UV mapping.%%

%%With UV mapping, one maps points in the source object to a 3D space positioning at target. This allows rotation, perspective, scale and lots of other effects, depending on the map that is used.%%

%%Each map point may carry a multiplier color. If properly calculated, these can do shading effects on the object, producing 3D effects.%%

%%At the moment of writing, maps can only have 4 points (no more, no less).%%

//Since 1.20//

{{page>:develop:api-include:efl:gfx:map:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:gfx:map:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:gfx:map:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]**\\
> %%Apply a lightning effect on the object.%%
<code c>
void efl_gfx_map_lightning_3d(Eo *obj, const Efl_Gfx *pivot, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>
\\
**[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]**\\
> %%Apply a lightning effect on the object.%%
<code c>
void efl_gfx_map_lightning_3d_absolute(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//\\
> %%Alpha flag for map rendering.%%
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//\\
> %%Clockwise state of a map (read-only).%%
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//\\
> %%Color of a vertex in the map.%%
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**//\\
> %%A point's absolute coordinate on the canvas.%%
<code c>
void efl_gfx_map_coord_absolute_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_coord_absolute_set(Eo *obj, int idx, double x, double y, double z);
</code>
\\
**[[:develop:api:efl:gfx:map:method:map_has|map_has]]**\\
> %%Read-only property indicating whether an object is mapped.%%
<code c>
Eina_Bool efl_gfx_map_has(Eo *obj);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**//\\
> %%Number of points of a map.%%
<code c>
int efl_gfx_map_point_count_get(const Eo *obj);
void efl_gfx_map_point_count_set(Eo *obj, int count);
</code>
\\
**[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]**\\
> %%Resets the map transformation to its default state.%%
<code c>
void efl_gfx_map_reset(Eo *obj);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//\\
> %%Smoothing state for map rendering.%%
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>
\\
**[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**//\\
> %%Map point's U and V texture source point.%%
<code c>
void efl_gfx_map_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_uv_set(Eo *obj, int idx, double u, double v);
</code>
\\
**[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]**\\
> %%Apply a perspective transform to the map%%
<code c>
void efl_gfx_map_perspective_3d(Eo *obj, const Efl_Gfx *pivot, double px, double py, double z0, double foc);
</code>
\\
**[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]**\\
> %%Apply a perspective transform to the map%%
<code c>
void efl_gfx_map_perspective_3d_absolute(Eo *obj, double px, double py, double z0, double foc);
</code>
\\
**[[:develop:api:efl:gfx:map:method:rotate|rotate]]**\\
> %%Apply a rotation to the object.%%
<code c>
void efl_gfx_map_rotate(Eo *obj, double degrees, const Efl_Gfx *pivot, double cx, double cy);
</code>
\\
**[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]**\\
> %%Rotate the object around 3 axes in 3D.%%
<code c>
void efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>
\\
**[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]**\\
> %%Rotate the object around 3 axes in 3D, using absolute coordinates.%%
<code c>
void efl_gfx_map_rotate_3d_absolute(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>
\\
**[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]**\\
> %%Apply a rotation to the object, using absolute coordinates.%%
<code c>
void efl_gfx_map_rotate_absolute(Eo *obj, double degrees, double cx, double cy);
</code>
\\
**[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]**\\
> %%Rotate the object in 3D using a unit quaternion.%%
<code c>
void efl_gfx_map_rotate_quat(Eo *obj, double qx, double qy, double qz, double qw, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>
\\
**[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]**\\
> %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%%
<code c>
void efl_gfx_map_rotate_quat_absolute(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>
\\
**[[:develop:api:efl:gfx:map:method:translate|translate]]**\\
> %%Apply a translation to the object using map.%%
<code c>
void efl_gfx_map_translate(Eo *obj, double dx, double dy, double dz);
</code>
\\
**[[:develop:api:efl:gfx:map:method:zoom|zoom]]**\\
> %%Apply a zoom to the object.%%
<code c>
void efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, const Efl_Gfx *pivot, double cx, double cy);
</code>
\\
**[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]**\\
> %%Apply a zoom to the object, using absolute coordinates.%%
<code c>
void efl_gfx_map_zoom_absolute(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
