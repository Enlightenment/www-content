~~Title: Efl.Gfx.Filter.filter_source~~
===== Keys =====

  * **name** - %%Buffer name as used in the program.%%
===== Values =====

  * **source** - %%Object to use as a source of pixels.%%
===== Description =====

%%Bind an object to use as a mask or texture in a filter program.%%

%%This will create automatically a new RGBA buffer containing the source object's pixels (as it is rendered).%%

//Since 1.18//
{{page>:develop:api-include:efl:gfx:filter:property:filter_source:description&nouser&nolink&nodate}}


===== Signature =====

<code>
@property filter_source @pure_virtual {
    get {
        keys {
            name: free(string, free);
        }
        values {
            source: free(Efl.Gfx, efl_del);
        }
    }
    set {
        keys {
            name: free(string, free);
        }
        values {
            source: free(Efl.Gfx, efl_del);
        }
    }
}
</code>

===== C signature =====

<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>

===== Implemented by =====

  * **Efl.Gfx.Filter.filter_source**

