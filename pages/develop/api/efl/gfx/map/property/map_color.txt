~~Title: Efl.Gfx.Map.map_color~~
===== Signature =====

<code>
@property map_color {
    get {
        keys {
            idx: int;
        }
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
    set {
        keys {
            idx: int;
        }
        values {
            r: int;
            g: int;
            b: int;
            a: int;
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

===== Keys =====

  * **idx** - %%ID of the point, from 0 to 3 (included). -1 can be used to set the color for all points, but it is invalid for get().%%
===== Values =====

  * **r** - %%Red (0 - 255)%%
  * **g** - %%Green (0 - 255)%%
  * **b** - %%Blue (0 - 255)%%
  * **a** - %%Alpha (0 - 255)%%
===== Description =====

%%Color of a vertex in the map.%%

%%This sets the color of the vertex in the map. Colors will be linearly interpolated between vertex points through the map. Color will multiply the "texture" pixels (like GL_MODULATE in OpenGL). The default color of a vertex in a map is white solid (255, 255, 255, 255) which means it will have no affect on modifying the texture pixels.%%

%%The color values must be premultiplied (ie. %%''a''%% >= {%%''r''%%, %%''g''%%, %%''b''%%}).%%

//Since 1.20//
{{page>:develop:api-include:efl:gfx:map:property:map_color:description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Efl.Gfx.Map.map_color**

