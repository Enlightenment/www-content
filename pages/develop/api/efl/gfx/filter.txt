~~Title: Efl.Gfx.Filter~~
====== Efl.Gfx.Filter (interface) ======

===== Description =====

%%Graphical filters can be applied to any object implementing this interface.%%

%%Filters are programmable effects that run whenever the object is rendered on its canvas. The program language is Lua and a complete reference can be found under "EFL Graphics Filters".%%

%%This was a beta feature since 1.15.%%

//Since 1.18//

{{page>:develop:api-include:efl:gfx:filter:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:gfx:filter:property:filter_data|filter_data]]** //**(get, set)**//\\
> %%Extra data used by the filter program.%%
<code c>
void efl_gfx_filter_data_get(const Eo *obj, const char *name, const char **value, Eina_Bool *execute);
void efl_gfx_filter_data_set(Eo *obj, const char *name, const char *value, Eina_Bool execute);
</code>
\\
**[[:develop:api:efl:gfx:filter:property:filter_padding|filter_padding]]** //**(get)**//\\
> %%Required padding to apply this filter without cropping.%%
<code c>
void efl_gfx_filter_padding_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>
\\
**[[:develop:api:efl:gfx:filter:property:filter_program|filter_program]]** //**(get, set)**//\\
> 
<code c>
void efl_gfx_filter_program_get(const Eo *obj, const char **code, const char **name);
void efl_gfx_filter_program_set(Eo *obj, const char *code, const char *name);
</code>
\\
**[[:develop:api:efl:gfx:filter:property:filter_source|filter_source]]** //**(get, set)**//\\
> %%Bind an object to use as a mask or texture in a filter program.%%
<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>
\\
**[[:develop:api:efl:gfx:filter:property:filter_state|filter_state]]** //**(get, set)**//\\
> %%Set the current state of the filter.%%
<code c>
void efl_gfx_filter_state_get(const Eo *obj, const char **cur_state, double *cur_val, const char **next_state, double *next_val, double *pos);
void efl_gfx_filter_state_set(Eo *obj, const char *cur_state, double cur_val, const char *next_state, double next_val, double pos);
</code>
\\

===== Events =====

