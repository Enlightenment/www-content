~~Title: Efl.Gfx.Colorspace~~
===== Description =====

%%Graphics colorspace type%%

{{page>:develop:api-include:efl:gfx:colorspace:description&nouser&nolink&nodate}}

===== Fields =====

{{page>:develop:api-include:efl:gfx:colorspace:fields&nouser&nolink&nodate}}

  * **argb8888** - %%ARGB 32 bits per pixel, high-byte is Alpha, accessed one 32bit word at a time.%%
  * **ycbcr422p601_pl** - %%YCbCr 4:2:2 Planar, ITU.BT-601 specifications. The data pointed to is just an array of row pointer, pointing to the Y rows, then the Cb, then Cr rows.%%
  * **ycbcr422p709_pl** - %%YCbCr 4:2:2 Planar, ITU.BT-709 specifications. The data pointed to is just an array of row pointer, pointing to the Y rows, then the Cb, then Cr rows.%%
  * **rgb565_a5p** - %%16bit rgb565 + Alpha plane at end - 5 bits of the 8 being used per alpha byte.%%
  * **gry8** - %%8-bit gray image, or alpha only.%%
  * **ycbcr422601_pl** - %%YCbCr 4:2:2, ITU.BT-601 specifications. The data pointed to is just an array of row pointer, pointing to line of Y,Cb,Y,Cr bytes.%%
  * **ycbcr420nv12601_pl** - %%YCbCr 4:2:0, ITU.BT-601 specifications. The data pointed to is just an array of row pointer, pointing to the Y rows, then the Cb,Cr rows..%%
  * **ycbcr420tm12601_pl** - %%YCbCr 4:2:0, ITU.BT-601 specifications. The data pointed to is just an array of tiled row pointer, pointing to the Y rows, then the Cb,Cr rows..%%
  * **agry88** - %%AY 8bits Alpha and 8bits Grey, accessed 1 16bits at a time.%%
  * **etc1** - %%OpenGL ETC1 encoding of RGB texture (4 bit per pixel)%%
  * **rgb8_etc2** - %%OpenGL GL_COMPRESSED_RGB8_ETC2 texture compression format (4 bit per pixel)%%
  * **rgba8_etc2_eac** - %%OpenGL GL_COMPRESSED_RGBA8_ETC2_EAC texture compression format, supports alpha (8 bit per pixel)%%
  * **etc1_alpha** - %%ETC1 with alpha support using two planes: ETC1 RGB and ETC1 grey for alpha%%
  * **rgb_s3tc_dxt1** - %%OpenGL COMPRESSED_RGB_S3TC_DXT1_EXT format with RGB only.%%
  * **rgba_s3tc_dxt1** - %%OpenGL COMPRESSED_RGBA_S3TC_DXT1_EXT format with RGBA punchthrough.%%
  * **rgba_s3tc_dxt2** - %%DirectDraw DXT2 format with premultiplied RGBA. Not supported by OpenGL itself.%%
  * **rgba_s3tc_dxt3** - %%OpenGL COMPRESSED_RGBA_S3TC_DXT3_EXT format with RGBA.%%
  * **rgba_s3tc_dxt4** - %%DirectDraw DXT4 format with premultiplied RGBA. Not supported by OpenGL itself.%%
  * **rgba_s3tc_dxt5** - %%OpenGL COMPRESSED_RGBA_S3TC_DXT5_EXT format with RGBA.%%

===== Signature =====

<code>
enum Efl.Gfx.Colorspace {
    argb8888: 0,
    ycbcr422p601_pl,
    ycbcr422p709_pl,
    rgb565_a5p,
    gry8: 4,
    ycbcr422601_pl,
    ycbcr420nv12601_pl,
    ycbcr420tm12601_pl,
    agry88: 8,
    etc1: 9,
    rgb8_etc2: 10,
    rgba8_etc2_eac: 11,
    etc1_alpha: 12,
    rgb_s3tc_dxt1: 13,
    rgba_s3tc_dxt1: 14,
    rgba_s3tc_dxt2: 15,
    rgba_s3tc_dxt3: 16,
    rgba_s3tc_dxt4: 17,
    rgba_s3tc_dxt5: 18
}
</code>

===== C signature =====

<code c>
typedef enum {
    EFL_GFX_COLORSPACE_ARGB8888 = 0,
    EFL_GFX_COLORSPACE_YCBCR422P601_PL,
    EFL_GFX_COLORSPACE_YCBCR422P709_PL,
    EFL_GFX_COLORSPACE_RGB565_A5P,
    EFL_GFX_COLORSPACE_GRY8 = 4,
    EFL_GFX_COLORSPACE_YCBCR422601_PL,
    EFL_GFX_COLORSPACE_YCBCR420NV12601_PL,
    EFL_GFX_COLORSPACE_YCBCR420TM12601_PL,
    EFL_GFX_COLORSPACE_AGRY88 = 8,
    EFL_GFX_COLORSPACE_ETC1 = 9,
    EFL_GFX_COLORSPACE_RGB8_ETC2 = 10,
    EFL_GFX_COLORSPACE_RGBA8_ETC2_EAC = 11,
    EFL_GFX_COLORSPACE_ETC1_ALPHA = 12,
    EFL_GFX_COLORSPACE_RGB_S3TC_DXT1 = 13,
    EFL_GFX_COLORSPACE_RGBA_S3TC_DXT1 = 14,
    EFL_GFX_COLORSPACE_RGBA_S3TC_DXT2 = 15,
    EFL_GFX_COLORSPACE_RGBA_S3TC_DXT3 = 16,
    EFL_GFX_COLORSPACE_RGBA_S3TC_DXT4 = 17,
    EFL_GFX_COLORSPACE_RGBA_S3TC_DXT5 = 18
} Efl_Gfx_Colorspace;
</code>

