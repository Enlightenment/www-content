~~Title: Efl.Input.Interface~~
====== Efl.Input.Interface (interface) ======

===== Description =====

%%An object implementing this interface can send pointer events.%%

%%Windows and canvas objects may send input events.%%

%%A "pointer" refers to the main pointing device, which could be a mouse, trackpad, finger, pen, etc... In other words, the finger id in any pointer event will always be 0.%%

%%A "finger" refers to a single point of input, usually in an absolute coordinates input device, and that can support more than one input position at at time (think multi-touch screens). The first finger (id 0) is sent along with a pointer event, so be careful to not handle those events twice. Note that if the input device can support "hovering", it is entirely possible to receive move events without down coming first.%%

%%A "key" is a key press from a keyboard or equivalent type of input device. Long, repeated, key presses will always happen like this: down...up,down...up,down...up (not down...up or down...down...down...up).%%

//Since 1.19//

{{page>:develop:api-include:efl:input:interface:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:input:interface:property:seat_event_filter|seat_event_filter]]** //**(get, set)**//\\
> 
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>
\\

===== Events =====

**[[:develop:api:efl:input:interface:event:finger_down|finger,down]]**\\
> %%Finger pressed (finger id is known).%%
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]**\\
> %%Finger moved (current and previous positions are known).%%
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]**\\
> %%Finger released (finger id is known).%%
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]**\\
> %%A focus in event.%%
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>
\\ **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]**\\
> %%A focus out event.%%
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>
\\ **[[:develop:api:efl:input:interface:event:hold|hold]]**\\
> %%All input events are on hold or resumed.%%
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>
\\ **[[:develop:api:efl:input:interface:event:key_down|key,down]]**\\
> %%Keyboard key press.%%
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>
\\ **[[:develop:api:efl:input:interface:event:key_up|key,up]]**\\
> %%Keyboard key release.%%
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]**\\
> %%Pen or other axis event update.%%
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]**\\
> %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]**\\
> %%Main pointer button pressed (button id is known).%%
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]**\\
> %%Pointer entered a window or a widget.%%
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]**\\
> %%Main pointer move (current and previous positions are known).%%
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]**\\
> %%Pointer left a window or a widget.%%
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]**\\
> %%Main pointer button released (button id is known).%%
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>
\\ **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]**\\
> %%Mouse wheel event.%%
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>
\\ 