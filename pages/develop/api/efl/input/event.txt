~~Title: Efl.Input.Event~~
====== Efl.Input.Event (mixin) ======

===== Description =====

%%Represents a generic event data.%%

<note>
%%Most Efl Events do not carry Efl Objects, rather simple data structures. This class is intended to carry more complex event data, such as pointer events.%%
</note>

//Since 1.19//

{{page>:develop:api-include:efl:input:event:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
  * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:duplicate|Efl.Duplicate]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:input:event:property:device|device]]** //**(get, set)**//\\
> %%Input device that originated this event.%%
<code c>
Efl_Input_Device *efl_input_device_get(const Eo *obj);
void efl_input_device_set(Eo *obj, Efl_Input_Device *dev);
</code>
\\
**[[:develop:api:efl:input:event:property:event_flags|event_flags]]** //**(get, set)**//\\
> %%Extra flags for this event, may be changed by the user.%%
<code c>
Efl_Input_Flags efl_input_event_flags_get(const Eo *obj);
void efl_input_event_flags_set(Eo *obj, Efl_Input_Flags flags);
</code>
\\
**[[:develop:api:efl:input:event:property:fake|fake]]** //**(get)**//\\
> %%%%''true''%% if the event was fake, not triggered by real hardware.%%
<code c>
Eina_Bool efl_input_fake_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:input:event:property:processed|processed]]** //**(get, set)**//\\
> %%%%''true''%% if %%[[:develop:api:efl:input:event:property:event_flags|Efl.Input.Event.event_flags]]%% indicates the event is on hold.%%
<code c>
Eina_Bool efl_input_processed_get(const Eo *obj);
void efl_input_processed_set(Eo *obj, Eina_Bool val);
</code>
\\
**[[:develop:api:efl:input:event:method:provider_find|provider_find]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Searches upwards in the object tree for a provider which knows the given class/interface.%%
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>
\\
**[[:develop:api:efl:input:event:method:reset|reset]]**\\
> %%Resets the internal data to 0 or default values.%%
<code c>
void efl_input_reset(Eo *obj);
</code>
\\
**[[:develop:api:efl:input:event:property:scrolling|scrolling]]** //**(get, set)**//\\
> %%%%''true''%% if %%[[:develop:api:efl:input:event:property:event_flags|Efl.Input.Event.event_flags]]%% indicates the event happened while scrolling.%%
<code c>
Eina_Bool efl_input_scrolling_get(const Eo *obj);
void efl_input_scrolling_set(Eo *obj, Eina_Bool val);
</code>
\\
**[[:develop:api:efl:input:event:property:timestamp|timestamp]]** //**(get, set)**//\\
> %%The time at which an event was generated.%%
<code c>
double efl_input_timestamp_get(const Eo *obj);
void efl_input_timestamp_set(Eo *obj, double ms);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:duplicate|Efl.Duplicate]] ^^^
|  | **[[:develop:api:efl:duplicate:method:duplicate|duplicate]]** | %%Creates a carbon copy of this object and returns it.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
