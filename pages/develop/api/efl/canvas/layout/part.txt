~~Title: Efl.Canvas.Layout.Part~~
====== Efl.Canvas.Layout.Part (class) ======

===== Description =====

%%Common class for part proxy objects for %%[[:develop:api:efl:canvas:layout|Efl.Canvas.Layout]]%%.%%

%%As an %%[[:develop:api:efl:part|Efl.Part]]%% implementation class, all objects of this class are meant to be used for one and only one function call. In pseudo-code, the use of object of this type looks like the following: rect = layout.part("somepart").geometry_get();%%

//Since 1.20//

{{page>:develop:api-include:efl:canvas:layout:part:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
  * [[:develop:api:efl:ui:drag|Efl.Ui.Drag]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:canvas:layout:part:property:drag_dir|drag_dir]]** //**(get)**//// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%Determines the dragable directions (read-only).%%
<code c>
Efl_Ui_Drag_Dir efl_ui_drag_dir_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:drag_page|drag_page]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%The page step increments.%%
<code c>
Eina_Bool efl_ui_drag_page_get(const Eo *obj, double *dx, double *dy);
Eina_Bool efl_ui_drag_page_set(Eo *obj, double dx, double dy);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:method:drag_page_move|drag_page_move]]**// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%Moves the dragable by %%''dx''%%,%%''dy''%% pages.%%
<code c>
Eina_Bool efl_ui_drag_page_move(Eo *obj, double dx, double dy);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:drag_size|drag_size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%The dragable object relative size.%%
<code c>
Eina_Bool efl_ui_drag_size_get(const Eo *obj, double *dw, double *dh);
Eina_Bool efl_ui_drag_size_set(Eo *obj, double dw, double dh);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:drag_step|drag_step]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%The drag step increment.%%
<code c>
Eina_Bool efl_ui_drag_step_get(const Eo *obj, double *dx, double *dy);
Eina_Bool efl_ui_drag_step_set(Eo *obj, double dx, double dy);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:method:drag_step_move|drag_step_move]]**// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%Moves the dragable by %%''dx''%%,%%''dy''%% steps.%%
<code c>
Eina_Bool efl_ui_drag_step_move(Eo *obj, double dx, double dy);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:drag_value|drag_value]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:drag|Efl.Ui.Drag]]]//\\
> %%The dragable object relative location.%%
<code c>
Eina_Bool efl_ui_drag_value_get(const Eo *obj, double *dx, double *dy);
Eina_Bool efl_ui_drag_value_set(Eo *obj, double dx, double dy);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:geometry|geometry]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx|Efl.Gfx]]]//\\
> %%Rectangular geometry that combines both position and size.%%
<code c>
Eina_Rect efl_gfx_geometry_get(const Eo *obj);
void efl_gfx_geometry_set(Eo *obj, Eina_Rect rect);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:part_type|part_type]]** //**(get)**//\\
> %%Type of this part in the layout.%%
<code c>
Efl_Canvas_Layout_Part_Type efl_canvas_layout_part_type_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part:property:state|state]]** //**(get)**//\\
> %%The name and value of the current state of this part (read-only).%%
<code c>
void efl_canvas_layout_part_state_get(const Eo *obj, const char **state, double *val);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:gfx:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
