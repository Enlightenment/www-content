~~Title: Efl.Canvas.Layout.Part_Text~~
====== Efl.Canvas.Layout.Part_Text (class) ======

===== Description =====

%%Represents a TEXT part of a layout%%

%%Its lifetime is limited to one function call only, unless an extra reference is explicitly held.%%

{{page>:develop:api-include:efl:canvas:layout:part_text:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
    * [[:develop:api:efl:ui:drag|Efl.Ui.Drag]] //(interface)//
  * [[:develop:api:efl:text|Efl.Text]] //(interface)//
  * [[:develop:api:efl:text:markup|Efl.Text.Markup]] //(interface)//
    * [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] //(interface)//
  * [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:canvas:layout:part_text:property:cursor|cursor]]** //**(get)**//// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%The object's main cursor.%%
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_get(const Eo *obj, Efl_Text_Cursor_Cursor_Get_Type get_type);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_char_next|cursor_char_next]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Advances to the next character%%
<code c>
void efl_text_cursor_char_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_char_prev|cursor_char_prev]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Advances to the previous character%%
<code c>
void efl_text_cursor_char_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:property:cursor_content|cursor_content]]** //**(get)**//// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%The content of the cursor (the character under the cursor)%%
<code c>
Eina_Unicode efl_text_cursor_content_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_coord_set|cursor_coord_set]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Set cursor coordinates%%
<code c>
void efl_text_cursor_coord_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int x, int y);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_copy|cursor_copy]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Copy existing cursor%%
<code c>
void efl_text_cursor_copy(Eo *obj, Efl_Text_Cursor_Cursor *dst, const Efl_Text_Cursor_Cursor *src);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:property:cursor_geometry|cursor_geometry]]** //**(get)**//// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%%
<code c>
Eina_Bool efl_text_cursor_geometry_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur, Efl_Text_Cursor_Cursor_Type ctype, int *cx, int *cy, int *cw, int *ch, int *cx2, int *cy2, int *cw2, int *ch2);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_line_char_first|cursor_line_char_first]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Advance to current line first character%%
<code c>
void efl_text_cursor_line_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_line_char_last|cursor_line_char_last]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Advance to current line last character%%
<code c>
void efl_text_cursor_line_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_line_jump_by|cursor_line_jump_by]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Jump the cursor by the given number of lines%%
<code c>
void efl_text_cursor_line_jump_by(Eo *obj, Efl_Text_Cursor_Cursor *cur, int by);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_markup_insert|cursor_markup_insert]]**// [Overridden from [[:develop:api:efl:text:markup|Efl.Text.Markup]]]//\\
> %%Inserts a markup text to the text object in a given cursor position%%
<code c>
void efl_text_markup_cursor_markup_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *markup);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_paragraph_first|cursor_paragraph_first]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Advance to current paragraph first character%%
<code c>
void efl_text_cursor_paragraph_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:method:cursor_paragraph_last|cursor_paragraph_last]]**// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Advance to current paragraph last character%%
<code c>
void efl_text_cursor_paragraph_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:property:cursor_position|cursor_position]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:text:cursor|Efl.Text.Cursor]]]//\\
> %%Cursor position%%
<code c>
int efl_text_cursor_position_get(const Eo *obj, Efl_Text_Cursor_Cursor *cur);
void efl_text_cursor_position_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int position);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:property:markup|markup]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:text:markup|Efl.Text.Markup]]]//\\
> %%Markup property%%
<code c>
const char *efl_text_markup_get(const Eo *obj);
void efl_text_markup_set(Eo *obj, const char *markup);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_text:property:text|text]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:text|Efl.Text]]]//\\
> 
<code c>
const char *efl_text_get(const Eo *obj);
void efl_text_set(Eo *obj, const char *text);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] ^^^
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_dir|drag_dir]]** //**(get)**// | %%Determines the draggable directions (read-only).%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_page|drag_page]]** //**(get, set)**// | %%The page step increments.%% |
|  | **[[:develop:api:efl:canvas:layout:part:method:drag_page_move|drag_page_move]]** | %%Moves the draggable by %%''dx''%%,%%''dy''%% pages.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_size|drag_size]]** //**(get, set)**// | %%The draggable object relative size.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_step|drag_step]]** //**(get, set)**// | %%The drag step increment.%% |
|  | **[[:develop:api:efl:canvas:layout:part:method:drag_step_move|drag_step_move]]** | %%Moves the draggable by %%''dx''%%,%%''dy''%% steps.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_value|drag_value]]** //**(get, set)**// | %%The draggable object relative location.%% |
|  | **[[:develop:api:efl:canvas:layout:part:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:part_type|part_type]]** //**(get)**// | %%Type of this part in the layout.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:state|state]]** //**(get)**// | %%The name and value of the current state of this part (read-only).%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:gfx:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
^ [[:develop:api:efl:text:cursor|Efl.Text.Cursor]] ^^^
|  | **[[:develop:api:efl:text:cursor:method:cursor_char_delete|cursor_char_delete]]** | %%Deletes a single character from position pointed by given cursor.%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_compare|cursor_compare]]** | %%Compare two cursors%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_equal|cursor_equal]]** | %%Check if two cursors are equal%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_free|cursor_free]]** | %%Free existing cursor%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_new|cursor_new]]** | %%Create new cursor%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]** | %%Advances to the first character in this paragraph%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]** | %%Advances to the last character in this paragraph%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_next|cursor_paragraph_next]]** | %%Advances to the start of the next text node%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_paragraph_prev|cursor_paragraph_prev]]** | %%Advances to the end of the previous text node%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_text_insert|cursor_text_insert]]** | %%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_word_end|cursor_word_end]]** | %%Advance to current word end%% |
|  | **[[:develop:api:efl:text:cursor:method:cursor_word_start|cursor_word_start]]** | %%Advance to current word start%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
