~~Title: Efl.Canvas.Layout.Part_Box~~
====== Efl.Canvas.Layout.Part_Box (class) ======

===== Description =====

%%Represents a Box created as part of a layout.%%

%%Its lifetime is limited to one function call only, unless an extra reference is explicitly held.%%

{{page>:develop:api-include:efl:canvas:layout:part_box:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
    * [[:develop:api:efl:ui:drag|Efl.Ui.Drag]] //(interface)//
  * [[:develop:api:efl:pack:linear|Efl.Pack.Linear]] //(interface)//
    * [[:develop:api:efl:pack|Efl.Pack]] //(interface)//
      * [[:develop:api:efl:container|Efl.Container]] //(interface)//
  * [[:develop:api:efl:ui:direction|Efl.Ui.Direction]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:canvas:layout:part_box:method:content_count|content_count]]**// [Overridden from [[:develop:api:efl:container|Efl.Container]]]//\\
> %%Returns the number of UI elements packed in this container.%%
<code c>
int efl_content_count(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:content_iterate|content_iterate]]**// [Overridden from [[:develop:api:efl:container|Efl.Container]]]//\\
> %%Begin iterating over this object's contents.%%
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:content_remove|content_remove]]**// [Overridden from [[:develop:api:efl:container|Efl.Container]]]//\\
> %%Unswallow an object from this container.%%
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:property:direction|direction]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:ui:direction|Efl.Ui.Direction]]]//\\
> %%Returns %%''default''%% if unknown.%%
<code c>
Efl_Ui_Dir efl_ui_direction_get(const Eo *obj);
void efl_ui_direction_set(Eo *obj, Efl_Ui_Dir dir);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack|pack]]**// [Overridden from [[:develop:api:efl:pack|Efl.Pack]]]//\\
> %%Adds an item to this container.%%
<code c>
Eina_Bool efl_pack(Eo *obj, Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_after|pack_after]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Append item after other sub object.%%
<code c>
Eina_Bool efl_pack_after(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_at|pack_at]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Inserts %%''subobj''%% at the specified %%''index''%%.%%
<code c>
Eina_Bool efl_pack_at(Eo *obj, Efl_Gfx *subobj, int index);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_before|pack_before]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Prepend item before other sub object.%%
<code c>
Eina_Bool efl_pack_before(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_begin|pack_begin]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Prepend an object at the beginning of this container.%%
<code c>
Eina_Bool efl_pack_begin(Eo *obj, Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_clear|pack_clear]]**// [Overridden from [[:develop:api:efl:pack|Efl.Pack]]]//\\
> %%Removes all packed contents, and unreferences them.%%
<code c>
Eina_Bool efl_pack_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_content_get|pack_content_get]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Content at a given index in this container.%%
<code c>
Efl_Gfx *efl_pack_content_get(Eo *obj, int index);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_end|pack_end]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Append object at the end of this container.%%
<code c>
Eina_Bool efl_pack_end(Eo *obj, Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_index_get|pack_index_get]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Get the index of a child in this container.%%
<code c>
int efl_pack_index_get(Eo *obj, const Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:pack_unpack_at|pack_unpack_at]]**// [Overridden from [[:develop:api:efl:pack:linear|Efl.Pack.Linear]]]//\\
> %%Pop out item at specified %%''index''%%.%%
<code c>
Efl_Gfx *efl_pack_unpack_at(Eo *obj, int index);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:unpack|unpack]]**// [Overridden from [[:develop:api:efl:pack|Efl.Pack]]]//\\
> %%Removes an existing item from the container, without deleting it.%%
<code c>
Eina_Bool efl_pack_unpack(Eo *obj, Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:canvas:layout:part_box:method:unpack_all|unpack_all]]**// [Overridden from [[:develop:api:efl:pack|Efl.Pack]]]//\\
> %%Removes all packed contents, without unreferencing them.%%
<code c>
Eina_Bool efl_pack_unpack_all(Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:canvas:layout:part|Efl.Canvas.Layout.Part]] ^^^
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_dir|drag_dir]]** //**(get)**// | %%Determines the draggable directions (read-only).%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_page|drag_page]]** //**(get, set)**// | %%The page step increments.%% |
|  | **[[:develop:api:efl:canvas:layout:part:method:drag_page_move|drag_page_move]]** | %%Moves the draggable by %%''dx''%%,%%''dy''%% pages.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_size|drag_size]]** //**(get, set)**// | %%The draggable object relative size.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_step|drag_step]]** //**(get, set)**// | %%The drag step increment.%% |
|  | **[[:develop:api:efl:canvas:layout:part:method:drag_step_move|drag_step_move]]** | %%Moves the draggable by %%''dx''%%,%%''dy''%% steps.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:drag_value|drag_value]]** //**(get, set)**// | %%The draggable object relative location.%% |
|  | **[[:develop:api:efl:canvas:layout:part:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:part_type|part_type]]** //**(get)**// | %%Type of this part in the layout.%% |
|  | **[[:develop:api:efl:canvas:layout:part:property:state|state]]** //**(get)**// | %%The name and value of the current state of this part (read-only).%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:gfx:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:gfx:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
^ [[:develop:api:efl:pack|Efl.Pack]] ^^^
|  | **[[:develop:api:efl:pack:property:pack_align|pack_align]]** //**(get, set)**// | %%Alignment of the container within its bounds%% |
|  | **[[:develop:api:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**// | %%Padding between items contained in this object.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:container|Efl.Container]] ^^^
|  | **[[:develop:api:efl:container:event:content_added|content,added]]** | %%Sent after a new item was added.%% |
|  | **[[:develop:api:efl:container:event:content_removed|content,removed]]** | %%Sent after an item was removed, before unref.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
^ [[:develop:api:efl:pack|Efl.Pack]] ^^^
|  | **[[:develop:api:efl:pack:event:layout_updated|layout,updated]]** | %%Sent after the layout was updated.%% |
