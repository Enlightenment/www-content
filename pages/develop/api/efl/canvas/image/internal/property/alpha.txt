~~Title: Efl.Canvas.Image.Internal.alpha~~
===== Description =====

%%Indicates whether the alpha channel should be used.%%

%%This does not indicate whether the image source file contains an alpha channel, only whether to respect it or discard it.%%


{{page>:develop:api-include:efl:canvas:image:internal:property:alpha:description&nouser&nolink&nodate}}

===== Values =====

  * **alpha** - %%Whether to use alpha channel (%%''true''%%) data or not (%%''false''%%).%%
==== Getter ====

%%Retrieve whether alpha channel data is used on this object.%%


{{page>:develop:api-include:efl:canvas:image:internal:property:alpha:getter_description&nouser&nolink&nodate}}

==== Setter ====

%%Change alpha channel usage for this object.%%

%%This function sets a flag on an image object indicating whether or not to use alpha channel data. A value of %%''true''%% makes it use alpha channel data, and %%''false''%% makes it ignore that data. Note that this has nothing to do with an object's color as manipulated by %%[[:develop:api:efl:gfx:color:property:color|Efl.Gfx.Color.color.set]]%%.%%
{{page>:develop:api-include:efl:canvas:image:internal:property:alpha:getter_description&nouser&nolink&nodate}}


//Overridden from [[:develop:api:efl:gfx:buffer:property:alpha|Efl.Gfx.Buffer.alpha]] **(get, set)**.//===== Signature =====

<code>
@property alpha @pure_virtual {
    get {
        values {
            alpha: bool;
        }
    }
    set {
        values {
            alpha: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_gfx_buffer_alpha_get(const Eo *obj);
void efl_gfx_buffer_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

===== Implemented by =====

  * [[:develop:api:efl:gfx:buffer:property:alpha|Efl.Gfx.Buffer.alpha]]

