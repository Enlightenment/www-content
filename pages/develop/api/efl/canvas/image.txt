~~Title: Efl.Canvas.Image~~
====== Efl.Canvas.Image (class) ======

===== Description =====

%%Low-level Image object.%%

%%This replaces the legacy Evas Object Image, with only image-related interfaces: file and data images only. This object does not implement any special features such as proxy, snapshot or GL.%%

{{page>:develop:api-include:efl:canvas:image:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:canvas:image:internal|Efl.Canvas.Image.Internal]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:canvas:image:internal|Efl.Canvas.Image.Internal]] //(class)//
    * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
      * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
      * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
      * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
      * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
      * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
    * [[:develop:api:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]] //(mixin)//
      * [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:image|Efl.Image]] //(interface)//
    * [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]] //(interface)//
    * [[:develop:api:efl:gfx:fill|Efl.Gfx.Fill]] //(interface)//
    * [[:develop:api:efl:gfx:view|Efl.Gfx.View]] //(interface)//
    * [[:develop:api:efl:orientation|Efl.Orientation]] //(interface)//
    * [[:develop:api:efl:flipable|Efl.Flipable]] //(interface)//
    * [[:develop:api:efl:file|Efl.File]] //(mixin)//
  * [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]] //(interface)//
  * [[:develop:api:efl:image:load|Efl.Image.Load]] //(interface)//
  * [[:develop:api:efl:image:animated|Efl.Image.Animated]] //(interface)//
  * [[:develop:api:efl:file|Efl.File]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:canvas:image:property:animated|animated]]** //**(get)**//// [Overridden from [[:develop:api:efl:image:animated|Efl.Image.Animated]]]//\\
> %%Check if an image can be animated (has multiple frames).%%
<code c>
Eina_Bool efl_image_animated_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:property:animated_frame|animated_frame]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:animated|Efl.Image.Animated]]]//\\
> %%Index of the current frame of an animated image.%%
<code c>
int efl_image_animated_frame_get(const Eo *obj);
Eina_Bool efl_image_animated_frame_set(Eo *obj, int frame_index);
</code>
\\
**[[:develop:api:efl:canvas:image:property:animated_frame_count|animated_frame_count]]** //**(get)**//// [Overridden from [[:develop:api:efl:image:animated|Efl.Image.Animated]]]//\\
> %%Get the total number of frames of the image, if animated.%%
<code c>
int efl_image_animated_frame_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:property:animated_frame_duration|animated_frame_duration]]** //**(get)**//// [Overridden from [[:develop:api:efl:image:animated|Efl.Image.Animated]]]//\\
> %%Get the duration of a sequence of frames.%%
<code c>
double efl_image_animated_frame_duration_get(const Eo *obj, int start_frame, int frame_num);
</code>
\\
**[[:develop:api:efl:canvas:image:property:animated_loop_count|animated_loop_count]]** //**(get)**//// [Overridden from [[:develop:api:efl:image:animated|Efl.Image.Animated]]]//\\
> %%Get the number times the animation of the object loops.%%
<code c>
int efl_image_animated_loop_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:property:animated_loop_type|animated_loop_type]]** //**(get)**//// [Overridden from [[:develop:api:efl:image:animated|Efl.Image.Animated]]]//\\
> %%Get the kind of looping the image object does.%%
<code c>
Efl_Image_Animated_Loop_Hint efl_image_animated_loop_type_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:method:buffer_copy_set|buffer_copy_set]]**// [Overridden from [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]]]//\\
> %%Set the pixels for this buffer by copying them, or allocate a new memory region.%%
<code c>
Eina_Bool efl_gfx_buffer_copy_set(Eo *obj, const Eina_Slice *slice, Eina_Size2D size, int stride, Efl_Gfx_Colorspace cspace, int plane);
</code>
\\
**[[:develop:api:efl:canvas:image:method:buffer_managed_get|buffer_managed_get]]**// [Overridden from [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]]]//\\
> %%Get a direct pointer to the internal pixel data, if available.%%
<code c>
Eina_Slice efl_gfx_buffer_managed_get(Eo *obj, int plane);
</code>
\\
**[[:develop:api:efl:canvas:image:method:buffer_managed_set|buffer_managed_set]]**// [Overridden from [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]]]//\\
> %%Set the pixels for this buffer, managed externally by the client.%%
<code c>
Eina_Bool efl_gfx_buffer_managed_set(Eo *obj, const Eina_Slice *slice, Eina_Size2D size, int stride, Efl_Gfx_Colorspace cspace, int plane);
</code>
\\
**[[:develop:api:efl:canvas:image:method:buffer_map|buffer_map]]**// [Overridden from [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]]]//\\
> %%Map a region of this buffer for read or write access by the CPU.%%
<code c>
Eina_Rw_Slice efl_gfx_buffer_map(Eo *obj, Efl_Gfx_Buffer_Access_Mode mode, const Eina_Rect *region, Efl_Gfx_Colorspace cspace, int plane, int *stride);
</code>
\\
**[[:develop:api:efl:canvas:image:property:buffer_size|buffer_size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]]]//\\
> %%Rectangular size of the pixel buffer as allocated in memory.%%
<code c>
Eina_Size2D efl_gfx_buffer_size_get(const Eo *obj);
void efl_gfx_buffer_size_set(Eo *obj, Eina_Size2D sz);
</code>
\\
**[[:develop:api:efl:canvas:image:method:buffer_unmap|buffer_unmap]]**// [Overridden from [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]]]//\\
> %%Unmap a region of this buffer, and update the internal data if needed.%%
<code c>
Eina_Bool efl_gfx_buffer_unmap(Eo *obj, Eina_Rw_Slice slice);
</code>
\\
**[[:develop:api:efl:canvas:image:method:load_async_cancel|load_async_cancel]]**// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%Cancel preloading an image object's image data in the background.%%
<code c>
void efl_image_load_async_cancel(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:method:load_async_start|load_async_start]]**// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%Begin preloading an image object's image data in the background.%%
<code c>
void efl_image_load_async_start(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_dpi|load_dpi]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> 
<code c>
double efl_image_load_dpi_get(const Eo *obj);
void efl_image_load_dpi_set(Eo *obj, double dpi);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_error|load_error]]** //**(get)**//// [Overridden from [[:develop:api:efl:file|Efl.File]]]//\\
> %%Gets the (last) file loading error for a given object.%%
<code c>
Efl_Image_Load_Error efl_file_load_error_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_orientation|load_orientation]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%Defines whether the orientation information in the image file should be honored.%%
<code c>
Eina_Bool efl_image_load_orientation_get(const Eo *obj);
void efl_image_load_orientation_set(Eo *obj, Eina_Bool enable);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_region|load_region]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> 
<code c>
Eina_Rect efl_image_load_region_get(const Eo *obj);
void efl_image_load_region_set(Eo *obj, Eina_Rect region);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_region_support|load_region_support]]** //**(get)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%Indicates whether the %%[[:develop:api:efl:image:load:property:load_region|Efl.Image.Load.load_region]]%% property is supported for the current file.%%
<code c>
Eina_Bool efl_image_load_region_support_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_scale_down|load_scale_down]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%The scale down factor is a divider on the original image size.%%
<code c>
int efl_image_load_scale_down_get(const Eo *obj);
void efl_image_load_scale_down_set(Eo *obj, int div);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_size|load_size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%The load size of an image.%%
<code c>
Eina_Size2D efl_image_load_size_get(const Eo *obj);
void efl_image_load_size_set(Eo *obj, Eina_Size2D size);
</code>
\\
**[[:develop:api:efl:canvas:image:property:load_skip_header|load_skip_header]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%Initial load should skip header check and leave it all to data load%%
<code c>
Eina_Bool efl_image_load_skip_header_get(const Eo *obj);
void efl_image_load_skip_header_set(Eo *obj, Eina_Bool skip);
</code>
\\
**[[:develop:api:efl:canvas:image:property:mmap|mmap]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:file|Efl.File]]]//\\
> 
<code c>
void efl_file_mmap_get(const Eo *obj, const Eina_File **f, const char **key);
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:canvas:filter:internal|Efl.Canvas.Filter.Internal]] ^^^
|  | **[[:develop:api:efl:canvas:filter:internal:property:filter_data|filter_data]]** //**(get, set)**// | %%Extra data used by the filter program.%% |
|  | **[[:develop:api:efl:canvas:filter:internal:property:filter_padding|filter_padding]]** //**(get)**// | %%Required padding to apply this filter without cropping.%% |
|  | **[[:develop:api:efl:canvas:filter:internal:property:filter_source|filter_source]]** //**(get, set)**// | %%Bind an object to use as a mask or texture in a filter program.%% |
|  | **[[:develop:api:efl:canvas:filter:internal:property:filter_state|filter_state]]** //**(get, set)**// | %%Set the current state of the filter.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:property:filter_changed|filter_changed]]** //**(set)**// | %%Marks this filter as changed.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:property:filter_invalid|filter_invalid]]** //**(set)**// | %%Marks this filter as invalid.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:filter:internal:property:filter_output_buffer|filter_output_buffer]]** //**(get)**// | %%Retrieve cached output buffer, if any.%% |
^ [[:develop:api:efl:canvas:image:internal|Efl.Canvas.Image.Internal]] ^^^
|  | **[[:develop:api:efl:canvas:image:internal:property:alpha|alpha]]** //**(get, set)**// | %%Indicates whether the alpha channel should be used.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:border|border]]** //**(get, set)**// | %%Dimensions of this image's border, a region that does not scale with the center area.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:border_center_fill|border_center_fill]]** //**(get, set)**// | %%Specifies how the center part of the object (not the borders) should be drawn when EFL is rendering it.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:border_scale|border_scale]]** //**(get, set)**// | %%Scaling factor applied to the image borders.%% |
|  | **[[:develop:api:efl:canvas:image:internal:method:buffer_update_add|buffer_update_add]]** | %%Mark a sub-region of the given image object to be redrawn.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:colorspace|colorspace]]** //**(get)**// | %%The colorspace defines how pixels are encoded in the image in memory.%% |
|  | **[[:develop:api:efl:canvas:image:internal:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:content_hint|content_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:image:internal:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:canvas:image:internal:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:fill|fill]]** //**(get, set)**// | %%Specifies how to tile an image to fill its rectangle geometry.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:fill_auto|fill_auto]]** //**(get, set)**// | %%Binds the object's %%[[:develop:api:efl:gfx:fill:property:fill|Efl.Gfx.Fill.fill]]%% property to its actual geometry.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:filter_program|filter_program]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:image:internal:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:flip|flip]]** //**(get, set)**// | %%Control the flip of the given image%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:image_size|image_size]]** //**(get)**// | %%This represents the size of the original image in pixels.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:orientation|orientation]]** //**(get, set)**// | %%Control the orientation of a given object.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:ratio|ratio]]** //**(get)**// | %%The native width/height ratio of the image.%% |
|  | **[[:develop:api:efl:canvas:image:internal:method:save|save]]** | %%Save the given image object's contents to an (image) file.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:scale_hint|scale_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:image:internal:property:smooth_scale|smooth_scale]]** //**(get, set)**// | %%Whether to use high-quality image scaling algorithm for this image.%% |
|  | **[[:develop:api:efl:canvas:image:internal:property:view_size|view_size]]** //**(get, set)**// | %%The dimensions of this object's viewport.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:image:internal:method:filter_dirty|filter_dirty]]** | %%Called when filter changes must trigger a redraw of the object.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:image:internal:method:filter_input_alpha|filter_input_alpha]]** | %%Called by Efl.Canvas.Filter.Internal to determine whether the input is alpha or rgba.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:image:internal:method:filter_input_render|filter_input_render]]** | %%Called by Efl.Canvas.Filter.Internal when the parent class must render the input.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:image:internal:method:filter_state_prepare|filter_state_prepare]]** | %%Called by Efl.Canvas.Filter.Internal to request the parent class for state information (color, etc...).%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:file|Efl.File]] ^^^
|  | **[[:develop:api:efl:file:property:file|file]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:buffer|Efl.Gfx.Buffer]] ^^^
|  | **[[:develop:api:efl:gfx:buffer:property:buffer_borders|buffer_borders]]** //**(get)**// | %%Duplicated pixel borders inside this buffer.%% |
|  | **[[:develop:api:efl:gfx:buffer:property:stride|stride]]** //**(get)**// | %%Length in bytes of one row of pixels in memory.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lighting effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lighting effect to the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:property:scale_type|scale_type]]** //**(get, set)**// | %%Control how the image is scaled.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:event:preload|preload]]** | %%Image data has been preloaded.%% |
|  | **[[:develop:api:efl:image:event:unload|unload]]** | %%Image data has been unloaded (by some mechanism in EFL that threw out the original image data).%% |
^ [[:develop:api:efl:image:load|Efl.Image.Load]] ^^^
|  | **[[:develop:api:efl:image:load:event:load_cancelled|load,cancelled]]** | %%Called when the image loading was cancelled%% |
|  | **[[:develop:api:efl:image:load:event:load_done|load,done]]** | %%Called when he image was loaded%% |
|  | **[[:develop:api:efl:image:load:event:load_error|load,error]]** | %%Called when an error happened during image loading%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
