~~Title: Efl.Canvas.Video~~
====== Efl.Canvas.Video (class) ======

===== Description =====

%%Efl canvas video class%%

{{page>:develop:api-include:efl:canvas:video:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)// => [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] //(class)//
    * [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] //(class)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
      * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
      * [[:develop:api:efl:animator|Efl.Animator]] //(interface)//
      * [[:develop:api:efl:input:interface|Efl.Input.Interface]] //(interface)//
      * [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
      * [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
        * [[:develop:api:efl:interface|Efl.Interface]] //(interface)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:ui:base|Efl.Ui.Base]] //(interface)//
      * [[:develop:api:efl:canvas:pointer|Efl.Canvas.Pointer]] //(interface)//
  * [[:develop:api:efl:file|Efl.File]] //(mixin)//
  * [[:develop:api:efl:player|Efl.Player]] //(interface)//
  * [[:develop:api:efl:image|Efl.Image]] //(interface)//
  * [[:develop:api:efl:image:load|Efl.Image.Load]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:canvas:video:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:video:property:engine|engine]]** //**(set)**//\\
> %%Initializes an emotion object with the specified module.%%
<code c>
Eina_Bool efl_canvas_video_engine_set(Eo *obj, const char *module_filename);
</code>
\\
**[[:develop:api:efl:canvas:video:property:file|file]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:file|Efl.File]]]//\\
> 
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>
\\
**[[:develop:api:efl:canvas:video:property:length|length]]** //**(get)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> %%Get the length of play for the media file.%%
<code c>
double efl_player_length_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:video:property:load_size|load_size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image:load|Efl.Image.Load]]]//\\
> %%The load size of an image.%%
<code c>
Eina_Size2D efl_image_load_size_get(const Eo *obj);
void efl_image_load_size_set(Eo *obj, Eina_Size2D size);
</code>
\\
**[[:develop:api:efl:canvas:video:property:mute|mute]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> %%This property controls the audio mute state.%%
<code c>
Eina_Bool efl_player_mute_get(const Eo *obj);
void efl_player_mute_set(Eo *obj, Eina_Bool mute);
</code>
\\
**[[:develop:api:efl:canvas:video:property:option|option]]** //**(set)**//\\
> %%Set the specified option for the current module.%%
<code c>
void efl_canvas_video_option_set(Eo *obj, const char *opt, const char *val);
</code>
\\
**[[:develop:api:efl:canvas:video:property:play|play]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> 
<code c>
Eina_Bool efl_player_play_get(const Eo *obj);
void efl_player_play_set(Eo *obj, Eina_Bool play);
</code>
\\
**[[:develop:api:efl:canvas:video:property:position|position]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> 
<code c>
double efl_player_position_get(const Eo *obj);
void efl_player_position_set(Eo *obj, double sec);
</code>
\\
**[[:develop:api:efl:canvas:video:property:position|position]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx|Efl.Gfx]]]//\\
> %%The 2D position of a canvas object.%%
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>
\\
**[[:develop:api:efl:canvas:video:property:progress|progress]]** //**(get)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> %%Get how much of the file has been played.%%
<code c>
double efl_player_progress_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:video:property:ratio|ratio]]** //**(get)**//// [Overridden from [[:develop:api:efl:image|Efl.Image]]]//\\
> %%The native width/height ratio of the image.%%
<code c>
double efl_image_ratio_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:video:property:seekable|seekable]]** //**(get)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> %%Get whether the media file is seekable.%%
<code c>
Eina_Bool efl_player_seekable_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:video:property:size|size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx|Efl.Gfx]]]//\\
> %%The 2D size of a canvas object.%%
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>
\\
**[[:develop:api:efl:canvas:video:property:smooth_scale|smooth_scale]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:image|Efl.Image]]]//\\
> %%Whether to use high-quality image scaling algorithm for this image.%%
<code c>
Eina_Bool efl_image_smooth_scale_get(const Eo *obj);
void efl_image_smooth_scale_set(Eo *obj, Eina_Bool smooth_scale);
</code>
\\
**[[:develop:api:efl:canvas:video:property:volume|volume]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:player|Efl.Player]]]//\\
> %%Control the audio volume.%%
<code c>
double efl_player_volume_get(const Eo *obj);
void efl_player_volume_set(Eo *obj, double volume);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:canvas:group|Efl.Canvas.Group]] ^^^
|  | **[[:develop:api:efl:canvas:group:property:clip|clip]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:group:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:group:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:canvas:group:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_calculate|group_calculate]]** | %%Triggers an immediate recalculation of this object's geometry.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_change|group_change]]** | %%Marks the object as dirty.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_add|group_member_add]]** | %%Set a canvas object as a member of a given group (or smart object).%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_del|group_member_del]]** | %%Removes a member object from a given smart object.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_member_is|group_member_is]]** | %%Finds out if a given object is a member of this group.%% |
|  | **[[:develop:api:efl:canvas:group:method:group_members_iterate|group_members_iterate]]** | %%Returns an iterator over the children of this object, which are canvas objects.%% |
|  | **[[:develop:api:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**// | %%Indicates that the group's layout needs to be recalculated.%% |
|  | **[[:develop:api:efl:canvas:group:property:no_render|no_render]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// | %%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%% |
|  | **[[:develop:api:efl:canvas:group:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |
|  ''protected'' | **[[:develop:api:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// | %%The internal clipper object used by this group.%% |
^ [[:develop:api:efl:canvas:object|Efl.Canvas.Object]] ^^^
|  | **[[:develop:api:efl:canvas:object:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:canvas:object:property:clipees|clipees]]** //**(get)**// | %%Return a list of objects currently clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:clipees_has|clipees_has]]** | %%Test if any object is clipped by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:coords_inside|coords_inside]]** //**(get)**// | %%Returns whether the coords are logically inside the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:canvas:object:property:event_animation|event_animation]]** //**(get, set)**// | %%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%% |
|  | **[[:develop:api:efl:canvas:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// | %%Hints for an object's alignment.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// | %%Defines the aspect ratio to respect when scaling this object.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// | %%Read-only minimum size combining both %%[[:develop:api:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// | %%Hints for an object's margin or padding space.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// | %%Hints on the object's maximum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// | %%Hints on the object's minimum size.%% |
|  ''protected set'' | **[[:develop:api:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// | %%Internal hints for an object's minimum size.%% |
|  | **[[:develop:api:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// | %%Hints for an object's weight.%% |
|  | **[[:develop:api:efl:canvas:object:property:is_frame_object|is_frame_object]]** //**(get, set)**// | %%If %%''true''%% the object belongs to the window border decorations.%% |
|  | **[[:develop:api:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**// | %%Indicates that this object is the keyboard event receiver on its canvas.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_grab|key_grab]]** | %%Requests %%''keyname''%% key events be directed to %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:method:key_ungrab|key_ungrab]]** | %%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%% |
|  | **[[:develop:api:efl:canvas:object:property:layer|layer]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:canvas:object:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**// | %%Returns whether the mouse pointer is logically inside the canvas.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**// | %%Low-level pointer behaviour.%% |
|  | **[[:develop:api:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**// | %%Low-level pointer behaviour by device. See %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:api:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%% |
|  | **[[:develop:api:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
|  | **[[:develop:api:efl:canvas:object:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**// | %%Render mode to be used for compositing the Evas object.%% |
|  | **[[:develop:api:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
|  | **[[:develop:api:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**// | %%Check if this object is focused.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_add|seat_focus_add]]** | %%Add a seat to the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_check|seat_focus_check]]** | %%Check if this object is focused by a given seat%% |
|  | **[[:develop:api:efl:canvas:object:method:seat_focus_del|seat_focus_del]]** | %%Remove a seat from the focus list.%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:canvas:object:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  ''protected'' | **[[:develop:api:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// | %%Gets the parent smart object of a given Evas object, if it has one.%% |
^ [[:develop:api:efl:file|Efl.File]] ^^^
|  | **[[:develop:api:efl:file:property:load_error|load_error]]** //**(get)**// | %%Gets the (last) file loading error for a given object.%% |
|  | **[[:develop:api:efl:file:property:mmap|mmap]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:file:method:save|save]]** | %%Save the given image object's contents to an (image) file.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:map|Efl.Gfx.Map]] ^^^
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d|lightning_3d]]** | %%Apply a lighting effect on the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]** | %%Apply a lighting effect to the object.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**// | %%Alpha flag for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**// | %%Clockwise state of a map (read-only).%% |
|  | **[[:develop:api:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**// | %%Color of a vertex in the map.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**// | %%A point's absolute coordinate on the canvas.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_has|map_has]]** | %%Read-only property indicating whether an object is mapped.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**// | %%Number of points of a map.%% |
|  | **[[:develop:api:efl:gfx:map:method:map_reset|map_reset]]** | %%Resets the map transformation to its default state.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**// | %%Smoothing state for map rendering.%% |
|  | **[[:develop:api:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**// | %%Map point's U and V texture source point.%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d|perspective_3d]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]** | %%Apply a perspective transform to the map%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate|rotate]]** | %%Apply a rotation to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d|rotate_3d]]** | %%Rotate the object around 3 axes in 3D.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]** | %%Rotate the object around 3 axes in 3D, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_absolute|rotate_absolute]]** | %%Apply a rotation to the object, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat|rotate_quat]]** | %%Rotate the object in 3D using a unit quaternion.%% |
|  | **[[:develop:api:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]** | %%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%% |
|  | **[[:develop:api:efl:gfx:map:method:translate|translate]]** | %%Apply a translation to the object using map.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom|zoom]]** | %%Apply a zoom to the object.%% |
|  | **[[:develop:api:efl:gfx:map:method:zoom_absolute|zoom_absolute]]** | %%Apply a zoom to the object, using absolute coordinates.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**// | %%Base size for objects with sizing restrictions.%% |
|  | **[[:develop:api:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**// | %%Step size for objects with sizing restrictions.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:property:border|border]]** //**(get, set)**// | %%Dimensions of this image's border, a region that does not scale with the center area.%% |
|  | **[[:develop:api:efl:image:property:border_center_fill|border_center_fill]]** //**(get, set)**// | %%Specifies how the center part of the object (not the borders) should be drawn when EFL is rendering it.%% |
|  | **[[:develop:api:efl:image:property:border_scale|border_scale]]** //**(get, set)**// | %%Scaling factor applied to the image borders.%% |
|  | **[[:develop:api:efl:image:property:content_hint|content_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:property:image_size|image_size]]** //**(get)**// | %%This represents the size of the original image in pixels.%% |
|  | **[[:develop:api:efl:image:property:scale_hint|scale_hint]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:property:scale_type|scale_type]]** //**(get, set)**// | %%Control how the image is scaled.%% |
^ [[:develop:api:efl:image:load|Efl.Image.Load]] ^^^
|  | **[[:develop:api:efl:image:load:method:load_async_cancel|load_async_cancel]]** | %%Cancel preloading an image object's image data in the background.%% |
|  | **[[:develop:api:efl:image:load:method:load_async_start|load_async_start]]** | %%Begin preloading an image object's image data in the background.%% |
|  | **[[:develop:api:efl:image:load:property:load_dpi|load_dpi]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:load:property:load_orientation|load_orientation]]** //**(get, set)**// | %%Defines whether the orientation information in the image file should be honored.%% |
|  | **[[:develop:api:efl:image:load:property:load_region|load_region]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:image:load:property:load_region_support|load_region_support]]** //**(get)**// | %%Indicates whether the %%[[:develop:api:efl:image:load:property:load_region|Efl.Image.Load.load_region]]%% property is supported for the current file.%% |
|  | **[[:develop:api:efl:image:load:property:load_scale_down|load_scale_down]]** //**(get, set)**// | %%The scale down factor is a divider on the original image size.%% |
|  | **[[:develop:api:efl:image:load:property:load_skip_header|load_skip_header]]** //**(get, set)**// | %%Initial load should skip header check and leave it all to data load%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:player|Efl.Player]] ^^^
|  | **[[:develop:api:efl:player:property:play_speed|play_speed]]** //**(get, set)**// | %%Control the play speed of the media file.%% |
|  | **[[:develop:api:efl:player:property:playable|playable]]** //**(get)**// | %%Whether or not the object data can be played.%% |
^ [[:develop:api:efl:ui:base|Efl.Ui.Base]] ^^^
|  | **[[:develop:api:efl:ui:base:property:language|language]]** //**(get, set)**// | %%The (human) language for this object.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored|mirrored]]** //**(get, set)**// | %%Whether this object should be mirrored.%% |
|  | **[[:develop:api:efl:ui:base:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// | %%Whether the property %%[[:develop:api:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%% |

===== Events =====

**[[:develop:api:efl:canvas:video:event:button_change|button,change]]**\\
> %%Called when button changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_BUTTON_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:button_num_change|button,num,change]]**\\
> %%Called when button number changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_BUTTON_NUM_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:channels_change|channels,change]]**\\
> %%Called when the channels changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_CHANNELS_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:frame_decode|frame,decode]]**\\
> %%Called when the frame was decoded%%
<code c>
EFL_CANVAS_VIDEO_EVENT_FRAME_DECODE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:frame_resize|frame,resize]]**\\
> %%Called when the frame was resized%%
<code c>
EFL_CANVAS_VIDEO_EVENT_FRAME_RESIZE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:length_change|length,change]]**\\
> %%Called when the length changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_LENGTH_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:open_done|open,done]]**\\
> %%Called when the files was opened%%
<code c>
EFL_CANVAS_VIDEO_EVENT_OPEN_DONE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:playback_start|playback,start]]**\\
> %%Called when playback started%%
<code c>
EFL_CANVAS_VIDEO_EVENT_PLAYBACK_START(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:playback_stop|playback,stop]]**\\
> %%Called when playback stopped%%
<code c>
EFL_CANVAS_VIDEO_EVENT_PLAYBACK_STOP(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:position_change|position,change]]**\\
> %%Called when the position changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_POSITION_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:position_load_done|position,load,done]]**\\
> %%Called when the position loaded%%
<code c>
EFL_CANVAS_VIDEO_EVENT_POSITION_LOAD_DONE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:position_load_fail|position,load,fail]]**\\
> %%Called when loading the position failed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_POSITION_LOAD_FAIL(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:position_save_done|position,save,done]]**\\
> %%Called when the position was saved%%
<code c>
EFL_CANVAS_VIDEO_EVENT_POSITION_SAVE_DONE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:position_save_fail|position,save,fail]]**\\
> %%Called when saving the position failed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_POSITION_SAVE_FAIL(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:progress_change|progress,change]]**\\
> %%Called when the progress changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_PROGRESS_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:ref_change|ref,change]]**\\
> %%Called when ref changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_REF_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:title_change|title,change]]**\\
> %%Called when the title changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_TITLE_CHANGE(void)
</code>
\\ **[[:develop:api:efl:canvas:video:event:volume_change|volume,change]]**\\
> %%Called when volume changed%%
<code c>
EFL_CANVAS_VIDEO_EVENT_VOLUME_CHANGE(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:animator|Efl.Animator]] ^^^
|  | **[[:develop:api:efl:animator:event:animator_tick|animator,tick]]** | %%Animator tick synchronized with screen vsync if possible.%% |
^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] ^^^
|  | **[[:develop:api:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]** | %%Object size hints changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:image|Efl.Image]] ^^^
|  | **[[:develop:api:efl:image:event:preload|preload]]** | %%Image data has been preloaded.%% |
|  | **[[:develop:api:efl:image:event:unload|unload]]** | %%Image data has been unloaded (by some mechanism in EFL that threw out the original image data).%% |
^ [[:develop:api:efl:image:load|Efl.Image.Load]] ^^^
|  | **[[:develop:api:efl:image:load:event:load_cancelled|load,cancelled]]** | %%Called when the image loading was cancelled%% |
|  | **[[:develop:api:efl:image:load:event:load_done|load,done]]** | %%Called when he image was loaded%% |
|  | **[[:develop:api:efl:image:load:event:load_error|load,error]]** | %%Called when an error happened during image loading%% |
^ [[:develop:api:efl:input:interface|Efl.Input.Interface]] ^^^
|  | **[[:develop:api:efl:input:interface:event:finger_down|finger,down]]** | %%Finger pressed (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_move|finger,move]]** | %%Finger moved (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:finger_up|finger,up]]** | %%Finger released (finger id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:focus_in|focus,in]]** | %%A focus in event.%% |
|  | **[[:develop:api:efl:input:interface:event:focus_out|focus,out]]** | %%A focus out event.%% |
|  | **[[:develop:api:efl:input:interface:event:hold|hold]]** | %%All input events are on hold or resumed.%% |
|  | **[[:develop:api:efl:input:interface:event:key_down|key,down]]** | %%Keyboard key press.%% |
|  | **[[:develop:api:efl:input:interface:event:key_up|key,up]]** | %%Keyboard key release.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_axis|pointer,axis]]** | %%Pen or other axis event update.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_cancel|pointer,cancel]]** | %%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_down|pointer,down]]** | %%Main pointer button pressed (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_in|pointer,in]]** | %%Pointer entered a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_move|pointer,move]]** | %%Main pointer move (current and previous positions are known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_out|pointer,out]]** | %%Pointer left a window or a widget.%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_up|pointer,up]]** | %%Main pointer button released (button id is known).%% |
|  | **[[:develop:api:efl:input:interface:event:pointer_wheel|pointer,wheel]]** | %%Mouse wheel event.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
