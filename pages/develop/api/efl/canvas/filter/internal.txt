~~Title: Efl.Canvas.Filter.Internal~~
====== Efl.Canvas.Filter.Internal (mixin) ======

===== Description =====

%%Evas internal implementation of filters.%%

{{page>:develop:api-include:efl:canvas:filter:internal:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//
++++ Full hierarchy |

  * [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//
  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:canvas:filter:internal:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_data|filter_data]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Extra data used by the filter program.%%
<code c>
void efl_gfx_filter_data_get(const Eo *obj, const char *name, const char **value, Eina_Bool *execute);
void efl_gfx_filter_data_set(Eo *obj, const char *name, const char *value, Eina_Bool execute);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_padding|filter_padding]]** //**(get)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Required padding to apply this filter without cropping.%%
<code c>
void efl_gfx_filter_padding_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_program|filter_program]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> 
<code c>
void efl_gfx_filter_program_get(const Eo *obj, const char **code, const char **name);
void efl_gfx_filter_program_set(Eo *obj, const char *code, const char *name);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_source|filter_source]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Bind an object to use as a mask or texture in a filter program.%%
<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_state|filter_state]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:gfx:filter|Efl.Gfx.Filter]]]//\\
> %%Set the current state of the filter.%%
<code c>
void efl_gfx_filter_state_get(const Eo *obj, const char **cur_state, double *cur_val, const char **next_state, double *next_val, double *pos);
void efl_gfx_filter_state_set(Eo *obj, const char *cur_state, double cur_val, const char *next_state, double next_val, double pos);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_changed|filter_changed]]** //**(set)**// ''protected''\\
> %%Marks this filter as changed.%%
<code c>
void evas_filter_changed_set(Eo *obj, Eina_Bool val);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:method:filter_dirty|filter_dirty]]** ''protected''\\
> %%Called when the filter changes must trigger a redraw of the object.%%
<code c>
void evas_filter_dirty(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:method:filter_input_alpha|filter_input_alpha]]** ''protected''\\
> %%Called by Efl.Canvas.Filter.Internal to determine whether the input is alpha or rgba.%%
<code c>
Eina_Bool evas_filter_input_alpha(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:method:filter_input_render|filter_input_render]]** ''protected''\\
> %%Called by Efl.Canvas.Filter.Internal when the parent class must render the input.%%
<code c>
Eina_Bool evas_filter_input_render(Eo *obj, void *filter, void *engine, void *output, void *drawctx, void *data, int l, int r, int t, int b, int x, int y, Eina_Bool do_async);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_invalid|filter_invalid]]** //**(set)**// ''protected''\\
> %%Marks this filter as invalid.%%
<code c>
void evas_filter_invalid_set(Eo *obj, Eina_Bool val);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:property:filter_output_buffer|filter_output_buffer]]** //**(get)**// ''protected''\\
> %%Retrieve cached output buffer, if any.%%
<code c>
void *evas_filter_output_buffer_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:filter:internal:method:filter_state_prepare|filter_state_prepare]]** ''protected''\\
> %%Called by Efl.Canvas.Filter.Internal to request the parent class for state information (color, etc...).%%
<code c>
void evas_filter_state_prepare(Eo *obj, Efl_Canvas_Filter_State *state, void *data);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
