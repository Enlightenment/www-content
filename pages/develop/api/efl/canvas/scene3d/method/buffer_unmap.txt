~~Title: Efl.Canvas.Scene3d.buffer_unmap~~
//Overridden from [[:develop:api:efl:gfx:buffer:method:buffer_unmap|Efl.Gfx.Buffer.buffer_unmap]].//===== Signature =====

<code>
buffer_unmap @pure_virtual {
    params {
        @in slice: Eina.Rw_Slice;
    }
    return: bool;
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_gfx_buffer_unmap(Eo *obj, Eina_Rw_Slice slice);
</code>

===== Parameters =====

  * **slice** //(in)// - %%Data slice returned by a previous call to map.%%

===== Description =====

%%Unmap a region of this buffer, and update the internal data if needed.%%

%%EFL will update the internal image if the map had write access.%%

<note>
%%The %%''slice''%% struct does not need to be the one returned by %%[[:develop:api:efl:gfx:buffer:method:buffer_map|Efl.Gfx.Buffer.buffer_map]]%%, only its contents (%%''mem''%% and %%''len''%%) must match. But after a call to %%[[:develop:api:efl:gfx:buffer:method:buffer_unmap|Efl.Gfx.Buffer.buffer_unmap]]%% the original %%''slice''%% structure is not valid anymore.%%
</note>
{{page>:develop:api-include:efl:canvas:scene3d:method:buffer_unmap:description&nouser&nolink&nodate}}

===== Implemented by =====

  * [[:develop:api:efl:gfx:buffer:method:buffer_unmap|Efl.Gfx.Buffer.buffer_unmap]]

