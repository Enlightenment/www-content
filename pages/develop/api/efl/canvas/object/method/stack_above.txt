~~Title: Efl.Canvas.Object.stack_above~~
//Overridden from [[:develop:api:efl:gfx:stack:method:stack_above|Efl.Gfx.Stack.stack_above]].//===== Signature =====

<code>
stack_above @pure_virtual {
    params {
        @in above: free(Efl.Gfx.Stack, efl_del) @nonull;
    }
}
</code>

===== C signature =====

<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

===== Parameters =====

  * **above** //(in)// - %%The object above which to stack%%

===== Description =====

%%Stack %%''obj''%% immediately %%''above''%%%%

%%Objects, in a given canvas, are stacked in the order they get added to it.  This means that, if they overlap, the highest ones will cover the lowest ones, in that order. This function is a way to change the stacking order for the objects.%%

%%This function is intended to be used with objects belonging to the same layer in a given canvas, otherwise it will fail (and accomplish nothing).%%

%%If you have smart objects on your canvas and %%''obj''%% is a member of one of them, then %%''above''%% must also be a member of the same smart object.%%

%%Similarly, if %%''obj''%% is not a member of a smart object, %%''above''%% must not be either.%%

%%See also %%[[:develop:api:interface:efl:gfx:stack:property:layer|Efl.Gfx.Stack.layer.get]]%%(), %%[[:develop:api:interface:efl:gfx:stack:property:layer|Efl.Gfx.Stack.layer.set]]%%() and %%[[:develop:api:interface:efl:gfx:stack:method:stack_below|Efl.Gfx.Stack.stack_below]]%%()%%
{{page>:develop:api-include:efl:canvas:object:method:stack_above:description&nouser&nolink&nodate}}

===== Implemented by =====

  * [[:develop:api:efl:gfx:stack:method:stack_above|Efl.Gfx.Stack.stack_above]]

