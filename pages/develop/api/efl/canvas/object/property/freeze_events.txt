~~Title: Efl.Canvas.Object.freeze_events~~
===== Description =====




{{page>:develop:api-include:efl:canvas:object:property:freeze_events:description&nouser&nolink&nodate}}

===== Values =====

  * **freeze** - %%Pass when %%''obj''%% is to freeze events (%%''true''%%) or not (%%''false''%%).%%
==== Getter ====

%%Determine whether an object is set to freeze (discard) events.%%

//Since 1.1//


{{page>:develop:api-include:efl:canvas:object:property:freeze_events:getter_description&nouser&nolink&nodate}}

==== Setter ====

%%Set whether an Evas object is to freeze (discard) events.%%

%%If %%''freeze''%% is %%''true''%%, it will force events on %%''obj''%% to be discarded. Unlike %%[[:develop:api:efl:canvas:object:property:pass_events|Efl.Canvas.Object.pass_events.set]]%%, events will not be passed to next lower object. This API can be used for blocking events while %%''obj''%% is in transition.%%

%%If %%''freeze''%% is %%''false''%%, events will be processed on that object as normal.%%

<note warning>
%%If you block only key/mouse up events with this API, you can't be sure of the state of any objects that have only key/mouse down events.%%
</note>

//Since 1.1//
{{page>:develop:api-include:efl:canvas:object:property:freeze_events:getter_description&nouser&nolink&nodate}}


===== Signature =====

<code>
@property freeze_events {
    get {
        values {
            freeze: bool;
        }
    }
    set {
        values {
            freeze: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

===== Implemented by =====

  * **Efl.Canvas.Object.freeze_events**

