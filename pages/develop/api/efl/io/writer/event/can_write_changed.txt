~~Title: Efl.Io.Writer: can_write,changed~~
===== Description =====

%%Notifies can_write property changed.%%

%%If %%[[:develop:api:efl:io:writer:property:can_write|Efl.Io.Writer.can_write]]%% is %%''true''%% there is data to %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% without blocking/error. If %%[[:develop:api:efl:io:writer:property:can_write|Efl.Io.Writer.can_write]]%% is %%''false''%%, %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% would either block or fail.%%

%%Note that usually this event is dispatched from inside %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%%, thus before it returns.%%

//Since 1.19//
{{page>:develop:api-include:efl:io:writer:event:can_write_changed:description&nouser&nolink&nodate}}

===== Signature =====

<code>
can_write,changed;
</code>

===== C information =====

<code c>
EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED(void)
</code>

===== C usage =====

<code c>
static void
on_efl_io_writer_event_can_write_changed(void *data, const Efl_Event *event)
{
    void info = event->info;
    Eo *obj = event->object;
    Data *d = data;

    /* event hander code */
}

static void
setup_event_handler(Eo *obj, Data *d)
{
    efl_event_callback_add(obj, EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED, on_efl_io_writer_event_can_write_changed, d);
}

</code>

