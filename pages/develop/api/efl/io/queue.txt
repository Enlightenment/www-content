~~Title: Efl.Io.Queue~~
====== Efl.Io.Queue (class) ======

===== Description =====

%%Generic In-memory queue of data to be used as I/O.%%

%%This class is to be used to receive temporary data using %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% and hold it until someone calls %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% to consume it.%%

%%A fixed sized queue can be implemented by setting %%[[:develop:api:efl:io:queue:property:limit|Efl.Io.Queue.limit]]%% followed by %%[[:develop:api:efl:io:queue:method:preallocate|Efl.Io.Queue.preallocate]]%%%%

//Since 1.19//

{{page>:develop:api-include:efl:io:queue:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_io_queue [fillcolor = "black", label = "Efl.Io.Queue", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_io_queue -> efl_object
    efl_io_queue -> efl_io_reader
    efl_io_queue -> efl_io_writer
    efl_io_queue -> efl_io_closer
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
  * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
  * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:io:queue:method:clear|clear]]**\\
> %%Clear the queue. Same as reading all data.%%
<code c>
void efl_io_queue_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:queue:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:queue:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:queue:method:discard|discard]]**\\
> %%Discard the given number of bytes.%%
<code c>
void efl_io_queue_discard(Eo *obj, size_t amount);
</code>
\\
**[[:develop:api:efl:io:queue:method:eos_mark|eos_mark]]**\\
> %%Mark this end-of-stream.%%
<code c>
void efl_io_queue_eos_mark(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:queue:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:queue:method:preallocate|preallocate]]**\\
> %%Immediately pre-allocate a buffer of at least a given size.%%
<code c>
void efl_io_queue_preallocate(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:queue:method:read|read]]**// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%Reads data into a pre-allocated buffer.%%
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>
\\
**[[:develop:api:efl:io:queue:method:write|write]]**// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%Writes data from a pre-populated buffer.%%
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>
\\
**[[:develop:api:efl:io:queue:property:can_read|can_read]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]// ''protected set''\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>
\\
**[[:develop:api:efl:io:queue:property:can_write|can_write]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]// ''protected set''\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>
\\
**[[:develop:api:efl:io:queue:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close() on object destructor.%%
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>
\\
**[[:develop:api:efl:io:queue:property:close_on_exec|close_on_exec]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close resources on exec() calls.%%
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>
\\
**[[:develop:api:efl:io:queue:property:closed|closed]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will notify object was closed.%%
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>
\\
**[[:develop:api:efl:io:queue:property:eos|eos]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]// ''protected set''\\
> %%If %%''true''%% will notify end of stream.%%
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>
\\
**[[:develop:api:efl:io:queue:property:limit|limit]]** //**(get, set)**//\\
> %%Limit how big the buffer can grow.%%
<code c>
size_t efl_io_queue_limit_get(const Eo *obj);
void efl_io_queue_limit_set(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:queue:property:slice|slice]]** //**(get)**//\\
> %%Get a temporary access to queue's internal read memory.%%
<code c>
Eina_Slice efl_io_queue_slice_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:io:queue:property:usage|usage]]** //**(get)**//\\
> %%How many bytes are available for read%%
<code c>
size_t efl_io_queue_usage_get(const Eo *obj);
</code>
\\

==== Inherited ====

[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**, **[[:develop:api:efl:object:method:composite_attach|composite_attach]]**, **[[:develop:api:efl:object:method:composite_detach|composite_detach]]**, **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**, **[[:develop:api:efl:object:method:constructor|constructor]]**, **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**, **[[:develop:api:efl:object:method:del|del]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**, **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**, **[[:develop:api:efl:object:method:event_freeze|event_freeze]]**, **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**, **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**, **[[:develop:api:efl:object:method:event_thaw|event_thaw]]**, **[[:develop:api:efl:object:method:name_find|name_find]]**, **[[:develop:api:efl:object:method:provider_find|provider_find]]**, **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//, **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//, **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//, **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//, **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**//
===== Events =====

**[[:develop:api:efl:io:queue:event:slice_changed|slice,changed]]**\\
> %%The read-slice returned by %%[[:develop:api:efl:io:queue:property:slice|Efl.Io.Queue.slice]]%% may have changed.%%
<code c>
EFL_IO_QUEUE_EVENT_SLICE_CHANGED(void)
</code>
\\ ==== Inherited ====

[[:develop:api:efl:io:closer|Efl.Io.Closer]]\\
> **[[:develop:api:efl:io:closer:event:closed|closed]]**\\
[[:develop:api:efl:io:reader|Efl.Io.Reader]]\\
> **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]**, **[[:develop:api:efl:io:reader:event:eos|eos]]**\\
[[:develop:api:efl:io:writer|Efl.Io.Writer]]\\
> **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]**\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:event:callback_add|callback,add]]**, **[[:develop:api:efl:object:event:callback_del|callback,del]]**, **[[:develop:api:efl:object:event:del|del]]**