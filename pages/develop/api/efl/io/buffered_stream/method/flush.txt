~~Title: Efl.Io.Buffered_Stream.flush~~
===== Description =====

%%Forces writing all pending data to destination.%%

%%It will return %%''true''%% if %%[[:develop:api:efl:io:buffered_stream:property:pending_read|Efl.Io.Buffered_Stream.pending_read]]%% drops to zero, %%''false''%% otherwise and more calls to flush must be made.%%

%%If the %%[[:develop:api:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io]]%% implements %%[[:develop:api:efl:io:closer|Efl.Io.Closer]]%% and it is closed or the wrapper itself's closed, this function will do nothing and return %%''true''%%.%%

%%@note this function may block the main loop execution until operations are complete! This is bad for usability as the user interface or other operations may freeze. A better approach is to operate asynchronously and wait for the "write,finished" event.%%

//Since 1.19//
{{page>:develop:api-include:efl:io:buffered_stream:method:flush:description&nouser&nolink&nodate}}

===== Signature =====

<code>
flush {
    params {
        @in may_block: bool;
        @in ignore_line_delimiter: bool;
    }
    return: bool (true);
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_io_buffered_stream_flush(Eo *obj, Eina_Bool may_block, Eina_Bool ignore_line_delimiter);
</code>

===== Parameters =====

  * **may_block** //(in)// - %%If %%''true''%%, then %%[[:develop:api:efl:io:reader:property:can_read|Efl.Io.Reader.can_read]]%% and %%[[:develop:api:efl:io:writer:property:can_write|Efl.Io.Writer.can_write]]%% are not checked and the call may block.%%
  * **ignore_line_delimiter** //(in)// - %%Forces flush ignoring line delimiters%%

===== Implemented by =====

  * **Efl.Io.Buffered_Stream.flush**

