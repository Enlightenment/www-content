~~Title: Efl.Io.Copier~~
====== Efl.Io.Copier (class) ======

===== Description =====

%%Copy from an %%[[:develop:api:efl:io:reader|Efl.Io.Reader]]%% source to %%[[:develop:api:efl:io:writer|Efl.Io.Writer]]%% destination.%%

%%During usage it will keep reference to %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%% and %%[[:develop:api:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% objects, automatically relasing them on destructor.%%

%%By default the read-write process is done based on fixed-size chunks (%%[[:develop:api:efl:io:copier:property:read_chunk_size|Efl.Io.Copier.read_chunk_size]]%%), however if %%[[:develop:api:efl:io:copier:property:line_delimiter|Efl.Io.Copier.line_delimiter]]%% is set, the behavior changes to wait for such delimiter or a maximum buffer limit is reached (%%[[:develop:api:efl:io:copier:property:buffer_limit|Efl.Io.Copier.buffer_limit]]%%).%%

%%While a %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%% is mandatory for the copier to operate properly, the %%[[:develop:api:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% is optional: if it's not provided, all read data is stored in an internal buffer that can be retrieved using %%[[:develop:api:efl:io:copier:method:binbuf_steal|Efl.Io.Copier.binbuf_steal]]%%, usually called when one of "data", "line" or "done" events are emitted.%%

%%Most important events:%%

%%- The "data" event is general and notifies some data was written to %%[[:develop:api:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% (if any, otherwise it will be reported for data when it's read from %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%%).%%

%%- The "line" event is only emitted when %%[[:develop:api:efl:io:copier:property:line_delimiter|Efl.Io.Copier.line_delimiter]]%% is set and not empty. It's simiar to "data".%%

%%- The "done" event is emitted if %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%% is %%[[:develop:api:efl:io:reader:property:eos|Efl.Io.Reader.eos]]%% %%''true''%% and all data was written to %%[[:develop:api:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% (if any, otherwise it will be reported when all data was read from %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%%).%%

%%- The "error" event is reported if the %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%%, %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% or some other internal error happened, like out of memory. Another common error is ETIMEDOUT if %%[[:develop:api:efl:io:copier:property:timeout_inactivity|Efl.Io.Copier.timeout_inactivity]]%% is set.%%

%%A copier is handful to simplify common I/O use cases, such as:%%

%%- Read a file or download content to memory: provide only the source and wait for "done" event, calling %%[[:develop:api:efl:io:copier:method:binbuf_steal|Efl.Io.Copier.binbuf_steal]]%% afterwards.%%

%%- Download content to disk: provide a network socket as source and use %%[[:develop:api:efl:io:file|Efl.Io.File]]%% as destination, then wait for "done" event.%%

%%- Link two I/O streams: provide both source and destination streams, such as %%[[:develop:api:efl:io:stdin|Efl.Io.Stdin]]%% and %%[[:develop:api:efl:io:stdout|Efl.Io.Stdout]]%%, or some network socket. As data is received from source it will be copied to destination in an endless (asynchronous) loop. You may monitor for "done" if the source may be closed.%%

%%If %%[[:develop:api:efl:io:closer:method:close|Efl.Io.Closer.close]]%% is called, then it will be called on %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%% and %%[[:develop:api:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% if they implement those interfaces.%%

%%%%[[:develop:api:efl:io:closer:property:close_on_exec|Efl.Io.Closer.close_on_exec]]%% and %%[[:develop:api:efl:io:closer:property:close_on_destructor|Efl.Io.Closer.close_on_destructor]]%% are respected and applied to both source and destination. Both default to %%''true''%%.%%

//Since 1.19//

{{page>:develop:api-include:efl:io:copier:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_io_copier [fillcolor = "black", label = "Efl.Io.Copier", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_io_copier -> efl_loop_user
    efl_loop_user -> efl_object
    efl_io_copier -> efl_io_closer
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:io:copier:method:binbuf_steal|binbuf_steal]]**\\
> %%Steals the internal binbuf and return it to caller.%%
<code c>
Eina_Binbuf *efl_io_copier_binbuf_steal(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:copier:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:copier:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:copier:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:copier:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:copier:method:flush|flush]]**\\
> %%Forces reading from source and writing to destination.%%
<code c>
Eina_Bool efl_io_copier_flush(Eo *obj, Eina_Bool may_block, Eina_Bool ignore_line_delimiter);
</code>
\\
**[[:develop:api:efl:io:copier:property:buffer_limit|buffer_limit]]** //**(get, set)**//\\
> %%Copier buffer limit property, in bytes.%%
<code c>
size_t efl_io_copier_buffer_limit_get(const Eo *obj);
void efl_io_copier_buffer_limit_set(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:copier:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close() on object destructor.%%
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>
\\
**[[:develop:api:efl:io:copier:property:close_on_exec|close_on_exec]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close resources on exec() calls.%%
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>
\\
**[[:develop:api:efl:io:copier:property:closed|closed]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will notify object was closed.%%
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>
\\
**[[:develop:api:efl:io:copier:property:destination|destination]]** //**(get, set)**//\\
> %%Copier destination object.%%
<code c>
Efl_Io_Writer *efl_io_copier_destination_get(const Eo *obj);
void efl_io_copier_destination_set(Eo *obj, Efl_Io_Writer *destination);
</code>
\\
**[[:develop:api:efl:io:copier:property:done|done]]** //**(get, set)**// ''protected set''\\
> %%Reports if copier is done.%%
<code c>
Eina_Bool efl_io_copier_done_get(const Eo *obj);
void efl_io_copier_done_set(Eo *obj, Eina_Bool done);
</code>
\\
**[[:develop:api:efl:io:copier:property:line_delimiter|line_delimiter]]** //**(get, set)**//\\
> %%If there is a line delimiter, the reads will buffer/queue up to the line delimiter before calling %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% on the %%[[:develop:api:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% and the event line is emitted with current line. The line may include the delimiter, unless it's end-of-stream on %%[[:develop:api:efl:io:copier:property:source|Efl.Io.Copier.source]]%% or %%[[:develop:api:efl:io:copier:property:buffer_limit|Efl.Io.Copier.buffer_limit]]%% was reached.%%
<code c>
const Eina_Slice efl_io_copier_line_delimiter_get(const Eo *obj);
void efl_io_copier_line_delimiter_set(Eo *obj, const Eina_Slice slice);
</code>
\\
**[[:develop:api:efl:io:copier:property:pending_size|pending_size]]** //**(get)**//\\
> %%Returns the size of the pending buffer.%%
<code c>
size_t efl_io_copier_pending_size_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:io:copier:property:progress|progress]]** //**(get)**//\\
> %%Progress for read and write.%%
<code c>
void efl_io_copier_progress_get(const Eo *obj, uint64_t *read, uint64_t *written, uint64_t *total);
</code>
\\
**[[:develop:api:efl:io:copier:property:read_chunk_size|read_chunk_size]]** //**(get, set)**//\\
> %%Copier read chunk size property, in bytes.%%
<code c>
size_t efl_io_copier_read_chunk_size_get(const Eo *obj);
void efl_io_copier_read_chunk_size_set(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:copier:property:source|source]]** //**(get, set)**//\\
> %%Copier source object.%%
<code c>
Efl_Io_Reader *efl_io_copier_source_get(const Eo *obj);
void efl_io_copier_source_set(Eo *obj, Efl_Io_Reader *source);
</code>
\\
**[[:develop:api:efl:io:copier:property:timeout_inactivity|timeout_inactivity]]** //**(get, set)**//\\
> %%Terminates the copier with ETIMEDOUT if it becomes inactive for some time.%%
<code c>
double efl_io_copier_timeout_inactivity_get(const Eo *obj);
void efl_io_copier_timeout_inactivity_set(Eo *obj, double seconds);
</code>
\\

==== Inherited ====

[[:develop:api:efl:loop_user|Efl.Loop_User]]\\
> **[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**//, **[[:develop:api:efl:loop_user:property:parent|parent]]** //**(get, set)**//\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**, **[[:develop:api:efl:object:method:composite_attach|composite_attach]]**, **[[:develop:api:efl:object:method:composite_detach|composite_detach]]**, **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**, **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**, **[[:develop:api:efl:object:method:del|del]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**, **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**, **[[:develop:api:efl:object:method:event_freeze|event_freeze]]**, **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**, **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**, **[[:develop:api:efl:object:method:event_thaw|event_thaw]]**, **[[:develop:api:efl:object:method:name_find|name_find]]**, **[[:develop:api:efl:object:method:provider_find|provider_find]]**, **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//, **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//, **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//, **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//
===== Events =====

**[[:develop:api:efl:io:copier:event:data|data]]**\\
> %%When data is read to internal buffer, it's emitted in this event. The memory is only valid during event callback dispatched and should not be modified.%%
<code c>
EFL_IO_COPIER_EVENT_DATA(const Eina_Slice *)
</code>
\\ **[[:develop:api:efl:io:copier:event:done|done]]**\\
> %%All available data was copied from source to destination%%
<code c>
EFL_IO_COPIER_EVENT_DONE(void)
</code>
\\ **[[:develop:api:efl:io:copier:event:error|error]]**\\
> %%An error happened and the copy stopped%%
<code c>
EFL_IO_COPIER_EVENT_ERROR(Eina_Error)
</code>
\\ **[[:develop:api:efl:io:copier:event:line|line]]**\\
> %%If %%[[:develop:api:efl:io:copier:property:line_delimiter|Efl.Io.Copier.line_delimiter]]%% is set, will be emitted with current line. The memory is only valid during event callback dispatched and should not be modified.%%
<code c>
EFL_IO_COPIER_EVENT_LINE(const Eina_Slice *)
</code>
\\ **[[:develop:api:efl:io:copier:event:progress|progress]]**\\
> %%Total size changed or Data was read/written%%
<code c>
EFL_IO_COPIER_EVENT_PROGRESS(void)
</code>
\\ ==== Inherited ====

[[:develop:api:efl:io:closer|Efl.Io.Closer]]\\
> **[[:develop:api:efl:io:closer:event:closed|closed]]**\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:event:callback_add|callback,add]]**, **[[:develop:api:efl:object:event:callback_del|callback,del]]**, **[[:develop:api:efl:object:event:del|del]]**