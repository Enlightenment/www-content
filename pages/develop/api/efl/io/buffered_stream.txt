~~Title: Efl.Io.Buffered_Stream~~
====== Efl.Io.Buffered_Stream (class) ======

===== Description =====

%%A wrapper object offering easy to use buffered streams over existing I/O class.%%

%%The buffered stream encapsulates an actual %%[[:develop:api:efl:io:reader|Efl.Io.Reader]]%% or %%[[:develop:api:efl:io:writer|Efl.Io.Writer]]%%, an input %%[[:develop:api:efl:io:queue|Efl.Io.Queue]]%% and an output %%[[:develop:api:efl:io:queue|Efl.Io.Queue]]%%. These are linked using a input and a output %%[[:develop:api:efl:io:copier|Efl.Io.Copier]]%%.%%

%%The idea is that unlike the traditional %%[[:develop:api:efl:io:writer|Efl.Io.Writer]]%% which will attempt to write directly and thus may take less data than requested, this one will keep the pending data in its own buffer, feeding to the actual output when %%[[:develop:api:efl:io:writer|Efl.Io.Writer]]%% can write. That makes its operation much simpler as %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% will always take the full data -- allows "write and forget", if unlimited (see %%[[:develop:api:efl:io:buffered_stream:property:max_queue_size_output|Efl.Io.Buffered_Stream.max_queue_size_output]]%%). When finished writing data %%[[:develop:api:efl:io:buffered_stream:method:eos_mark|Efl.Io.Buffered_Stream.eos_mark]]%% then waits for the "write.finished" event to know all data has been sent.%%

%%Reading is also much simpler since incoming data is kept in an %%[[:develop:api:efl:io:queue|Efl.Io.Queue]]%%, thus its size can be queried with %%[[:develop:api:efl:io:buffered_stream:property:pending_read|Efl.Io.Buffered_Stream.pending_read]]%% and read with %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% or peeked with %%[[:develop:api:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%%, then discarded with %%[[:develop:api:efl:io:buffered_stream:method:discard|Efl.Io.Buffered_Stream.discard]]%% or %%[[:develop:api:efl:io:buffered_stream:method:clear|Efl.Io.Buffered_Stream.clear]]%%.%%

%%When waiting for a complete message, just peek at its contents, if not complete do nothing and wait. If complete then use either %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% to get a copy or manipulate a read-only reference from %%[[:develop:api:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%% and then %%[[:develop:api:efl:io:buffered_stream:method:discard|Efl.Io.Buffered_Stream.discard]]%%.%%

%%The actual I/O is set with the constructor method %%[[:develop:api:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io.set]]%% and can be retrieved with %%[[:develop:api:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io.get]]%%, which should be used with care -- calling %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% and %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% on it may produce unexpected results.%%

//Since 1.19//

{{page>:develop:api-include:efl:io:buffered_stream:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
  * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
  * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:io:buffered_stream:property:can_read|can_read]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:can_write|can_write]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:clear|clear]]**\\
> %%Clears the incoming queue. Same as reading all data.%%
<code c>
void efl_io_buffered_stream_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close() on object destructor.%%
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:close_on_exec|close_on_exec]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close resources on exec() calls.%%
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:closed|closed]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will notify object was closed.%%
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:discard|discard]]**\\
> %%Discards the given number of bytes.%%
<code c>
void efl_io_buffered_stream_discard(Eo *obj, size_t amount);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:eos|eos]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%If %%''true''%% will notify end of stream.%%
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:eos_mark|eos_mark]]**\\
> %%Marks the end-of-stream. Signals nothing else will be written.%%
<code c>
void efl_io_buffered_stream_eos_mark(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:flush|flush]]**\\
> %%Forces writing all pending data to destination.%%
<code c>
Eina_Bool efl_io_buffered_stream_flush(Eo *obj, Eina_Bool may_block, Eina_Bool ignore_line_delimiter);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:inner_io|inner_io]]** //**(get, set)**//\\
> %%The inner I/O this wrapper operates on.%%
<code c>
Efl_Object *efl_io_buffered_stream_inner_io_get(const Eo *obj);
void efl_io_buffered_stream_inner_io_set(Eo *obj, Efl_Object *io);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:line_delimiter|line_delimiter]]** //**(get, set)**//\\
> %%If set incoming data will be checked for the delimiter and "line" events. The line may include the delimiter, unless it's end-of-stream in %%[[:develop:api:efl:io:buffered_stream:property:max_queue_size_input|Efl.Io.Buffered_Stream.max_queue_size_input]]%% has been reached.%%
<code c>
const Eina_Slice efl_io_buffered_stream_line_delimiter_get(const Eo *obj);
void efl_io_buffered_stream_line_delimiter_set(Eo *obj, const Eina_Slice slice);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:max_queue_size_input|max_queue_size_input]]** //**(get, set)**//\\
> %%Limits how big the input queue can grow, in bytes.%%
<code c>
size_t efl_io_buffered_stream_max_queue_size_input_get(const Eo *obj);
void efl_io_buffered_stream_max_queue_size_input_set(Eo *obj, size_t max_queue_size_input);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:max_queue_size_output|max_queue_size_output]]** //**(get, set)**//\\
> %%Limits how big the output queue can grow in bytes.%%
<code c>
size_t efl_io_buffered_stream_max_queue_size_output_get(const Eo *obj);
void efl_io_buffered_stream_max_queue_size_output_set(Eo *obj, size_t max_queue_size_output);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:pending_read|pending_read]]** //**(get)**//\\
> %%How many bytes are pending (available) for read%%
<code c>
size_t efl_io_buffered_stream_pending_read_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:pending_write|pending_write]]** //**(get)**//\\
> %%How many bytes are pending write to %%[[:develop:api:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io]]%%%%
<code c>
size_t efl_io_buffered_stream_pending_write_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:progress|progress]]** //**(get)**//\\
> %%How many bytes were written and read.%%
<code c>
void efl_io_buffered_stream_progress_get(const Eo *obj, size_t *read_bytes, size_t *written_bytes);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:read|read]]**// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%Reads data into a pre-allocated buffer.%%
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:read_chunk_size|read_chunk_size]]** //**(get, set)**//\\
> %%Reads chunk size property, in bytes.%%
<code c>
size_t efl_io_buffered_stream_read_chunk_size_get(const Eo *obj);
void efl_io_buffered_stream_read_chunk_size_set(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:slice|slice]]** //**(get)**//\\
> %%Gets a temporary access to input queue's internal read memory.%%
<code c>
Eina_Slice efl_io_buffered_stream_slice_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:property:timeout_inactivity|timeout_inactivity]]** //**(get, set)**//\\
> %%Error as ETIMEDOUT if it becomes inactive for some time.%%
<code c>
double efl_io_buffered_stream_timeout_inactivity_get(const Eo *obj);
void efl_io_buffered_stream_timeout_inactivity_set(Eo *obj, double seconds);
</code>
\\
**[[:develop:api:efl:io:buffered_stream:method:write|write]]**// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%Writes data from a pre-populated buffer.%%
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop:consumer:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:io:buffered_stream:event:error|error]]**\\
> %%An error has occurred and I/O has stopped%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_ERROR(Eina_Error)
</code>
\\ **[[:develop:api:efl:io:buffered_stream:event:finished|finished]]**\\
> %%Both read and write are finished.%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_FINISHED(void)
</code>
\\ **[[:develop:api:efl:io:buffered_stream:event:line|line]]**\\
> %%If %%[[:develop:api:efl:io:buffered_stream:property:line_delimiter|Efl.Io.Buffered_Stream.line_delimiter]]%% is set, will be emitted with current line. The memory is only valid during event callback dispatched and should not be modified. Note that the line slice may not be inside %%[[:develop:api:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%%.%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_LINE(const Eina_Slice *)
</code>
\\ **[[:develop:api:efl:io:buffered_stream:event:progress|progress]]**\\
> %%Property %%[[:develop:api:efl:io:buffered_stream:property:progress|Efl.Io.Buffered_Stream.progress]]%% changed%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_PROGRESS(void)
</code>
\\ **[[:develop:api:efl:io:buffered_stream:event:read_finished|read,finished]]**\\
> %%Same as %%[[:develop:api:efl:io:reader|Efl.Io.Reader]]%% "eos", for consistency.%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_READ_FINISHED(void)
</code>
\\ **[[:develop:api:efl:io:buffered_stream:event:slice_changed|slice,changed]]**\\
> %%The read-slice returned by %%[[:develop:api:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%% may have changed.%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_SLICE_CHANGED(void)
</code>
\\ **[[:develop:api:efl:io:buffered_stream:event:write_finished|write,finished]]**\\
> %%%%[[:develop:api:efl:io:buffered_stream:method:eos_mark|Efl.Io.Buffered_Stream.eos_mark]]%% was called and all available data was sent to destination%%
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_WRITE_FINISHED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:io:closer|Efl.Io.Closer]] ^^^
|  | **[[:develop:api:efl:io:closer:event:closed|closed]]** | %%Notifies closed, when property is marked as true%% |
^ [[:develop:api:efl:io:reader|Efl.Io.Reader]] ^^^
|  | **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]** | %%Notifies can_read property changed.%% |
|  | **[[:develop:api:efl:io:reader:event:eos|eos]]** | %%Notifies end of stream, when property is marked as true.%% |
^ [[:develop:api:efl:io:writer|Efl.Io.Writer]] ^^^
|  | **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]** | %%Notifies can_write property changed.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
