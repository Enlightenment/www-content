~~Title: Efl.Io.Buffered_Stream~~
====== Efl.Io.Buffered_Stream (class) ======

===== Description =====

%%A wrapper object offering an easy to use, buffered streams over existing I/O class.%%

%%The buffered stream encapsulates an actual %%[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]]%% or %%[[:develop:api:interface:efl:io:writer|Efl.Io.Writer]]%%, an input %%[[:develop:api:class:efl:io:queue|Efl.Io.Queue]]%%, an output %%[[:develop:api:class:efl:io:queue|Efl.Io.Queue]]%% and these are linked using a input and a output %%[[:develop:api:class:efl:io:copier|Efl.Io.Copier]]%%.%%

%%The idea is that unlike traditional %%[[:develop:api:interface:efl:io:writer|Efl.Io.Writer]]%% that will attempt to write directly and thus may take less data than requested, this one will keep the pending data in its own buffer, feeding to the actual output when it %%[[:develop:api:interface:efl:io:writer:property:can_write|Efl.Io.Writer.can_write]]%%. That makes its operation much simpler as %%[[:develop:api:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% will always take the full data -- allows "write and forget", if unlimited (see %%[[:develop:api:class:efl:io:buffered_stream:property:max_queue_size_output|Efl.Io.Buffered_Stream.max_queue_size_output]]%%). When finished writing data, the %%[[:develop:api:class:efl:io:buffered_stream:method:eos_mark|Efl.Io.Buffered_Stream.eos_mark]]%% and then wait for "write,finished" event to know when all data was sent.%%

%%Reading is also much simpler since incoming data is kept in an %%[[:develop:api:class:efl:io:queue|Efl.Io.Queue]]%%, thus its size can be queried with %%[[:develop:api:class:efl:io:buffered_stream:property:pending_read|Efl.Io.Buffered_Stream.pending_read]]%% and read with %%[[:develop:api:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% or peeked with %%[[:develop:api:class:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%%, then discarded with %%[[:develop:api:class:efl:io:buffered_stream:method:discard|Efl.Io.Buffered_Stream.discard]]%% or %%[[:develop:api:class:efl:io:buffered_stream:method:clear|Efl.Io.Buffered_Stream.clear]]%%.%%

%%Then when waiting for a complete message, just peek at its contents, if not complete do nothing and wait, if complete then either %%[[:develop:api:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% to get a copy or manipulate a read-only reference from %%[[:develop:api:class:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%% and then %%[[:develop:api:class:efl:io:buffered_stream:method:discard|Efl.Io.Buffered_Stream.discard]]%%%%

%%The actual I/O is set with the constructor method %%[[:develop:api:class:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io.set]]%% and can be retrieved with %%[[:develop:api:class:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io.get]]%%, which should be used with care -- calling %%[[:develop:api:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% and %%[[:develop:api:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% on it may produce unexpected results.%%

//Since 1.19//

{{page>:develop:api-include:efl:io:buffered_stream:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_io_buffered_stream [fillcolor = "black", label = "Efl.Io.Buffered_Stream", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_io_buffered_stream -> efl_loop_user
    efl_loop_user -> efl_object
    efl_io_buffered_stream -> efl_io_reader
    efl_io_buffered_stream -> efl_io_writer
    efl_io_buffered_stream -> efl_io_closer
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
  * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
  * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:io:buffered_stream:method:clear|clear]]**
<code c>
void efl_io_buffered_stream_clear(Eo *obj);
</code>

%%Clears the incoming queue. Same as reading all data.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:method:discard|discard]]**
<code c>
void efl_io_buffered_stream_discard(Eo *obj, size_t amount);
</code>

%%Discards the given number of bytes.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:method:eos_mark|eos_mark]]**
<code c>
void efl_io_buffered_stream_eos_mark(Eo *obj);
</code>

%%Marks this end-of-stream, signals nothing else will be written.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:method:flush|flush]]**
<code c>
Eina_Bool efl_io_buffered_stream_flush(Eo *obj, Eina_Bool may_block, Eina_Bool ignore_line_delimiter);
</code>

%%Forces writing all pending data to destination.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:inner_io|inner_io]]** //**(get, set)**//
<code c>
Efl_Object *efl_io_buffered_stream_inner_io_get(const Eo *obj);
void efl_io_buffered_stream_inner_io_set(Eo *obj, Efl_Object *io);
</code>

%%The inner I/O this wrapper operates on.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:line_delimiter|line_delimiter]]** //**(get, set)**//
<code c>
const Eina_Slice efl_io_buffered_stream_line_delimiter_get(const Eo *obj);
void efl_io_buffered_stream_line_delimiter_set(Eo *obj, const Eina_Slice slice);
</code>

%%If set, incoming data will be checked for the delimiter and "line" events are The line may include the delimiter, unless it's end-of-stream on %%[[:develop:api:class:efl:io:buffered_stream:property:max_queue_size_input|Efl.Io.Buffered_Stream.max_queue_size_input]]%% was reached.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:max_queue_size_input|max_queue_size_input]]** //**(get, set)**//
<code c>
size_t efl_io_buffered_stream_max_queue_size_input_get(const Eo *obj);
void efl_io_buffered_stream_max_queue_size_input_set(Eo *obj, size_t max_queue_size_input);
</code>

%%Limits how big the input queue can grow, in bytes.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:max_queue_size_output|max_queue_size_output]]** //**(get, set)**//
<code c>
size_t efl_io_buffered_stream_max_queue_size_output_get(const Eo *obj);
void efl_io_buffered_stream_max_queue_size_output_set(Eo *obj, size_t max_queue_size_output);
</code>

%%Limits how big the output queue can grow, in bytes.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:pending_read|pending_read]]** //**(get)**//
<code c>
size_t efl_io_buffered_stream_pending_read_get(const Eo *obj);
</code>

%%How many bytes are pending (available) for read%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:pending_write|pending_write]]** //**(get)**//
<code c>
size_t efl_io_buffered_stream_pending_write_get(const Eo *obj);
</code>

%%How many bytes are pending write to %%[[:develop:api:class:efl:io:buffered_stream:property:inner_io|Efl.Io.Buffered_Stream.inner_io]]%%%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:progress|progress]]** //**(get)**//
<code c>
void efl_io_buffered_stream_progress_get(const Eo *obj, size_t *read_bytes, size_t *written_bytes);
</code>

%%How many bytes were written and read.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:read_chunk_size|read_chunk_size]]** //**(get, set)**//
<code c>
size_t efl_io_buffered_stream_read_chunk_size_get(const Eo *obj);
void efl_io_buffered_stream_read_chunk_size_set(Eo *obj, size_t size);
</code>

%%Reads chunk size property, in bytes.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:slice|slice]]** //**(get)**//
<code c>
Eina_Slice efl_io_buffered_stream_slice_get(const Eo *obj);
</code>

%%Gets a temporary access to input queue's internal read memory.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:property:timeout_inactivity|timeout_inactivity]]** //**(get, set)**//
<code c>
double efl_io_buffered_stream_timeout_inactivity_get(const Eo *obj);
void efl_io_buffered_stream_timeout_inactivity_set(Eo *obj, double seconds);
</code>

%%Error as ETIMEDOUT if it becomes inactive for some time.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:efl:io:buffered_stream:method:close|close]]** //[Overridden here]//
\\ 
[[:develop:api:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:efl:io:buffered_stream:property:close_on_destructor|close_on_destructor]]** //**(get, set)**// //[Overridden here]//
\\ 
[[:develop:api:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:efl:io:buffered_stream:property:close_on_exec|close_on_exec]]** //**(get, set)**// //[Overridden here]//
\\ 
[[:develop:api:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:efl:io:buffered_stream:property:closed|closed]]** //**(get, set)**// //[Overridden here]//
\\ 
[[:develop:api:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:efl:io:buffered_stream:method:read|read]]** //[Overridden here]//
\\ 
[[:develop:api:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:efl:io:buffered_stream:property:can_read|can_read]]** //**(get, set)**// //[Overridden here]// ''protected set''
\\ 
[[:develop:api:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:efl:io:buffered_stream:property:eos|eos]]** //**(get, set)**// //[Overridden here]// ''protected set''
\\ 
[[:develop:api:efl:io:writer|Efl.Io.Writer]].**[[:develop:api:efl:io:buffered_stream:method:write|write]]** //[Overridden here]//
\\ 
[[:develop:api:efl:io:writer|Efl.Io.Writer]].**[[:develop:api:efl:io:buffered_stream:property:can_write|can_write]]** //**(get, set)**// //[Overridden here]// ''protected set''
\\ 
[[:develop:api:efl:loop_user|Efl.Loop_User]].**[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:io:buffered_stream:method:destructor|destructor]]** //[Overridden here]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:io:buffered_stream:method:finalize|finalize]]** //[Overridden here]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:loop_user:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:develop:api:efl:loop_user|Efl.Loop_User]]]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_attach|composite_attach]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_detach|composite_detach]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:constructor|constructor]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:del|del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_freeze|event_freeze]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_thaw|event_thaw]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:name_find|name_find]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:provider_find|provider_find]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//
\\ 

===== Events =====

**[[:develop:api:efl:io:buffered_stream:event:error|error]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_ERROR(Eina_Error)
</code>

%%An error happened and the I/O stopped%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:event:finished|finished]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_FINISHED(void)
</code>

%%Both read and write are finished.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:event:line|line]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_LINE(const Eina_Slice *)
</code>

%%If %%[[:develop:api:class:efl:io:buffered_stream:property:line_delimiter|Efl.Io.Buffered_Stream.line_delimiter]]%% is set, will be emitted with current line. The memory is only valid during event callback dispatched and should not be modified. Note that the line slice may not be inside %%[[:develop:api:class:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%%, don't assume that!%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:event:progress|progress]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_PROGRESS(void)
</code>

%%Property %%[[:develop:api:class:efl:io:buffered_stream:property:progress|Efl.Io.Buffered_Stream.progress]]%% changed%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:event:read_finished|read,finished]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_READ_FINISHED(void)
</code>

%%Same as %%[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]]%% "eos", for consistency.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:event:slice_changed|slice,changed]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_SLICE_CHANGED(void)
</code>

%%The read-slice returned by %%[[:develop:api:class:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%% may have changed.%%\\ 
\\ 
**[[:develop:api:efl:io:buffered_stream:event:write_finished|write,finished]]**
<code c>
EFL_IO_BUFFERED_STREAM_EVENT_WRITE_FINISHED(void)
</code>

%%%%[[:develop:api:class:efl:io:buffered_stream:method:eos_mark|Efl.Io.Buffered_Stream.eos_mark]]%% was called and all available data was sent to destination%%\\ 
\\ 
==== Inherited ====

[[:develop:api:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:efl:io:closer:event:closed|closed]]**
\\ 
[[:develop:api:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]**
\\ 
[[:develop:api:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:efl:io:reader:event:eos|eos]]**
\\ 
[[:develop:api:efl:io:writer|Efl.Io.Writer]].**[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:callback_add|callback,add]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:callback_del|callback,del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:del|del]]**
\\ 
