~~Title: Efl.Io.Closer~~
====== Efl.Io.Closer (mixin) ======

===== Description =====

%%Generic interface for objects that can close themselves.%%

%%This interface allows external objects to transparently close an input or output stream, cleaning up its resources.%%

%%Calls to %%[[:develop:api:efl:io:closer:method:close|Efl.Io.Closer.close]]%%() may or may not block, that's not up to this interface to specify.%%

//Since 1.19//

{{page>:develop:api-include:efl:io:closer:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:io:closer:method:close|close]]**\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:closer:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//\\
> %%If true will automatically close() on object destructor.%%
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>
\\
**[[:develop:api:efl:io:closer:property:close_on_exec|close_on_exec]]** //**(get, set)**//\\
> %%If true will automatically close resources on exec() calls.%%
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>
\\
**[[:develop:api:efl:io:closer:property:closed|closed]]** //**(get, set)**//\\
> %%If true will notify object was closed.%%
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>
\\

===== Events =====

**[[:develop:api:efl:io:closer:event:closed|closed]]**\\
> %%Notifies closed, when property is marked as true%%
<code c>
EFL_IO_CLOSER_EVENT_CLOSED(void)
</code>
\\ 