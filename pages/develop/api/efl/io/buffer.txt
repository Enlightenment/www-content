~~Title: Efl.Io.Buffer~~
====== Efl.Io.Buffer (class) ======

===== Description =====

%%Generic In-memory buffer of data to be used as I/O.%%

%%This class offers both input and output, which can be used at the same time since %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% and %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% use different offsets/position internally.%%

%%One can get temporary direct access to internal buffer with %%[[:develop:api:efl:io:buffer:property:slice|Efl.Io.Buffer.slice]]%% or steal the buffer with %%[[:develop:api:efl:io:buffer:method:binbuf_steal|Efl.Io.Buffer.binbuf_steal]]%%.%%

%%A fixed sized buffer can be implemented by setting %%[[:develop:api:efl:io:buffer:property:limit|Efl.Io.Buffer.limit]]%% followed by %%[[:develop:api:efl:io:buffer:method:preallocate|Efl.Io.Buffer.preallocate]]%%%%

//Since 1.19//

{{page>:develop:api-include:efl:io:buffer:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
  * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
  * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//
  * [[:develop:api:efl:io:sizer|Efl.Io.Sizer]] //(mixin)//
  * [[:develop:api:efl:io:positioner|Efl.Io.Positioner]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:io:buffer:method:adopt_readonly|adopt_readonly]]**\\
> %%Adopt a read-only slice as buffer's backing store.%%
<code c>
void efl_io_buffer_adopt_readonly(Eo *obj, const Eina_Slice slice);
</code>
\\
**[[:develop:api:efl:io:buffer:method:adopt_readwrite|adopt_readwrite]]**\\
> %%Adopt a read-write slice as buffer's backing store.%%
<code c>
void efl_io_buffer_adopt_readwrite(Eo *obj, Eina_Rw_Slice slice);
</code>
\\
**[[:develop:api:efl:io:buffer:method:binbuf_steal|binbuf_steal]]**\\
> %%Steals the internal buffer memory and returns it as a binbuf.%%
<code c>
Eina_Binbuf *efl_io_buffer_binbuf_steal(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffer:property:can_read|can_read]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>
\\
**[[:develop:api:efl:io:buffer:property:can_write|can_write]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>
\\
**[[:develop:api:efl:io:buffer:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffer:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close() on object destructor.%%
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>
\\
**[[:develop:api:efl:io:buffer:property:close_on_exec|close_on_exec]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close resources on exec() calls.%%
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>
\\
**[[:develop:api:efl:io:buffer:property:closed|closed]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will notify object was closed.%%
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>
\\
**[[:develop:api:efl:io:buffer:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffer:property:eos|eos]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%If %%''true''%% will notify end of stream.%%
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>
\\
**[[:develop:api:efl:io:buffer:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffer:property:limit|limit]]** //**(get, set)**//\\
> %%Limit how big the buffer can grow.%%
<code c>
size_t efl_io_buffer_limit_get(const Eo *obj);
void efl_io_buffer_limit_set(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:buffer:property:position|position]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:positioner|Efl.Io.Positioner]]]//\\
> %%Position property%%
<code c>
uint64_t efl_io_positioner_position_get(const Eo *obj);
Eina_Bool efl_io_positioner_position_set(Eo *obj, uint64_t position);
</code>
\\
**[[:develop:api:efl:io:buffer:property:position_read|position_read]]** //**(get, set)**//\\
> %%The position used by %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%%.%%
<code c>
uint64_t efl_io_buffer_position_read_get(const Eo *obj);
Eina_Bool efl_io_buffer_position_read_set(Eo *obj, uint64_t position);
</code>
\\
**[[:develop:api:efl:io:buffer:property:position_write|position_write]]** //**(get, set)**//\\
> %%The position used by %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%%.%%
<code c>
uint64_t efl_io_buffer_position_write_get(const Eo *obj);
Eina_Bool efl_io_buffer_position_write_set(Eo *obj, uint64_t position);
</code>
\\
**[[:develop:api:efl:io:buffer:method:preallocate|preallocate]]**\\
> %%Immediately pre-allocate a buffer of at least a given size.%%
<code c>
void efl_io_buffer_preallocate(Eo *obj, size_t size);
</code>
\\
**[[:develop:api:efl:io:buffer:method:read|read]]**// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%Reads data into a pre-allocated buffer.%%
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>
\\
**[[:develop:api:efl:io:buffer:method:resize|resize]]**// [Overridden from [[:develop:api:efl:io:sizer|Efl.Io.Sizer]]]//\\
> %%Resize object%%
<code c>
Eina_Error efl_io_sizer_resize(Eo *obj, uint64_t size);
</code>
\\
**[[:develop:api:efl:io:buffer:method:seek|seek]]**// [Overridden from [[:develop:api:efl:io:positioner|Efl.Io.Positioner]]]//\\
> %%Seek in data%%
<code c>
Eina_Error efl_io_positioner_seek(Eo *obj, int64_t offset, Efl_Io_Positioner_Whence whence);
</code>
\\
**[[:develop:api:efl:io:buffer:property:size|size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:sizer|Efl.Io.Sizer]]]//\\
> %%Size property%%
<code c>
uint64_t efl_io_sizer_size_get(const Eo *obj);
Eina_Bool efl_io_sizer_size_set(Eo *obj, uint64_t size);
</code>
\\
**[[:develop:api:efl:io:buffer:property:slice|slice]]** //**(get)**//\\
> %%Get a temporary access to buffer's internal memory.%%
<code c>
Eina_Slice efl_io_buffer_slice_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:io:buffer:method:write|write]]**// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%Writes data from a pre-populated buffer.%%
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:io:buffer:event:position_read_changed|position_read,changed]]**\\
> %%Notifies %%[[:develop:api:efl:io:buffer:property:position_read|Efl.Io.Buffer.position_read]]%% changed%%
<code c>
EFL_IO_BUFFER_EVENT_POSITION_READ_CHANGED(void)
</code>
\\ **[[:develop:api:efl:io:buffer:event:position_write_changed|position_write,changed]]**\\
> %%Notifies %%[[:develop:api:efl:io:buffer:property:position_write|Efl.Io.Buffer.position_write]]%% changed%%
<code c>
EFL_IO_BUFFER_EVENT_POSITION_WRITE_CHANGED(void)
</code>
\\ **[[:develop:api:efl:io:buffer:event:reallocated|reallocated]]**\\
> %%Notifies the internal buffer was reallocated, thus whatever was returned by %%[[:develop:api:efl:io:buffer:property:slice|Efl.Io.Buffer.slice]]%% becomes invalid%%
<code c>
EFL_IO_BUFFER_EVENT_REALLOCATED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:io:closer|Efl.Io.Closer]] ^^^
|  | **[[:develop:api:efl:io:closer:event:closed|closed]]** | %%Notifies closed, when property is marked as true%% |
^ [[:develop:api:efl:io:positioner|Efl.Io.Positioner]] ^^^
|  | **[[:develop:api:efl:io:positioner:event:position_changed|position,changed]]** | %%Notifies position changed%% |
^ [[:develop:api:efl:io:reader|Efl.Io.Reader]] ^^^
|  | **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]** | %%Notifies can_read property changed.%% |
|  | **[[:develop:api:efl:io:reader:event:eos|eos]]** | %%Notifies end of stream, when property is marked as true.%% |
^ [[:develop:api:efl:io:sizer|Efl.Io.Sizer]] ^^^
|  | **[[:develop:api:efl:io:sizer:event:size_changed|size,changed]]** | %%Notifies size changed%% |
^ [[:develop:api:efl:io:writer|Efl.Io.Writer]] ^^^
|  | **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]** | %%Notifies can_write property changed.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
