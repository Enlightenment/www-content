~~Title: Efl.Config.Global~~
====== Efl.Config.Global (class) ======

===== Description =====

%%This class is a singleton representing the global configuration for the running application.%%

{{page>:develop:api-include:efl:config:global:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:config|Efl.Config]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:config:global:property:config|config]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:config|Efl.Config]]]//\\
> %%A generic configuration value, refered to by name.%%
<code c>
Eina_Value *efl_config_get(const Eo *obj, const char *name);
Eina_Bool efl_config_set(Eo *obj, const char *name, const Eina_Value *value);
</code>
\\
**[[:develop:api:efl:config:global:property:profile|profile]]** //**(get, set)**//\\
> %%The profile for the running application.%%
<code c>
const char *efl_config_profile_get(const Eo *obj);
void efl_config_profile_set(Eo *obj, const char *profile);
</code>
\\
**[[:develop:api:efl:config:global:method:profile_dir_get|profile_dir_get]]**\\
> %%Returns the directory where a profile is stored.%%
<code c>
Eina_Stringshare *efl_config_profile_dir_get(Eo *obj, const char *profile, Eina_Bool is_user);
</code>
\\
**[[:develop:api:efl:config:global:method:profile_exists|profile_exists]]**\\
> %%Returns whether a profile exists or not.%%
<code c>
Eina_Bool efl_config_profile_exists(Eo *obj, const char *profile);
</code>
\\
**[[:develop:api:efl:config:global:method:profile_iterate|profile_iterate]]**\\
> %%Returns the list of available profiles.%%
<code c>
Eina_Iterator *efl_config_profile_iterate(Eo *obj, Eina_Bool hidden);
</code>
\\
**[[:develop:api:efl:config:global:method:profile_derived_add|profile_derived_add]]** ''protected''\\
> %%Add a new profile of the given name to be derived from the current profile.%%
<code c>
void efl_config_profile_derived_add(Eo *obj, const char *profile, const char *options);
</code>
\\
**[[:develop:api:efl:config:global:method:profile_derived_del|profile_derived_del]]** ''protected''\\
> %%Deletes a profile that is derived from the current one.%%
<code c>
void efl_config_profile_derived_del(Eo *obj, const char *profile);
</code>
\\
**[[:develop:api:efl:config:global:method:save|save]]** ''protected''\\
> %%Saves Elementary configuration to disk.%%
<code c>
Eina_Bool efl_config_save(Eo *obj, const char *profile);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
