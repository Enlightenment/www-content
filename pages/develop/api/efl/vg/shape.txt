~~Title: Efl.VG.Shape~~
====== Efl.VG.Shape (class) ======

===== Description =====

%%Efl vector graphics shape class%%

{{page>:develop:api-include:efl:vg:shape:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:vg|Efl.VG]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:vg|Efl.VG]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:gfx|Efl.Gfx]] //(interface)//
    * [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] //(mixin)//
    * [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
    * [[:develop:api:efl:duplicate|Efl.Duplicate]] //(interface)//
  * [[:develop:api:efl:gfx:shape|Efl.Gfx.Shape]] //(mixin)//
    * [[:develop:api:efl:gfx:path|Efl.Gfx.Path]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:vg:shape:method:bounds_get|bounds_get]]**// [Overridden from [[:develop:api:efl:vg|Efl.VG]]]//\\
> %%Give the bounding box in screen coordinates as being drawn.%%
<code c>
void efl_vg_bounds_get(Eo *obj, Eina_Rect *r);
</code>
\\
**[[:develop:api:efl:vg:shape:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:vg:shape:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:vg:shape:method:duplicate|duplicate]]**// [Overridden from [[:develop:api:efl:duplicate|Efl.Duplicate]]]//\\
> %%Creates a carbon copy of this object and returns it.%%
<code c>
Efl_Duplicate *efl_duplicate(const Eo *obj);
</code>
\\
**[[:develop:api:efl:vg:shape:property:fill|fill]]** //**(get, set)**//\\
> %%Fill of the shape object%%
<code c>
Efl_VG *efl_vg_shape_fill_get(const Eo *obj);
void efl_vg_shape_fill_set(Eo *obj, Efl_VG *f);
</code>
\\
**[[:develop:api:efl:vg:shape:method:interpolate|interpolate]]**// [Overridden from [[:develop:api:efl:vg|Efl.VG]]]//\\
> %%Interpolate a given vector graphics object%%
<code c>
Eina_Bool efl_vg_interpolate(Eo *obj, const Efl_VG *from, const Efl_VG *to, double pos_map);
</code>
\\
**[[:develop:api:efl:vg:shape:property:stroke_fill|stroke_fill]]** //**(get, set)**//\\
> %%Stroke fill of the shape object%%
<code c>
Efl_VG *efl_vg_shape_stroke_fill_get(const Eo *obj);
void efl_vg_shape_stroke_fill_set(Eo *obj, Efl_VG *f);
</code>
\\
**[[:develop:api:efl:vg:shape:property:stroke_marker|stroke_marker]]** //**(get, set)**//\\
> %%Stroke marker of the shape object%%
<code c>
Efl_VG *efl_vg_shape_stroke_marker_get(const Eo *obj);
void efl_vg_shape_stroke_marker_set(Eo *obj, Efl_VG *m);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:property:scale|scale]]** //**(get, set)**// | %%The scaling factor of an object.%% |
^ [[:develop:api:efl:gfx:color|Efl.Gfx.Color]] ^^^
|  | **[[:develop:api:efl:gfx:color:property:color_class_code|color_class_code]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:gfx:color:property:color_code|color_code]]** //**(get, set)**// |  |
^ [[:develop:api:efl:gfx:path|Efl.Gfx.Path]] ^^^
|  | **[[:develop:api:efl:gfx:path:method:append_arc|append_arc]]** | %%Append an arc that enclosed in the given rectangle (x, y, w, h). The angle is defined in counter clock wise , use -ve angle for clockwise arc.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_arc_to|append_arc_to]]** | %%Append an arc that connects from the current point int the point list to the given point (x,y). The arc is defined by the given radius in  x-direction (rx) and radius in y direction (ry).%% |
|  | **[[:develop:api:efl:gfx:path:method:append_circle|append_circle]]** | %%Append a circle with given center and radius.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_close|append_close]]** | %%Closes the current subpath by drawing a line to the beginning of the subpath, automatically starting a new path. The current point of the new path is (0, 0).%% |
|  | **[[:develop:api:efl:gfx:path:method:append_cubic_to|append_cubic_to]]** | %%Adds a cubic Bezier curve between the current position and the given end point (x,y) using the control points specified by (ctrl_x0, ctrl_y0), and (ctrl_x1, ctrl_y1). After the path is drawn, the current position is updated to be at the end point of the path.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_line_to|append_line_to]]** | %%Adds a straight line from the current position to the given end point. After the line is drawn, the current position is updated to be at the end point of the line.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_move_to|append_move_to]]** | %%Moves the current point to the given point,  implicitly starting a new subpath and closing the previous one.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_quadratic_to|append_quadratic_to]]** | %%Adds a quadratic Bezier curve between the current position and the given end point (x,y) using the control points specified by (ctrl_x, ctrl_y). After the path is drawn, the current position is updated to be at the end point of the path.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_rect|append_rect]]** | %%Append the given rectangle with rounded corner to the path.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_scubic_to|append_scubic_to]]** | %%Same as efl_gfx_path_append_cubic_to() api only difference is that it uses the current control point to draw the bezier.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_squadratic_to|append_squadratic_to]]** | %%Same as efl_gfx_path_append_quadratic_to() api only difference is that it uses the current control point to draw the bezier.%% |
|  | **[[:develop:api:efl:gfx:path:method:append_svg_path|append_svg_path]]** | %%Append SVG path data%% |
|  | **[[:develop:api:efl:gfx:path:method:bounds_get|bounds_get]]** | %%Compute and return the bounding box of the currently set path%% |
|  | **[[:develop:api:efl:gfx:path:property:current|current]]** //**(get)**// | %%Current point coordinates%% |
|  | **[[:develop:api:efl:gfx:path:property:current_ctrl|current_ctrl]]** //**(get)**// | %%Current control point coordinates%% |
|  | **[[:develop:api:efl:gfx:path:method:equal_commands|equal_commands]]** | %%Equal commands in object%% |
|  | **[[:develop:api:efl:gfx:path:property:length|length]]** //**(get)**// | %%Path length property%% |
|  | **[[:develop:api:efl:gfx:path:property:path|path]]** //**(get, set)**// | %%Set the list of commands and points to be used to create the content of shape.%% |
|  | **[[:develop:api:efl:gfx:path:method:reset|reset]]** | %%Reset the shape data of the shape object.%% |
^ [[:develop:api:efl:gfx:shape|Efl.Gfx.Shape]] ^^^
|  | **[[:develop:api:efl:gfx:shape:method:copy_from|copy_from]]** | %%Copy the shape data from the object specified.%% |
|  | **[[:develop:api:efl:gfx:shape:property:fill_rule|fill_rule]]** //**(get, set)**// | %%The fill rule of the given shape object. %%''EFL_GFX_FILL_RULE_WINDING''%%, or %%''EFL_GFX_FILL_RULE_ODD_EVEN''%%.%% |
|  | **[[:develop:api:efl:gfx:shape:method:interpolate|interpolate]]** | %%Creates intermediary path part-way between two paths%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_cap|stroke_cap]]** //**(get, set)**// | %%The cap style to be used for stroking the path. The cap will be used for capping the end point of a open subpath.%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_color|stroke_color]]** //**(get, set)**// | %%The color to be used for stroking the path.%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_dash|stroke_dash]]** //**(get, set)**// | %%Not implemented%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_join|stroke_join]]** //**(get, set)**// | %%The join style to be used for stroking the path. The join style will be used for joining the two line segment while stroking the path.%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_location|stroke_location]]** //**(get, set)**// | %%Not implemented%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_scale|stroke_scale]]** //**(get, set)**// | %%The stroke scale to be used for stroking the path. Will be used along with stroke width property.%% |
|  | **[[:develop:api:efl:gfx:shape:property:stroke_width|stroke_width]]** //**(get, set)**// | %%The stroke width to be used for stroking the path.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:property:layer|layer]]** //**(get, set)**// |  |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |
^ [[:develop:api:efl:vg|Efl.VG]] ^^^
|  | **[[:develop:api:efl:vg:property:above|above]]** //**(get)**// | %%Get the Evas object stacked right above %%''obj''%%%% |
|  | **[[:develop:api:efl:vg:property:below|below]]** //**(get)**// | %%Get the Evas object stacked right below %%''obj''%%%% |
|  | **[[:develop:api:efl:vg:property:color|color]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:vg:property:geometry|geometry]]** //**(get, set)**// | %%Rectangular geometry that combines both position and size.%% |
|  | **[[:develop:api:efl:vg:method:lower|lower]]** | %%Lower %%''obj''%% to the bottom of its layer.%% |
|  | **[[:develop:api:efl:vg:property:mask|mask]]** //**(get, set)**// | %%Vector graphics object mask%% |
|  | **[[:develop:api:efl:vg:property:name|name]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:vg:property:origin|origin]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:vg:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:vg:property:position|position]]** //**(get, set)**// | %%The 2D position of a canvas object.%% |
|  | **[[:develop:api:efl:vg:method:raise|raise]]** | %%Raise %%''obj''%% to the top of its layer.%% |
|  | **[[:develop:api:efl:vg:property:size|size]]** //**(get, set)**// | %%The 2D size of a canvas object.%% |
|  | **[[:develop:api:efl:vg:method:stack_above|stack_above]]** | %%Stack %%''obj''%% immediately %%''above''%%%% |
|  | **[[:develop:api:efl:vg:method:stack_below|stack_below]]** | %%Stack %%''obj''%% immediately %%''below''%%%% |
|  | **[[:develop:api:efl:vg:property:transformation|transformation]]** //**(get, set)**// |  |
|  | **[[:develop:api:efl:vg:property:visible|visible]]** //**(get, set)**// | %%The visibility of a canvas object.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:gfx|Efl.Gfx]] ^^^
|  | **[[:develop:api:efl:gfx:event:hide|hide]]** | %%Object just became invisible.%% |
|  | **[[:develop:api:efl:gfx:event:move|move]]** | %%Object was moved, its position during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:resize|resize]]** | %%Object was resized, its size during the event is the new one.%% |
|  | **[[:develop:api:efl:gfx:event:show|show]]** | %%Object just became visible.%% |
^ [[:develop:api:efl:gfx:path|Efl.Gfx.Path]] ^^^
|  | **[[:develop:api:efl:gfx:path:event:changed|changed]]** | %%Graphics path was changed.%% |
^ [[:develop:api:efl:gfx:stack|Efl.Gfx.Stack]] ^^^
|  | **[[:develop:api:efl:gfx:stack:event:restack|restack]]** | %%Object stacking was changed.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
