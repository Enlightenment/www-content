~~Title: Efl.Access.Text~~
====== Efl.Access.Text (interface) ======

===== Description =====

%%Elementary accessible text interface%%

{{page>:develop:api-include:efl:access:text:description&nouser&nolink&nodate}}

===== Inheritance =====


++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_access_text [fillcolor = "dodgerblue4", label = "Efl.Access.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

++++ Full hierarchy |



++++
===== Members =====

**[[:develop:api:efl:access:text:method:selection_add|selection_add]]** ''protected''\\
> %%Add selection%%
<code c>
Eina_Bool efl_access_text_selection_add(Eo *obj, int start_offset, int end_offset);
</code>
\\
**[[:develop:api:efl:access:text:method:selection_remove|selection_remove]]** ''protected''\\
> %%Remove selection%%
<code c>
Eina_Bool efl_access_text_selection_remove(Eo *obj, int selection_number);
</code>
\\
**[[:develop:api:efl:access:text:property:attributes|attributes]]** //**(get)**// ''protected''\\
> %%Gets list of all text attributes.%%
<code c>
Eina_List *efl_access_text_attributes_get(const Eo *obj, int *start_offset, int *end_offset);
</code>
\\
**[[:develop:api:efl:access:text:property:attribute|attribute]]** //**(get)**// ''protected''\\
> %%Indicate if a text attribute with a given name is set%%
<code c>
Eina_Bool efl_access_text_attribute_get(const Eo *obj, const char *name, int *start_offset, int *end_offset, char **value);
</code>
\\
**[[:develop:api:efl:access:text:property:bounded_ranges|bounded_ranges]]** //**(get)**// ''protected''\\
> %%Bounded ranges%%
<code c>
Eina_List *efl_access_text_bounded_ranges_get(const Eo *obj, Eina_Bool screen_coords, Eina_Rect rect, Efl_Access_Text_Clip_Type xclip, Efl_Access_Text_Clip_Type yclip);
</code>
\\
**[[:develop:api:efl:access:text:property:caret_offset|caret_offset]]** //**(get, set)**// ''protected''\\
> %%Caret offset property%%
<code c>
int efl_access_text_caret_offset_get(const Eo *obj);
Eina_Bool efl_access_text_caret_offset_set(Eo *obj, int offset);
</code>
\\
**[[:develop:api:efl:access:text:property:character_count|character_count]]** //**(get)**// ''protected''\\
> %%Character count%%
<code c>
int efl_access_text_character_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:text:property:character_extents|character_extents]]** //**(get)**// ''protected''\\
> %%Character extents%%
<code c>
Eina_Bool efl_access_text_character_extents_get(const Eo *obj, int offset, Eina_Bool screen_coords, Eina_Rect *rect);
</code>
\\
**[[:develop:api:efl:access:text:property:character|character]]** //**(get)**// ''protected''\\
> %%Gets single character present in accessible widget's text at given offset.%%
<code c>
Eina_Unicode efl_access_text_character_get(const Eo *obj, int offset);
</code>
\\
**[[:develop:api:efl:access:text:property:default_attributes|default_attributes]]** //**(get)**// ''protected''\\
> %%Default attributes%%
<code c>
Eina_List *efl_access_text_default_attributes_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:text:property:offset_at_point|offset_at_point]]** //**(get)**// ''protected''\\
> %%Offset at given point%%
<code c>
int efl_access_text_offset_at_point_get(const Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>
\\
**[[:develop:api:efl:access:text:property:range_extents|range_extents]]** //**(get)**// ''protected''\\
> %%Range extents%%
<code c>
Eina_Bool efl_access_text_range_extents_get(const Eo *obj, Eina_Bool screen_coords, int start_offset, int end_offset, Eina_Rect *rect);
</code>
\\
**[[:develop:api:efl:access:text:property:selections_count|selections_count]]** //**(get)**// ''protected''\\
> %%Selection count property%%
<code c>
int efl_access_text_selections_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:text:property:selection|selection]]** //**(get, set)**// ''protected''\\
> %%Selection property%%
<code c>
void efl_access_text_selection_get(const Eo *obj, int selection_number, int *start_offset, int *end_offset);
Eina_Bool efl_access_text_selection_set(Eo *obj, int selection_number, int start_offset, int end_offset);
</code>
\\
**[[:develop:api:efl:access:text:property:string|string]]** //**(get)**// ''protected''\\
> %%Gets string, start and end offset in text according to given initial offset and granularity.%%
<code c>
char *efl_access_text_string_get(const Eo *obj, Efl_Access_Text_Granularity granularity, int *start_offset, int *end_offset);
</code>
\\
**[[:develop:api:efl:access:text:property:text|text]]** //**(get)**// ''protected''\\
> %%Gets text of accessible widget.%%
<code c>
char *efl_access_text_get(const Eo *obj, int start_offset, int end_offset);
</code>
\\

===== Events =====

**[[:develop:api:efl:access:text:event:access_text_attributes_changed|access,text,attributes,changed]]**\\
> %%Text attributes have changed%%
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_ATTRIBUTES_CHANGED(void)
</code>
\\ **[[:develop:api:efl:access:text:event:access_text_bounds_changed|access,text,bounds,changed]]**\\
> %%Text bounds have changed%%
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_BOUNDS_CHANGED(void)
</code>
\\ **[[:develop:api:efl:access:text:event:access_text_caret_moved|access,text,caret,moved]]**\\
> %%Caret moved%%
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_CARET_MOVED(void)
</code>
\\ **[[:develop:api:efl:access:text:event:access_text_inserted|access,text,inserted]]**\\
> %%Text was inserted%%
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_INSERTED(void)
</code>
\\ **[[:develop:api:efl:access:text:event:access_text_removed|access,text,removed]]**\\
> %%Text was removed%%
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_REMOVED(void)
</code>
\\ **[[:develop:api:efl:access:text:event:access_text_selection_changed|access,text,selection,changed]]**\\
> %%Text selection has changed%%
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_SELECTION_CHANGED(void)
</code>
\\ 