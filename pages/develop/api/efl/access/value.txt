~~Title: Efl.Access.Value~~
====== Efl.Access.Value (interface) ======

===== Description =====

%%Elementary Access value interface%%

{{page>:develop:api-include:efl:access:value:description&nouser&nolink&nodate}}

===== Inheritance =====


++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_access_value [fillcolor = "dodgerblue4", label = "Efl.Access.Value", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

++++ Full hierarchy |



++++
===== Members =====

**[[:develop:api:efl:access:value:property:increment|increment]]** //**(get)**// ''protected''\\
> %%Gets an minimal incrementation value%%
<code c>
double efl_access_value_increment_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:access:value:property:range|range]]** //**(get)**// ''protected''\\
> %%Gets a range of all possible values and its description%%
<code c>
void efl_access_value_range_get(const Eo *obj, double *lower_limit, double *upper_limit, const char **description);
</code>
\\
**[[:develop:api:efl:access:value:property:value_and_text|value_and_text]]** //**(get, set)**// ''protected''\\
> %%Value and text property%%
<code c>
void efl_access_value_and_text_get(const Eo *obj, double *value, const char **text);
Eina_Bool efl_access_value_and_text_set(Eo *obj, double value, const char *text);
</code>
\\

===== Events =====

