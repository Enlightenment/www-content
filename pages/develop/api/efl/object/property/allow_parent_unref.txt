~~Title: Efl.Object.allow_parent_unref~~
===== Description =====

%%Allow an object to be deleted by unref even if it has a parent.%%

%%This simply hides the error message warning that an object being destroyed still has a parent. This property is false by default.%%

%%In a normal object use case, when ownership of an object is given to a caller, said ownership should be released with efl_unref(). If the object has a parent, this will print error messages, as %%''efl_unref''%%() is stealing the ref from the parent.%%

<note warning>
%%Use this function very carefully, unless you're absolutely sure of what you are doing.%%
</note>
{{page>:develop:api-include:efl:object:property:allow_parent_unref:description&nouser&nolink&nodate}}

===== Values =====

  * **allow** - %%Whether to allow %%''efl_unref''%%() to zero even if %%[[:develop:api:efl:object:property:parent|Efl.Object.parent]]%% is not %%''null''%%.%%

===== Signature =====

<code>
@property allow_parent_unref {
    get {
        values {
            allow: bool (false);
        }
    }
    set {
        values {
            allow: bool (false);
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

===== Implemented by =====

  * **Efl.Object.allow_parent_unref**

