~~Title: Efl.Canvas~~
====== Efl.Canvas (interface) ======

===== Description =====

%%Common interface for window and some internal classes in EFL.%%

{{page>:develop:api-include:efl:canvas:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:canvas:property:device|device]]** //**(get)**//\\
> %%An input device attached to this canvas, found by name.%%
<code c>
Efl_Input_Device *efl_canvas_device_get(const Eo *obj, const char *name);
</code>
\\
**[[:develop:api:efl:canvas:property:image_max_size|image_max_size]]** //**(get)**//\\
> %%Get the maximum image size evas can possibly handle.%%
<code c>
Eina_Bool efl_canvas_image_max_size_get(const Eo *obj, Eina_Size2D *max);
</code>
\\
**[[:develop:api:efl:canvas:method:object_top_at_xy_get|object_top_at_xy_get]]**\\
> %%Retrieve the object stacked at the top of a given position in a canvas.%%
<code c>
Efl_Gfx *efl_canvas_object_top_at_xy_get(const Eo *obj, Eina_Position2D pos, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>
\\
**[[:develop:api:efl:canvas:method:object_top_in_rectangle_get|object_top_in_rectangle_get]]**\\
> %%Retrieve the Evas object stacked at the top of a given rectangular region in a canvas%%
<code c>
Efl_Gfx *efl_canvas_object_top_in_rectangle_get(const Eo *obj, Eina_Rect rect, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>
\\
**[[:develop:api:efl:canvas:method:objects_at_xy_get|objects_at_xy_get]]**\\
> %%Retrieve a list of objects lying over a given position in a canvas.%%
<code c>
Eina_Iterator *efl_canvas_objects_at_xy_get(const Eo *obj, Eina_Position2D pos, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>
\\
**[[:develop:api:efl:canvas:method:objects_in_rectangle_get|objects_in_rectangle_get]]**\\
> %%Retrieve a list of objects lying over a given rectangular region in a canvas.%%
<code c>
Eina_Iterator *efl_canvas_objects_in_rectangle_get(const Eo *obj, Eina_Rect rect, Eina_Bool include_pass_events_objects, Eina_Bool include_hidden_objects);
</code>
\\
**[[:develop:api:efl:canvas:method:pointer_iterate|pointer_iterate]]**\\
> %%Returns an iterator over the current known pointer positions.%%
<code c>
Eina_Iterator *efl_canvas_pointer_iterate(const Eo *obj, Eina_Bool hover);
</code>
\\
**[[:develop:api:efl:canvas:property:pointer_position|pointer_position]]** //**(get)**//\\
> %%This function returns the current known pointer coordinates%%
<code c>
Eina_Position2D efl_canvas_pointer_position_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:property:seat|seat]]** //**(get)**//\\
> %%A seat attached to this canvas, found by id.%%
<code c>
Efl_Input_Device *efl_canvas_seat_get(const Eo *obj, int id);
</code>
\\
**[[:develop:api:efl:canvas:method:seats|seats]]**\\
> %%Iterate over the input device seats.%%
<code c>
Eina_Iterator *efl_canvas_seats(Eo *obj);
</code>
\\
**[[:develop:api:efl:canvas:method:smart_objects_calculate|smart_objects_calculate]]**\\
> %%Call user-provided %%''calculate''%% smart functions and unset the flag signalling that the object needs to get recalculated to all smart objects in the canvas.%%
<code c>
void efl_canvas_smart_objects_calculate(Eo *obj);
</code>
\\

===== Events =====

**[[:develop:api:efl:canvas:event:device_added|device,added]]**\\
> %%Called when input device was added%%
<code c>
EFL_CANVAS_EVENT_DEVICE_ADDED(Efl_Input_Device *)
</code>
\\ **[[:develop:api:efl:canvas:event:device_changed|device,changed]]**\\
> %%Called when input device changed%%
<code c>
EFL_CANVAS_EVENT_DEVICE_CHANGED(Efl_Input_Device *)
</code>
\\ **[[:develop:api:efl:canvas:event:device_removed|device,removed]]**\\
> %%Called when input device was removed%%
<code c>
EFL_CANVAS_EVENT_DEVICE_REMOVED(Efl_Input_Device *)
</code>
\\ **[[:develop:api:efl:canvas:event:focus_in|focus,in]]**\\
> %%Called when canvas got focus%%
<code c>
EFL_CANVAS_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>
\\ **[[:develop:api:efl:canvas:event:focus_out|focus,out]]**\\
> %%Called when canvas lost focus%%
<code c>
EFL_CANVAS_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>
\\ **[[:develop:api:efl:canvas:event:object_focus_in|object,focus,in]]**\\
> %%Called when object got focus%%
<code c>
EFL_CANVAS_EVENT_OBJECT_FOCUS_IN(Efl_Input_Focus *)
</code>
\\ **[[:develop:api:efl:canvas:event:object_focus_out|object,focus,out]]**\\
> %%Called when object lost focus%%
<code c>
EFL_CANVAS_EVENT_OBJECT_FOCUS_OUT(Efl_Input_Focus *)
</code>
\\ **[[:develop:api:efl:canvas:event:render_post|render,post]]**\\
> %%Called when post render happens%%
<code c>
EFL_CANVAS_EVENT_RENDER_POST(void)
</code>
\\ **[[:develop:api:efl:canvas:event:render_pre|render,pre]]**\\
> %%Called when pre render happens%%
<code c>
EFL_CANVAS_EVENT_RENDER_PRE(void)
</code>
\\ 