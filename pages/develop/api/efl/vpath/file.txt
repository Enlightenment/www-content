~~Title: Efl.Vpath.File~~
====== Efl.Vpath.File (class) ======

===== Description =====

%%VPath File is an actual representation of a downloaded/mapped vpath file%%

%%Keep this object around for as long as you need to use the file as it may have been downloaded and kept as a local temporary file and deletion may remove it.%%

%%When you have a Vpath File object for the first time, call the do() method on it to actually begin/do the mapping. From here the fetched or failed event callbacks will be called, inside of which or afterwards you can fetch the resulting local file path by getting the result property.%%

//Since 1.18//

{{page>:develop:api-include:efl:vpath:file:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:vpath:file:method:do|do]]**\\
> %%Actually begin the resolving here - emit event now or do later%%
<code c>
Eina_Bool efl_vpath_file_do(Eo *obj);
</code>
\\
**[[:develop:api:efl:vpath:file:property:keep|keep]]** //**(get, set)**//\\
> %%If this object has to be kept for the usage of the result%%
<code c>
Eina_Bool efl_vpath_file_keep_get(const Eo *obj);
void efl_vpath_file_keep_set(Eo *obj, Eina_Bool keep);
</code>
\\
**[[:develop:api:efl:vpath:file:property:path|path]]** //**(get, set)**//\\
> %%The original source path provided to lookup/fetch from%%
<code c>
const char *efl_vpath_file_path_get(const Eo *obj);
void efl_vpath_file_path_set(Eo *obj, const char *path);
</code>
\\
**[[:develop:api:efl:vpath:file:property:result|result]]** //**(get, set)**//\\
> %%The resulting real local file path to open/read%%
<code c>
const char *efl_vpath_file_result_get(const Eo *obj);
void efl_vpath_file_result_set(Eo *obj, const char *path);
</code>
\\
**[[:develop:api:efl:vpath:file:method:wait|wait]]**\\
> %%If not fetched yet, wait until it is and call result cb%%
<code c>
void efl_vpath_file_wait(Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:vpath:file:event:failed|failed]]**\\
> %%File fetch or mapping failed%%
<code c>
EFL_VPATH_FILE_EVENT_FAILED(void)
</code>
\\ **[[:develop:api:efl:vpath:file:event:fetched|fetched]]**\\
> %%File successfully mapped/fetched%%
<code c>
EFL_VPATH_FILE_EVENT_FETCHED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
