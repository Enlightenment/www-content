~~Title: Efl.Pack~~
====== Efl.Pack (interface) ======

===== Description =====

%%API common to all UI container objects.%%

{{page>:develop:api-include:efl:pack:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:container|Efl.Container]] //(interface)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_pack [fillcolor = "dodgerblue4", label = "Efl.Pack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_pack -> efl_container
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:container|Efl.Container]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:pack:method:pack_clear|pack_clear]]**\\
> %%Removes all packed contents, and unreferences them.%%
<code c>
Eina_Bool efl_pack_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:pack:method:pack|pack]]**\\
> %%Adds an item to this container.%%
<code c>
Eina_Bool efl_pack(Eo *obj, Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:pack:method:unpack_all|unpack_all]]**\\
> %%Removes all packed contents, without unreferencing them.%%
<code c>
Eina_Bool efl_pack_unpack_all(Eo *obj);
</code>
\\
**[[:develop:api:efl:pack:method:unpack|unpack]]**\\
> %%Removes an existing item from the container, without deleting it.%%
<code c>
Eina_Bool efl_pack_unpack(Eo *obj, Efl_Gfx *subobj);
</code>
\\
**[[:develop:api:efl:pack:property:pack_align|pack_align]]** //**(get, set)**//\\
> %%Alignment of the container within its bounds%%
<code c>
void efl_pack_align_get(const Eo *obj, double *align_horiz, double *align_vert);
void efl_pack_align_set(Eo *obj, double align_horiz, double align_vert);
</code>
\\
**[[:develop:api:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**//\\
> %%Padding between items contained in this object.%%
<code c>
void efl_pack_padding_get(const Eo *obj, double *pad_horiz, double *pad_vert, Eina_Bool *scalable);
void efl_pack_padding_set(Eo *obj, double pad_horiz, double pad_vert, Eina_Bool scalable);
</code>
\\

==== Inherited ====

[[:develop:api:efl:container|Efl.Container]]\\
> **[[:develop:api:efl:container:method:content_count|content_count]]**, **[[:develop:api:efl:container:method:content_iterate|content_iterate]]**, **[[:develop:api:efl:container:method:content_remove|content_remove]]**
===== Events =====

**[[:develop:api:efl:pack:event:layout_updated|layout,updated]]**\\
> %%Sent after the layout was updated.%%
<code c>
EFL_PACK_EVENT_LAYOUT_UPDATED(void)
</code>
\\ ==== Inherited ====

[[:develop:api:efl:container|Efl.Container]]\\
> **[[:develop:api:efl:container:event:content_added|content,added]]**, **[[:develop:api:efl:container:event:content_removed|content,removed]]**