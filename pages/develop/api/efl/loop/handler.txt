~~Title: Efl.Loop.Handler~~
====== Efl.Loop.Handler (class) ======

===== Description =====

%%An object that describes an low-level source of I/O to listen to for available data to be read or written, depending on the OS and data source type. When I/O becomes available various events are produced and the callbacks attached to them will be called.%%

{{page>:develop:api-include:efl:loop:handler:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:loop:handler:property:active|active]]** //**(get, set)**//\\
> %%This sets what kind of I/O should be listened to only when using a fd or fd_file for the handler%%
<code c>
Efl_Loop_Handler_Flags efl_loop_handler_active_get(const Eo *obj);
void efl_loop_handler_active_set(Eo *obj, Efl_Loop_Handler_Flags flags);
</code>
\\
**[[:develop:api:efl:loop:handler:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:handler:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:handler:property:fd|fd]]** //**(get, set)**//\\
> %%Controls a file desciptor to listen to for I/O, which points to a data pipe such as a device, socket or pipe etc.%%
<code c>
int efl_loop_handler_fd_get(const Eo *obj);
void efl_loop_handler_fd_set(Eo *obj, int fd);
</code>
\\
**[[:develop:api:efl:loop:handler:property:fd_file|fd_file]]** //**(get, set)**//\\
> %%Controls a file descriptor to listen to for I/O that specifically points to a file in storage and not a device, socket or pipe etc.%%
<code c>
int efl_loop_handler_fd_file_get(const Eo *obj);
void efl_loop_handler_fd_file_set(Eo *obj, int fd);
</code>
\\
**[[:develop:api:efl:loop:handler:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of efl_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:handler:property:parent|parent]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%The parent of an object.%%
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>
\\
**[[:develop:api:efl:loop:handler:property:win32|win32]]** //**(get, set)**//\\
> %%Controls a windows win32 object handle to listen to for I/O. When it becomes available for any data the read event will be produced.%%
<code c>
void *efl_loop_handler_win32_get(const Eo *obj);
void efl_loop_handler_win32_set(Eo *obj, void *handle);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:loop:handler:event:buffer|buffer]]**\\
> %%Called when buffered data already read from the descriptor should be processed.%%
<code c>
EFL_LOOP_HANDLER_EVENT_BUFFER(void)
</code>
\\ **[[:develop:api:efl:loop:handler:event:error|error]]**\\
> %%Called when a error occurrs on the descriptor.%%
<code c>
EFL_LOOP_HANDLER_EVENT_ERROR(void)
</code>
\\ **[[:develop:api:efl:loop:handler:event:prepare|prepare]]**\\
> %%Called when preparing a descriptor for listening.%%
<code c>
EFL_LOOP_HANDLER_EVENT_PREPARE(void)
</code>
\\ **[[:develop:api:efl:loop:handler:event:read|read]]**\\
> %%Called when a read occurs on the descriptor.%%
<code c>
EFL_LOOP_HANDLER_EVENT_READ(void)
</code>
\\ **[[:develop:api:efl:loop:handler:event:write|write]]**\\
> %%Called when a write occurs on the descriptor.%%
<code c>
EFL_LOOP_HANDLER_EVENT_WRITE(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
