~~Title: Efl.Loop.Timer~~
====== Efl.Loop.Timer (class) ======

===== Description =====

%%Timers are objects that will call a given callback at some point in the future and repeat that tick at a given interval.%%

%%Timers require the ecore main loop to be running and functioning properly. They do not guarantee exact timing, but try to work on a "best effort" basis.%%

{{page>:develop:api-include:efl:loop:timer:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_loop_timer [fillcolor = "black", label = "Efl.Loop.Timer", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_loop_timer -> efl_loop_user
    efl_loop_user -> efl_object
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:loop:timer:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:method:delay|delay]]**\\
> %%Adds some delay for the next occurrence of a timer. This doesn't affect the interval of a timer.%%
<code c>
void efl_loop_timer_delay(Eo *obj, double add);
</code>
\\
**[[:develop:api:efl:loop:timer:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:method:event_freeze|event_freeze]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Freeze events of object.%%
<code c>
void efl_event_freeze(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:method:event_thaw|event_thaw]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Thaw events of object.%%
<code c>
void efl_event_thaw(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:method:loop_reset|loop_reset]]**\\
> %%This effectively reset a timer, but based on the time when this iteration of the main loop started.%%
<code c>
void efl_loop_timer_loop_reset(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:method:reset|reset]]**\\
> %%Resets a timer to its full interval. This effectively makes the timer start ticking off from zero now.%%
<code c>
void efl_loop_timer_reset(Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:property:event_freeze_count|event_freeze_count]]** //**(get)**//// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Return freeze events of object.%%
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:loop:timer:property:interval|interval]]** //**(get, set)**//\\
> %%Interval the timer ticks on.%%
<code c>
double efl_loop_timer_interval_get(const Eo *obj);
void efl_loop_timer_interval_set(Eo *obj, double in);
</code>
\\
**[[:develop:api:efl:loop:timer:property:parent|parent]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%The parent of an object.%%
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>
\\
**[[:develop:api:efl:loop:timer:property:pending|pending]]** //**(get)**//\\
> %%Pending time regarding a timer.%%
<code c>
double efl_loop_timer_pending_get(const Eo *obj);
</code>
\\

==== Inherited ====

[[:develop:api:efl:loop_user|Efl.Loop_User]]\\
> **[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**//\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**, **[[:develop:api:efl:object:method:composite_attach|composite_attach]]**, **[[:develop:api:efl:object:method:composite_detach|composite_detach]]**, **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**, **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**, **[[:develop:api:efl:object:method:del|del]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**, **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**, **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**, **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**, **[[:develop:api:efl:object:method:name_find|name_find]]**, **[[:develop:api:efl:object:method:provider_find|provider_find]]**, **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//, **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//, **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//, **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//
===== Events =====

**[[:develop:api:efl:loop:timer:event:tick|tick]]**\\
> %%Event triggered when the specified time as passed.%%
<code c>
EFL_LOOP_TIMER_EVENT_TICK(void)
</code>
\\ ==== Inherited ====

[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:event:callback_add|callback,add]]**, **[[:develop:api:efl:object:event:callback_del|callback,del]]**, **[[:develop:api:efl:object:event:del|del]]**