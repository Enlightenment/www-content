~~Title: Efl.Net.Control~~
====== Efl.Net.Control (class) ======

===== Description =====

%%Controls network connectivity.%%

%%This class and its child objects are only useful to implement control of the network connectivity. If your application only needs to request access to the network, use @Efl.Net.Session instead.%%

%%Network connectivity is defined on top of technologies that provide access points. A technology can be "ethernet", "wifi", "bluetooth" or something else. Ethernet will provide a single access point, while "wifi" will expose zero or more access points that can come and go.%%

%%Users willing to use access points are expected to monitor "access_point,add" event to know when access points are added. To know when they were deleted, "access_point,del" or an %%[[:develop:api:efl:net:control:access_point|Efl.Net.Control.Access_Point]]%% "del" event. Finally "access_points,changed" is relative to additions, deletions and reordering of access point due changes in their priorities.%%

%%The backend system is responsible for remembering connection details such as passphrase, last connected access point and priority. The user is NOT supposed to do that.%%

%%For ease of use %%[[:develop:api:efl:net:control:property:state|Efl.Net.Control.state]]%% determines if at least one access point is online (verified connectivity), local (connected but unverified) or offline.%%

%%For safety reasons all radio transmissions may be disabled with %%[[:develop:api:efl:net:control:property:radios_offline|Efl.Net.Control.radios_offline]]%% property. This is usually called "airplane mode" on some platforms.%%

%%Some platforms may not implement the backend for this class, in which case the system will report %%[[:develop:api:efl:net:control:property:state|Efl.Net.Control.state]]%% as permanently "online" (%%[[:develop:api:efl:net:control:state|Efl.Net.Control.State.online]]%%) and iterators for %%[[:develop:api:efl:net:control:property:access_points|Efl.Net.Control.access_points]]%% and %%[[:develop:api:efl:net:control:property:technologies|Efl.Net.Control.technologies]]%% will be empty (they will be returned but won't contain any items).%%

//Since 1.19//

{{page>:develop:api-include:efl:net:control:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:control:property:access_points|access_points]]** //**(get)**//\\
> %%The iterator of current access points.%%
<code c>
Eina_Iterator *efl_net_control_access_points_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:property:agent_enabled|agent_enabled]]** //**(get, set)**//\\
> %%The agent is responsible for user interaction.%%
<code c>
Eina_Bool efl_net_control_agent_enabled_get(const Eo *obj);
void efl_net_control_agent_enabled_set(Eo *obj, Eina_Bool agent_enabled);
</code>
\\
**[[:develop:api:efl:net:control:method:agent_reply|agent_reply]]**\\
> %%If event "agent_request_input" was emitted, this will reply with the requested data%%
<code c>
void efl_net_control_agent_reply(Eo *obj, const char *name, const Eina_Slice *ssid, const char *username, const char *passphrase, const char *wps);
</code>
\\
**[[:develop:api:efl:net:control:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:property:radios_offline|radios_offline]]** //**(get, set)**//\\
> %%If %%''true''%% disable all network technologies that use radio transmission, such as bluetooth and wifi. If %%''false''%%, allows radio to be used.%%
<code c>
Eina_Bool efl_net_control_radios_offline_get(const Eo *obj);
void efl_net_control_radios_offline_set(Eo *obj, Eina_Bool radios_offline);
</code>
\\
**[[:develop:api:efl:net:control:property:state|state]]** //**(get)**//\\
> %%Summary of network connectivity.%%
<code c>
Efl_Net_Control_State efl_net_control_state_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:property:technologies|technologies]]** //**(get)**//\\
> %%The iterator of current technologies.%%
<code c>
Eina_Iterator *efl_net_control_technologies_get(const Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop:consumer:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:net:control:event:access_point_add|access_point,add]]**\\
> %%The given access point has been added%%
<code c>
EFL_NET_CONTROL_EVENT_ACCESS_POINT_ADD(Efl_Net_Control_Access_Point *)
</code>
\\ **[[:develop:api:efl:net:control:event:access_point_del|access_point,del]]**\\
> %%The given access point will be deleted%%
<code c>
EFL_NET_CONTROL_EVENT_ACCESS_POINT_DEL(Efl_Net_Control_Access_Point *)
</code>
\\ **[[:develop:api:efl:net:control:event:access_points_changed|access_points,changed]]**\\
> %%Access points were added, deleted or reordered.%%
<code c>
EFL_NET_CONTROL_EVENT_ACCESS_POINTS_CHANGED(void)
</code>
\\ **[[:develop:api:efl:net:control:event:agent_browser_url|agent_browser_url]]**\\
> %%Requires the user to visit a web page%%
<code c>
EFL_NET_CONTROL_EVENT_AGENT_BROWSER_URL(Efl_Net_Control_Agent_Browser_Url)
</code>
\\ **[[:develop:api:efl:net:control:event:agent_error|agent_error]]**\\
> %%Requires the error to be reported to the user%%
<code c>
EFL_NET_CONTROL_EVENT_AGENT_ERROR(Efl_Net_Control_Agent_Error)
</code>
\\ **[[:develop:api:efl:net:control:event:agent_released|agent_released]]**\\
> %%Notifies we're not the agent anymore%%
<code c>
EFL_NET_CONTROL_EVENT_AGENT_RELEASED(void)
</code>
\\ **[[:develop:api:efl:net:control:event:agent_request_input|agent_request_input]]**\\
> %%Requires the user to enter information in order to proceed, such as hidden SSID, passphrase, etc. After the user enters the information, reply by calling %%[[:develop:api:efl:net:control:method:agent_reply|Efl.Net.Control.agent_reply]]%%%%
<code c>
EFL_NET_CONTROL_EVENT_AGENT_REQUEST_INPUT(Efl_Net_Control_Agent_Request_Input)
</code>
\\ **[[:develop:api:efl:net:control:event:radios_offline_changed|radios_offline,changed]]**\\
> %%Property %%[[:develop:api:efl:net:control:property:radios_offline|Efl.Net.Control.radios_offline]]%% changed%%
<code c>
EFL_NET_CONTROL_EVENT_RADIOS_OFFLINE_CHANGED(void)
</code>
\\ **[[:develop:api:efl:net:control:event:state_changed|state,changed]]**\\
> %%Property %%[[:develop:api:efl:net:control:property:state|Efl.Net.Control.state]]%% changed%%
<code c>
EFL_NET_CONTROL_EVENT_STATE_CHANGED(void)
</code>
\\ **[[:develop:api:efl:net:control:event:technology_add|technology,add]]**\\
> %%The given technology has been added%%
<code c>
EFL_NET_CONTROL_EVENT_TECHNOLOGY_ADD(Efl_Net_Control_Technology *)
</code>
\\ **[[:develop:api:efl:net:control:event:technology_del|technology,del]]**\\
> %%The given technology will be deleted%%
<code c>
EFL_NET_CONTROL_EVENT_TECHNOLOGY_DEL(Efl_Net_Control_Technology *)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
