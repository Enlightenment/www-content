~~Title: Efl.Net.Control.Technology~~
====== Efl.Net.Control.Technology (class) ======

===== Description =====

%%A technology that enables network access points to be controlled.%%

%%The %%[[:develop:api:efl:net:control|Efl.Net.Control]]%% is composed of multiple technologies, each can be disabled/enabled with %%[[:develop:api:efl:net:control:technology:property:powered|Efl.Net.Control.Technology.powered]]%% property.%%

%%When powered, the technology will dynamically add and delete access points to be available in %%[[:develop:api:efl:net:control:property:access_points|Efl.Net.Control.access_points]]%%.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:control:technology:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_control_technology [fillcolor = "black", label = "Efl.Net.Control.Technology", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_net_control_technology -> efl_loop_user
    efl_loop_user -> efl_object
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:control:technology:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:technology:method:scan|scan]]**\\
> %%Explicitly trigger a scan.%%
<code c>
Eina_Future *efl_net_control_technology_scan(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:technology:property:connected|connected]]** //**(get)**//\\
> %%If %%''true''%% the technology has at least one access point connected.%%
<code c>
Eina_Bool efl_net_control_technology_connected_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:technology:property:name|name]]** //**(get)**//\\
> %%The user-friendly technology name%%
<code c>
const char *efl_net_control_technology_name_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:technology:property:powered|powered]]** //**(get, set)**//\\
> %%If %%''true''%% the technology is available. If %%''false''%% technology is disabled and if possible rfkill is used.%%
<code c>
Eina_Bool efl_net_control_technology_powered_get(const Eo *obj);
void efl_net_control_technology_powered_set(Eo *obj, Eina_Bool powered);
</code>
\\
**[[:develop:api:efl:net:control:technology:property:tethering|tethering]]** //**(get, set)**//\\
> %%Tethering allows the default access point to be bridged to all clients connected through the technology.%%
<code c>
void efl_net_control_technology_tethering_get(const Eo *obj, Eina_Bool *enabled, const char **identifier, const char **passphrase);
void efl_net_control_technology_tethering_set(Eo *obj, Eina_Bool enabled, const char *identifier, const char *passphrase);
</code>
\\
**[[:develop:api:efl:net:control:technology:property:type|type]]** //**(get)**//\\
> %%The technology type, such as "ethernet" or "wifi"%%
<code c>
Efl_Net_Control_Technology_Type efl_net_control_technology_type_get(const Eo *obj);
</code>
\\

==== Inherited ====

[[:develop:api:efl:loop_user|Efl.Loop_User]]\\
> **[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**//, **[[:develop:api:efl:loop_user:property:parent|parent]]** //**(get, set)**//\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**, **[[:develop:api:efl:object:method:composite_attach|composite_attach]]**, **[[:develop:api:efl:object:method:composite_detach|composite_detach]]**, **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**, **[[:develop:api:efl:object:method:constructor|constructor]]**, **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**, **[[:develop:api:efl:object:method:del|del]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**, **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**, **[[:develop:api:efl:object:method:event_freeze|event_freeze]]**, **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**, **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**, **[[:develop:api:efl:object:method:event_thaw|event_thaw]]**, **[[:develop:api:efl:object:method:finalize|finalize]]**, **[[:develop:api:efl:object:method:name_find|name_find]]**, **[[:develop:api:efl:object:method:provider_find|provider_find]]**, **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//, **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//, **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//, **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//
===== Events =====

**[[:develop:api:efl:net:control:technology:event:changed|changed]]**\\
> %%Called when some properties were changed.%%
<code c>
EFL_NET_CONTROL_TECHNOLOGY_EVENT_CHANGED(void)
</code>
\\ ==== Inherited ====

[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:event:callback_add|callback,add]]**, **[[:develop:api:efl:object:event:callback_del|callback,del]]**, **[[:develop:api:efl:object:event:del|del]]**