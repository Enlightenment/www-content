~~Title: Efl.Net.Control.Access_Point.configuration_proxy~~
===== Description =====

%%Proxy configured by user for this access point.%%

%%These are the user configured values, that will be applied by the backend system and in turn may result in "changed" event to notify of %%[[:develop:api:efl:net:control:access_point:property:proxy|Efl.Net.Control.Access_Point.proxy]]%% property with the actual value in use, which may differ from this.%%

//Since 1.19//
{{page>:develop:api-include:efl:net:control:access_point:property:configuration_proxy:description&nouser&nolink&nodate}}

===== Values =====

  * **method** - %%Proxy method%%
  * **url** - %%If %%[[:develop:api:efl:net:control:access_point:proxy_method|Efl.Net.Control.Access_Point.Proxy_Method.auto]]%%, then states the URL to use for proxy auto-configuration%%
  * **servers** - %%If %%[[:develop:api:efl:net:control:access_point:proxy_method|Efl.Net.Control.Access_Point.Proxy_Method.manual]]%%, then states the URI with proxy servers to use, like "http://proxy.domain.com:911"%%
  * **excludes** - %%If %%[[:develop:api:efl:net:control:access_point:proxy_method|Efl.Net.Control.Access_Point.Proxy_Method.manual]]%%, then states the hosts or patterns to exclude from proxy access, such as "localhost", ".domain.com", or "10.0.0.0..."%%

===== Signature =====

<code>
@property configuration_proxy {
    get {
        values {
            method: Efl.Net.Control.Access_Point.Proxy_Method;
            url: free(string, free);
            servers: free(iterator<free(string, free)>, eina_iterator_free);
            excludes: free(iterator<free(string, free)>, eina_iterator_free);
        }
    }
    set {
        values {
            method: Efl.Net.Control.Access_Point.Proxy_Method;
            url: free(string, free);
            servers: free(iterator<free(string, free)>, eina_iterator_free);
            excludes: free(iterator<free(string, free)>, eina_iterator_free);
        }
    }
}
</code>

===== C signature =====

<code c>
void efl_net_control_access_point_configuration_proxy_get(const Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method *method, const char **url, Eina_Iterator **servers, Eina_Iterator **excludes);
void efl_net_control_access_point_configuration_proxy_set(Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method method, const char *url, Eina_Iterator *servers, Eina_Iterator *excludes);
</code>

===== Implemented by =====

  * **Efl.Net.Control.Access_Point.configuration_proxy**

