~~Title: Efl.Net.Control.Access_Point~~
====== Efl.Net.Control.Access_Point (class) ======

===== Description =====

%%An access point for network connectivity.%%

%%The %%[[:develop:api:efl:net:control|Efl.Net.Control]]%% is composed of multiple technologies, each create access points to allow configuration and connection.%%

%%An application requiring only a network connection can just use a @Efl.Net.Session instead.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:control:access_point:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:control:access_point:property:auto_connect|auto_connect]]** //**(get, set)**//\\
> %%Whenever to auto-connect to this access point if no other is connected.%%
<code c>
Eina_Bool efl_net_control_access_point_auto_connect_get(const Eo *obj);
void efl_net_control_access_point_auto_connect_set(Eo *obj, Eina_Bool auto_connect);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:configuration_domains|configuration_domains]]** //**(get, set)**//\\
> %%Searches domains configured by user for this access point.%%
<code c>
Eina_Iterator *efl_net_control_access_point_configuration_domains_get(const Eo *obj);
void efl_net_control_access_point_configuration_domains_set(Eo *obj, Eina_Iterator *domains);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:configuration_ipv4|configuration_ipv4]]** //**(get, set)**//\\
> %%IPv4 configured by user for this access point.%%
<code c>
void efl_net_control_access_point_configuration_ipv4_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv4_Method *method, const char **address, const char **netmask, const char **gateway);
void efl_net_control_access_point_configuration_ipv4_set(Eo *obj, Efl_Net_Control_Access_Point_Ipv4_Method method, const char *address, const char *netmask, const char *gateway);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:configuration_ipv6|configuration_ipv6]]** //**(get, set)**//\\
> %%IPv6 configured by user for this access point.%%
<code c>
void efl_net_control_access_point_configuration_ipv6_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv6_Method *method, const char **address, uint8_t *prefix_length, const char **netmask, const char **gateway);
void efl_net_control_access_point_configuration_ipv6_set(Eo *obj, Efl_Net_Control_Access_Point_Ipv6_Method method, const char *address, uint8_t prefix_length, const char *netmask, const char *gateway);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:configuration_name_servers|configuration_name_servers]]** //**(get, set)**//\\
> %%DNS (Domain Name Servers) configured by user for this access point.%%
<code c>
Eina_Iterator *efl_net_control_access_point_configuration_name_servers_get(const Eo *obj);
void efl_net_control_access_point_configuration_name_servers_set(Eo *obj, Eina_Iterator *name_servers);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:configuration_proxy|configuration_proxy]]** //**(get, set)**//\\
> %%Proxy configured by user for this access point.%%
<code c>
void efl_net_control_access_point_configuration_proxy_get(const Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method *method, const char **url, Eina_Iterator **servers, Eina_Iterator **excludes);
void efl_net_control_access_point_configuration_proxy_set(Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method method, const char *url, Eina_Iterator *servers, Eina_Iterator *excludes);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:configuration_time_servers|configuration_time_servers]]** //**(get, set)**//\\
> %%NTP (Time Server) configured by user for this access point.%%
<code c>
Eina_Iterator *efl_net_control_access_point_configuration_time_servers_get(const Eo *obj);
void efl_net_control_access_point_configuration_time_servers_set(Eo *obj, Eina_Iterator *time_servers);
</code>
\\
**[[:develop:api:efl:net:control:access_point:method:connect|connect]]**\\
> %%Connects to this access point.%%
<code c>
Eina_Future *efl_net_control_access_point_connect(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:method:disconnect|disconnect]]**\\
> %%Disconnects from this access point.%%
<code c>
void efl_net_control_access_point_disconnect(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:domains|domains]]** //**(get)**//\\
> %%Searches domains in use for this access point.%%
<code c>
Eina_Iterator *efl_net_control_access_point_domains_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:error|error]]** //**(get)**//\\
> %%If the access point is in error state, this states the error.%%
<code c>
Efl_Net_Control_Access_Point_Error efl_net_control_access_point_error_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:method:forget|forget]]**\\
> %%Disconnects and forgets about this access point.%%
<code c>
void efl_net_control_access_point_forget(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:immutable|immutable]]** //**(get)**//\\
> %%Immutable access points are those defined in configuration files and its properties can't be changed using API.%%
<code c>
Eina_Bool efl_net_control_access_point_immutable_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:ipv4|ipv4]]** //**(get)**//\\
> %%IPv4 in use for this access point.%%
<code c>
void efl_net_control_access_point_ipv4_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv4_Method *method, const char **address, const char **netmask, const char **gateway);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:ipv6|ipv6]]** //**(get)**//\\
> %%IPv6 in use for this access point.%%
<code c>
void efl_net_control_access_point_ipv6_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv6_Method *method, const char **address, uint8_t *prefix_length, const char **netmask, const char **gateway);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:name|name]]** //**(get)**//\\
> %%The user-friendly access point name.%%
<code c>
const char *efl_net_control_access_point_name_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:name_servers|name_servers]]** //**(get)**//\\
> %%DNS (Domain Name Servers) in use for this access point.%%
<code c>
Eina_Iterator *efl_net_control_access_point_name_servers_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:priority|priority]]** //**(get, set)**//\\
> %%The access point priority in the current access point listing.%%
<code c>
unsigned int efl_net_control_access_point_priority_get(const Eo *obj);
void efl_net_control_access_point_priority_set(Eo *obj, unsigned int priority);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:proxy|proxy]]** //**(get)**//\\
> %%Proxy in use for this access point.%%
<code c>
void efl_net_control_access_point_proxy_get(const Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method *method, const char **url, Eina_Iterator **servers, Eina_Iterator **excludes);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:remembered|remembered]]** //**(get)**//\\
> %%Successfully connected access points are remembered.%%
<code c>
Eina_Bool efl_net_control_access_point_remembered_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:roaming|roaming]]** //**(get)**//\\
> %%If it's a cellular access point and it's on roaming.%%
<code c>
Eina_Bool efl_net_control_access_point_roaming_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:security|security]]** //**(get)**//\\
> %%Security options such as WEP, WPS, PSK or none (open).%%
<code c>
Efl_Net_Control_Access_Point_Security efl_net_control_access_point_security_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:state|state]]** //**(get)**//\\
> %%The current state of the access point.%%
<code c>
Efl_Net_Control_Access_Point_State efl_net_control_access_point_state_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:strength|strength]]** //**(get)**//\\
> %%Signal strength percentage in 0-100%%
<code c>
uint8_t efl_net_control_access_point_strength_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:technology|technology]]** //**(get)**//\\
> %%The technology that generated this access point%%
<code c>
Efl_Net_Control_Technology *efl_net_control_access_point_technology_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:control:access_point:property:time_servers|time_servers]]** //**(get)**//\\
> %%NTP (Time Server) in use for this access point.%%
<code c>
Eina_Iterator *efl_net_control_access_point_time_servers_get(const Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop:consumer:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:net:control:access_point:event:changed|changed]]**\\
> %%Called when some properties were changed.%%
<code c>
EFL_NET_CONTROL_ACCESS_POINT_EVENT_CHANGED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
