~~Title: Efl.Net.Control.Access_Point~~
====== Efl.Net.Control.Access_Point (class) ======

===== Description =====

%%An access point for network connectivity.%%

%%The %%[[:develop:api:class:efl:net:control|Efl.Net.Control]]%% is composed of multiple technologies, each create access points to allow configuration and connection.%%

%%An application willing to just get a network connection should prefer to use the @Efl.Net.Session instead.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:control:access_point:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_control_access_point [fillcolor = "black", label = "Efl.Net.Control.Access_Point", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_net_control_access_point -> efl_loop_user
    efl_loop_user -> efl_object
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:control:access_point:method:connect|connect]]**
<code c>
Efl_Future *efl_net_control_access_point_connect(Eo *obj);
</code>

%%Connects to this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:method:disconnect|disconnect]]**
<code c>
void efl_net_control_access_point_disconnect(Eo *obj);
</code>

%%Disconnects from this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:method:forget|forget]]**
<code c>
void efl_net_control_access_point_forget(Eo *obj);
</code>

%%Disconnects and forgets about this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:auto_connect|auto_connect]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_control_access_point_auto_connect_get(const Eo *obj);
void efl_net_control_access_point_auto_connect_set(Eo *obj, Eina_Bool auto_connect);
</code>

%%Whenever to auto-connect to this access point if no other is connected.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:configuration_domains|configuration_domains]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_control_access_point_configuration_domains_get(const Eo *obj);
void efl_net_control_access_point_configuration_domains_set(Eo *obj, Eina_Iterator *domains);
</code>

%%Searches domains configured by user for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:configuration_ipv4|configuration_ipv4]]** //**(get, set)**//
<code c>
void efl_net_control_access_point_configuration_ipv4_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv4_Method *method, const char **address, const char **netmask, const char **gateway);
void efl_net_control_access_point_configuration_ipv4_set(Eo *obj, Efl_Net_Control_Access_Point_Ipv4_Method method, const char *address, const char *netmask, const char *gateway);
</code>

%%IPv4 configured by user for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:configuration_ipv6|configuration_ipv6]]** //**(get, set)**//
<code c>
void efl_net_control_access_point_configuration_ipv6_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv6_Method *method, const char **address, uint8_t *prefix_length, const char **netmask, const char **gateway);
void efl_net_control_access_point_configuration_ipv6_set(Eo *obj, Efl_Net_Control_Access_Point_Ipv6_Method method, const char *address, uint8_t prefix_length, const char *netmask, const char *gateway);
</code>

%%IPv6 configured by user for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:configuration_name_servers|configuration_name_servers]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_control_access_point_configuration_name_servers_get(const Eo *obj);
void efl_net_control_access_point_configuration_name_servers_set(Eo *obj, Eina_Iterator *name_servers);
</code>

%%DNS (Domain Name Servers) configured by user for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:configuration_proxy|configuration_proxy]]** //**(get, set)**//
<code c>
void efl_net_control_access_point_configuration_proxy_get(const Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method *method, const char **url, Eina_Iterator **servers, Eina_Iterator **excludes);
void efl_net_control_access_point_configuration_proxy_set(Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method method, const char *url, Eina_Iterator *servers, Eina_Iterator *excludes);
</code>

%%Proxy configured by user for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:configuration_time_servers|configuration_time_servers]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_control_access_point_configuration_time_servers_get(const Eo *obj);
void efl_net_control_access_point_configuration_time_servers_set(Eo *obj, Eina_Iterator *time_servers);
</code>

%%NTP (Time Server) configured by user for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:domains|domains]]** //**(get)**//
<code c>
Eina_Iterator *efl_net_control_access_point_domains_get(const Eo *obj);
</code>

%%Searches domains in use for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:error|error]]** //**(get)**//
<code c>
Efl_Net_Control_Access_Point_Error efl_net_control_access_point_error_get(const Eo *obj);
</code>

%%If the access point is in error state, this states the error.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:immutable|immutable]]** //**(get)**//
<code c>
Eina_Bool efl_net_control_access_point_immutable_get(const Eo *obj);
</code>

%%Immutable access points are those defined in configuration files and its properties can't be changed using API.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:ipv4|ipv4]]** //**(get)**//
<code c>
void efl_net_control_access_point_ipv4_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv4_Method *method, const char **address, const char **netmask, const char **gateway);
</code>

%%IPv4 in use for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:ipv6|ipv6]]** //**(get)**//
<code c>
void efl_net_control_access_point_ipv6_get(const Eo *obj, Efl_Net_Control_Access_Point_Ipv6_Method *method, const char **address, uint8_t *prefix_length, const char **netmask, const char **gateway);
</code>

%%IPv6 in use for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:name_servers|name_servers]]** //**(get)**//
<code c>
Eina_Iterator *efl_net_control_access_point_name_servers_get(const Eo *obj);
</code>

%%DNS (Domain Name Servers) in use for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:name|name]]** //**(get)**//
<code c>
const char *efl_net_control_access_point_name_get(const Eo *obj);
</code>

%%The user-friendly access point name.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:priority|priority]]** //**(get, set)**//
<code c>
unsigned int efl_net_control_access_point_priority_get(const Eo *obj);
void efl_net_control_access_point_priority_set(Eo *obj, unsigned int priority);
</code>

%%The access point priority in the current access point listing.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:proxy|proxy]]** //**(get)**//
<code c>
void efl_net_control_access_point_proxy_get(const Eo *obj, Efl_Net_Control_Access_Point_Proxy_Method *method, const char **url, Eina_Iterator **servers, Eina_Iterator **excludes);
</code>

%%Proxy in use for this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:remembered|remembered]]** //**(get)**//
<code c>
Eina_Bool efl_net_control_access_point_remembered_get(const Eo *obj);
</code>

%%Successfully connected access points are remembered.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:roaming|roaming]]** //**(get)**//
<code c>
Eina_Bool efl_net_control_access_point_roaming_get(const Eo *obj);
</code>

%%If it's a cellular access point and it's on roaming.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:security|security]]** //**(get)**//
<code c>
Efl_Net_Control_Access_Point_Security efl_net_control_access_point_security_get(const Eo *obj);
</code>

%%Security options such as WEP, WPS, PSK or none (open).%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:state|state]]** //**(get)**//
<code c>
Efl_Net_Control_Access_Point_State efl_net_control_access_point_state_get(const Eo *obj);
</code>

%%The current state of this access point.%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:strength|strength]]** //**(get)**//
<code c>
uint8_t efl_net_control_access_point_strength_get(const Eo *obj);
</code>

%%Signal strength percentage in 0-100%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:technology|technology]]** //**(get)**//
<code c>
Efl_Net_Control_Technology *efl_net_control_access_point_technology_get(const Eo *obj);
</code>

%%The technology that generated this access point%%\\ 
\\ 
**[[:develop:api:efl:net:control:access_point:property:time_servers|time_servers]]** //**(get)**//
<code c>
Eina_Iterator *efl_net_control_access_point_time_servers_get(const Eo *obj);
</code>

%%NTP (Time Server) in use for this access point.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:efl:loop_user|Efl.Loop_User]].**[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:loop_user:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:develop:api:efl:loop_user|Efl.Loop_User]]]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:net:control:access_point:method:destructor|destructor]]** //[Overridden here]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_attach|composite_attach]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_detach|composite_detach]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:constructor|constructor]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:del|del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_freeze|event_freeze]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_thaw|event_thaw]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:finalize|finalize]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:name_find|name_find]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:provider_find|provider_find]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//
\\ 

===== Events =====

**[[:develop:api:efl:net:control:access_point:event:changed|changed]]**
<code c>
EFL_NET_CONTROL_ACCESS_POINT_EVENT_CHANGED(void)
</code>

%%Called when some properties were changed.%%\\ 
\\ 
==== Inherited ====

[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:callback_add|callback,add]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:callback_del|callback,del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:del|del]]**
\\ 
