~~Title: Efl.Net.Ssl.Context~~
====== Efl.Net.Ssl.Context (class) ======

===== Description =====

%%A SSL Context that is used to start a SSL socket wrapper.%%

%%The context will contain common configurations such as certificates, private keys, certificate revocation lists (CRLs), certificate authorities (CAs) and so on.%%

%%The method %%[[:develop:api:class:efl:net:ssl:context:method:setup|Efl.Net.Ssl.Context.setup]]%% must be called once before %%[[:develop:api:class:efl:object:method:finalize|Efl.Object.finalize]]%% in order to define the mandatory operational parameters.%%

%%@note All setter methods must be called before %%[[:develop:api:class:efl:object:method:finalize|Efl.Object.finalize]]%%.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:ssl:context:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_ssl_context [fillcolor = "black", label = "Efl.Net.Ssl.Context", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_net_ssl_context -> efl_object
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:ssl:context:method:setup|setup]]**
<code c>
void efl_net_ssl_context_setup(Eo *obj, Efl_Net_Ssl_Cipher cipher, Eina_Bool is_dialer);
</code>

%%Defines the context mandatory operation parameters%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:certificate_authorities|certificate_authorities]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_certificate_authorities_get(const Eo *obj);
void efl_net_ssl_context_certificate_authorities_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to CA (certificate authoritie) to use.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:certificate_revocation_lists|certificate_revocation_lists]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_certificate_revocation_lists_get(const Eo *obj);
void efl_net_ssl_context_certificate_revocation_lists_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to CRL (certificate revocation list) to use.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:certificates|certificates]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_certificates_get(const Eo *obj);
void efl_net_ssl_context_certificates_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to certificates to use.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:default_dialer|default_dialer]]** //**(get)**//
<code c>
Efl_Net_Ssl_Context *efl_net_ssl_context_default_dialer_get(const Eo *obj);
</code>

%%The default context for dialers.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:default_paths_load|default_paths_load]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_ssl_context_default_paths_load_get(const Eo *obj);
void efl_net_ssl_context_default_paths_load_set(Eo *obj, Eina_Bool default_paths_load);
</code>

%%If %%''true''%%, will use system's default certificate storage%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:hostname_verify|hostname_verify]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_ssl_context_hostname_verify_get(const Eo *obj);
void efl_net_ssl_context_hostname_verify_set(Eo *obj, Eina_Bool hostname_verify);
</code>

%%Defines if hostname should be verified.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:hostname|hostname]]** //**(get, set)**//
<code c>
const char *efl_net_ssl_context_hostname_get(const Eo *obj);
void efl_net_ssl_context_hostname_set(Eo *obj, const char *hostname);
</code>

%%Defines the hostname to use for sockets.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:private_keys|private_keys]]** //**(get, set)**//
<code c>
Eina_Iterator *efl_net_ssl_context_private_keys_get(const Eo *obj);
void efl_net_ssl_context_private_keys_set(Eo *obj, Eina_Iterator *paths);
</code>

%%The list of paths to private keys to use.%%\\ 
\\ 
**[[:develop:api:efl:net:ssl:context:property:verify_mode|verify_mode]]** //**(get, set)**//
<code c>
Efl_Net_Ssl_Verify_Mode efl_net_ssl_context_verify_mode_get(const Eo *obj);
void efl_net_ssl_context_verify_mode_set(Eo *obj, Efl_Net_Ssl_Verify_Mode verify_mode);
</code>

%%How to verify the remote peer.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:net:ssl:context:method:constructor|constructor]]** //[Overridden here]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:net:ssl:context:method:destructor|destructor]]** //[Overridden here]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:net:ssl:context:method:finalize|finalize]]** //[Overridden here]//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_attach|composite_attach]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_detach|composite_detach]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:del|del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_freeze|event_freeze]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:event_thaw|event_thaw]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:name_find|name_find]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:method:provider_find|provider_find]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**//
\\ 

===== Events =====

==== Inherited ====

[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:callback_add|callback,add]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:callback_del|callback,del]]**
\\ 
[[:develop:api:efl:object|Efl.Object]].**[[:develop:api:efl:object:event:del|del]]**
\\ 
