~~Title: Efl.Net.Ssl.Context~~
====== Efl.Net.Ssl.Context (class) ======

===== Description =====

%%A SSL Context that is used to start a SSL socket wrapper.%%

%%The context will contain common configurations such as certificates, private keys, certificate revocation lists (CRLs), certificate authorities (CAs) and so on.%%

%%The method %%[[:develop:api:efl:net:ssl:context:method:setup|Efl.Net.Ssl.Context.setup]]%% must be called once before %%[[:develop:api:efl:object:method:finalize|Efl.Object.finalize]]%% in order to define the mandatory operational parameters.%%

%%@note All setter methods must be called before %%[[:develop:api:efl:object:method:finalize|Efl.Object.finalize]]%%.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:ssl:context:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:ssl:context:property:certificate_authorities|certificate_authorities]]** //**(get, set)**//\\
> %%The list of paths to CA (certificate authoritie) to use.%%
<code c>
Eina_Iterator *efl_net_ssl_context_certificate_authorities_get(const Eo *obj);
void efl_net_ssl_context_certificate_authorities_set(Eo *obj, Eina_Iterator *paths);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:certificate_revocation_lists|certificate_revocation_lists]]** //**(get, set)**//\\
> %%The list of paths to CRL (certificate revocation list) to use.%%
<code c>
Eina_Iterator *efl_net_ssl_context_certificate_revocation_lists_get(const Eo *obj);
void efl_net_ssl_context_certificate_revocation_lists_set(Eo *obj, Eina_Iterator *paths);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:certificates|certificates]]** //**(get, set)**//\\
> %%The list of paths to certificates to use.%%
<code c>
Eina_Iterator *efl_net_ssl_context_certificates_get(const Eo *obj);
void efl_net_ssl_context_certificates_set(Eo *obj, Eina_Iterator *paths);
</code>
\\
**[[:develop:api:efl:net:ssl:context:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:default_dialer|default_dialer]]** //**(get)**// ''class''\\
> %%The default context for dialers.%%
<code c>
Efl_Net_Ssl_Context *efl_net_ssl_context_default_dialer_get(Efl_Class *klass);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:default_paths_load|default_paths_load]]** //**(get, set)**//\\
> %%If %%''true''%%, will use system's default certificate storage%%
<code c>
Eina_Bool efl_net_ssl_context_default_paths_load_get(const Eo *obj);
void efl_net_ssl_context_default_paths_load_set(Eo *obj, Eina_Bool default_paths_load);
</code>
\\
**[[:develop:api:efl:net:ssl:context:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:ssl:context:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of efl_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:hostname|hostname]]** //**(get, set)**//\\
> %%Defines the hostname to use for sockets.%%
<code c>
const char *efl_net_ssl_context_hostname_get(const Eo *obj);
void efl_net_ssl_context_hostname_set(Eo *obj, const char *hostname);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:hostname_verify|hostname_verify]]** //**(get, set)**//\\
> %%Defines if hostname should be verified.%%
<code c>
Eina_Bool efl_net_ssl_context_hostname_verify_get(const Eo *obj);
void efl_net_ssl_context_hostname_verify_set(Eo *obj, Eina_Bool hostname_verify);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:private_keys|private_keys]]** //**(get, set)**//\\
> %%The list of paths to private keys to use.%%
<code c>
Eina_Iterator *efl_net_ssl_context_private_keys_get(const Eo *obj);
void efl_net_ssl_context_private_keys_set(Eo *obj, Eina_Iterator *paths);
</code>
\\
**[[:develop:api:efl:net:ssl:context:method:setup|setup]]**\\
> %%Defines the context mandatory operation parameters%%
<code c>
void efl_net_ssl_context_setup(Eo *obj, Efl_Net_Ssl_Cipher cipher, Eina_Bool is_dialer);
</code>
\\
**[[:develop:api:efl:net:ssl:context:property:verify_mode|verify_mode]]** //**(get, set)**//\\
> %%How to verify the remote peer.%%
<code c>
Efl_Net_Ssl_Verify_Mode efl_net_ssl_context_verify_mode_get(const Eo *obj);
void efl_net_ssl_context_verify_mode_set(Eo *obj, Efl_Net_Ssl_Verify_Mode verify_mode);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
