~~Title: Efl.Net.Socket.Fd.address_remote~~
//Overridden from [[:develop:api:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]] **(get, set)**.//===== Signature =====

<code>
@property address_remote @pure_virtual {
    get {
        values {
            address: free(string, free);
        }
    }
    set @protected {
        values {
            address: free(string, free);
        }
    }
}
</code>

===== C signature =====

<code c>
const char *efl_net_socket_address_remote_get(const Eo *obj);
void efl_net_socket_address_remote_set(Eo *obj, const char *address);
</code>

===== Values =====

  * **address** - %%Remote address%%
===== Description =====

%%The remote address, similar to getpeername().%%

%%The actual value depends on the type of socket, like an IPv4 (ip:port) or IPv6 ([ip]:port) formatted for a TCP/UDP socket, the path if an Unix Local...%%

%%It's always resolved, then if operations are working with domain names or URL, this is the values the kernel reports. It's similar to getpeername() in behavior.%%

//Since 1.19//
{{page>:develop:api-include:efl:net:socket:fd:property:address_remote:description&nouser&nolink&nodate}}


===== Implemented by =====

  * [[:develop:api:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]

