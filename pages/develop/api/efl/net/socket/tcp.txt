~~Title: Efl.Net.Socket.Tcp~~
====== Efl.Net.Socket.Tcp (class) ======

===== Description =====

%%A base TCP socket.%%

%%This is the common class and takes an existing FD, usually created by an dialer or server.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:socket:tcp:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:net:socket:fd|Efl.Net.Socket.Fd]] //(class)// => [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] //(class)// => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:net:socket:fd|Efl.Net.Socket.Fd]] //(class)//
    * [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] //(class)//
      * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:io:reader:fd|Efl.Io.Reader.Fd]] //(mixin)//
      * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
    * [[:develop:api:efl:io:writer:fd|Efl.Io.Writer.Fd]] //(mixin)//
      * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
    * [[:develop:api:efl:io:closer:fd|Efl.Io.Closer.Fd]] //(mixin)//
      * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:net:socket:tcp:property:cork|cork]]** //**(get, set)**//\\
> %%Controls TCP's cork using TCP_CORK%%
<code c>
Eina_Bool efl_net_socket_tcp_cork_get(const Eo *obj);
Eina_Bool efl_net_socket_tcp_cork_set(Eo *obj, Eina_Bool cork);
</code>
\\
**[[:develop:api:efl:net:socket:tcp:property:fd|fd]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:loop:fd|Efl.Loop.Fd]]]//\\
> %%Defines which file descriptor to watch. If it is a file, use file_fd variant.%%
<code c>
int efl_loop_fd_get(const Eo *obj);
void efl_loop_fd_set(Eo *obj, int fd);
</code>
\\
**[[:develop:api:efl:net:socket:tcp:property:keep_alive|keep_alive]]** //**(get, set)**//\\
> %%Controls keep-alive using SO_KEEPALIVE%%
<code c>
Eina_Bool efl_net_socket_tcp_keep_alive_get(const Eo *obj);
Eina_Bool efl_net_socket_tcp_keep_alive_set(Eo *obj, Eina_Bool keep_alive);
</code>
\\
**[[:develop:api:efl:net:socket:tcp:property:no_delay|no_delay]]** //**(get, set)**//\\
> %%Controls TCP's no-delay using TCP_NODELAY%%
<code c>
Eina_Bool efl_net_socket_tcp_no_delay_get(const Eo *obj);
Eina_Bool efl_net_socket_tcp_no_delay_set(Eo *obj, Eina_Bool no_delay);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:io:closer:fd|Efl.Io.Closer.Fd]] ^^^
|  | **[[:develop:api:efl:io:closer:fd:property:close_on_destructor|close_on_destructor]]** //**(get, set)**// | %%If true will automatically close() on object destructor.%% |
|  | **[[:develop:api:efl:io:closer:fd:property:close_on_exec|close_on_exec]]** //**(get, set)**// | %%If true will automatically close resources on exec() calls.%% |
|  ''protected set'' | **[[:develop:api:efl:io:closer:fd:property:closer_fd|closer_fd]]** //**(get, set)**// | %%Closer file descriptor%% |
^ [[:develop:api:efl:io:reader:fd|Efl.Io.Reader.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:io:reader:fd:property:reader_fd|reader_fd]]** //**(get, set)**// | %%Reader file descriptor%% |
^ [[:develop:api:efl:io:writer:fd|Efl.Io.Writer.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:io:writer:fd:property:writer_fd|writer_fd]]** //**(get, set)**// | %%Writer file descriptor%% |
^ [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] ^^^
|  | **[[:develop:api:efl:loop:fd:property:fd_file|fd_file]]** //**(get, set)**// | %%Defines which file descriptor to watch when watching a file.%% |
|  | **[[:develop:api:efl:loop:fd:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:loop_user|Efl.Loop_User]] ^^^
|  | **[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
^ [[:develop:api:efl:net:socket:fd|Efl.Net.Socket.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:address_local|address_local]]** //**(get, set)**// | %%The local address, similar to getsockname().%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:address_remote|address_remote]]** //**(get, set)**// | %%The remote address, similar to getpeername().%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:can_read|can_read]]** //**(get, set)**// | %%If %%''true''%% will notify %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:can_write|can_write]]** //**(get, set)**// | %%If %%''true''%% will notify %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:close|close]]** | %%Closes the Input/Output object.%% |
|  | **[[:develop:api:efl:net:socket:fd:property:closed|closed]]** //**(get, set)**// | %%If true will notify object was closed.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:destructor|destructor]]** | %%Call the object's destructor.%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:eos|eos]]** //**(get, set)**// | %%If %%''true''%% will notify end of stream.%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:family|family]]** //**(get, set)**// | %%The address family (AF_*) family of this socket.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:read|read]]** | %%Reads data into a pre-allocated buffer.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:write|write]]** | %%Writes data from a pre-populated buffer.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:io:closer|Efl.Io.Closer]] ^^^
|  | **[[:develop:api:efl:io:closer:event:closed|closed]]** | %%Notifies closed, when property is marked as true%% |
^ [[:develop:api:efl:io:reader|Efl.Io.Reader]] ^^^
|  | **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]** | %%Notifies can_read property changed.%% |
|  | **[[:develop:api:efl:io:reader:event:eos|eos]]** | %%Notifies end of stream, when property is marked as true.%% |
^ [[:develop:api:efl:io:writer|Efl.Io.Writer]] ^^^
|  | **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]** | %%Notifies can_write property changed.%% |
^ [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] ^^^
|  | **[[:develop:api:efl:loop:fd:event:error|error]]** | %%Called when a error occurred on the file descriptor%% |
|  | **[[:develop:api:efl:loop:fd:event:read|read]]** | %%Called when a read happened on the file descriptor%% |
|  | **[[:develop:api:efl:loop:fd:event:write|write]]** | %%Called when a write happened on the file descriptor%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
