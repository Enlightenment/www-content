~~Title: Efl.Net.Session~~
====== Efl.Net.Session (class) ======

===== Description =====

%%Used by application to request network connectivity.%%

%%This API is targeted at applications that need access to the network, specifying the allowed bearer technologies to connect to the internet, as well as whether local networking is enough or validated internet access is required.%%

%%Some platforms may not implement the backend for this class. In this cases the system will report always %%[[:develop:api:efl:net:session:property:state|Efl.Net.Session.state]]%% "online" (%%[[:develop:api:efl:net:session:state|Efl.Net.Session.State.online]]%%) and other properties will be NULL, such as %%[[:develop:api:efl:net:session:property:name|Efl.Net.Session.name]]%%, %%[[:develop:api:efl:net:session:property:interface|Efl.Net.Session.interface]]%%, %%[[:develop:api:efl:net:session:property:ipv4|Efl.Net.Session.ipv4]]%% and %%[[:develop:api:efl:net:session:property:ipv6|Efl.Net.Session.ipv6]]%%; as well as %%[[:develop:api:efl:net:session:property:technology|Efl.Net.Session.technology]]%% is set to %%[[:develop:api:efl:net:session:technology|Efl.Net.Session.Technology.unknown]]%%. As such if you need to detect for an actual backend, check if the state is online but those properties are NULL or technology is unknown.%%

%%@note the %%[[:develop:api:efl:net:session:method:connect|Efl.Net.Session.connect]]%% method is subject to backend policy. For instance, ConnMan uses https://github.com/aldebaran/connman/blob/master/doc/session-policy-format.txt%%

//Since 1.19//

{{page>:develop:api-include:efl:net:session:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//


++++
===== Members =====

**[[:develop:api:efl:net:session:method:connect|connect]]**\\
> %%Asks the session to be connected.%%
<code c>
void efl_net_session_connect(Eo *obj, Eina_Bool online_required, Efl_Net_Session_Technology technologies_allowed);
</code>
\\
**[[:develop:api:efl:net:session:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:method:disconnect|disconnect]]**\\
> %%Indicates this session doesn't need a connection anymore.%%
<code c>
void efl_net_session_disconnect(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of efl_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:property:interface|interface]]** //**(get)**//\\
> %%The interface allows the application to assign the socket to a given device using SO_BINDTODEVICE%%
<code c>
const char *efl_net_session_interface_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:property:ipv4|ipv4]]** //**(get)**//\\
> %%IPv4 in use for this session.%%
<code c>
void efl_net_session_ipv4_get(const Eo *obj, const char **address, const char **netmask, const char **gateway);
</code>
\\
**[[:develop:api:efl:net:session:property:ipv6|ipv6]]** //**(get)**//\\
> %%IPv6 in use for this session.%%
<code c>
void efl_net_session_ipv6_get(const Eo *obj, const char **address, uint8_t *prefix_length, const char **netmask, const char **gateway);
</code>
\\
**[[:develop:api:efl:net:session:property:name|name]]** //**(get)**//\\
> %%The user-friendly access point name.%%
<code c>
const char *efl_net_session_name_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:property:state|state]]** //**(get)**//\\
> %%If the session connectivity is offline, local or online.%%
<code c>
Efl_Net_Session_State efl_net_session_state_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:session:property:technology|technology]]** //**(get)**//\\
> %%The access point technology that backs this session%%
<code c>
Efl_Net_Session_Technology efl_net_session_technology_get(const Eo *obj);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop:consumer:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:net:session:event:changed|changed]]**\\
> %%Called when some properties were changed.%%
<code c>
EFL_NET_SESSION_EVENT_CHANGED(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
