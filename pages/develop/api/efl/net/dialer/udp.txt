~~Title: Efl.Net.Dialer.Udp~~
====== Efl.Net.Dialer.Udp (class) ======

===== Description =====

%%Connects to a remote UDP server.%%

%%UDP proxies are not supported, not even using SOCKSv5.%%

%%In addition to an IP:PORT, the UDP address to dial may be an IPv4 broadcast (255.255.255.255), 'any ip' 0.0.0.0 (IPv4) '::' (IPv6) or a multicast of both IPv4 and IPv6, then the group will be joined automatically.%%

%%Any IP (0.0.0.0 or '::') and multicast addresses will allow incoming packets on %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% regardless of their source. If using a regular IP, packets that do not match the remote peer will be dropped as spurious, returning EAGAIN.%%

%%To allow finer control, see:%%

%%- %%[[:develop:api:efl:net:socket:udp:property:bind|Efl.Net.Socket.Udp.bind]]%%: choose the local address to bind. - %%[[:develop:api:efl:net:socket:udp:method:multicast_join|Efl.Net.Socket.Udp.multicast_join]]%%: join other multicast groups. - %%[[:develop:api:efl:net:socket:udp:property:multicast_loopback|Efl.Net.Socket.Udp.multicast_loopback]]%%: if packets should be delivered locally or only to remote peers. - %%[[:develop:api:efl:net:socket:udp:property:multicast_time_to_live|Efl.Net.Socket.Udp.multicast_time_to_live]]%%: how far, in number of hops, the packet should go.%%

%%I%%

//Since 1.19//

{{page>:develop:api-include:efl:net:dialer:udp:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:net:socket:udp|Efl.Net.Socket.Udp]] //(class)// => [[:develop:api:efl:net:socket:fd|Efl.Net.Socket.Fd]] //(class)// => [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] //(class)// => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:net:socket:udp|Efl.Net.Socket.Udp]] //(class)//
    * [[:develop:api:efl:net:socket:fd|Efl.Net.Socket.Fd]] //(class)//
      * [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] //(class)//
        * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:io:reader:fd|Efl.Io.Reader.Fd]] //(mixin)//
        * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:efl:io:writer:fd|Efl.Io.Writer.Fd]] //(mixin)//
        * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:efl:io:closer:fd|Efl.Io.Closer.Fd]] //(mixin)//
        * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//
        * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:net:socket|Efl.Net.Socket]] //(interface)//
        * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
        * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
        * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//
  * [[:develop:api:efl:net:dialer|Efl.Net.Dialer]] //(interface)//
    * [[:develop:api:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:net:dialer:udp:property:address_dial|address_dial]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Returns the address given to %%[[:develop:api:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%%.%%
<code c>
const char *efl_net_dialer_address_dial_get(const Eo *obj);
void efl_net_dialer_address_dial_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:udp:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:udp:property:connected|connected]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Returns whenever the socket is connected or not.%%
<code c>
Eina_Bool efl_net_dialer_connected_get(const Eo *obj);
void efl_net_dialer_connected_set(Eo *obj, Eina_Bool connected);
</code>
\\
**[[:develop:api:efl:net:dialer:udp:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:udp:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:udp:method:dial|dial]]**// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Dials to the remote peer.%%
<code c>
Eina_Error efl_net_dialer_dial(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:udp:property:timeout_dial|timeout_dial]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%The timeout in seconds to use for dialing/connecting.%%
<code c>
double efl_net_dialer_timeout_dial_get(const Eo *obj);
void efl_net_dialer_timeout_dial_set(Eo *obj, double seconds);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:io:closer:fd|Efl.Io.Closer.Fd]] ^^^
|  | **[[:develop:api:efl:io:closer:fd:property:close_on_destructor|close_on_destructor]]** //**(get, set)**// | %%If true will automatically close() on object destructor.%% |
|  | **[[:develop:api:efl:io:closer:fd:property:close_on_exec|close_on_exec]]** //**(get, set)**// | %%If true will automatically close resources on exec() calls.%% |
|  ''protected set'' | **[[:develop:api:efl:io:closer:fd:property:closer_fd|closer_fd]]** //**(get, set)**// | %%Closer file descriptor%% |
^ [[:develop:api:efl:io:reader:fd|Efl.Io.Reader.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:io:reader:fd:property:reader_fd|reader_fd]]** //**(get, set)**// | %%Reader file descriptor%% |
^ [[:develop:api:efl:io:writer:fd|Efl.Io.Writer.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:io:writer:fd:property:writer_fd|writer_fd]]** //**(get, set)**// | %%Writer file descriptor%% |
^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
^ [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] ^^^
|  | **[[:develop:api:efl:loop:fd:property:fd_file|fd_file]]** //**(get, set)**// | %%Defines which file descriptor to watch when watching a file.%% |
|  | **[[:develop:api:efl:loop:fd:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:net:dialer|Efl.Net.Dialer]] ^^^
|  | **[[:develop:api:efl:net:dialer:property:proxy|proxy]]** //**(get, set)**// | %%Controls/retrieves if the dialer should use a proxy.%% |
^ [[:develop:api:efl:net:socket:fd|Efl.Net.Socket.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:address_local|address_local]]** //**(get, set)**// | %%The local address, similar to getsockname().%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:address_remote|address_remote]]** //**(get, set)**// | %%The remote address, similar to getpeername().%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:can_read|can_read]]** //**(get, set)**// | %%If %%''true''%% will notify %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:can_write|can_write]]** //**(get, set)**// | %%If %%''true''%% will notify %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%% |
|  | **[[:develop:api:efl:net:socket:fd:property:closed|closed]]** //**(get, set)**// | %%If true will notify object was closed.%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:eos|eos]]** //**(get, set)**// | %%If %%''true''%% will notify end of stream.%% |
|  ''protected set'' | **[[:develop:api:efl:net:socket:fd:property:family|family]]** //**(get, set)**// | %%The address family (AF_*) family of this socket.%% |
|  | **[[:develop:api:efl:net:socket:fd:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
^ [[:develop:api:efl:net:socket:udp|Efl.Net.Socket.Udp]] ^^^
|  | **[[:develop:api:efl:net:socket:udp:property:bind|bind]]** //**(get, set)**// | %%Forces binding to a specific address.%% |
|  | **[[:develop:api:efl:net:socket:udp:property:cork|cork]]** //**(get, set)**// | %%Controls UDP's cork using UDP_CORK%% |
|  | **[[:develop:api:efl:net:socket:udp:property:dont_route|dont_route]]** //**(get, set)**// | %%Avoids sent UDP packets being routed by a gateway, limiting them to the local network.%% |
|  | **[[:develop:api:efl:net:socket:udp:property:fd|fd]]** //**(get, set)**// | %%Defines which file descriptor to watch. If it is a file, use file_fd variant.%% |
|  | **[[:develop:api:efl:net:socket:udp:method:multicast_groups_get|multicast_groups_get]]** | %%Returns the multicast groups this server has joined.%% |
|  | **[[:develop:api:efl:net:socket:udp:method:multicast_join|multicast_join]]** | %%Joins a multicast group.%% |
|  | **[[:develop:api:efl:net:socket:udp:method:multicast_leave|multicast_leave]]** | %%Leaves a multicast group.%% |
|  | **[[:develop:api:efl:net:socket:udp:property:multicast_loopback|multicast_loopback]]** //**(get, set)**// | %%Controls whenever multicast will loopback packets locally.%% |
|  | **[[:develop:api:efl:net:socket:udp:property:multicast_time_to_live|multicast_time_to_live]]** //**(get, set)**// | %%Controls time to live in number of hops.%% |
|  | **[[:develop:api:efl:net:socket:udp:method:next_datagram_size_query|next_datagram_size_query]]** | %%Queries the next datagram size.%% |
|  | **[[:develop:api:efl:net:socket:udp:method:read|read]]** | %%Reads data into a pre-allocated buffer.%% |
|  | **[[:develop:api:efl:net:socket:udp:property:reuse_address|reuse_address]]** //**(get, set)**// | %%Controls address reuse() using SO_REUSEADDR%% |
|  | **[[:develop:api:efl:net:socket:udp:property:reuse_port|reuse_port]]** //**(get, set)**// | %%Controls port reuse() using SO_REUSEPORT (since Linux 3.9)%% |
|  | **[[:develop:api:efl:net:socket:udp:method:write|write]]** | %%Writes data from a pre-populated buffer.%% |
|  ''protected'' | **[[:develop:api:efl:net:socket:udp:method:init|init]]** | %%Initializes the socket to communicate with a given IP address%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:io:closer|Efl.Io.Closer]] ^^^
|  | **[[:develop:api:efl:io:closer:event:closed|closed]]** | %%Notifies closed, when property is marked as true%% |
^ [[:develop:api:efl:io:reader|Efl.Io.Reader]] ^^^
|  | **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]** | %%Notifies can_read property changed.%% |
|  | **[[:develop:api:efl:io:reader:event:eos|eos]]** | %%Notifies end of stream, when property is marked as true.%% |
^ [[:develop:api:efl:io:writer|Efl.Io.Writer]] ^^^
|  | **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]** | %%Notifies can_write property changed.%% |
^ [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] ^^^
|  | **[[:develop:api:efl:loop:fd:event:error|error]]** | %%Called when a error occurred on the file descriptor%% |
|  | **[[:develop:api:efl:loop:fd:event:read|read]]** | %%Called when a read happened on the file descriptor%% |
|  | **[[:develop:api:efl:loop:fd:event:write|write]]** | %%Called when a write happened on the file descriptor%% |
^ [[:develop:api:efl:net:dialer|Efl.Net.Dialer]] ^^^
|  | **[[:develop:api:efl:net:dialer:event:connected|connected]]** | %%Notifies the socket is connected to the remote peer.%% |
|  | **[[:develop:api:efl:net:dialer:event:resolved|resolved]]** | %%Notifies %%[[:develop:api:efl:net:dialer:property:address_dial|Efl.Net.Dialer.address_dial]]%% was resolved to %%[[:develop:api:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
