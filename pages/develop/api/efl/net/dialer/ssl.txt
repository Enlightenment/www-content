~~Title: Efl.Net.Dialer.Ssl~~
====== Efl.Net.Dialer.Ssl (class) ======

===== Description =====

%%Connects to a remote SSL server using TCP.%%

%%This creates an internal %%[[:develop:api:efl:net:dialer:tcp|Efl.Net.Dialer.Tcp]]%% and once connected it will start the SSL handshake.%%

%%If the proxy is NULL (default), then the system proxy will be used. On UNIX that's the environment variable %%''socks_proxy''%% (or '%%''proxy''%%' or '%%''all_proxy''%%') is used if the given address doesn't match %%''no_proxy''%% patterns. To disable proxy use an empty string.%%

%%If the proxy is NULL (default), then the system proxy will be used. On UNIX that's the environment variable %%''socks_proxy''%% (or '%%''all_proxy''%%') is used if the given address doesn't match %%''no_proxy''%% patterns. To disable proxy use an empty string. If provided proxy must be one of the protocols:%%

%%- socks5://username:password@proxyserver:port (SOCKSv5) - socks5h://username@proxyserver:port (let socks server to resolve domain) - socks5://proxyserver:port - socks5://proxyserver (default port 1080) - socks4a://proxyserver:port (SOCKSv4 and let socks server to resolve domain) - socks4://proxyserver:port (SOCKSv4)%%

//Since 1.19//

{{page>:develop:api-include:efl:net:dialer:ssl:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:net:socket:ssl|Efl.Net.Socket.Ssl]] //(class)// => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_dialer_ssl [fillcolor = "black", label = "Efl.Net.Dialer.Ssl", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_socket_ssl [fillcolor = "gray15", label = "Efl.Net.Socket.Ssl", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_net_dialer [fillcolor = "gray15", label = "Efl.Net.Dialer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_net_dialer_ssl -> efl_net_socket_ssl
    efl_net_socket_ssl -> efl_loop_user
    efl_loop_user -> efl_object
    efl_net_socket_ssl -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
    efl_net_dialer_ssl -> efl_net_dialer
    efl_net_dialer -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
}
</graphviz>

++++

++++ Full hierarchy |

  * [[:develop:api:efl:net:socket:ssl|Efl.Net.Socket.Ssl]] //(class)//
    * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
      * [[:develop:api:efl:object|Efl.Object]] //(class)//
    * [[:develop:api:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//
  * [[:develop:api:efl:net:dialer|Efl.Net.Dialer]] //(interface)//
    * [[:develop:api:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:net:dialer:ssl:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:method:dial|dial]]**// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Dials to the remote peer.%%
<code c>
Eina_Error efl_net_dialer_dial(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:address_dial|address_dial]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]// ''protected set''\\
> %%Returns the address given to %%[[:develop:api:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%%.%%
<code c>
const char *efl_net_dialer_address_dial_get(const Eo *obj);
void efl_net_dialer_address_dial_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:connected|connected]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]// ''protected set''\\
> %%Returns whenever the socket is connected or not.%%
<code c>
Eina_Bool efl_net_dialer_connected_get(const Eo *obj);
void efl_net_dialer_connected_set(Eo *obj, Eina_Bool connected);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:keep_alive|keep_alive]]** //**(get, set)**//\\
> %%Controls keep-alive using SO_KEEPALIVE%%
<code c>
Eina_Bool efl_net_dialer_ssl_keep_alive_get(const Eo *obj);
Eina_Bool efl_net_dialer_ssl_keep_alive_set(Eo *obj, Eina_Bool keep_alive);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:no_delay|no_delay]]** //**(get, set)**//\\
> %%Controls TCP's no-delay using TCP_NODELAY%%
<code c>
Eina_Bool efl_net_dialer_ssl_no_delay_get(const Eo *obj);
Eina_Bool efl_net_dialer_ssl_no_delay_set(Eo *obj, Eina_Bool no_delay);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:proxy|proxy]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Controls/retrieves if the dialer should use a proxy.%%
<code c>
const char *efl_net_dialer_proxy_get(const Eo *obj);
void efl_net_dialer_proxy_set(Eo *obj, const char *proxy_url);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:ssl_context|ssl_context]]** //**(get, set)**//\\
> %%Defines the SSL context to use for this dialer.%%
<code c>
Efl_Net_Ssl_Context *efl_net_dialer_ssl_context_get(const Eo *obj);
void efl_net_dialer_ssl_context_set(Eo *obj, Efl_Net_Ssl_Context *ssl_context);
</code>
\\
**[[:develop:api:efl:net:dialer:ssl:property:timeout_dial|timeout_dial]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%The timeout in seconds to use for dialing/connecting.%%
<code c>
double efl_net_dialer_timeout_dial_get(const Eo *obj);
void efl_net_dialer_timeout_dial_set(Eo *obj, double seconds);
</code>
\\

==== Inherited ====

[[:develop:api:efl:loop_user|Efl.Loop_User]]\\
> **[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**//, **[[:develop:api:efl:loop_user:property:parent|parent]]** //**(get, set)**//\\
[[:develop:api:efl:net:socket:ssl|Efl.Net.Socket.Ssl]]\\
> **[[:develop:api:efl:net:socket:ssl:method:adopt|adopt]]**, **[[:develop:api:efl:net:socket:ssl:method:read|read]]**, **[[:develop:api:efl:net:socket:ssl:method:write|write]]**, **[[:develop:api:efl:net:socket:ssl:property:address_local|address_local]]** //**(get, set)**// ''protected set'', **[[:develop:api:efl:net:socket:ssl:property:address_remote|address_remote]]** //**(get, set)**// ''protected set'', **[[:develop:api:efl:net:socket:ssl:property:can_read|can_read]]** //**(get, set)**// ''protected set'', **[[:develop:api:efl:net:socket:ssl:property:can_write|can_write]]** //**(get, set)**// ''protected set'', **[[:develop:api:efl:net:socket:ssl:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//, **[[:develop:api:efl:net:socket:ssl:property:close_on_exec|close_on_exec]]** //**(get, set)**//, **[[:develop:api:efl:net:socket:ssl:property:closed|closed]]** //**(get, set)**//, **[[:develop:api:efl:net:socket:ssl:property:eos|eos]]** //**(get, set)**// ''protected set'', **[[:develop:api:efl:net:socket:ssl:property:hostname_override|hostname_override]]** //**(get, set)**//, **[[:develop:api:efl:net:socket:ssl:property:hostname_verify|hostname_verify]]** //**(get, set)**//, **[[:develop:api:efl:net:socket:ssl:property:verify_mode|verify_mode]]** //**(get, set)**//\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]**, **[[:develop:api:efl:object:method:composite_attach|composite_attach]]**, **[[:develop:api:efl:object:method:composite_detach|composite_detach]]**, **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]**, **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]**, **[[:develop:api:efl:object:method:del|del]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**, **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**, **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]**, **[[:develop:api:efl:object:method:event_freeze|event_freeze]]**, **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]**, **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]**, **[[:develop:api:efl:object:method:event_thaw|event_thaw]]**, **[[:develop:api:efl:object:method:name_find|name_find]]**, **[[:develop:api:efl:object:method:provider_find|provider_find]]**, **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//, **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**//, **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//, **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**//, **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**//\\
[[:develop:api:efl:net:socket:ssl|Efl.Net.Socket.Ssl]]\\
> **[[:develop:api:efl:net:socket:ssl:property:adopted|adopted]]** //**(get)**// ''protected''
===== Events =====

==== Inherited ====

[[:develop:api:efl:io:closer|Efl.Io.Closer]]\\
> **[[:develop:api:efl:io:closer:event:closed|closed]]**\\
[[:develop:api:efl:io:reader|Efl.Io.Reader]]\\
> **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]**, **[[:develop:api:efl:io:reader:event:eos|eos]]**\\
[[:develop:api:efl:io:writer|Efl.Io.Writer]]\\
> **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]**\\
[[:develop:api:efl:net:dialer|Efl.Net.Dialer]]\\
> **[[:develop:api:efl:net:dialer:event:connected|connected]]**, **[[:develop:api:efl:net:dialer:event:error|error]]**, **[[:develop:api:efl:net:dialer:event:resolved|resolved]]**\\
[[:develop:api:efl:net:socket:ssl|Efl.Net.Socket.Ssl]]\\
> **[[:develop:api:efl:net:socket:ssl:event:ssl_error|ssl,error]]**, **[[:develop:api:efl:net:socket:ssl:event:ssl_ready|ssl,ready]]**\\
[[:develop:api:efl:object|Efl.Object]]\\
> **[[:develop:api:efl:object:event:callback_add|callback,add]]**, **[[:develop:api:efl:object:event:callback_del|callback,del]]**, **[[:develop:api:efl:object:event:del|del]]**