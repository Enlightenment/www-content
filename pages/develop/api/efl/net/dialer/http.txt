~~Title: Efl.Net.Dialer.Http~~
====== Efl.Net.Dialer.Http (class) ======

===== Description =====

%%HTTP Dialer (Client).%%

%%The effective URL in use, if %%[[:develop:api:efl:net:dialer:http:property:allow_redirects|Efl.Net.Dialer.Http.allow_redirects]]%% is %%''true''%% will be available as %%[[:develop:api:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%. The %%[[:develop:api:efl:net:socket:property:address_local|Efl.Net.Socket.address_local]]%% is an IP:PORT pair.%%

%%The dialer can perform bi-directional information exchanges. It can also do a PUT and upload a file, or GET and download one. It can also do a POST with some form values, including a file, and retrieve its headers and body response. To make usage more streamlined, choose your area of interest with %%[[:develop:api:efl:net:dialer:http:property:primary_mode|Efl.Net.Dialer.Http.primary_mode]]%% then get some properties such as %%[[:develop:api:efl:io:sizer:property:size|Efl.Io.Sizer.size]]%% to report or use the information you need.%%

%%If %%[[:develop:api:efl:net:dialer:http:property:allow_redirects|Efl.Net.Dialer.Http.allow_redirects]]%% is %%''true''%%, multiple "connected" and "resolved" signals will be dispatched, one for each connection. In this case %%[[:develop:api:efl:net:dialer:http:property:response_status|Efl.Net.Dialer.Http.response_status]]%% and %%[[:develop:api:efl:net:dialer:http:method:response_headers_get|Efl.Net.Dialer.Http.response_headers_get]]%% will keep changing. Using %%[[:develop:api:efl:net:dialer:http:method:response_headers_all_get|Efl.Net.Dialer.Http.response_headers_all_get]]%% one can see the whole history of headers and connections.%%

%%To enable debugging use EINA_LOG_LEVELS=ecore_con:4 environment variable.%%

%%If the proxy is NULL (default), then the system proxy will be used. On UNIX that's the environment variable %%''http_proxy''%% (or '%%''all_proxy''%%') is used if the given address doesn't match %%''no_proxy''%% patterns. To disable proxy use an empty string. If provided, the proxy must use one of the following protocols:%%

%%- http://username:password@proxyserver:port - http://username@proxyserver:port - http://proxyserver:port - http://proxyserver  (default port 1080) - socks5://username:password@proxyserver:port (SOCKSv5) - socks5h://username@proxyserver:port (let socks server to resolve domain) - socks5://proxyserver:port - socks5://proxyserver (default port 1080) - socks4a://proxyserver:port (SOCKSv4 and let socks server to resolve domain) - socks4://proxyserver:port (SOCKSv4)%%

//Since 1.19//

{{page>:develop:api-include:efl:net:dialer:http:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:net:dialer|Efl.Net.Dialer]] //(interface)//
    * [[:develop:api:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:develop:api:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:efl:io:closer|Efl.Io.Closer]] //(mixin)//
  * [[:develop:api:efl:io:sizer|Efl.Io.Sizer]] //(mixin)//


++++
===== Members =====

**[[:develop:api:efl:net:dialer:http:property:address_dial|address_dial]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Returns the address given to %%[[:develop:api:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%%.%%
<code c>
const char *efl_net_dialer_address_dial_get(const Eo *obj);
void efl_net_dialer_address_dial_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:address_local|address_local]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:socket|Efl.Net.Socket]]]//\\
> %%The local address, similar to getsockname().%%
<code c>
const char *efl_net_socket_address_local_get(const Eo *obj);
void efl_net_socket_address_local_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:address_remote|address_remote]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:socket|Efl.Net.Socket]]]//\\
> %%The remote address, similar to getpeername().%%
<code c>
const char *efl_net_socket_address_remote_get(const Eo *obj);
void efl_net_socket_address_remote_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:allow_redirects|allow_redirects]]** //**(get, set)**//\\
> %%Allows HTTP redirects to be followed.%%
<code c>
Eina_Bool efl_net_dialer_http_allow_redirects_get(const Eo *obj);
void efl_net_dialer_http_allow_redirects_set(Eo *obj, Eina_Bool allow_redirects);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:authentication|authentication]]** //**(get, set)**//\\
> %%HTTP authentication to use.%%
<code c>
void efl_net_dialer_http_authentication_get(const Eo *obj, const char **username, const char **password, Efl_Net_Http_Authentication_Method *method, Eina_Bool *restricted);
void efl_net_dialer_http_authentication_set(Eo *obj, const char *username, const char *password, Efl_Net_Http_Authentication_Method method, Eina_Bool restricted);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:can_read|can_read]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:can_write|can_write]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%If %%''true''%% will notify %%[[:develop:api:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:close|close]]**// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%Closes the Input/Output object.%%
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close() on object destructor.%%
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:close_on_exec|close_on_exec]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will automatically close resources on exec() calls.%%
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:closed|closed]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:closer|Efl.Io.Closer]]]//\\
> %%If true will notify object was closed.%%
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:connected|connected]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Returns whenever the socket is connected or not.%%
<code c>
Eina_Bool efl_net_dialer_connected_get(const Eo *obj);
void efl_net_dialer_connected_set(Eo *obj, Eina_Bool connected);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:cookie_jar|cookie_jar]]** //**(get, set)**//\\
> %%This property sets the filename to read and write cookies.%%
<code c>
const char *efl_net_dialer_http_cookie_jar_get(const Eo *obj);
void efl_net_dialer_http_cookie_jar_set(Eo *obj, const char *path);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:date_parse|date_parse]]** ''class''\\
> %%Parses the given string as time in seconds since 1/1/1970.%%
<code c>
int64_t efl_net_dialer_http_date_parse(Efl_Class *klass, const char *str);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:date_serialize|date_serialize]]** ''class''\\
> %%Serializes the given GMT time in seconds since 1/1/1970.%%
<code c>
char *efl_net_dialer_http_date_serialize(Efl_Class *klass, int64_t epochtime);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:dial|dial]]**// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Dials to the remote peer.%%
<code c>
Eina_Error efl_net_dialer_dial(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:eos|eos]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%If %%''true''%% will notify end of stream.%%
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:http_version|http_version]]** //**(get, set)**//\\
> %%The HTTP version to use.%%
<code c>
Efl_Net_Http_Version efl_net_dialer_http_version_get(const Eo *obj);
void efl_net_dialer_http_version_set(Eo *obj, Efl_Net_Http_Version http_version);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:method|method]]** //**(get, set)**//\\
> %%The HTTP method to use.%%
<code c>
const char *efl_net_dialer_http_method_get(const Eo *obj);
void efl_net_dialer_http_method_set(Eo *obj, const char *method);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:primary_mode|primary_mode]]** //**(get, set)**//\\
> %%Is this request primarily a download or upload?%%
<code c>
Efl_Net_Dialer_Http_Primary_Mode efl_net_dialer_http_primary_mode_get(const Eo *obj);
void efl_net_dialer_http_primary_mode_set(Eo *obj, Efl_Net_Dialer_Http_Primary_Mode primary_mode);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:progress_download|progress_download]]** //**(get)**//\\
> %%How many bytes were downloaded and how many were expected.%%
<code c>
void efl_net_dialer_http_progress_download_get(const Eo *obj, uint64_t *downloaded, uint64_t *total);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:progress_upload|progress_upload]]** //**(get)**//\\
> %%How many bytes were uploaded and how many were expected.%%
<code c>
void efl_net_dialer_http_progress_upload_get(const Eo *obj, uint64_t *uploaded, uint64_t *total);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:proxy|proxy]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%Controls/retrieves if the dialer should use a proxy.%%
<code c>
const char *efl_net_dialer_proxy_get(const Eo *obj);
void efl_net_dialer_proxy_set(Eo *obj, const char *proxy_url);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:read|read]]**// [Overridden from [[:develop:api:efl:io:reader|Efl.Io.Reader]]]//\\
> %%Reads data into a pre-allocated buffer.%%
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:request_content_length|request_content_length]]** //**(get, set)**//\\
> %%"Content-Length:" Header used for uploading/sending.%%
<code c>
int64_t efl_net_dialer_http_request_content_length_get(const Eo *obj);
void efl_net_dialer_http_request_content_length_set(Eo *obj, int64_t length);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:request_header_add|request_header_add]]**\\
> %%Adds a request header 'key: value'.%%
<code c>
void efl_net_dialer_http_request_header_add(Eo *obj, const char *key, const char *value);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:request_headers_clear|request_headers_clear]]**\\
> %%Clears all request headers.%%
<code c>
void efl_net_dialer_http_request_headers_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:request_headers_get|request_headers_get]]**\\
> %%Returns an iterator to the key-value pairs for request headers%%
<code c>
Eina_Iterator *efl_net_dialer_http_request_headers_get(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:resize|resize]]**// [Overridden from [[:develop:api:efl:io:sizer|Efl.Io.Sizer]]]//\\
> %%Resize object%%
<code c>
Eina_Error efl_io_sizer_resize(Eo *obj, uint64_t size);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:response_content_length|response_content_length]]** //**(get, set)**// ''protected set''\\
> %%"Content-Length:" Header used for downloading/receiving.%%
<code c>
int64_t efl_net_dialer_http_response_content_length_get(const Eo *obj);
void efl_net_dialer_http_response_content_length_set(Eo *obj, int64_t length);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:response_content_type|response_content_type]]** //**(get, set)**// ''protected set''\\
> %%"Content-Type:" Header used for downloading/receiving%%
<code c>
const char *efl_net_dialer_http_response_content_type_get(const Eo *obj);
void efl_net_dialer_http_response_content_type_set(Eo *obj, const char *content_type);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:response_headers_all_get|response_headers_all_get]]**\\
> %%Returns an iterator to the key-value pairs for all response headers.%%
<code c>
Eina_Iterator *efl_net_dialer_http_response_headers_all_get(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:response_headers_clear|response_headers_clear]]**\\
> %%Saves memory by disposing of the received headers%%
<code c>
void efl_net_dialer_http_response_headers_clear(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:response_headers_get|response_headers_get]]**\\
> %%Returns an iterator to the key-value pairs for the last response headers.%%
<code c>
Eina_Iterator *efl_net_dialer_http_response_headers_get(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:response_status|response_status]]** //**(get)**//\\
> %%The HTTP response status of this request.%%
<code c>
Efl_Net_Http_Status efl_net_dialer_http_response_status_get(const Eo *obj);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:size|size]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:io:sizer|Efl.Io.Sizer]]]//\\
> %%Size property%%
<code c>
uint64_t efl_io_sizer_size_get(const Eo *obj);
Eina_Bool efl_io_sizer_size_set(Eo *obj, uint64_t size);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:ssl_certificate_authority|ssl_certificate_authority]]** //**(get, set)**//\\
> %%Overrides the CA (Certificate Authority) path or directory.%%
<code c>
const char *efl_net_dialer_http_ssl_certificate_authority_get(const Eo *obj);
void efl_net_dialer_http_ssl_certificate_authority_set(Eo *obj, const char *path);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:ssl_certificate_revocation_list|ssl_certificate_revocation_list]]** //**(get, set)**//\\
> %%Defines a CRL (Certificate Revocation List) path to use.%%
<code c>
const char *efl_net_dialer_http_ssl_certificate_revocation_list_get(const Eo *obj);
void efl_net_dialer_http_ssl_certificate_revocation_list_set(Eo *obj, const char *file);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:ssl_verify|ssl_verify]]** //**(get, set)**//\\
> %%If remote peer's SSL certificate should be verified.%%
<code c>
void efl_net_dialer_http_ssl_verify_get(const Eo *obj, Eina_Bool *peer, Eina_Bool *hostname);
void efl_net_dialer_http_ssl_verify_set(Eo *obj, Eina_Bool peer, Eina_Bool hostname);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:timeout_dial|timeout_dial]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:dialer|Efl.Net.Dialer]]]//\\
> %%The timeout in seconds to use for dialing/connecting.%%
<code c>
double efl_net_dialer_timeout_dial_get(const Eo *obj);
void efl_net_dialer_timeout_dial_set(Eo *obj, double seconds);
</code>
\\
**[[:develop:api:efl:net:dialer:http:property:user_agent|user_agent]]** //**(get, set)**//\\
> %%The User-Agent to specify.%%
<code c>
const char *efl_net_dialer_http_user_agent_get(const Eo *obj);
void efl_net_dialer_http_user_agent_set(Eo *obj, const char *ser_agent);
</code>
\\
**[[:develop:api:efl:net:dialer:http:method:write|write]]**// [Overridden from [[:develop:api:efl:io:writer|Efl.Io.Writer]]]//\\
> %%Writes data from a pre-populated buffer.%%
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop:consumer:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

**[[:develop:api:efl:net:dialer:http:event:headers_done|headers,done]]**\\
> %%Notifies all headers were parsed and are available.%%
<code c>
EFL_NET_DIALER_HTTP_EVENT_HEADERS_DONE(void)
</code>
\\ ==== Inherited ====

^ [[:develop:api:efl:io:closer|Efl.Io.Closer]] ^^^
|  | **[[:develop:api:efl:io:closer:event:closed|closed]]** | %%Notifies closed, when property is marked as true%% |
^ [[:develop:api:efl:io:reader|Efl.Io.Reader]] ^^^
|  | **[[:develop:api:efl:io:reader:event:can_read_changed|can_read,changed]]** | %%Notifies can_read property changed.%% |
|  | **[[:develop:api:efl:io:reader:event:eos|eos]]** | %%Notifies end of stream, when property is marked as true.%% |
^ [[:develop:api:efl:io:sizer|Efl.Io.Sizer]] ^^^
|  | **[[:develop:api:efl:io:sizer:event:size_changed|size,changed]]** | %%Notifies size changed%% |
^ [[:develop:api:efl:io:writer|Efl.Io.Writer]] ^^^
|  | **[[:develop:api:efl:io:writer:event:can_write_changed|can_write,changed]]** | %%Notifies can_write property changed.%% |
^ [[:develop:api:efl:net:dialer|Efl.Net.Dialer]] ^^^
|  | **[[:develop:api:efl:net:dialer:event:connected|connected]]** | %%Notifies the socket is connected to the remote peer.%% |
|  | **[[:develop:api:efl:net:dialer:event:error|error]]** | %%Some error happened and the socket stopped working.%% |
|  | **[[:develop:api:efl:net:dialer:event:resolved|resolved]]** | %%Notifies %%[[:develop:api:efl:net:dialer:property:address_dial|Efl.Net.Dialer.address_dial]]%% was resolved to %%[[:develop:api:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
