~~Title: Efl.Net.Server.Simple~~
====== Efl.Net.Server.Simple (class) ======

===== Description =====

%%A network server wrapper that creates clients based on %%[[:develop:api:efl:net:socket:simple|Efl.Net.Socket.Simple]]%%.%%

%%This is just a wrapper server, it will take an actual server using %%[[:develop:api:efl:net:server:simple:property:inner_server|Efl.Net.Server.Simple.inner_server]]%% or create one using %%[[:develop:api:efl:net:server:simple:property:inner_class|Efl.Net.Server.Simple.inner_class]]%%.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:server:simple:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop_user|Efl.Loop_User]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:net:server|Efl.Net.Server]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:net:server:simple:property:address|address]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%The address the server is bound to.%%
<code c>
const char *efl_net_server_address_get(const Eo *obj);
void efl_net_server_address_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:server:simple:property:clients_count|clients_count]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Number of concurrent clients accepted by this server.%%
<code c>
unsigned int efl_net_server_clients_count_get(const Eo *obj);
void efl_net_server_clients_count_set(Eo *obj, unsigned int count);
</code>
\\
**[[:develop:api:efl:net:server:simple:property:clients_limit|clients_limit]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Number of maximum concurrent clients allowed by this server.%%
<code c>
void efl_net_server_clients_limit_get(const Eo *obj, unsigned int *limit, Eina_Bool *reject_excess);
void efl_net_server_clients_limit_set(Eo *obj, unsigned int limit, Eina_Bool reject_excess);
</code>
\\
**[[:develop:api:efl:net:server:simple:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:server:simple:method:finalize|finalize]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Called at the end of #eo_add. Should not be called, just overridden.%%
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:server:simple:property:inner_class|inner_class]]** //**(get, set)**//\\
> %%The class used to create %%[[:develop:api:efl:net:server:simple:property:inner_server|Efl.Net.Server.Simple.inner_server]]%% if none was provided.%%
<code c>
const Efl_Class *efl_net_server_simple_inner_class_get(const Eo *obj);
void efl_net_server_simple_inner_class_set(Eo *obj, const Efl_Class *klass);
</code>
\\
**[[:develop:api:efl:net:server:simple:property:inner_server|inner_server]]** //**(get, set)**//\\
> %%The inner %%[[:develop:api:efl:net:server|Efl.Net.Server]]%% this wrapper operates on.%%
<code c>
Efl_Object *efl_net_server_simple_inner_server_get(const Eo *obj);
void efl_net_server_simple_inner_server_set(Eo *obj, Efl_Object *server);
</code>
\\
**[[:develop:api:efl:net:server:simple:method:serve|serve]]**// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Starts serving requests.%%
<code c>
Eina_Error efl_net_server_serve(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:server:simple:property:serving|serving]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Returns whenever the server is ready to accept clients or not.%%
<code c>
Eina_Bool efl_net_server_serving_get(const Eo *obj);
void efl_net_server_serving_set(Eo *obj, Eina_Bool serving);
</code>
\\
**[[:develop:api:efl:net:server:simple:method:client_announce|client_announce]]** ''protected''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Implementions should call this method to announce new clients.%%
<code c>
Eina_Bool efl_net_server_client_announce(Eo *obj, Efl_Net_Socket *client);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop_user|Efl.Loop_User]] ^^^
|  | **[[:develop:api:efl:loop_user:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop_user:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, false otherwise.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches up in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:net:server|Efl.Net.Server]] ^^^
|  | **[[:develop:api:efl:net:server:event:client_add|client,add]]** | %%A new client socket was created.%% |
|  | **[[:develop:api:efl:net:server:event:client_rejected|client,rejected]]** | %%Notifies a client was rejected due excess, see %%[[:develop:api:efl:net:server:property:clients_limit|Efl.Net.Server.clients_limit]]%%.%% |
|  | **[[:develop:api:efl:net:server:event:error|error]]** | %%Some error happened and the server needs to be stopped.%% |
|  | **[[:develop:api:efl:net:server:event:serving|serving]]** | %%Notifies the server is ready to accept clients. See property %%[[:develop:api:efl:net:server:property:serving|Efl.Net.Server.serving]]%%%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
