~~Title: Efl.Net.Server.Tcp~~
====== Efl.Net.Server.Tcp (class) ======

===== Description =====

%%A TCP server.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:server:tcp:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:net:server:ip|Efl.Net.Server.Ip]] //(class)// => [[:develop:api:efl:net:server:fd|Efl.Net.Server.Fd]] //(class)// => [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] //(class)// => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:net:server:ip|Efl.Net.Server.Ip]] //(class)//
    * [[:develop:api:efl:net:server:fd|Efl.Net.Server.Fd]] //(class)//
      * [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] //(class)//
        * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
          * [[:develop:api:efl:object|Efl.Object]] //(class)//
      * [[:develop:api:efl:net:server|Efl.Net.Server]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:net:server:tcp:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:server:tcp:method:serve|serve]]**// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Starts serving requests.%%
<code c>
Eina_Error efl_net_server_serve(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:server:tcp:method:socket_activate|socket_activate]]**// [Overridden from [[:develop:api:efl:net:server:fd|Efl.Net.Server.Fd]]]//\\
> %%If this method is called, use an already activated socket.%%
<code c>
Eina_Error efl_net_server_fd_socket_activate(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:server:tcp:method:client_add|client_add]]** ''protected''// [Overridden from [[:develop:api:efl:net:server:fd|Efl.Net.Server.Fd]]]//\\
> %%Accepts a new client, should emit "client,add".%%
<code c>
void efl_net_server_fd_client_add(Eo *obj, int client_fd);
</code>
\\
**[[:develop:api:efl:net:server:tcp:method:client_reject|client_reject]]** ''protected''// [Overridden from [[:develop:api:efl:net:server:fd|Efl.Net.Server.Fd]]]//\\
> %%Rejects a new client, should emit "client,rejected".%%
<code c>
void efl_net_server_fd_client_reject(Eo *obj, int client_fd);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
^ [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] ^^^
|  | **[[:develop:api:efl:loop:fd:property:fd_file|fd_file]]** //**(get, set)**// | %%Defines which file descriptor to watch when watching a file.%% |
|  | **[[:develop:api:efl:loop:fd:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:net:server:fd|Efl.Net.Server.Fd]] ^^^
|  ''protected set'' | **[[:develop:api:efl:net:server:fd:property:address|address]]** //**(get, set)**// | %%The address to which the server is bound.%% |
|  ''protected set'' | **[[:develop:api:efl:net:server:fd:property:clients_count|clients_count]]** //**(get, set)**// | %%Number of concurrent clients accepted by the server.%% |
|  | **[[:develop:api:efl:net:server:fd:property:clients_limit|clients_limit]]** //**(get, set)**// | %%Number of maximum concurrent clients allowed by the server.%% |
|  | **[[:develop:api:efl:net:server:fd:property:close_on_exec|close_on_exec]]** //**(get, set)**// | %%Controls Close-on-Exec() using FD_CLOEXEC.%% |
|  ''protected set'' | **[[:develop:api:efl:net:server:fd:property:family|family]]** //**(get, set)**// | %%The address family (AF_*) family of this socket.%% |
|  | **[[:develop:api:efl:net:server:fd:property:fd|fd]]** //**(get, set)**// | %%Defines which file descriptor to watch. If it is a file, use file_fd variant.%% |
|  | **[[:develop:api:efl:net:server:fd:method:finalize|finalize]]** | %%Called at the end of #eo_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:net:server:fd:property:reuse_address|reuse_address]]** //**(get, set)**// | %%Controls address reuse() using SO_REUSEADDR%% |
|  | **[[:develop:api:efl:net:server:fd:property:reuse_port|reuse_port]]** //**(get, set)**// | %%Controls port reuse() using SO_REUSEPORT (since linux 3.9)%% |
|  ''protected set'' | **[[:develop:api:efl:net:server:fd:property:serving|serving]]** //**(get, set)**// | %%Returns whenever the server is ready to accept clients or not.%% |
|  ''protected'' | **[[:develop:api:efl:net:server:fd:method:client_announce|client_announce]]** | %%Implementions should call this method to announce new clients.%% |
|  ''protected'' | **[[:develop:api:efl:net:server:fd:method:process_incoming_data|process_incoming_data]]** | %%When the socket has data to be read, process it.%% |
^ [[:develop:api:efl:net:server:ip|Efl.Net.Server.Ip]] ^^^
|  | **[[:develop:api:efl:net:server:ip:method:constructor|constructor]]** | %%Call the object's constructor.%% |
|  | **[[:develop:api:efl:net:server:ip:property:ipv6_only|ipv6_only]]** //**(get, set)**// | %%Whenever IPv6 listen address will accept only same-family clients or will allow IPv4 to connect as well.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:loop:fd|Efl.Loop.Fd]] ^^^
|  | **[[:develop:api:efl:loop:fd:event:error|error]]** | %%Called when a error occurred on the file descriptor%% |
|  | **[[:develop:api:efl:loop:fd:event:read|read]]** | %%Called when a read happened on the file descriptor%% |
|  | **[[:develop:api:efl:loop:fd:event:write|write]]** | %%Called when a write happened on the file descriptor%% |
^ [[:develop:api:efl:net:server|Efl.Net.Server]] ^^^
|  | **[[:develop:api:efl:net:server:event:client_add|client,add]]** | %%A new client socket has been created.%% |
|  | **[[:develop:api:efl:net:server:event:client_rejected|client,rejected]]** | %%Notifies a client was rejected due excess, see %%[[:develop:api:efl:net:server:property:clients_limit|Efl.Net.Server.clients_limit]]%%.%% |
|  | **[[:develop:api:efl:net:server:event:serving|serving]]** | %%Notifies the server is ready to accept clients. See property %%[[:develop:api:efl:net:server:property:serving|Efl.Net.Server.serving]]%%%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
