~~Title: Efl.Net.Server.Windows~~
====== Efl.Net.Server.Windows (class) ======

===== Description =====

%%A Windows NamedPipe server.%%

%%The %%[[:develop:api:efl:net:server:method:serve|Efl.Net.Server.serve]]%% method calls CreateNamedPipe() directly, so the path will be accessed and created in that method. If the created socket must be subject to some special mode or user, change before executing said method.%%

//Since 1.19//

{{page>:develop:api-include:efl:net:server:windows:description&nouser&nolink&nodate}}

===== Inheritance =====

 => [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)// => [[:develop:api:efl:object|Efl.Object]] //(class)//
++++ Full hierarchy |

  * [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] //(class)//
    * [[:develop:api:efl:object|Efl.Object]] //(class)//
  * [[:develop:api:efl:net:server|Efl.Net.Server]] //(interface)//


++++
===== Members =====

**[[:develop:api:efl:net:server:windows:property:address|address]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%The address to which the server is bound.%%
<code c>
const char *efl_net_server_address_get(const Eo *obj);
void efl_net_server_address_set(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:server:windows:property:allow_remote|allow_remote]]** //**(get, set)**//\\
> %%If server allows remote (different machine) clients.%%
<code c>
Eina_Bool efl_net_server_windows_allow_remote_get(const Eo *obj);
void efl_net_server_windows_allow_remote_set(Eo *obj, Eina_Bool allow_remote);
</code>
\\
**[[:develop:api:efl:net:server:windows:property:clients_count|clients_count]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Number of concurrent clients accepted by the server.%%
<code c>
unsigned int efl_net_server_clients_count_get(const Eo *obj);
void efl_net_server_clients_count_set(Eo *obj, unsigned int count);
</code>
\\
**[[:develop:api:efl:net:server:windows:property:clients_limit|clients_limit]]** //**(get, set)**//// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Number of maximum concurrent clients allowed by the server.%%
<code c>
void efl_net_server_clients_limit_get(const Eo *obj, unsigned int *limit, Eina_Bool *reject_excess);
void efl_net_server_clients_limit_set(Eo *obj, unsigned int limit, Eina_Bool reject_excess);
</code>
\\
**[[:develop:api:efl:net:server:windows:method:constructor|constructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's constructor.%%
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:server:windows:method:destructor|destructor]]**// [Overridden from [[:develop:api:efl:object|Efl.Object]]]//\\
> %%Call the object's destructor.%%
<code c>
void efl_destructor(Eo *obj);
</code>
\\
**[[:develop:api:efl:net:server:windows:method:serve|serve]]**// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%address parameter will have "\\.\pipe\" prepended%%
<code c>
Eina_Error efl_net_server_serve(Eo *obj, const char *address);
</code>
\\
**[[:develop:api:efl:net:server:windows:property:serving|serving]]** //**(get, set)**// ''protected set''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Returns whenever the server is ready to accept clients or not.%%
<code c>
Eina_Bool efl_net_server_serving_get(const Eo *obj);
void efl_net_server_serving_set(Eo *obj, Eina_Bool serving);
</code>
\\
**[[:develop:api:efl:net:server:windows:method:client_announce|client_announce]]** ''protected''// [Overridden from [[:develop:api:efl:net:server|Efl.Net.Server]]]//\\
> %%Implementions should call this method to announce new clients.%%
<code c>
Eina_Bool efl_net_server_client_announce(Eo *obj, Efl_Net_Socket *client);
</code>
\\

==== Inherited ====

^ [[:develop:api:efl:loop:consumer|Efl.Loop.Consumer]] ^^^
|  | **[[:develop:api:efl:loop:consumer:property:loop|loop]]** //**(get)**// | %%The loop to which this object belongs to.%% |
|  | **[[:develop:api:efl:loop:consumer:property:parent|parent]]** //**(get, set)**// | %%The parent of an object.%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**// | %%Allow an object to be deleted by unref even if it has a parent.%% |
|  | **[[:develop:api:efl:object:method:children_iterator_new|children_iterator_new]]** | %%Get an iterator on all childrens%% |
|  | **[[:develop:api:efl:object:property:comment|comment]]** //**(get, set)**// | %%A human readable comment for the object%% |
|  | **[[:develop:api:efl:object:method:composite_attach|composite_attach]]** | %%Make an object a composite object of another.%% |
|  | **[[:develop:api:efl:object:method:composite_detach|composite_detach]]** | %%Detach a composite object from another object.%% |
|  | **[[:develop:api:efl:object:method:composite_part_is|composite_part_is]]** | %%Check if an object is part of a composite object.%% |
|  | **[[:develop:api:efl:object:method:debug_name_override|debug_name_override]]** | %%Build a read-only name for this object used for debugging.%% |
|  | **[[:develop:api:efl:object:method:del|del]]** | %%Unrefs the object and reparents it to NULL.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]** | %%Add an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]** | %%Remove an event callback forwarder for an event and an object.%% |
|  | **[[:develop:api:efl:object:method:event_callback_stop|event_callback_stop]]** | %%Stop the current callback call.%% |
|  | **[[:develop:api:efl:object:method:event_freeze|event_freeze]]** | %%Freeze events of object.%% |
|  | **[[:develop:api:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_freeze|event_global_freeze]]** | %%Freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**// | %%Return freeze events of object.%% |
|  ''class'' | **[[:develop:api:efl:object:method:event_global_thaw|event_global_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:event_thaw|event_thaw]]** | %%Thaw events of object.%% |
|  | **[[:develop:api:efl:object:method:finalize|finalize]]** | %%Called at the end of efl_add. Should not be called, just overridden.%% |
|  | **[[:develop:api:efl:object:property:finalized|finalized]]** //**(get)**// | %%True if the object is already finalized, otherwise false.%% |
|  | **[[:develop:api:efl:object:property:name|name]]** //**(get, set)**// | %%The name of the object.%% |
|  | **[[:develop:api:efl:object:method:name_find|name_find]]** | %%Find a child object with the given name and return it.%% |
|  | **[[:develop:api:efl:object:method:provider_find|provider_find]]** | %%Searches upwards in the object tree for a provider which knows the given class/interface.%% |

===== Events =====

==== Inherited ====

^ [[:develop:api:efl:net:server|Efl.Net.Server]] ^^^
|  | **[[:develop:api:efl:net:server:event:client_add|client,add]]** | %%A new client socket has been created.%% |
|  | **[[:develop:api:efl:net:server:event:client_rejected|client,rejected]]** | %%Notifies a client was rejected due excess, see %%[[:develop:api:efl:net:server:property:clients_limit|Efl.Net.Server.clients_limit]]%%.%% |
|  | **[[:develop:api:efl:net:server:event:error|error]]** | %%An error has occurred and the server needs to be stopped.%% |
|  | **[[:develop:api:efl:net:server:event:serving|serving]]** | %%Notifies the server is ready to accept clients. See property %%[[:develop:api:efl:net:server:property:serving|Efl.Net.Server.serving]]%%%% |
^ [[:develop:api:efl:object|Efl.Object]] ^^^
|  | **[[:develop:api:efl:object:event:callback_add|callback,add]]** | %%A callback was added.%% |
|  | **[[:develop:api:efl:object:event:callback_del|callback,del]]** | %%A callback was deleted.%% |
|  | **[[:develop:api:efl:object:event:del|del]]** | %%Object is being deleted.%% |
|  | **[[:develop:api:efl:object:event:destruct|destruct]]** | %%Object has been fully destroyed. It can not be used beyond this point. This event should only serve to clean up any dangling pointer.%% |
