~~Title: Efl.Text.Format~~
====== Efl.Text.Format (interface) ======

===== Description =====

%%The look and layout of the text%%

%%The text format can affect the geometry of the text object, as well as how characters are presented.%%

//Since 1.20//

{{page>:develop:api-include:efl:text:format:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:text:format:property:ellipsis|ellipsis]]** //**(get, set)**//\\
> %%Ellipsis value (number from -1.0 to 1.0)%%
<code c>
double efl_text_ellipsis_get(const Eo *obj);
void efl_text_ellipsis_set(Eo *obj, double value);
</code>
\\
**[[:develop:api:efl:text:format:property:halign|halign]]** //**(get, set)**//\\
> %%Horizontal alignment of text%%
<code c>
double efl_text_halign_get(const Eo *obj);
void efl_text_halign_set(Eo *obj, double value);
</code>
\\
**[[:develop:api:efl:text:format:property:halign_auto_type|halign_auto_type]]** //**(get, set)**//\\
> %%Horizontal alignment of text%%
<code c>
Efl_Text_Format_Horizontal_Alignment_Auto_Type efl_text_halign_auto_type_get(const Eo *obj);
void efl_text_halign_auto_type_set(Eo *obj, Efl_Text_Format_Horizontal_Alignment_Auto_Type value);
</code>
\\
**[[:develop:api:efl:text:format:property:linegap|linegap]]** //**(get, set)**//\\
> %%Minimal line gap (top and bottom) for each line in the text%%
<code c>
double efl_text_linegap_get(const Eo *obj);
void efl_text_linegap_set(Eo *obj, double value);
</code>
\\
**[[:develop:api:efl:text:format:property:linerelgap|linerelgap]]** //**(get, set)**//\\
> %%Relative line gap (top and bottom) for each line in the text%%
<code c>
double efl_text_linerelgap_get(const Eo *obj);
void efl_text_linerelgap_set(Eo *obj, double value);
</code>
\\
**[[:develop:api:efl:text:format:property:multiline|multiline]]** //**(get, set)**//\\
> %%Multiline is enabled or not%%
<code c>
Eina_Bool efl_text_multiline_get(const Eo *obj);
void efl_text_multiline_set(Eo *obj, Eina_Bool enabled);
</code>
\\
**[[:develop:api:efl:text:format:property:password|password]]** //**(get, set)**//\\
> %%Whether text is a password%%
<code c>
Eina_Bool efl_text_password_get(const Eo *obj);
void efl_text_password_set(Eo *obj, Eina_Bool enabled);
</code>
\\
**[[:develop:api:efl:text:format:property:replacement_char|replacement_char]]** //**(get, set)**//\\
> %%The character used to replace characters that can not be displayed%%
<code c>
const char *efl_text_replacement_char_get(const Eo *obj);
void efl_text_replacement_char_set(Eo *obj, const char *repch);
</code>
\\
**[[:develop:api:efl:text:format:property:tabstops|tabstops]]** //**(get, set)**//\\
> %%Tabstops value%%
<code c>
int efl_text_tabstops_get(const Eo *obj);
void efl_text_tabstops_set(Eo *obj, int value);
</code>
\\
**[[:develop:api:efl:text:format:property:valign|valign]]** //**(get, set)**//\\
> %%Vertical alignment of text%%
<code c>
double efl_text_valign_get(const Eo *obj);
void efl_text_valign_set(Eo *obj, double value);
</code>
\\
**[[:develop:api:efl:text:format:property:wrap|wrap]]** //**(get, set)**//\\
> %%Wrap mode for use in the text%%
<code c>
Efl_Text_Format_Wrap efl_text_wrap_get(const Eo *obj);
void efl_text_wrap_set(Eo *obj, Efl_Text_Format_Wrap wrap);
</code>
\\

===== Events =====

