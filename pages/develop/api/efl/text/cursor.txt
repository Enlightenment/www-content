~~Title: Efl.Text.Cursor~~
====== Efl.Text.Cursor (interface) ======

===== Description =====

%%Cursor API%%

//Since 1.20//

{{page>:develop:api-include:efl:text:cursor:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:efl:text:cursor:property:cursor|cursor]]** //**(get)**//\\
> %%The object's main cursor.%%
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_get(const Eo *obj, Efl_Text_Cursor_Cursor_Get_Type get_type);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_char_delete|cursor_char_delete]]**\\
> %%Deletes a single character from position pointed by given cursor.%%
<code c>
void efl_text_cursor_char_delete(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_char_next|cursor_char_next]]**\\
> %%Advances to the next character%%
<code c>
void efl_text_cursor_char_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_char_prev|cursor_char_prev]]**\\
> %%Advances to the previous character%%
<code c>
void efl_text_cursor_char_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_compare|cursor_compare]]**\\
> %%Compare two cursors%%
<code c>
int efl_text_cursor_compare(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>
\\
**[[:develop:api:efl:text:cursor:property:cursor_content|cursor_content]]** //**(get)**//\\
> %%The content of the cursor (the character under the cursor)%%
<code c>
Eina_Unicode efl_text_cursor_content_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_coord_set|cursor_coord_set]]**\\
> %%Set cursor coordinates%%
<code c>
void efl_text_cursor_coord_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int x, int y);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_copy|cursor_copy]]**\\
> %%Copy existing cursor%%
<code c>
void efl_text_cursor_copy(Eo *obj, Efl_Text_Cursor_Cursor *dst, const Efl_Text_Cursor_Cursor *src);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_equal|cursor_equal]]**\\
> %%Check if two cursors are equal%%
<code c>
Eina_Bool efl_text_cursor_equal(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_free|cursor_free]]**\\
> %%Free existing cursor%%
<code c>
void efl_text_cursor_free(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:property:cursor_geometry|cursor_geometry]]** //**(get)**//\\
> %%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%%
<code c>
Eina_Bool efl_text_cursor_geometry_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur, Efl_Text_Cursor_Cursor_Type ctype, int *cx, int *cy, int *cw, int *ch, int *cx2, int *cy2, int *cw2, int *ch2);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_line_char_first|cursor_line_char_first]]**\\
> %%Advance to current line first character%%
<code c>
void efl_text_cursor_line_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_line_char_last|cursor_line_char_last]]**\\
> %%Advance to current line last character%%
<code c>
void efl_text_cursor_line_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_line_jump_by|cursor_line_jump_by]]**\\
> %%Jump the cursor by the given number of lines%%
<code c>
void efl_text_cursor_line_jump_by(Eo *obj, Efl_Text_Cursor_Cursor *cur, int by);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_new|cursor_new]]**\\
> %%Create new cursor%%
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_new(Eo *obj);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]**\\
> %%Advances to the first character in this paragraph%%
<code c>
void efl_text_cursor_paragraph_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]**\\
> %%Advances to the last character in this paragraph%%
<code c>
void efl_text_cursor_paragraph_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_paragraph_first|cursor_paragraph_first]]**\\
> %%Advance to current paragraph first character%%
<code c>
void efl_text_cursor_paragraph_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_paragraph_last|cursor_paragraph_last]]**\\
> %%Advance to current paragraph last character%%
<code c>
void efl_text_cursor_paragraph_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_paragraph_next|cursor_paragraph_next]]**\\
> %%Advances to the start of the next text node%%
<code c>
void efl_text_cursor_paragraph_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_paragraph_prev|cursor_paragraph_prev]]**\\
> %%Advances to the end of the previous text node%%
<code c>
void efl_text_cursor_paragraph_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:property:cursor_position|cursor_position]]** //**(get, set)**//\\
> %%Cursor position%%
<code c>
int efl_text_cursor_position_get(const Eo *obj, Efl_Text_Cursor_Cursor *cur);
void efl_text_cursor_position_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int position);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_text_insert|cursor_text_insert]]**\\
> %%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%%
<code c>
int efl_text_cursor_text_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *text);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_word_end|cursor_word_end]]**\\
> %%Advance to current word end%%
<code c>
void efl_text_cursor_word_end(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\
**[[:develop:api:efl:text:cursor:method:cursor_word_start|cursor_word_start]]**\\
> %%Advance to current word start%%
<code c>
void efl_text_cursor_word_start(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>
\\

===== Events =====

