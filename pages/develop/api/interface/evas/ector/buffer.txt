~~Title: Evas.Ector.Buffer~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    evas_ector_buffer [fillcolor = "dodgerblue4", label = "Evas.Ector.Buffer", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:evas:ector:buffer|Evas.Ector.Buffer]] //(interface)//**

===== Description =====

%%Binding layer between ector buffers and evas images.%%

%%Subclasses implement support for RGBA_Image for SW & GL, and Evas_GL_Image for GL.%%

<note>
%%Internal class, not API stable.%%
</note>

{{page>:develop:api:user:interface:evas:ector:buffer:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:evas:ector:buffer:method:drawable_image_get|drawable_image_get]]**
<code c>
void *evas_ector_buffer_drawable_image_get(Eo *obj);
</code>

%%Fetch an engine image from this ector buffer as a drawable.%%\\ 
\\ 
**[[:develop:api:interface:evas:ector:buffer:method:engine_image_release|engine_image_release]]**
<code c>
Eina_Bool evas_ector_buffer_engine_image_release(Eo *obj, void *image);
</code>

%%Release an image from %%[[:develop:api:interface:evas:ector:buffer:method:drawable_image_get|Evas.Ector.Buffer.drawable_image_get]]%% or %%[[:develop:api:interface:evas:ector:buffer:method:render_image_get|Evas.Ector.Buffer.render_image_get]]%%.%%\\ 
\\ 
**[[:develop:api:interface:evas:ector:buffer:method:engine_image_set|engine_image_set]]**
<code c>
void evas_ector_buffer_engine_image_set(Eo *obj, void *engine, void *image);
</code>

%%Attach this ector buffer to an existing engine image.%%\\ 
\\ 
**[[:develop:api:interface:evas:ector:buffer:method:render_image_get|render_image_get]]**
<code c>
void *evas_ector_buffer_render_image_get(Eo *obj);
</code>

%%Fetch an engine image from this ector buffer as a render target.%%\\ 
\\ 

