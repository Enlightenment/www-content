<title>Elm.Interface.Fileselector</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_interface_fileselector [fillcolor = "dodgerblue4", label = "Elm.Interface.Fileselector", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:elm:interface:fileselector|Elm.Interface.Fileselector]] //(interface)//**

===== Description =====

%%Elementary fileselector interface%%

{{page>:develop:user:interface:elm:interface:fileselector:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:elm:interface:fileselector:method:custom_filter_append|custom_filter_append]]**
<code c>
Eina_Bool elm_interface_fileselector_custom_filter_append(Eo *obj, Elm_Fileselector_Filter_Func func, void *data, const char *filter_name);
</code>

%%Append custom filter into filter list%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:method:filters_clear|filters_clear]]**
<code c>
void elm_interface_fileselector_filters_clear(Eo *obj);
</code>

%%Clear all filters registered%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:method:mime_types_filter_append|mime_types_filter_append]]**
<code c>
Eina_Bool elm_interface_fileselector_mime_types_filter_append(Eo *obj, const char *mime_types, const char *filter_name);
</code>

%%Append mime type based filter into filter list%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:method:selected_model_get|selected_model_get]]**
<code c>
Efl_Model *elm_interface_fileselector_selected_model_get(Eo *obj);
</code>

%%Get the currently selected item's model, in the given file the given file selector widget%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:method:selected_model_set|selected_model_set]]**
<code c>
Efl_Future *elm_interface_fileselector_selected_model_set(Eo *obj, Efl_Model *model);
</code>

%%Set, programmatically, the currently selected file/directory in the given file selector widget%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:current_name|current_name]]** //**(get, set)**//
<code c>
const char *elm_interface_fileselector_current_name_get(const Eo *obj);
void elm_interface_fileselector_current_name_set(Eo *obj, const char *name);
</code>

%%Current name property%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:expandable|expandable]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_fileselector_expandable_get(const Eo *obj);
void elm_interface_fileselector_expandable_set(Eo *obj, Eina_Bool expand);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:folder_only|folder_only]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_fileselector_folder_only_get(const Eo *obj);
void elm_interface_fileselector_folder_only_set(Eo *obj, Eina_Bool only);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:hidden_visible|hidden_visible]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_fileselector_hidden_visible_get(const Eo *obj);
void elm_interface_fileselector_hidden_visible_set(Eo *obj, Eina_Bool hidden);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:is_save|is_save]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_fileselector_is_save_get(const Eo *obj);
void elm_interface_fileselector_is_save_set(Eo *obj, Eina_Bool is_save);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:model|model]]** //**(get, set)**//
<code c>
Efl_Model *elm_interface_fileselector_model_get(const Eo *obj);
void elm_interface_fileselector_model_set(Eo *obj, Efl_Model *model);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:mode|mode]]** //**(get, set)**//
<code c>
Elm_Fileselector_Mode elm_interface_fileselector_mode_get(const Eo *obj);
void elm_interface_fileselector_mode_set(Eo *obj, Elm_Fileselector_Mode mode);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:multi_select|multi_select]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_fileselector_multi_select_get(const Eo *obj);
void elm_interface_fileselector_multi_select_set(Eo *obj, Eina_Bool multi);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:selected_models|selected_models]]** //**(get)**//
<code c>
const Eina_List *elm_interface_fileselector_selected_models_get(const Eo *obj);
</code>

%%Get a list of models selected in the fileselector.%%\\ 
\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:sort_method|sort_method]]** //**(get, set)**//
<code c>
Elm_Fileselector_Sort elm_interface_fileselector_sort_method_get(const Eo *obj);
void elm_interface_fileselector_sort_method_set(Eo *obj, Elm_Fileselector_Sort sort);
</code>

\\ 
**[[:develop:api:interface:elm:interface:fileselector:property:thumbnail_size|thumbnail_size]]** //**(get, set)**//
<code c>
void elm_interface_fileselector_thumbnail_size_get(const Eo *obj, int *w, int *h);
void elm_interface_fileselector_thumbnail_size_set(Eo *obj, int w, int h);
</code>

\\ 

