<title>Efl.Net.Dialer</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_dialer [fillcolor = "dodgerblue4", label = "Efl.Net.Dialer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_net_socket [fillcolor = "gray15", label = "Efl.Net.Socket", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_reader [fillcolor = "gray15", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_writer [fillcolor = "gray15", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_io_closer [fillcolor = "gray15", label = "Efl.Io.Closer", color = "deepskyblue", fontcolor = "white", style = "filled"]

    efl_net_dialer -> efl_net_socket
    efl_net_socket -> efl_io_reader
    efl_net_socket -> efl_io_writer
    efl_net_socket -> efl_io_closer
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:net:dialer|Efl.Net.Dialer]] //(interface)//**
    * [[:develop:api:interface:efl:net:socket|Efl.Net.Socket]] //(interface)//
      * [[:develop:api:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//
      * [[:develop:api:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//
      * [[:develop:api:mixin:efl:io:closer|Efl.Io.Closer]] //(mixin)//

===== Description =====

%%Creates a client socket to reach a remote peer.%%

%%The connection process starts when %%[[:develop:api:interface:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%% is executed, this allows implementations to request more complex setup that would require a live object handle that is not possible during construction.%%

%%The socket should be considered connected and ready to use only when "connected" event is dispatched, by then %%[[:develop:api:interface:efl:io:reader:property:can_read|Efl.Io.Reader.can_read]]%% and %%[[:develop:api:interface:efl:io:writer:property:can_write|Efl.Io.Writer.can_write]]%% should change accordingly.%%

%%Once the socket is closed, %%[[:develop:api:mixin:efl:io:closer:property:closed|Efl.Io.Closer.closed]]%% will be called and the "closed" event is dispatched.%%

//Since 1.19//

{{page>:develop:api:user:interface:efl:net:dialer:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:net:dialer:method:dial|dial]]**
<code c>
Eina_Error efl_net_dialer_dial(Eo *obj, const char *address);
</code>

%%Dials to the remote peer.%%\\ 
\\ 
**[[:develop:api:interface:efl:net:dialer:property:address_dial|address_dial]]** //**(get, set)**// ''protected set''
<code c>
const char *efl_net_dialer_address_dial_get(const Eo *obj);
void efl_net_dialer_address_dial_set(Eo *obj, const char *address);
</code>

%%Returns the address given to %%[[:develop:api:interface:efl:net:dialer:method:dial|Efl.Net.Dialer.dial]]%%.%%\\ 
\\ 
**[[:develop:api:interface:efl:net:dialer:property:connected|connected]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_net_dialer_connected_get(const Eo *obj);
void efl_net_dialer_connected_set(Eo *obj, Eina_Bool connected);
</code>

%%Returns whenever the socket is connected or not.%%\\ 
\\ 
**[[:develop:api:interface:efl:net:dialer:property:proxy|proxy]]** //**(get, set)**//
<code c>
const char *efl_net_dialer_proxy_get(const Eo *obj);
void efl_net_dialer_proxy_set(Eo *obj, const char *proxy_url);
</code>

%%Controls/retrieves if the dialer should use a proxy.%%\\ 
\\ 
**[[:develop:api:interface:efl:net:dialer:property:timeout_dial|timeout_dial]]** //**(get, set)**//
<code c>
double efl_net_dialer_timeout_dial_get(const Eo *obj);
void efl_net_dialer_timeout_dial_set(Eo *obj, double seconds);
</code>

%%The timeout in seconds to use for dialing/connecting.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:interface:efl:io:reader:method:read|read]]**
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>

%%Reads data into a pre-allocated buffer.%%\\ 
\\ 
[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:interface:efl:io:reader:property:can_read|can_read]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>

%%If %%''true''%% will notify %%[[:develop:api:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%\\ 
\\ 
[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:interface:efl:io:reader:property:eos|eos]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>

%%If %%''true''%% will notify end of stream.%%\\ 
\\ 
[[:develop:api:interface:efl:io:writer|Efl.Io.Writer]].**[[:develop:api:interface:efl:io:writer:method:write|write]]**
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>

%%Writes data from a pre-populated buffer.%%\\ 
\\ 
[[:develop:api:interface:efl:io:writer|Efl.Io.Writer]].**[[:develop:api:interface:efl:io:writer:property:can_write|can_write]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>

%%If %%''true''%% will notify %%[[:develop:api:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%\\ 
\\ 
[[:develop:api:interface:efl:net:socket|Efl.Net.Socket]].**[[:develop:api:interface:efl:net:socket:property:address_local|address_local]]** //**(get, set)**// ''protected set''
<code c>
const char *efl_net_socket_address_local_get(const Eo *obj);
void efl_net_socket_address_local_set(Eo *obj, const char *address);
</code>

%%The local address, similar to getsockname().%%\\ 
\\ 
[[:develop:api:interface:efl:net:socket|Efl.Net.Socket]].**[[:develop:api:interface:efl:net:socket:property:address_remote|address_remote]]** //**(get, set)**// ''protected set''
<code c>
const char *efl_net_socket_address_remote_get(const Eo *obj);
void efl_net_socket_address_remote_set(Eo *obj, const char *address);
</code>

%%The remote address, similar to getpeername().%%\\ 
\\ 
[[:develop:api:mixin:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:mixin:efl:io:closer:method:close|close]]**
<code c>
Eina_Error efl_io_closer_close(Eo *obj);
</code>

%%Closes the Input/Output object.%%\\ 
\\ 
[[:develop:api:mixin:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:mixin:efl:io:closer:property:close_on_destructor|close_on_destructor]]** //**(get, set)**//
<code c>
Eina_Bool efl_io_closer_close_on_destructor_get(const Eo *obj);
void efl_io_closer_close_on_destructor_set(Eo *obj, Eina_Bool close_on_destructor);
</code>

%%If true will automatically close() on object destructor.%%\\ 
\\ 
[[:develop:api:mixin:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:mixin:efl:io:closer:property:close_on_exec|close_on_exec]]** //**(get, set)**//
<code c>
Eina_Bool efl_io_closer_close_on_exec_get(const Eo *obj);
Eina_Bool efl_io_closer_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>

%%If true will automatically close resources on exec() calls.%%\\ 
\\ 
[[:develop:api:mixin:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:mixin:efl:io:closer:property:closed|closed]]** //**(get, set)**//
<code c>
Eina_Bool efl_io_closer_closed_get(const Eo *obj);
Eina_Bool efl_io_closer_closed_set(Eo *obj, Eina_Bool is_closed);
</code>

%%If true will notify object was closed.%%\\ 
\\ 

===== Events =====

**[[:develop:api:interface:efl:net:dialer:event:connected|connected]]**
<code c>
EFL_NET_DIALER_EVENT_CONNECTED(void)
</code>

%%Notifies the socket is connected to the remote peer.%%\\ 
\\ 
**[[:develop:api:interface:efl:net:dialer:event:error|error]]**
<code c>
EFL_NET_DIALER_EVENT_ERROR(Eina_Error)
</code>

%%Some error happened and the socket stopped working.%%\\ 
\\ 
**[[:develop:api:interface:efl:net:dialer:event:resolved|resolved]]**
<code c>
EFL_NET_DIALER_EVENT_RESOLVED(const char *)
</code>

%%Notifies %%[[:develop:api:interface:efl:net:dialer:property:address_dial|Efl.Net.Dialer.address_dial]]%% was resolved to %%[[:develop:api:interface:efl:net:socket:property:address_remote|Efl.Net.Socket.address_remote]]%%.%%\\ 
\\ 
==== Inherited ====

[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:interface:efl:io:reader:event:can_read_changed|can_read,changed]]**
<code c>
EFL_IO_READER_EVENT_CAN_READ_CHANGED(void)
</code>

%%Notifies can_read property changed.%%\\ 
\\ 
[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]].**[[:develop:api:interface:efl:io:reader:event:eos|eos]]**
<code c>
EFL_IO_READER_EVENT_EOS(void)
</code>

%%Notifies end of stream, when property is marked as true.%%\\ 
\\ 
[[:develop:api:interface:efl:io:writer|Efl.Io.Writer]].**[[:develop:api:interface:efl:io:writer:event:can_write_changed|can_write,changed]]**
<code c>
EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED(void)
</code>

%%Notifies can_write property changed.%%\\ 
\\ 
[[:develop:api:mixin:efl:io:closer|Efl.Io.Closer]].**[[:develop:api:mixin:efl:io:closer:event:closed|closed]]**
<code c>
EFL_IO_CLOSER_EVENT_CLOSED(void)
</code>

%%Notifies closed, when property is marked as true%%\\ 
\\ 
