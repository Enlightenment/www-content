<title>Efl.Access.Selection</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_access_selection [fillcolor = "dodgerblue4", label = "Efl.Access.Selection", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:access:selection|Efl.Access.Selection]] //(interface)//**

===== Description =====

%%Elementary access selection interface%%

{{page>:develop:api:user:interface:efl:access:selection:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:access:selection:method:all_children_select|all_children_select]]** ''protected''
<code c>
Eina_Bool efl_access_selection_all_children_select(Eo *obj);
</code>

%%Adds selection for all children%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:method:child_deselect|child_deselect]]** ''protected''
<code c>
Eina_Bool efl_access_selection_child_deselect(Eo *obj, int child_index);
</code>

%%Removes selection for given child index%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:method:child_select|child_select]]** ''protected''
<code c>
Eina_Bool efl_access_selection_child_select(Eo *obj, int child_index);
</code>

%%Adds selection for given child index%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:method:clear|clear]]** ''protected''
<code c>
Eina_Bool efl_access_selection_clear(Eo *obj);
</code>

%%Clears the current selection%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:method:is_child_selected|is_child_selected]]** ''protected''
<code c>
Eina_Bool efl_access_selection_is_child_selected(Eo *obj, int child_index);
</code>

%%Determines if child specified by index is selected%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:method:selected_child_deselect|selected_child_deselect]]** ''protected''
<code c>
Eina_Bool efl_access_selection_selected_child_deselect(Eo *obj, int child_index);
</code>

%%Removes selection for given child index%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:property:selected_children_count|selected_children_count]]** //**(get)**// ''protected''
<code c>
int efl_access_selection_selected_children_count_get(const Eo *obj);
</code>

%%Gets the number of currently selected children%%\\ 
\\ 
**[[:develop:api:interface:efl:access:selection:property:selected_child|selected_child]]** //**(get)**// ''protected''
<code c>
Efl_Object *efl_access_selection_selected_child_get(const Eo *obj, int selected_child_index);
</code>

%%Gets child for given child index%%\\ 
\\ 

===== Events =====

**[[:develop:api:interface:efl:access:selection:event:selection_changed|selection,changed]]**
<code c>
EFL_ACCESS_SELECTION_EVENT_SELECTION_CHANGED(void)
</code>

%%Called when selection has been changed.%%\\ 
\\ 
