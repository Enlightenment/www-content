<title>Efl.Io.Writer</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_io_writer [fillcolor = "dodgerblue4", label = "Efl.Io.Writer", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:io:writer|Efl.Io.Writer]] //(interface)//**

===== Description =====

%%Generic interface for objects that can write data from a provided memory.%%

%%This interface allows external objects to transparently write data to this object and be notified if more data can be written or it's topped capacity.%%

%%Calls to %%[[:develop:api:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%%() may or may not block, that's not up to this interface to specify. The user can check with event "can_write,changed" or property %%[[:develop:api:interface:efl:io:writer:property:can_write|Efl.Io.Writer.can_write]]%% to known whenever a write could push more data.%%

//Since 1.19//

{{page>:develop:api:user:interface:efl:io:writer:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:io:writer:method:write|write]]**
<code c>
Eina_Error efl_io_writer_write(Eo *obj, Eina_Slice slice, Eina_Slice *remaining);
</code>

%%Writes data from a pre-populated buffer.%%\\ 
\\ 
**[[:develop:api:interface:efl:io:writer:property:can_write|can_write]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_io_writer_can_write_get(const Eo *obj);
void efl_io_writer_can_write_set(Eo *obj, Eina_Bool can_write);
</code>

%%If %%''true''%% will notify %%[[:develop:api:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% can be called without blocking or failing.%%\\ 
\\ 

===== Events =====

**[[:develop:api:interface:efl:io:writer:event:can_write_changed|can_write,changed]]**
<code c>
EFL_IO_WRITER_EVENT_CAN_WRITE_CHANGED(void)
</code>

%%Notifies can_write property changed.%%\\ 
\\ 
