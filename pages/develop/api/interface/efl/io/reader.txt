<title>Efl.Io.Reader</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_io_reader [fillcolor = "dodgerblue4", label = "Efl.Io.Reader", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:io:reader|Efl.Io.Reader]] //(interface)//**

===== Description =====

%%Generic interface for objects that can read data into a provided memory.%%

%%This interface allows external objects to transparently monitor for new data and as it to be read into a provided memory slice.%%

%%Calls to %%[[:develop:api:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% may or may not block, that's not up to this interface to specify. The user can check based on %%[[:develop:api:interface:efl:io:reader:property:eos|Efl.Io.Reader.eos]]%% property and signal if the stream reached an end, with event "can_read,changed" or property %%[[:develop:api:interface:efl:io:reader:property:can_read|Efl.Io.Reader.can_read]]%% to known whenever a read would have data to return.%%

//Since 1.19//

{{page>:develop:api:user:interface:efl:io:reader:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:io:reader:method:read|read]]**
<code c>
Eina_Error efl_io_reader_read(Eo *obj, Eina_Rw_Slice rw_slice);
</code>

%%Reads data into a pre-allocated buffer.%%\\ 
\\ 
**[[:develop:api:interface:efl:io:reader:property:can_read|can_read]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_io_reader_can_read_get(const Eo *obj);
void efl_io_reader_can_read_set(Eo *obj, Eina_Bool can_read);
</code>

%%If %%''true''%% will notify %%[[:develop:api:interface:efl:io:reader:method:read|Efl.Io.Reader.read]]%% can be called without blocking or failing.%%\\ 
\\ 
**[[:develop:api:interface:efl:io:reader:property:eos|eos]]** //**(get, set)**// ''protected set''
<code c>
Eina_Bool efl_io_reader_eos_get(const Eo *obj);
void efl_io_reader_eos_set(Eo *obj, Eina_Bool is_eos);
</code>

%%If %%''true''%% will notify end of stream.%%\\ 
\\ 

===== Events =====

**[[:develop:api:interface:efl:io:reader:event:can_read_changed|can_read,changed]]**
<code c>
EFL_IO_READER_EVENT_CAN_READ_CHANGED(void)
</code>

%%Notifies can_read property changed.%%\\ 
\\ 
**[[:develop:api:interface:efl:io:reader:event:eos|eos]]**
<code c>
EFL_IO_READER_EVENT_EOS(void)
</code>

%%Notifies end of stream, when property is marked as true.%%\\ 
\\ 
