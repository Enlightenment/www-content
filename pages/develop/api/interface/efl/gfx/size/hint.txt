~~Title: Efl.Gfx.Size.Hint~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_gfx_size_hint [fillcolor = "dodgerblue4", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//**

===== Description =====

%%Efl graphics size hint interface%%

{{page>:develop:api:user:interface:efl:gfx:size:hint:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:gfx:size:hint:property:hint_align|hint_align]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_aspect|hint_aspect]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, Eina_Size2D *sz);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, Eina_Size2D sz);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_base_get(const Eo *obj);
void efl_gfx_size_hint_base_set(Eo *obj, Eina_Size2D sz);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_combined_min|hint_combined_min]]** //**(get)**//
<code c>
Eina_Size2D efl_gfx_size_hint_combined_min_get(const Eo *obj);
</code>

%%Read-only minimum size combining both %%[[:develop:api:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:api:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_margin|hint_margin]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_max|hint_max]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_max_get(const Eo *obj);
void efl_gfx_size_hint_max_set(Eo *obj, Eina_Size2D sz);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_min|hint_min]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_min_get(const Eo *obj);
void efl_gfx_size_hint_min_set(Eo *obj, Eina_Size2D sz);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// ''protected set''
<code c>
Eina_Size2D efl_gfx_size_hint_restricted_min_get(const Eo *obj);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, Eina_Size2D sz);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_step_get(const Eo *obj);
void efl_gfx_size_hint_step_set(Eo *obj, Eina_Size2D sz);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:size:hint:property:hint_weight|hint_weight]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 

===== Events =====

**[[:develop:api:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
