<title>Efl.Gfx.Filter</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_gfx_filter [fillcolor = "dodgerblue4", label = "Efl.Gfx.Filter", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:gfx:filter|Efl.Gfx.Filter]] //(interface)//**

===== Description =====

%%Graphical filters can be applied to any object implementing this interface.%%

%%Filters are programmable effects that run whenever the object is rendered on its canvas. The program language is Lua and a complete reference can be found under "EFL Graphics Filters".%%

%%This was a beta feature since 1.15.%%

//Since 1.18//

{{page>:develop:api:user:interface:efl:gfx:filter:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:gfx:filter:property:filter_data|filter_data]]** //**(get, set)**//
<code c>
void efl_gfx_filter_data_get(const Eo *obj, const char *name, const char **value, Eina_Bool *execute);
void efl_gfx_filter_data_set(Eo *obj, const char *name, const char *value, Eina_Bool execute);
</code>

%%Extra data used by the filter program.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:filter:property:filter_padding|filter_padding]]** //**(get)**//
<code c>
void efl_gfx_filter_padding_get(const Eo *obj, int *l, int *r, int *t, int *b);
</code>

%%Required padding to apply this filter without cropping.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:filter:property:filter_program|filter_program]]** //**(get, set)**//
<code c>
void efl_gfx_filter_program_get(const Eo *obj, const char **code, const char **name);
void efl_gfx_filter_program_set(Eo *obj, const char *code, const char *name);
</code>

\\ 
**[[:develop:api:interface:efl:gfx:filter:property:filter_source|filter_source]]** //**(get, set)**//
<code c>
Efl_Gfx *efl_gfx_filter_source_get(const Eo *obj, const char *name);
void efl_gfx_filter_source_set(Eo *obj, const char *name, Efl_Gfx *source);
</code>

%%Bind an object to use as a mask or texture in a filter program.%%\\ 
\\ 
**[[:develop:api:interface:efl:gfx:filter:property:filter_state|filter_state]]** //**(get, set)**//
<code c>
void efl_gfx_filter_state_get(const Eo *obj, const char **cur_state, double *cur_val, const char **next_state, double *next_val, double *pos);
void efl_gfx_filter_state_set(Eo *obj, const char *cur_state, double cur_val, const char *next_state, double next_val, double pos);
</code>

%%Set the current state of the filter.%%\\ 
\\ 

