~~Title: Efl.Ui.Focus.Manager~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_ui_focus_manager [fillcolor = "dodgerblue4", label = "Efl.Ui.Focus.Manager", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(interface)//**

===== Description =====

%%Calculates the directions of Efl.Ui.Focus.Direction%%

%%Each registered item will get a other registered object into each direction, you can get those items for the currently focused item if you call request move.%%

//Since 1.20//

{{page>:develop:api:user:interface:efl:ui:focus:manager:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:ui:focus:manager:method:fetch|fetch]]**
<code c>
Efl_Ui_Focus_Relations *efl_ui_focus_manager_fetch(Eo *obj, Efl_Ui_Focus_Object *child);
</code>

%%This will fetch the data from a registered node.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:method:logical_end|logical_end]]**
<code c>
Efl_Ui_Focus_Manager_Logical_End_Detail efl_ui_focus_manager_logical_end(Eo *obj);
</code>

%%Return the last logical object.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:method:move|move]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>

%%Move the focus into the given direction.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:method:pop_history_stack|pop_history_stack]]**
<code c>
void efl_ui_focus_manager_pop_history_stack(Eo *obj);
</code>

%%Removes the most upper history element, and gives the focus to the next one below%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:method:request_move|request_move]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>

%%Returns the object which would be the next object to focus in the given direction.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:method:request_subchild|request_subchild]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_subchild(Eo *obj, Efl_Ui_Focus_Object *child);
</code>

%%Returns a widget that can receive focus%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:method:reset_history|reset_history]]**
<code c>
void efl_ui_focus_manager_reset_history(Eo *obj);
</code>

%%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:property:border_elements|border_elements]]** //**(get)**//
<code c>
Eina_Iterator *efl_ui_focus_manager_border_elements_get(const Eo *obj);
</code>

%%The list of elements which are at the border of the graph.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:property:focus|focus]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_focus_get(const Eo *obj);
void efl_ui_focus_manager_focus_set(Eo *obj, Efl_Ui_Focus_Object *focus);
</code>

%%The element which is currently focused by this manager%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Manager *efl_ui_focus_manager_redirect_get(const Eo *obj);
void efl_ui_focus_manager_redirect_set(Eo *obj, Efl_Ui_Focus_Manager *redirect);
</code>

%%Add a another manager to serve the move requests.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:property:root|root]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_root_get(const Eo *obj);
Eina_Bool efl_ui_focus_manager_root_set(Eo *obj, Efl_Ui_Focus_Object *root);
</code>

%%Root node for all logical subtrees.%%\\ 
\\ 

===== Events =====

**[[:develop:api:interface:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_COORDS_DIRTY(void)
</code>

%%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:event:flush_pre|flush,pre]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FLUSH_PRE(void)
</code>

%%Emitted once the graph calculationg will be performed%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:event:focused|focused]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FOCUSED(Efl_Ui_Focus_Object *)
</code>

%%Emitted if the manager has focused an object, the passed focus object is the last focused object%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_REDIRECT_CHANGED(Efl_Ui_Focus_Manager *)
</code>

%%Emitted when the redirect object has changed, the old manager is passed as event info%%\\ 
\\ 
