<title>Efl.Ui.Text.Interactive</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_ui_text_interactive [fillcolor = "dodgerblue4", label = "Efl.Ui.Text.Interactive", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text [fillcolor = "gray15", label = "Efl.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_font [fillcolor = "gray15", label = "Efl.Text.Font", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_format [fillcolor = "gray15", label = "Efl.Text.Format", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_style [fillcolor = "gray15", label = "Efl.Text.Style", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_ui_text_interactive -> efl_text
    efl_ui_text_interactive -> efl_text_font
    efl_ui_text_interactive -> efl_text_format
    efl_ui_text_interactive -> efl_text_style
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]] //(interface)//**
    * [[:develop:api:interface:efl:text|Efl.Text]] //(interface)//
    * [[:develop:api:interface:efl:text:font|Efl.Text.Font]] //(interface)//
    * [[:develop:api:interface:efl:text:format|Efl.Text.Format]] //(interface)//
    * [[:develop:api:interface:efl:text:style|Efl.Text.Style]] //(interface)//

===== Description =====

%%This is an interface interactive text inputs should implement%%

{{page>:develop:user:interface:efl:ui:text:interactive:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:ui:text:interactive:property:editable|editable]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_interactive_editable_get(const Eo *obj);
void efl_ui_text_interactive_editable_set(Eo *obj, Eina_Bool editable);
</code>

%%Whether the entry is editable.%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:text:interactive:property:selection_allowed|selection_allowed]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_interactive_selection_allowed_get(const Eo *obj);
void efl_ui_text_interactive_selection_allowed_set(Eo *obj, Eina_Bool allowed);
</code>

%%Whether or not selection is allowed on this object%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:text:interactive:property:selection_cursors|selection_cursors]]** //**(get)**//
<code c>
void efl_ui_text_interactive_selection_cursors_get(const Eo *obj, Efl_Text_Cursor_Cursor **start, Efl_Text_Cursor_Cursor **end);
</code>

%%The cursors used for selection handling.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_bitmap_scalable|font_bitmap_scalable]]** //**(get, set)**//
<code c>
Efl_Text_Font_Bitmap_Scalable efl_text_font_bitmap_scalable_get(const Eo *obj);
void efl_text_font_bitmap_scalable_set(Eo *obj, Efl_Text_Font_Bitmap_Scalable scalable);
</code>

%%The bitmap fonts have fixed size glyphs for several available sizes. Basically, it is not scalable. But, it needs to be scalable for some use cases. (ex. colorful emoji fonts)%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_fallbacks|font_fallbacks]]** //**(get, set)**//
<code c>
const char *efl_text_font_fallbacks_get(const Eo *obj);
void efl_text_font_fallbacks_set(Eo *obj, const char *font_fallbacks);
</code>

%%Comma-separated list of font fallbacks%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_lang|font_lang]]** //**(get, set)**//
<code c>
const char *efl_text_font_lang_get(const Eo *obj);
void efl_text_font_lang_set(Eo *obj, const char *lang);
</code>

%%Specific language of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_slant|font_slant]]** //**(get, set)**//
<code c>
Efl_Text_Font_Slant efl_text_font_slant_get(const Eo *obj);
void efl_text_font_slant_set(Eo *obj, Efl_Text_Font_Slant style);
</code>

%%Type of slant of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_source|font_source]]** //**(get, set)**//
<code c>
const char *efl_text_font_source_get(const Eo *obj);
void efl_text_font_source_set(Eo *obj, const char *font_source);
</code>

%%The source that will be used to lookup the font of the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_weight|font_weight]]** //**(get, set)**//
<code c>
Efl_Text_Font_Weight efl_text_font_weight_get(const Eo *obj);
void efl_text_font_weight_set(Eo *obj, Efl_Text_Font_Weight font_weight);
</code>

%%Type of weight of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font_width|font_width]]** //**(get, set)**//
<code c>
Efl_Text_Font_Width efl_text_font_width_get(const Eo *obj);
void efl_text_font_width_set(Eo *obj, Efl_Text_Font_Width width);
</code>

%%Type of width of the displayed font%%\\ 
\\ 
[[:develop:api:interface:efl:text:font|Efl.Text.Font]].**[[:develop:api:interface:efl:text:font:property:font|font]]** //**(get, set)**//
<code c>
void efl_text_font_get(const Eo *obj, const char **font, int *size);
void efl_text_font_set(Eo *obj, const char *font, int size);
</code>

%%The font name and size that is used for the displayed text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:ellipsis|ellipsis]]** //**(get, set)**//
<code c>
double efl_text_ellipsis_get(const Eo *obj);
void efl_text_ellipsis_set(Eo *obj, double value);
</code>

%%Ellipsis value (number from -1.0 to 1.0)%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:halign|halign]]** //**(get, set)**//
<code c>
Efl_Text_Format_Horizontal_Alignment_Type efl_text_halign_get(const Eo *obj);
void efl_text_halign_set(Eo *obj, Efl_Text_Format_Horizontal_Alignment_Type value);
</code>

%%Horizontal alignment of text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:linegap|linegap]]** //**(get, set)**//
<code c>
double efl_text_linegap_get(const Eo *obj);
void efl_text_linegap_set(Eo *obj, double value);
</code>

%%Minimal line gap (top and bottom) for each line in the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:linerelgap|linerelgap]]** //**(get, set)**//
<code c>
double efl_text_linerelgap_get(const Eo *obj);
void efl_text_linerelgap_set(Eo *obj, double value);
</code>

%%Relative line gap (top and bottom) for each line in the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:multiline|multiline]]** //**(get, set)**//
<code c>
Eina_Bool efl_text_multiline_get(const Eo *obj);
void efl_text_multiline_set(Eo *obj, Eina_Bool enabled);
</code>

%%Multiline is enabled or not%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:password|password]]** //**(get, set)**//
<code c>
Eina_Bool efl_text_password_get(const Eo *obj);
void efl_text_password_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether text is a password%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:replacement_char|replacement_char]]** //**(get, set)**//
<code c>
const char *efl_text_replacement_char_get(const Eo *obj);
void efl_text_replacement_char_set(Eo *obj, const char *repch);
</code>

%%The character used to replace characters that can not be displayed%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:tabstops|tabstops]]** //**(get, set)**//
<code c>
int efl_text_tabstops_get(const Eo *obj);
void efl_text_tabstops_set(Eo *obj, int value);
</code>

%%Tabstops value%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:valign|valign]]** //**(get, set)**//
<code c>
Efl_Text_Format_Vertical_Alignment_Type efl_text_valign_get(const Eo *obj);
void efl_text_valign_set(Eo *obj, Efl_Text_Format_Vertical_Alignment_Type value);
</code>

%%Vertical alignment of text%%\\ 
\\ 
[[:develop:api:interface:efl:text:format|Efl.Text.Format]].**[[:develop:api:interface:efl:text:format:property:wrap|wrap]]** //**(get, set)**//
<code c>
Efl_Text_Format_Wrap efl_text_wrap_get(const Eo *obj);
void efl_text_wrap_set(Eo *obj, Efl_Text_Format_Wrap wrap);
</code>

%%Wrap mode for use in the text%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:backing_color|backing_color]]** //**(get, set)**//
<code c>
void efl_text_backing_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_backing_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Backing color%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:backing_type|backing_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Backing_Type efl_text_backing_type_get(const Eo *obj);
void efl_text_backing_type_set(Eo *obj, Efl_Text_Style_Backing_Type type);
</code>

%%Enable or disable backing type%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:effect_type|effect_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Effect_Type efl_text_effect_type_get(const Eo *obj);
void efl_text_effect_type_set(Eo *obj, Efl_Text_Style_Effect_Type type);
</code>

%%Type of effect used for the displayed text%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:gfx_filter|gfx_filter]]** //**(get, set)**//
<code c>
const char *efl_text_gfx_filter_get(const Eo *obj);
void efl_text_gfx_filter_set(Eo *obj, const char *code);
</code>

%%Program that applies a special filter%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:glow2_color|glow2_color]]** //**(get, set)**//
<code c>
void efl_text_glow2_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_glow2_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Second color of the glow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:glow_color|glow_color]]** //**(get, set)**//
<code c>
void efl_text_glow_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_glow_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of glow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:normal_color|normal_color]]** //**(get, set)**//
<code c>
void efl_text_normal_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_normal_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of text, excluding style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:outline_color|outline_color]]** //**(get, set)**//
<code c>
void efl_text_outline_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_outline_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of outline effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:shadow_color|shadow_color]]** //**(get, set)**//
<code c>
void efl_text_shadow_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_shadow_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of shadow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:shadow_direction|shadow_direction]]** //**(get, set)**//
<code c>
Efl_Text_Style_Shadow_Direction efl_text_shadow_direction_get(const Eo *obj);
void efl_text_shadow_direction_set(Eo *obj, Efl_Text_Style_Shadow_Direction type);
</code>

%%Direction of shadow effect%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:strikethrough_color|strikethrough_color]]** //**(get, set)**//
<code c>
void efl_text_strikethrough_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_strikethrough_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of strikethrough_style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:strikethrough_type|strikethrough_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Strikethrough_Type efl_text_strikethrough_type_get(const Eo *obj);
void efl_text_strikethrough_type_set(Eo *obj, Efl_Text_Style_Strikethrough_Type type);
</code>

%%Type of strikethrough style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline2_color|underline2_color]]** //**(get, set)**//
<code c>
void efl_text_underline2_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_underline2_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of underline2 style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline2_type|underline2_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Underline_Type efl_text_underline2_type_get(const Eo *obj);
void efl_text_underline2_type_set(Eo *obj, Efl_Text_Style_Underline_Type type);
</code>

%%Type of underline2 style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline_color|underline_color]]** //**(get, set)**//
<code c>
void efl_text_underline_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_underline_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of normal underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline_dashed_color|underline_dashed_color]]** //**(get, set)**//
<code c>
void efl_text_underline_dashed_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_underline_dashed_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of dashed underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline_dashed_gap|underline_dashed_gap]]** //**(get, set)**//
<code c>
int efl_text_underline_dashed_gap_get(const Eo *obj);
void efl_text_underline_dashed_gap_set(Eo *obj, int gap);
</code>

%%Gap of dashed underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline_dashed_width|underline_dashed_width]]** //**(get, set)**//
<code c>
int efl_text_underline_dashed_width_get(const Eo *obj);
void efl_text_underline_dashed_width_set(Eo *obj, int width);
</code>

%%Width of dashed underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline_height|underline_height]]** //**(get, set)**//
<code c>
double efl_text_underline_height_get(const Eo *obj);
void efl_text_underline_height_set(Eo *obj, double height);
</code>

%%Height of underline style%%\\ 
\\ 
[[:develop:api:interface:efl:text:style|Efl.Text.Style]].**[[:develop:api:interface:efl:text:style:property:underline_type|underline_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Underline_Type efl_text_underline_type_get(const Eo *obj);
void efl_text_underline_type_set(Eo *obj, Efl_Text_Style_Underline_Type type);
</code>

%%Sets an underline style on the text%%\\ 
\\ 
[[:develop:api:interface:efl:text|Efl.Text]].**[[:develop:api:interface:efl:text:property:text|text]]** //**(get, set)**//
<code c>
const char *efl_text_get(const Eo *obj);
void efl_text_set(Eo *obj, const char *text);
</code>

\\ 

===== Events =====

**[[:develop:api:interface:efl:ui:text:interactive:event:changed_user|changed,user]]**
<code c>
EFL_UI_TEXT_INTERACTIVE_EVENT_CHANGED_USER(Efl_Ui_Text_Interactive_Change_Info)
</code>

%%The text object has changed due to user interaction%%\\ 
\\ 
**[[:develop:api:interface:efl:ui:text:interactive:event:selection_changed|selection,changed]]**
<code c>
EFL_UI_TEXT_INTERACTIVE_EVENT_SELECTION_CHANGED(void)
</code>

%%The selection on the object has changed. Query using %%[[:develop:api:interface:efl:ui:text:interactive:property:selection_cursors|Efl.Ui.Text.Interactive.selection_cursors]]%%%%\\ 
\\ 
