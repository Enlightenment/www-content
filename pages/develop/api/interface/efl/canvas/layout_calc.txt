<title>Efl.Canvas.Layout_Calc</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_canvas_layout_calc [fillcolor = "dodgerblue4", label = "Efl.Canvas.Layout_Calc", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]] //(interface)//**

===== Description =====

%%This interface defines a common set of APIs used to trigger calculations with layout objects.%%

%%This defines all the APIs supported by legacy "Edje" object, known in EO API as Efl.Canvas.Layout.%%

//Since 1.21//

{{page>:develop:user:interface:efl:canvas:layout_calc:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:canvas:layout_calc:method:calc_freeze|calc_freeze]]**
<code c>
int efl_canvas_layout_calc_freeze(Eo *obj);
</code>

%%Freezes the layout object.%%\\ 
\\ 
**[[:develop:api:interface:efl:canvas:layout_calc:method:calc_parts_extends|calc_parts_extends]]**
<code c>
Eina_Rect efl_canvas_layout_calc_parts_extends(Eo *obj);
</code>

%%Calculates the geometry of the region, relative to a given layout object's area, occupied by all parts in the object.%%\\ 
\\ 
**[[:develop:api:interface:efl:canvas:layout_calc:method:calc_size_min|calc_size_min]]**
<code c>
Eina_Size2D efl_canvas_layout_calc_size_min(Eo *obj, Eina_Size2D restricted);
</code>

%%Calculates the minimum required size for a given layout object.%%\\ 
\\ 
**[[:develop:api:interface:efl:canvas:layout_calc:method:calc_thaw|calc_thaw]]**
<code c>
int efl_canvas_layout_calc_thaw(Eo *obj);
</code>

%%Thaws the layout object.%%\\ 
\\ 
**[[:develop:api:interface:efl:canvas:layout_calc:property:calc_auto_update_hints|calc_auto_update_hints]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_layout_calc_auto_update_hints_get(const Eo *obj);
void efl_canvas_layout_calc_auto_update_hints_set(Eo *obj, Eina_Bool update);
</code>

%%Whether this object updates its size hints automatically.%%\\ 
\\ 
**[[:develop:api:interface:efl:canvas:layout_calc:method:calc_force|calc_force]]** ''protected''
<code c>
void efl_canvas_layout_calc_force(Eo *obj);
</code>

%%Forces a Size/Geometry calculation.%%\\ 
\\ 

