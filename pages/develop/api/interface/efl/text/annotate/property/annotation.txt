~~Title: Efl.Text.Annotate.annotation~~
===== Signature =====

<code>
@property annotation @pure_virtual {
    get {
        keys {
            annotation: ptr(Efl.Text.Annotate.Annotation);
        }
        values {
            format: free(string, free);
        }
    }
    set {
        keys {
            annotation: ptr(Efl.Text.Annotate.Annotation);
        }
        values {
            format: free(string, free);
        }
        return: bool;
    }
}
</code>

===== C signature =====

<code c>
const char *efl_text_annotation_get(const Eo *obj, Efl_Text_Annotate_Annotation *annotation);
Eina_Bool efl_text_annotation_set(Eo *obj, Efl_Text_Annotate_Annotation *annotation, const char *format);
</code>

===== Keys =====

  * **annotation** - %%Given annotation%%
===== Values =====

  * **format** - %%The new format for the given annotation%%
===== Description =====

%%A new format for %%''annotation''%%.%%

%%This will replace the format applied by %%''annotation''%% with %%''format''%%. Assumes that %%''annotation''%% is a handle for an existing annotation, i.e. one that was added using %%[[:develop:api:interface:efl:text:annotate:method:annotation_insert|Efl.Text.Annotate.annotation_insert]]%% to this object. Otherwise, this will fail and return %%''false''%%.%%

//Since 1.18//
{{page>:develop:api:user:interface:efl:text:annotate:property:annotation:description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Efl.Text.Annotate.annotation**

