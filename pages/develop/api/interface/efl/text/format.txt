~~Title: Efl.Text.Format~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_text_format [fillcolor = "dodgerblue4", label = "Efl.Text.Format", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:text:format|Efl.Text.Format]] //(interface)//**

===== Description =====

%%The look and layout of the text%%

%%The text format can affect the geometry of the text object, as well as how characters are presented.%%

//Since 1.20//

{{page>:develop:api:user:interface:efl:text:format:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:text:format:property:ellipsis|ellipsis]]** //**(get, set)**//
<code c>
double efl_text_ellipsis_get(const Eo *obj);
void efl_text_ellipsis_set(Eo *obj, double value);
</code>

%%Ellipsis value (number from -1.0 to 1.0)%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:halign_auto_type|halign_auto_type]]** //**(get, set)**//
<code c>
Efl_Text_Format_Horizontal_Alignment_Auto_Type efl_text_halign_auto_type_get(const Eo *obj);
void efl_text_halign_auto_type_set(Eo *obj, Efl_Text_Format_Horizontal_Alignment_Auto_Type value);
</code>

%%Horizontal alignment of text%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:halign|halign]]** //**(get, set)**//
<code c>
double efl_text_halign_get(const Eo *obj);
void efl_text_halign_set(Eo *obj, double value);
</code>

%%Horizontal alignment of text%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:linegap|linegap]]** //**(get, set)**//
<code c>
double efl_text_linegap_get(const Eo *obj);
void efl_text_linegap_set(Eo *obj, double value);
</code>

%%Minimal line gap (top and bottom) for each line in the text%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:linerelgap|linerelgap]]** //**(get, set)**//
<code c>
double efl_text_linerelgap_get(const Eo *obj);
void efl_text_linerelgap_set(Eo *obj, double value);
</code>

%%Relative line gap (top and bottom) for each line in the text%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:multiline|multiline]]** //**(get, set)**//
<code c>
Eina_Bool efl_text_multiline_get(const Eo *obj);
void efl_text_multiline_set(Eo *obj, Eina_Bool enabled);
</code>

%%Multiline is enabled or not%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:password|password]]** //**(get, set)**//
<code c>
Eina_Bool efl_text_password_get(const Eo *obj);
void efl_text_password_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether text is a password%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:replacement_char|replacement_char]]** //**(get, set)**//
<code c>
const char *efl_text_replacement_char_get(const Eo *obj);
void efl_text_replacement_char_set(Eo *obj, const char *repch);
</code>

%%The character used to replace characters that can not be displayed%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:tabstops|tabstops]]** //**(get, set)**//
<code c>
int efl_text_tabstops_get(const Eo *obj);
void efl_text_tabstops_set(Eo *obj, int value);
</code>

%%Tabstops value%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:valign|valign]]** //**(get, set)**//
<code c>
double efl_text_valign_get(const Eo *obj);
void efl_text_valign_set(Eo *obj, double value);
</code>

%%Vertical alignment of text%%\\ 
\\ 
**[[:develop:api:interface:efl:text:format:property:wrap|wrap]]** //**(get, set)**//
<code c>
Efl_Text_Format_Wrap efl_text_wrap_get(const Eo *obj);
void efl_text_wrap_set(Eo *obj, Efl_Text_Format_Wrap wrap);
</code>

%%Wrap mode for use in the text%%\\ 
\\ 

