~~Title: Efl.Pack.Linear~~
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_pack_linear [fillcolor = "dodgerblue4", label = "Efl.Pack.Linear", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_pack [fillcolor = "gray15", label = "Efl.Pack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_pack_linear -> efl_pack
    efl_pack -> efl_container
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:api:interface:efl:pack:linear|Efl.Pack.Linear]] //(interface)//**
    * [[:develop:api:interface:efl:pack|Efl.Pack]] //(interface)//
      * [[:develop:api:interface:efl:container|Efl.Container]] //(interface)//

===== Description =====

%%API for containers%%

{{page>:develop:api:user:interface:efl:pack:linear:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:api:interface:efl:pack:linear:method:pack_after|pack_after]]**
<code c>
Eina_Bool efl_pack_after(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Append item after other sub object.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_at|pack_at]]**
<code c>
Eina_Bool efl_pack_at(Eo *obj, Efl_Gfx *subobj, int index);
</code>

%%Inserts %%''subobj''%% at the specified %%''index''%%.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_before|pack_before]]**
<code c>
Eina_Bool efl_pack_before(Eo *obj, Efl_Gfx *subobj, const Efl_Gfx *existing);
</code>

%%Prepend item before other sub object.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_begin|pack_begin]]**
<code c>
Eina_Bool efl_pack_begin(Eo *obj, Efl_Gfx *subobj);
</code>

%%Prepend an object at the beginning of this container.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_content_get|pack_content_get]]**
<code c>
Efl_Gfx *efl_pack_content_get(Eo *obj, int index);
</code>

%%Content at a given index in this container.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_end|pack_end]]**
<code c>
Eina_Bool efl_pack_end(Eo *obj, Efl_Gfx *subobj);
</code>

%%Append object at the end of this container.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_index_get|pack_index_get]]**
<code c>
int efl_pack_index_get(Eo *obj, const Efl_Gfx *subobj);
</code>

%%Get the index of a child in this container.%%\\ 
\\ 
**[[:develop:api:interface:efl:pack:linear:method:pack_unpack_at|pack_unpack_at]]**
<code c>
Efl_Gfx *efl_pack_unpack_at(Eo *obj, int index);
</code>

%%Pop out item at specified %%''index''%%.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:method:content_count|content_count]]**
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:method:content_iterate|content_iterate]]**
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:method:content_remove|content_remove]]**
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:method:pack_clear|pack_clear]]**
<code c>
Eina_Bool efl_pack_clear(Eo *obj);
</code>

%%Removes all packed contents, and unreferences them.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:method:pack|pack]]**
<code c>
Eina_Bool efl_pack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Adds an item to this container.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:method:unpack_all|unpack_all]]**
<code c>
Eina_Bool efl_pack_unpack_all(Eo *obj);
</code>

%%Removes all packed contents, without unreferencing them.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:method:unpack|unpack]]**
<code c>
Eina_Bool efl_pack_unpack(Eo *obj, Efl_Gfx *subobj);
</code>

%%Removes an existing item from the container, without deleting it.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:property:pack_align|pack_align]]** //**(get, set)**//
<code c>
void efl_pack_align_get(const Eo *obj, double *align_horiz, double *align_vert);
void efl_pack_align_set(Eo *obj, double align_horiz, double align_vert);
</code>

%%Alignment of the container within its bounds%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:property:pack_padding|pack_padding]]** //**(get, set)**//
<code c>
void efl_pack_padding_get(const Eo *obj, double *pad_horiz, double *pad_vert, Eina_Bool *scalable);
void efl_pack_padding_set(Eo *obj, double pad_horiz, double pad_vert, Eina_Bool scalable);
</code>

%%Padding between items contained in this object.%%\\ 
\\ 

==== Inherited ====

[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:develop:api:interface:efl:container|Efl.Container]].**[[:develop:api:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:develop:api:interface:efl:pack|Efl.Pack]].**[[:develop:api:interface:efl:pack:event:layout_updated|layout,updated]]**
<code c>
EFL_PACK_EVENT_LAYOUT_UPDATED(void)
</code>

%%Sent after the layout was updated.%%\\ 
\\ 
