~~Title: Efl.Version~~
===== Signature =====

<code>
struct Efl.Version {
    major: int;
    minor: int;
    micro: int;
    revision: int;
    flavor: free(string, free);
    build_id: free(string, free);
}
</code>

===== C signature =====

<code c>
typedef struct _Efl_Version {
    int major;
    int minor;
    int micro;
    int revision;
    const char *flavor;
    const char *build_id;
} Efl_Version;
</code>

===== Description =====

%%This type describes the version of EFL with an optional variant.%%

%%This may be used to query the current running version of EFL. Or it can be passed by applications at startup time to inform EFL of the version a certain application was built for.%%

//Since 1.18//

{{page>:develop:api:user:struct:efl:version:description&nouser&nolink&nodate}}

===== Fields =====

{{page>:develop:api:user:struct:efl:version:fields&nouser&nolink&nodate}}

  * **major** - %%Major component of the version (>= 1).%%
  * **minor** - %%Minor component of the version (>= 0).%%
  * **micro** - %%Micro component of the version (>= 0).%%
  * **revision** - %%Revision component of the version (>= 0).%%
  * **flavor** - %%Special version string for this build of EFL, %%''null''%% for vanilla (upstream) EFL. Contains %%''EFL_VERSION_FLAVOR''%%.%%
  * **build_id** - %%Contains %%''EFL_BUILD_ID''%%.%%

