<title>Elm.Popup.timeout</title>
===== Signature =====

<code>
@property timeout {
    get {
        values {
            timeout: double;
        }
    }
    set {
        values {
            timeout: double;
        }
    }
}
</code>

===== C signature =====

<code c>
double elm_obj_popup_timeout_get(const Eo *obj);
void elm_obj_popup_timeout_set(Eo *obj, double timeout);
</code>

===== Values =====

  * **timeout** - %%The timeout in seconds.%%
===== Description =====



{{page>:docs:efl:user:class:elm:popup:property:timeout:description&nodate&nolink&nouser}}

==== Getter ====

%%Returns the timeout value set to the popup (in seconds).%%

{{page>:docs:efl:user:class:elm:popup:property:timeout:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Sets a timeout to hide popup automatically%%

%%This function sets a timeout and starts the timer controlling when the popup is hidden. Since calling @ref evas_object_show on a popup restarts the timer controlling when it is hidden, setting this before the  popup is shown will in effect mean starting the timer when the popup is shown. Smart signal "timeout" is called afterwards which can be handled if needed.%%

%%Set a value <= 0.0 to disable a running timer.%%
</note>

%%If the value > 0.0 and the popup is previously visible, the timer will be started with this value, canceling any running timer.%%
</note>{{page>:docs:efl:user:class:elm:popup:property:timeout:getter_description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Elm.Popup.timeout**

