<title>Elm.Ctxpopup.Part</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_ctxpopup_part [fillcolor = "black", label = "Elm.Ctxpopup.Part", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_layout_part_legacy [fillcolor = "gray15", label = "Efl.Ui.Layout.Part_Legacy", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_layout_part [fillcolor = "gray15", label = "Efl.Ui.Layout.Part", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_widget_part [fillcolor = "gray15", label = "Efl.Ui.Widget.Part", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_cursor [fillcolor = "gray15", label = "Efl.Ui.Cursor", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text [fillcolor = "gray15", label = "Efl.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_markup [fillcolor = "gray15", label = "Efl.Text.Markup", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_cursor [fillcolor = "gray15", label = "Efl.Text.Cursor", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_translatable [fillcolor = "gray15", label = "Efl.Ui.Translatable", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    elm_ctxpopup_part -> efl_ui_layout_part_legacy
    efl_ui_layout_part_legacy -> efl_ui_layout_part
    efl_ui_layout_part -> efl_ui_widget_part
    efl_ui_widget_part -> efl_object
    efl_ui_layout_part -> efl_ui_cursor
    efl_ui_layout_part_legacy -> efl_container
    efl_container -> efl_gfx
    efl_ui_layout_part_legacy -> efl_text
    efl_ui_layout_part_legacy -> efl_text_markup
    efl_text_markup -> efl_text_cursor
    efl_ui_layout_part_legacy -> efl_ui_translatable
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:class:elm:ctxpopup:part|Elm.Ctxpopup.Part]] //(class)//**
    * [[:develop:efl:auto:class:efl:ui:layout:part_legacy|Efl.Ui.Layout.Part_Legacy]] //(class)//
      * [[:develop:efl:auto:class:efl:ui:layout:part|Efl.Ui.Layout.Part]] //(class)//
        * [[:develop:efl:auto:class:efl:ui:widget:part|Efl.Ui.Widget.Part]] //(class)//
          * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
      * [[:develop:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
        * [[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:efl:auto:interface:efl:text|Efl.Text]] //(interface)//
      * [[:develop:efl:auto:interface:efl:text:markup|Efl.Text.Markup]] //(interface)//
        * [[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]] //(interface)//
      * [[:develop:efl:auto:interface:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//

===== Description =====

%%Elementary contex popup internal part class%%

{{page>:develop:efl:user:class:elm:ctxpopup:part:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:constructor|constructor]]**
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:ui:widget:part:method:destructor|destructor]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:widget:part|Efl.Ui.Widget.Part]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:class:elm:ctxpopup:part:method:content_unset|content_unset]]** //[Overridden here]//
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:class:elm:ctxpopup:part:property:content|content]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:method:content_count|content_count]]**
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:method:content_iterate|content_iterate]]**
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:method:content_remove|content_remove]]**
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:property:color|color]]** //**(get, set)**//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:property:geometry|geometry]]** //**(get, set)**//
<code c>
Eina_Rect efl_gfx_geometry_get(const Eo *obj);
void efl_gfx_geometry_set(Eo *obj, Eina_Rect rect);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:property:position|position]]** //**(get, set)**//
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:property:size|size]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:property:visible|visible]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

%%The visibility of a canvas object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_char_delete|cursor_char_delete]]**
<code c>
void efl_text_cursor_char_delete(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Deletes a single character from position pointed by given cursor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_char_next|cursor_char_next]]**
<code c>
void efl_text_cursor_char_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the next character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_char_prev|cursor_char_prev]]**
<code c>
void efl_text_cursor_char_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the previous character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_compare|cursor_compare]]**
<code c>
int efl_text_cursor_compare(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Compare two cursors%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_coord_set|cursor_coord_set]]**
<code c>
void efl_text_cursor_coord_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int x, int y);
</code>

%%Set cursor coordinates%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_copy|cursor_copy]]**
<code c>
void efl_text_cursor_copy(Eo *obj, Efl_Text_Cursor_Cursor *dst, const Efl_Text_Cursor_Cursor *src);
</code>

%%Copy existing cursor%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_equal|cursor_equal]]**
<code c>
Eina_Bool efl_text_cursor_equal(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Check if two cursors are equal%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_free|cursor_free]]**
<code c>
void efl_text_cursor_free(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Free existing cursor%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_line_char_first|cursor_line_char_first]]**
<code c>
void efl_text_cursor_line_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current line first character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_line_char_last|cursor_line_char_last]]**
<code c>
void efl_text_cursor_line_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current line last character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_line_jump_by|cursor_line_jump_by]]**
<code c>
void efl_text_cursor_line_jump_by(Eo *obj, Efl_Text_Cursor_Cursor *cur, int by);
</code>

%%Jump the cursor by the given number of lines%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_new|cursor_new]]**
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_new(Eo *obj);
</code>

%%Create new cursor%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]**
<code c>
void efl_text_cursor_paragraph_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the first character in this paragraph%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]**
<code c>
void efl_text_cursor_paragraph_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the last character in this paragraph%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_first|cursor_paragraph_first]]**
<code c>
void efl_text_cursor_paragraph_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current paragraph first character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_last|cursor_paragraph_last]]**
<code c>
void efl_text_cursor_paragraph_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current paragraph last character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_next|cursor_paragraph_next]]**
<code c>
void efl_text_cursor_paragraph_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the start of the next text node%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_prev|cursor_paragraph_prev]]**
<code c>
void efl_text_cursor_paragraph_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the end of the previous text node%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_text_insert|cursor_text_insert]]**
<code c>
int efl_text_cursor_text_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *text);
</code>

%%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_word_end|cursor_word_end]]**
<code c>
void efl_text_cursor_word_end(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current word end%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_word_start|cursor_word_start]]**
<code c>
void efl_text_cursor_word_start(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current word start%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor_content|cursor_content]]** //**(get)**//
<code c>
Eina_Unicode efl_text_cursor_content_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur);
</code>

%%The content of the cursor (the character under the cursor)%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor_geometry|cursor_geometry]]** //**(get)**//
<code c>
Eina_Bool efl_text_cursor_geometry_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur, Efl_Text_Cursor_Cursor_Type ctype, int *cx, int *cy, int *cw, int *ch, int *cx2, int *cy2, int *cw2, int *ch2);
</code>

%%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor_position|cursor_position]]** //**(get, set)**//
<code c>
int efl_text_cursor_position_get(const Eo *obj, Efl_Text_Cursor_Cursor *cur);
void efl_text_cursor_position_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int position);
</code>

%%Cursor position%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor|cursor]]** //**(get)**//
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_get(const Eo *obj, Efl_Text_Cursor_Cursor_Get_Type get_type);
</code>

%%The object's main cursor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:markup|Efl.Text.Markup]].**[[:develop:efl:auto:class:efl:ui:layout:part_legacy:property:markup|markup]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout:part_legacy|Efl.Ui.Layout.Part_Legacy]]]//
<code c>
const char *efl_text_markup_get(const Eo *obj);
void efl_text_markup_set(Eo *obj, const char *markup);
</code>

\\ 
[[:develop:efl:auto:interface:efl:text:markup|Efl.Text.Markup]].**[[:develop:efl:auto:interface:efl:text:markup:method:cursor_markup_insert|cursor_markup_insert]]**
<code c>
void efl_text_markup_cursor_markup_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *markup);
</code>

%%Inserts a markup text to the text object in a given cursor position%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text|Efl.Text]].**[[:develop:efl:auto:class:efl:ui:layout:part_legacy:property:text|text]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout:part_legacy|Efl.Ui.Layout.Part_Legacy]]]//
<code c>
const char *efl_text_get(const Eo *obj);
void efl_text_set(Eo *obj, const char *text);
</code>

\\ 
[[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]].**[[:develop:efl:auto:class:efl:ui:layout:part:property:cursor_style|cursor_style]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout:part|Efl.Ui.Layout.Part]]]//
<code c>
const char *efl_ui_cursor_style_get(const Eo *obj);
Eina_Bool efl_ui_cursor_style_set(Eo *obj, const char *style);
</code>

%%A different style for the cursor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]].**[[:develop:efl:auto:class:efl:ui:layout:part:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout:part|Efl.Ui.Layout.Part]]]//
<code c>
Eina_Bool efl_ui_cursor_theme_search_enabled_get(const Eo *obj);
Eina_Bool efl_ui_cursor_theme_search_enabled_set(Eo *obj, Eina_Bool allow);
</code>

%%Whether the cursor may be looked in the theme or not.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]].**[[:develop:efl:auto:class:efl:ui:layout:part:property:cursor|cursor]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout:part|Efl.Ui.Layout.Part]]]//
<code c>
const char *efl_ui_cursor_get(const Eo *obj);
Eina_Bool efl_ui_cursor_set(Eo *obj, const char *cursor);
</code>

%%The cursor to be shown when mouse is over the object%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:translatable|Efl.Ui.Translatable]].**[[:develop:efl:auto:class:efl:ui:layout:part_legacy:property:translatable_text|translatable_text]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout:part_legacy|Efl.Ui.Layout.Part_Legacy]]]//
<code c>
const char *efl_ui_translatable_text_get(const Eo *obj, const char **domain);
void efl_ui_translatable_text_set(Eo *obj, const char *label, const char *domain);
</code>

%%A unique string to be translated.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:translatable|Efl.Ui.Translatable]].**[[:develop:efl:auto:interface:efl:ui:translatable:method:translation_update|translation_update]]** ''protected''
<code c>
void efl_ui_translatable_translation_update(Eo *obj);
</code>

%%Requests this object to update its text strings for the current locale.%%\\ 
\\ 

==== Inherited ====

[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
