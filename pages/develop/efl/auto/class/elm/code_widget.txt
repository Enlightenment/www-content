<title>Elm.Code_Widget</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    elm_code_widget [fillcolor = "black", label = "Elm.Code_Widget", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_layout [fillcolor = "gray15", label = "Efl.Ui.Layout", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget [fillcolor = "gray15", label = "Elm.Widget", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_access [fillcolor = "gray15", label = "Efl.Access", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_access_component [fillcolor = "gray15", label = "Efl.Access.Component", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_focus_user [fillcolor = "gray15", label = "Efl.Ui.Focus.User", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_focus_object [fillcolor = "gray15", label = "Efl.Ui.Focus.Object", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_base [fillcolor = "gray15", label = "Efl.Ui.Base", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_cursor [fillcolor = "gray15", label = "Efl.Ui.Cursor", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_translatable [fillcolor = "gray15", label = "Efl.Ui.Translatable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_view [fillcolor = "gray15", label = "Efl.Ui.View", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_model_connect [fillcolor = "gray15", label = "Efl.Ui.Model.Connect", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_model_factory_connect [fillcolor = "gray15", label = "Efl.Ui.Model.Factory.Connect", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_layout_calc [fillcolor = "gray15", label = "Efl.Canvas.Layout_Calc", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_layout_signal [fillcolor = "gray15", label = "Efl.Canvas.Layout_Signal", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_layout_group [fillcolor = "gray15", label = "Efl.Canvas.Layout_Group", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_access_text [fillcolor = "gray15", label = "Efl.Access.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    elm_code_widget -> efl_ui_layout
    efl_ui_layout -> elm_widget
    elm_widget -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    elm_widget -> efl_access
    efl_access -> efl_interface
    efl_access -> efl_object
    elm_widget -> efl_access_component
    elm_widget -> efl_ui_focus_user
    elm_widget -> efl_part
    elm_widget -> efl_ui_focus_object
    elm_widget -> efl_ui_base
    elm_widget -> efl_ui_cursor
    elm_widget -> efl_ui_translatable
    efl_ui_layout -> efl_part
    efl_ui_layout -> efl_container
    efl_container -> efl_gfx
    efl_ui_layout -> efl_file
    efl_ui_layout -> efl_ui_view
    efl_ui_layout -> efl_ui_model_connect
    efl_ui_layout -> efl_ui_model_factory_connect
    efl_ui_layout -> efl_canvas_layout_calc
    efl_ui_layout -> efl_canvas_layout_signal
    efl_ui_layout -> efl_canvas_layout_group
    elm_code_widget -> efl_access_text
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:class:elm:code_widget|Elm.Code_Widget]] //(class)//**
    * [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]] //(class)//
      * [[:develop:efl:auto:class:elm:widget|Elm.Widget]] //(class)//
        * [[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:develop:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
            * [[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:develop:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
              * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:develop:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
              * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:efl:auto:mixin:efl:access|Efl.Access]] //(mixin)//
          * [[:develop:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
          * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]] //(mixin)//
        * [[:develop:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
        * [[:develop:efl:auto:interface:efl:part|Efl.Part]] //(interface)//
        * [[:develop:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
        * [[:develop:efl:auto:interface:efl:ui:base|Efl.Ui.Base]] //(interface)//
        * [[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]] //(interface)//
        * [[:develop:efl:auto:interface:efl:ui:translatable|Efl.Ui.Translatable]] //(interface)//
      * [[:develop:efl:auto:interface:efl:part|Efl.Part]] //(interface)//
      * [[:develop:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
        * [[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
      * [[:develop:efl:auto:mixin:efl:file|Efl.File]] //(mixin)//
      * [[:develop:efl:auto:interface:efl:ui:view|Efl.Ui.View]] //(interface)//
      * [[:develop:efl:auto:interface:efl:ui:model:connect|Efl.Ui.Model.Connect]] //(interface)//
      * [[:develop:efl:auto:interface:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]] //(interface)//
      * [[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]] //(interface)//
      * [[:develop:efl:auto:interface:efl:canvas:layout_signal|Efl.Canvas.Layout_Signal]] //(interface)//
      * [[:develop:efl:auto:interface:efl:canvas:layout_group|Efl.Canvas.Layout_Group]] //(interface)//
    * [[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]] //(interface)//

===== Description =====

%%Elementary code widget%%

{{page>:develop:efl:user:class:elm:code_widget:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:efl:auto:class:elm:code_widget:method:can_redo_get|can_redo_get]]**
<code c>
Eina_Bool elm_obj_code_widget_can_redo_get(Eo *obj);
</code>

%%Determine if there are any available redo operations%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:can_undo_get|can_undo_get]]**
<code c>
Eina_Bool elm_obj_code_widget_can_undo_get(Eo *obj);
</code>

%%Determine if there are any available undo operations%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:geometry_for_position_get|geometry_for_position_get]]**
<code c>
Eina_Bool elm_obj_code_widget_geometry_for_position_get(Eo *obj, unsigned int row, int col, int *x, int *y, int *w, int *h);
</code>

%%Get the geometry for the cell at the specified position.%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:line_refresh|line_refresh]]**
<code c>
void elm_obj_code_widget_line_refresh(Eo *obj, Elm_Code_Line *line);
</code>

%%Refresh code line in widget%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:line_status_toggle|line_status_toggle]]**
<code c>
void elm_obj_code_widget_line_status_toggle(Eo *obj, Elm_Code_Line *line);
</code>

%%Toggle the display of the line status widget%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:line_text_column_width_get|line_text_column_width_get]]**
<code c>
unsigned int elm_obj_code_widget_line_text_column_width_get(Eo *obj, Elm_Code_Line *line);
</code>

%%Get text column width for code line%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:line_text_column_width_to_position|line_text_column_width_to_position]]**
<code c>
unsigned int elm_obj_code_widget_line_text_column_width_to_position(Eo *obj, Elm_Code_Line *line, unsigned int position);
</code>

%%Get text column width at given position%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:line_text_position_for_column_get|line_text_position_for_column_get]]**
<code c>
unsigned int elm_obj_code_widget_line_text_position_for_column_get(Eo *obj, Elm_Code_Line *line, unsigned int column);
</code>

%%Get position from column%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:line_visible_get|line_visible_get]]**
<code c>
Eina_Bool elm_obj_code_widget_line_visible_get(Eo *obj, Elm_Code_Line *line);
</code>

%%Check if the code line is currently visible%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:lines_visible_get|lines_visible_get]]**
<code c>
unsigned int elm_obj_code_widget_lines_visible_get(Eo *obj);
</code>

%%Get the number of code lines currently visible in the widget%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:position_at_coordinates_get|position_at_coordinates_get]]**
<code c>
Eina_Bool elm_obj_code_widget_position_at_coordinates_get(Eo *obj, int x, int y, unsigned int *row, int *col);
</code>

%%Get the row, col position for a given coordinate on the widget.%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:redo|redo]]**
<code c>
void elm_obj_code_widget_redo(Eo *obj);
</code>

%%Redo last action%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:text_at_cursor_insert|text_at_cursor_insert]]**
<code c>
void elm_obj_code_widget_text_at_cursor_insert(Eo *obj, const char *text);
</code>

%%Insert the provided text at the cursor position. This will add the operation to the widget's undo list.%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:text_between_positions_get|text_between_positions_get]]**
<code c>
char *elm_obj_code_widget_text_between_positions_get(Eo *obj, unsigned int start_line, unsigned int start_col, unsigned int end_line, unsigned int end_col);
</code>

%%Get text between given positions%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:text_left_gutter_width_get|text_left_gutter_width_get]]**
<code c>
int elm_obj_code_widget_text_left_gutter_width_get(Eo *obj);
</code>

%%Get the column width of the gutter%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:text_tabwidth_at_column_get|text_tabwidth_at_column_get]]**
<code c>
unsigned int elm_obj_code_widget_text_tabwidth_at_column_get(Eo *obj, unsigned int column);
</code>

%%Get tabwidth for column%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:method:undo|undo]]**
<code c>
void elm_obj_code_widget_undo(Eo *obj);
</code>

%%Undo last action%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:code|code]]** //**(get, set)**//
<code c>
Elm_Code *elm_obj_code_widget_code_get(const Eo *obj);
void elm_obj_code_widget_code_set(Eo *obj, Elm_Code *code);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:columns|columns]]** //**(get)**//
<code c>
unsigned int elm_obj_code_widget_columns_get(const Eo *obj);
</code>

%%Get the number of columns in the widget currently. This will be the max of the number of columns to represent the longest line and the minimum required to fill the visible widget width.%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:cursor_position|cursor_position]]** //**(get, set)**//
<code c>
void elm_obj_code_widget_cursor_position_get(const Eo *obj, unsigned int *row, unsigned int *col);
void elm_obj_code_widget_cursor_position_set(Eo *obj, unsigned int row, unsigned int col);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:editable|editable]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_code_widget_editable_get(const Eo *obj);
void elm_obj_code_widget_editable_set(Eo *obj, Eina_Bool editable);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:font|font]]** //**(get, set)**//
<code c>
void elm_obj_code_widget_font_get(const Eo *obj, const char **name, int *size);
void elm_obj_code_widget_font_set(Eo *obj, const char *name, int size);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:gravity|gravity]]** //**(get, set)**//
<code c>
void elm_obj_code_widget_gravity_get(const Eo *obj, double *x, double *y);
void elm_obj_code_widget_gravity_set(Eo *obj, double x, double y);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:line_numbers|line_numbers]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_code_widget_line_numbers_get(const Eo *obj);
void elm_obj_code_widget_line_numbers_set(Eo *obj, Eina_Bool line_numbers);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:line_width_marker|line_width_marker]]** //**(get, set)**//
<code c>
unsigned int elm_obj_code_widget_line_width_marker_get(const Eo *obj);
void elm_obj_code_widget_line_width_marker_set(Eo *obj, unsigned int line_width_marker);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:policy|policy]]** //**(get, set)**//
<code c>
void elm_obj_code_widget_policy_get(const Eo *obj, Elm_Scroller_Policy *policy_h, Elm_Scroller_Policy *policy_v);
void elm_obj_code_widget_policy_set(Eo *obj, Elm_Scroller_Policy policy_h, Elm_Scroller_Policy policy_v);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:show_whitespace|show_whitespace]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_code_widget_show_whitespace_get(const Eo *obj);
void elm_obj_code_widget_show_whitespace_set(Eo *obj, Eina_Bool show_whitespace);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:syntax_enabled|syntax_enabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_code_widget_syntax_enabled_get(const Eo *obj);
void elm_obj_code_widget_syntax_enabled_set(Eo *obj, Eina_Bool syntax_enabled);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:tab_inserts_spaces|tab_inserts_spaces]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_code_widget_tab_inserts_spaces_get(const Eo *obj);
void elm_obj_code_widget_tab_inserts_spaces_set(Eo *obj, Eina_Bool tab_inserts_spaces);
</code>

\\ 
**[[:develop:efl:auto:class:elm:code_widget:property:tabstop|tabstop]]** //**(get, set)**//
<code c>
unsigned int elm_obj_code_widget_tabstop_get(const Eo *obj);
void elm_obj_code_widget_tabstop_set(Eo *obj, unsigned int tabstop);
</code>

\\ 

==== Inherited ====

[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:efl:canvas:group:method:group_change|group_change]]**
<code c>
void efl_canvas_group_change(Eo *obj);
</code>

%%Marks the object as dirty.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:efl:canvas:group:method:group_member_is|group_member_is]]**
<code c>
Eina_Bool efl_canvas_group_member_is(const Eo *obj, const Efl_Canvas_Object *sub_obj);
</code>

%%Finds out if a given object is a member of this group.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:efl:canvas:group:method:group_members_iterate|group_members_iterate]]**
<code c>
Eina_Iterator *efl_canvas_group_members_iterate(const Eo *obj);
</code>

%%Returns an iterator over the children of this object, that are canvas objects.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_group_need_recalculate_get(const Eo *obj);
void efl_canvas_group_need_recalculate_set(Eo *obj, Eina_Bool value);
</code>

%%Indicates that the group's layout need to be recalculated.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:efl:ui:layout:method:group_calculate|group_calculate]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_canvas_group_calculate(Eo *obj);
</code>

%%Triggers an immediate recalculation of this object's geometry.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:elm:widget:method:group_member_add|group_member_add]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_canvas_group_member_add(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Set a canvas object as a member of a given group (or smart object).%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:elm:widget:method:group_member_del|group_member_del]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_canvas_group_member_del(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Removes a member object from a given smart object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
Efl_Text_Bidirectional_Type efl_canvas_object_paragraph_direction_get(const Eo *obj);
void efl_canvas_object_paragraph_direction_set(Eo *obj, Efl_Text_Bidirectional_Type dir);
</code>

%%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:clipees_has|clipees_has]]**
<code c>
Eina_Bool efl_canvas_object_clipees_has(const Eo *obj);
</code>

%%Test if any object is clipped by %%''obj''%%.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:event_animation_get|event_animation_get]]**
<code c>
Efl_Object *efl_canvas_object_event_animation_get(Eo *obj, const Efl_Event_Description *event_type);
</code>

%%Get the %%''animation''%% which starts when the given %%''event''%% happens to the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:event_animation_set|event_animation_set]]**
<code c>
void efl_canvas_object_event_animation_set(Eo *obj, const Efl_Event_Description *event_type, Efl_Object *animation);
</code>

%%Set the %%''animation''%% which starts when the given %%''event_name''%% happens to the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:key_grab|key_grab]]**
<code c>
Eina_Bool efl_canvas_object_key_grab(Eo *obj, const char *keyname, Efl_Input_Modifier modifiers, Efl_Input_Modifier not_modifiers, Eina_Bool exclusive);
</code>

%%Requests %%''keyname''%% key events be directed to %%''obj''%%.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:key_ungrab|key_ungrab]]**
<code c>
void efl_canvas_object_key_ungrab(Eo *obj, const char *keyname, Efl_Input_Modifier modifiers, Efl_Input_Modifier not_modifiers);
</code>

%%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:pointer_coords_inside_get|pointer_coords_inside_get]]**
<code c>
Eina_Bool efl_canvas_object_pointer_coords_inside_get(Eo *obj, int x, int y);
</code>

%%Returns whether the coords are logically inside the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:seat_focus_add|seat_focus_add]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_add(Eo *obj, Efl_Input_Device *seat);
</code>

%%Add a seat to the focus list.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:seat_focus_check|seat_focus_check]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_check(Eo *obj, Efl_Input_Device *seat);
</code>

%%Check if this object is focused by a given seat%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:seat_focus_del|seat_focus_del]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_del(Eo *obj, Efl_Input_Device *seat);
</code>

%%Remove a seat from the focus list.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_anti_alias_get(const Eo *obj);
void efl_canvas_object_anti_alias_set(Eo *obj, Eina_Bool anti_alias);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:clipees|clipees]]** //**(get)**//
<code c>
Eina_Iterator *efl_canvas_object_clipees_get(const Eo *obj);
</code>

%%Return a list of objects currently clipped by %%''obj''%%.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_key_focus_get(const Eo *obj);
void efl_canvas_object_key_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Indicates that this object is the keyboard event receiver on its canvas.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_pass_events_get(const Eo *obj);
void efl_canvas_object_pass_events_set(Eo *obj, Eina_Bool pass);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pointer_device_in|pointer_device_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_device_in_get(const Eo *obj, Efl_Input_Device *pointer);
</code>

%%Read-only value indicating whether a pointer is in the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pointer_inside_by_device|pointer_inside_by_device]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_inside_by_device_get(const Eo *obj, Efl_Input_Device *dev);
</code>

%%Returns whether the mouse pointer is logically inside the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the default mouse pointer is logically inside the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pointer_in|pointer_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_in_get(const Eo *obj);
</code>

%%Read-only value indicating whether the main pointer is in the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_by_device_get(const Eo *obj, Efl_Input_Device *dev);
Eina_Bool efl_canvas_object_pointer_mode_by_device_set(Eo *obj, Efl_Input_Device *dev, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour by device. See %%[[:develop:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:develop:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_get(const Eo *obj);
Eina_Bool efl_canvas_object_pointer_mode_set(Eo *obj, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_propagate_events_get(const Eo *obj);
void efl_canvas_object_propagate_events_set(Eo *obj, Eina_Bool propagate);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**//
<code c>
Efl_Gfx_Render_Op efl_canvas_object_render_op_get(const Eo *obj);
void efl_canvas_object_render_op_set(Eo *obj, Efl_Gfx_Render_Op render_op);
</code>

%%Render mode to be used for compositing the Evas object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_repeat_events_get(const Eo *obj);
void efl_canvas_object_repeat_events_set(Eo *obj, Eina_Bool repeat);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:scale|scale]]** //**(get, set)**//
<code c>
double efl_canvas_object_scale_get(const Eo *obj);
void efl_canvas_object_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_seat_focus_get(const Eo *obj);
</code>

%%Check if this object is focused.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:elm:widget:property:clip|clip]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Canvas_Object *efl_canvas_object_clip_get(const Eo *obj);
void efl_canvas_object_clip_set(Eo *obj, Efl_Canvas_Object *clip);
</code>

\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:elm:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_canvas_object_is_frame_object_get(const Eo *obj);
void efl_canvas_object_is_frame_object_set(Eo *obj, Eina_Bool is_frame);
</code>

%%If %%''true''%% the object belongs to the window border decorations.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:elm:widget:property:no_render|no_render]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_canvas_object_no_render_get(const Eo *obj);
void efl_canvas_object_no_render_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
[[:develop:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:develop:efl:auto:class:efl:canvas:object:property:loop|loop]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:canvas:object:method:del|del]]** //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:elm:code_widget:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:elm:code_widget:method:finalize|finalize]]** //[Overridden here]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:elm:widget:method:debug_name_override|debug_name_override]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:elm:widget:method:destructor|destructor]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:elm:widget:method:provider_find|provider_find]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]].**[[:develop:efl:auto:class:efl:ui:layout:property:theme|theme]]** //**(set)**//
<code c>
Efl_Ui_Theme_Apply efl_ui_layout_theme_set(Eo *obj, const char *klass, const char *group, const char *style);
</code>

%%The theme of this widget, defines which edje group will be used.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:scroll_freeze_pop|scroll_freeze_pop]]**
<code c>
void elm_obj_widget_scroll_freeze_pop(Eo *obj);
</code>

%%Pop scroller freeze%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:scroll_freeze_push|scroll_freeze_push]]**
<code c>
void elm_obj_widget_scroll_freeze_push(Eo *obj);
</code>

%%Push scroller freeze%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:scroll_hold_pop|scroll_hold_pop]]**
<code c>
void elm_obj_widget_scroll_hold_pop(Eo *obj);
</code>

%%Pop scroller hold%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:scroll_hold_push|scroll_hold_push]]**
<code c>
void elm_obj_widget_scroll_hold_push(Eo *obj);
</code>

%%Push scroll hold%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:access_info|access_info]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_access_info_get(const Eo *obj);
void elm_obj_widget_access_info_set(Eo *obj, const char *txt);
</code>

%%Accessibility information.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:disabled|disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_disabled_get(const Eo *obj);
void elm_obj_widget_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Whether the widget is enabled (accepts and reacts to user inputs).%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_allow|focus_allow]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_allow_get(const Eo *obj);
void elm_obj_widget_focus_allow_set(Eo *obj, Eina_Bool can_focus);
</code>

%%The ability for a widget to be focused.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_highlight_animate|focus_highlight_animate]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_highlight_animate_get(const Eo *obj);
void elm_obj_widget_focus_highlight_animate_set(Eo *obj, Eina_Bool animate);
</code>

%%Whether focus highlight should animate or not.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_highlight_enabled|focus_highlight_enabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_highlight_enabled_get(const Eo *obj);
void elm_obj_widget_focus_highlight_enabled_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether focus highlight is enabled or not.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_focus_highlight_style_get(const Eo *obj);
Eina_Bool elm_obj_widget_focus_highlight_style_set(Eo *obj, const char *style);
</code>

%%Control the widget focus highlight style.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_move_policy_automatic_get(const Eo *obj);
void elm_obj_widget_focus_move_policy_automatic_set(Eo *obj, Eina_Bool automatic);
</code>

%%Control the widget's focus_move_policy mode setting.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Move_Policy elm_obj_widget_focus_move_policy_get(const Eo *obj);
void elm_obj_widget_focus_move_policy_set(Eo *obj, Efl_Ui_Focus_Move_Policy policy);
</code>

%%The widget's focus move policy.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focused_item|focused_item]]** //**(get)**//
<code c>
Elm_Widget_Item *elm_obj_widget_focused_item_get(const Eo *obj);
</code>

%%Get the focused widget item.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus|focus]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_get(const Eo *obj);
void elm_obj_widget_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Whether the object is focused for inputs.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:interest_region_mode|interest_region_mode]]** //**(get, set)**//
<code c>
Efl_Ui_Interest_Region_Mode elm_obj_widget_interest_region_mode_get(const Eo *obj);
void elm_obj_widget_interest_region_mode_set(Eo *obj, Efl_Ui_Interest_Region_Mode mode);
</code>

%%Defines how %%[[:develop:efl:auto:class:elm:widget:property:show_region|Elm.Widget.show_region]]%% should be calculated.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_orientation_mode_disabled_get(const Eo *obj);
void elm_obj_widget_orientation_mode_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Whether the widget's automatic orientation is disabled or not.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:style|style]]** //**(get, set)**// ''protected set''
<code c>
const char *elm_obj_widget_style_get(const Eo *obj);
Efl_Ui_Theme_Apply elm_obj_widget_style_set(Eo *obj, const char *style);
</code>

%%The widget style to use.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:theme_object|theme_object]]** //**(set)**//
<code c>
Efl_Ui_Theme_Apply elm_obj_widget_theme_object_set(Eo *obj, Efl_Canvas_Object *edj, const char *wname, const char *welement, const char *wstyle);
</code>

%%Theme object property%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:theme|theme]]** //**(get, set)**//
<code c>
Elm_Theme *elm_obj_widget_theme_get(const Eo *obj);
void elm_obj_widget_theme_set(Eo *obj, Elm_Theme *th);
</code>

%%Widget theme%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:widget_top|widget_top]]** //**(get)**//
<code c>
Elm_Widget *elm_obj_widget_top_get(const Eo *obj);
</code>

%%Root widget in the widget hierarchy.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]].**[[:develop:efl:auto:class:efl:ui:layout:method:calc_freeze|calc_freeze]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
int efl_canvas_layout_calc_freeze(Eo *obj);
</code>

%%Freezes the layout object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]].**[[:develop:efl:auto:class:efl:ui:layout:method:calc_thaw|calc_thaw]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
int efl_canvas_layout_calc_thaw(Eo *obj);
</code>

%%Thaws the layout object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]].**[[:develop:efl:auto:interface:efl:canvas:layout_calc:method:calc_parts_extends|calc_parts_extends]]**
<code c>
Eina_Rect efl_canvas_layout_calc_parts_extends(Eo *obj);
</code>

%%Calculates the geometry of the region, relative to a given layout object's area, occupied by all parts in the object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]].**[[:develop:efl:auto:interface:efl:canvas:layout_calc:method:calc_size_min|calc_size_min]]**
<code c>
Eina_Size2D efl_canvas_layout_calc_size_min(Eo *obj, Eina_Size2D restricted);
</code>

%%Calculates the minimum required size for a given layout object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]].**[[:develop:efl:auto:interface:efl:canvas:layout_calc:property:calc_auto_update_hints|calc_auto_update_hints]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_layout_calc_auto_update_hints_get(const Eo *obj);
void efl_canvas_layout_calc_auto_update_hints_set(Eo *obj, Eina_Bool update);
</code>

%%Whether this object updates its size hints automatically.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_group|Efl.Canvas.Layout_Group]].**[[:develop:efl:auto:class:efl:ui:layout:property:group_data|group_data]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
const char *efl_canvas_layout_group_data_get(const Eo *obj, const char *key);
</code>

%%Retrives an EDC data field's value from a given Edje object's group.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_group|Efl.Canvas.Layout_Group]].**[[:develop:efl:auto:class:efl:ui:layout:property:group_size_max|group_size_max]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Eina_Size2D efl_canvas_layout_group_size_max_get(const Eo *obj);
</code>

%%Gets the maximum size specified -- as an EDC property -- for a given Edje object%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_group|Efl.Canvas.Layout_Group]].**[[:develop:efl:auto:class:efl:ui:layout:property:group_size_min|group_size_min]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Eina_Size2D efl_canvas_layout_group_size_min_get(const Eo *obj);
</code>

%%Gets the minimum size specified -- as an EDC property -- for a given Edje object%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_signal|Efl.Canvas.Layout_Signal]].**[[:develop:efl:auto:class:efl:ui:layout:method:message_send|message_send]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_canvas_layout_signal_message_send(Eo *obj, int id, const Eina_Value msg);
</code>

%%Sends an (Edje) message to a given Edje object%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_signal|Efl.Canvas.Layout_Signal]].**[[:develop:efl:auto:class:efl:ui:layout:method:signal_callback_add|signal_callback_add]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Eina_Bool efl_canvas_layout_signal_callback_add(Eo *obj, const char *emission, const char *source, Efl_Signal_Cb func, void *data);
</code>

%%Adds a callback for an arriving Edje signal, emitted by a given Edje object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_signal|Efl.Canvas.Layout_Signal]].**[[:develop:efl:auto:class:efl:ui:layout:method:signal_callback_del|signal_callback_del]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Eina_Bool efl_canvas_layout_signal_callback_del(Eo *obj, const char *emission, const char *source, Efl_Signal_Cb func, void *data);
</code>

%%Removes a signal-triggered callback from an object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_signal|Efl.Canvas.Layout_Signal]].**[[:develop:efl:auto:class:efl:ui:layout:method:signal_emit|signal_emit]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_canvas_layout_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Sends/emits an Edje signal to this layout.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_signal|Efl.Canvas.Layout_Signal]].**[[:develop:efl:auto:class:efl:ui:layout:method:signal_process|signal_process]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_canvas_layout_signal_process(Eo *obj, Eina_Bool recurse);
</code>

%%Processes an object's messages and signals queue.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:class:efl:ui:layout:method:content_count|content_count]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:class:efl:ui:layout:method:content_iterate|content_iterate]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:class:efl:ui:layout:method:content_remove|content_remove]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:method:content_unset|content_unset]]**
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:property:content|content]]** //**(get, set)**//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, Eina_Size2D *sz);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, Eina_Size2D sz);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_hint_combined_min_get(const Eo *obj);
</code>

%%Read-only minimum size combining both %%[[:develop:efl:auto:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:develop:efl:auto:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_hint_max_get(const Eo *obj);
void efl_gfx_size_hint_max_set(Eo *obj, Eina_Size2D sz);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Size2D efl_gfx_size_hint_min_get(const Eo *obj);
void efl_gfx_size_hint_min_set(Eo *obj, Eina_Size2D sz);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]// ''protected set''
<code c>
Eina_Size2D efl_gfx_size_hint_restricted_min_get(const Eo *obj);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, Eina_Size2D sz);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:class:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_base_get(const Eo *obj);
void efl_gfx_size_hint_base_set(Eo *obj, Eina_Size2D sz);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
Eina_Size2D efl_gfx_size_hint_step_get(const Eo *obj);
void efl_gfx_size_hint_step_set(Eo *obj, Eina_Size2D sz);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:method:lower|lower]]** //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:method:raise|raise]]** //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:method:stack_above|stack_above]]** //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:method:stack_below|stack_below]]** //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:property:above|above]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:property:below|below]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:class:efl:canvas:object:property:layer|layer]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:class:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Rect efl_gfx_geometry_get(const Eo *obj);
void efl_gfx_geometry_set(Eo *obj, Eina_Rect rect);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:class:elm:widget:property:color|color]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:class:elm:widget:property:position|position]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Position2D efl_gfx_position_get(const Eo *obj);
void efl_gfx_position_set(Eo *obj, Eina_Position2D pos);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:class:elm:widget:property:size|size]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Size2D efl_gfx_size_get(const Eo *obj);
void efl_gfx_size_set(Eo *obj, Eina_Size2D size);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:class:elm:widget:property:visible|visible]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

%%The visibility of a canvas object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:class:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 
[[:develop:efl:auto:interface:efl:part|Efl.Part]].**[[:develop:efl:auto:class:efl:ui:layout:method:part|part]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Efl_Object *efl_part(const Eo *obj, const char *name);
</code>

%%Returns %%[[:develop:efl:auto:class:efl:ui:widget:part|Efl.Ui.Widget.Part]]%%.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:base|Efl.Ui.Base]].**[[:develop:efl:auto:class:elm:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_ui_mirrored_automatic_get(const Eo *obj);
void efl_ui_mirrored_automatic_set(Eo *obj, Eina_Bool automatic);
</code>

%%Whether the property %%[[:develop:efl:auto:interface:efl:ui:base:property:mirrored|Efl.Ui.Base.mirrored]]%% should be set automatically.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:base|Efl.Ui.Base]].**[[:develop:efl:auto:class:elm:widget:property:mirrored|mirrored]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_ui_mirrored_get(const Eo *obj);
void efl_ui_mirrored_set(Eo *obj, Eina_Bool rtl);
</code>

%%Whether this object should be mirrored.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:base|Efl.Ui.Base]].**[[:develop:efl:auto:class:elm:widget:property:scale|scale]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
double efl_ui_scale_get(const Eo *obj);
void efl_ui_scale_set(Eo *obj, double scale);
</code>

%%The scaling factor of an object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:base|Efl.Ui.Base]].**[[:develop:efl:auto:interface:efl:ui:base:property:base_scale|base_scale]]** //**(get)**//
<code c>
double efl_ui_base_scale_get(const Eo *obj);
</code>

%%The base scale of a layout object (read-only).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:base|Efl.Ui.Base]].**[[:develop:efl:auto:interface:efl:ui:base:property:language|language]]** //**(get, set)**//
<code c>
const char *efl_ui_language_get(const Eo *obj);
void efl_ui_language_set(Eo *obj, const char *language);
</code>

%%The (human) language for this object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]].**[[:develop:efl:auto:class:elm:widget:property:cursor_style|cursor_style]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
const char *efl_ui_cursor_style_get(const Eo *obj);
Eina_Bool efl_ui_cursor_style_set(Eo *obj, const char *style);
</code>

%%A different style for the cursor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]].**[[:develop:efl:auto:class:elm:widget:property:cursor_theme_search_enabled|cursor_theme_search_enabled]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_ui_cursor_theme_search_enabled_get(const Eo *obj);
Eina_Bool efl_ui_cursor_theme_search_enabled_set(Eo *obj, Eina_Bool allow);
</code>

%%Whether the cursor may be looked in the theme or not.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:cursor|Efl.Ui.Cursor]].**[[:develop:efl:auto:class:elm:widget:property:cursor|cursor]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
const char *efl_ui_cursor_get(const Eo *obj);
Eina_Bool efl_ui_cursor_set(Eo *obj, const char *cursor);
</code>

%%The cursor to be shown when mouse is over the object%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:develop:efl:auto:class:elm:widget:property:manager|manager]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Ui_Focus_Manager *efl_ui_focus_user_manager_get(const Eo *obj);
</code>

%%Describes which manager is used to register or should be used to register this user.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:develop:efl:auto:class:elm:widget:property:parent|parent]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_user_parent_get(const Eo *obj);
</code>

%%Describes which logical parent is used by this object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:model:connect|Efl.Ui.Model.Connect]].**[[:develop:efl:auto:class:efl:ui:layout:method:connect|connect]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_ui_model_connect(Eo *obj, const char *name, const char *property);
</code>

%%Connect property%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]].**[[:develop:efl:auto:class:efl:ui:layout:method:connect|connect]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_ui_model_factory_connect(Eo *obj, const char *name, Efl_Ui_Factory *factory);
</code>

%%Connect factory%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:translatable|Efl.Ui.Translatable]].**[[:develop:efl:auto:interface:efl:ui:translatable:property:translatable_text|translatable_text]]** //**(get, set)**//
<code c>
const char *efl_ui_translatable_text_get(const Eo *obj, const char **domain);
void efl_ui_translatable_text_set(Eo *obj, const char *label, const char *domain);
</code>

%%A unique string to be translated.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:view|Efl.Ui.View]].**[[:develop:efl:auto:class:efl:ui:layout:property:model|model]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
Efl_Model *efl_ui_view_model_get(const Eo *obj);
void efl_ui_view_model_set(Eo *obj, Efl_Model *model);
</code>

%%Model that is/will be%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:class:elm:widget:property:name|name]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
const char *efl_access_name_get(const Eo *obj);
void efl_access_name_set(Eo *obj, const char *name);
</code>

%%Accessible name of the object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:class:elm:widget:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Access *efl_access_parent_get(const Eo *obj);
void efl_access_parent_set(Eo *obj, Efl_Access *parent);
</code>

%%Object's accessible parent.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:method:relationship_append|relationship_append]]**
<code c>
Eina_Bool efl_access_relationship_append(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>

%%Defines the relationship between two accessible objects.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:method:relationship_remove|relationship_remove]]**
<code c>
void efl_access_relationship_remove(Eo *obj, Efl_Access_Relation_Type type, const Efl_Access *relation_object);
</code>

%%Removes the relationship between two accessible objects.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:method:relationships_clear|relationships_clear]]**
<code c>
void efl_access_relationships_clear(Eo *obj);
</code>

%%Removes all relationships in accessible object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:description|description]]** //**(get, set)**//
<code c>
const char *efl_access_description_get(const Eo *obj);
void efl_access_description_set(Eo *obj, const char *description);
</code>

%%Contextual information about object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:role|role]]** //**(get, set)**//
<code c>
Efl_Access_Role efl_access_role_get(const Eo *obj);
void efl_access_role_set(Eo *obj, Efl_Access_Role role);
</code>

%%The role of the object in accessibility domain.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:root|root]]** //**(get)**//
<code c>
Efl_Object *efl_access_root_get(const Eo *obj);
</code>

%%Get root object of accessible object hierarchy%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:translation_domain|translation_domain]]** //**(get, set)**//
<code c>
const char *efl_access_translation_domain_get(const Eo *obj);
void efl_access_translation_domain_set(Eo *obj, const char *domain);
</code>

%%The translation domain of "name" and "description" properties.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:type|type]]** //**(get, set)**//
<code c>
Efl_Access_Type efl_access_type_get(const Eo *obj);
void efl_access_type_set(Eo *obj, Efl_Access_Type type);
</code>

%%Type of accessibility object%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:file|Efl.File]].**[[:develop:efl:auto:class:efl:ui:layout:property:file|file]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

\\ 
[[:develop:efl:auto:mixin:efl:file|Efl.File]].**[[:develop:efl:auto:class:efl:ui:layout:property:mmap|mmap]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]//
<code c>
void efl_file_mmap_get(const Eo *obj, const Eina_File **f, const char **key);
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>

\\ 
[[:develop:efl:auto:mixin:efl:file|Efl.File]].**[[:develop:efl:auto:mixin:efl:file:method:save|save]]**
<code c>
Eina_Bool efl_file_save(const Eo *obj, const char *file, const char *key, const char *flags);
</code>

%%Save the given image object's contents to an (image) file.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:file|Efl.File]].**[[:develop:efl:auto:mixin:efl:file:property:load_error|load_error]]** //**(get)**//
<code c>
Efl_Image_Load_Error efl_file_load_error_get(const Eo *obj);
</code>

%%Gets the (last) file loading error for a given Edje object%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]**
<code c>
void efl_gfx_map_lightning_3d_absolute(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Apply a lightning effect on the object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:lightning_3d|lightning_3d]]**
<code c>
void efl_gfx_map_lightning_3d(Eo *obj, const Efl_Gfx *pivot, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Apply a lightning effect on the object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:map_has|map_has]]**
<code c>
Eina_Bool efl_gfx_map_has(Eo *obj);
</code>

%%Read-only property indicating whether an object is mapped.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:map_reset|map_reset]]**
<code c>
void efl_gfx_map_reset(Eo *obj);
</code>

%%Resets the map transformation to its default state.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]**
<code c>
void efl_gfx_map_perspective_3d_absolute(Eo *obj, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:perspective_3d|perspective_3d]]**
<code c>
void efl_gfx_map_perspective_3d(Eo *obj, const Efl_Gfx *pivot, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]**
<code c>
void efl_gfx_map_rotate_3d_absolute(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>

%%Rotate the object around 3 axes in 3D, using absolute coordinates.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:rotate_3d|rotate_3d]]**
<code c>
void efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>

%%Rotate the object around 3 axes in 3D.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:rotate_absolute|rotate_absolute]]**
<code c>
void efl_gfx_map_rotate_absolute(Eo *obj, double degrees, double cx, double cy);
</code>

%%Apply a rotation to the object, using absolute coordinates.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]**
<code c>
void efl_gfx_map_rotate_quat_absolute(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

%%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:rotate_quat|rotate_quat]]**
<code c>
void efl_gfx_map_rotate_quat(Eo *obj, double qx, double qy, double qz, double qw, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>

%%Rotate the object in 3D using a unit quaternion.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:rotate|rotate]]**
<code c>
void efl_gfx_map_rotate(Eo *obj, double degrees, const Efl_Gfx *pivot, double cx, double cy);
</code>

%%Apply a rotation to the object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:translate|translate]]**
<code c>
void efl_gfx_map_translate(Eo *obj, double dx, double dy, double dz);
</code>

%%Apply a translation to the object using map.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:zoom_absolute|zoom_absolute]]**
<code c>
void efl_gfx_map_zoom_absolute(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>

%%Apply a zoom to the object, using absolute coordinates.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:method:zoom|zoom]]**
<code c>
void efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, const Efl_Gfx *pivot, double cx, double cy);
</code>

%%Apply a zoom to the object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Alpha flag for map rendering.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>

%%Clockwise state of a map (read-only).%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

%%Color of a vertex in the map.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**//
<code c>
void efl_gfx_map_coord_absolute_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_coord_absolute_set(Eo *obj, int idx, double x, double y, double z);
</code>

%%A point's absolute coordinate on the canvas.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_point_count|map_point_count]]** //**(get, set)**//
<code c>
int efl_gfx_map_point_count_get(const Eo *obj);
void efl_gfx_map_point_count_set(Eo *obj, int count);
</code>

%%Number of points of a map.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>

%%Smoothing state for map rendering.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:develop:efl:auto:mixin:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**//
<code c>
void efl_gfx_map_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_uv_set(Eo *obj, int idx, double u, double v);
</code>

%%Map point's U and V texture source point.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:efl:auto:class:elm:widget:property:focus_geometry|focus_geometry]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Rect efl_ui_focus_object_focus_geometry_get(const Eo *obj);
</code>

%%The geometry to use to calculate the relations to other objects.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:efl:auto:class:elm:widget:property:focus|focus]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_ui_focus_object_focus_get(const Eo *obj);
void efl_ui_focus_object_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%This gets called by the manager and should never be called by someone else.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:efl:auto:mixin:efl:ui:focus:object:method:prepare_logical|prepare_logical]]**
<code c>
void efl_ui_focus_object_prepare_logical(Eo *obj);
</code>

%%Tells the object that the children of it will be queried soon by the given manager.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:develop:efl:auto:class:efl:canvas:group:property:group_clipper|group_clipper]]** //**(get)**// ''protected''
<code c>
const Efl_Canvas_Object *efl_canvas_group_clipper_get(const Eo *obj);
</code>

%%The internal clipper object used by this group.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:develop:efl:auto:class:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// ''protected''
<code c>
Efl_Canvas_Object *efl_canvas_object_render_parent_get(const Eo *obj);
</code>

%%Gets the parent smart object of a given Evas object, if it has one.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:efl:ui:layout:method:on_disabled_update|on_disabled_update]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]// ''protected''
<code c>
Eina_Bool elm_obj_widget_on_disabled_update(Eo *obj, Eina_Bool disabled);
</code>

%%Virtual function called when the widget becomes disabled.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:efl:ui:layout:method:on_focus_update|on_focus_update]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]// ''protected''
<code c>
Eina_Bool elm_obj_widget_on_focus_update(Eo *obj, Elm_Widget_Item *item);
</code>

%%Virtual function handling focus in/out events on the widget%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:efl:ui:layout:method:theme_apply|theme_apply]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]// ''protected''
<code c>
Efl_Ui_Theme_Apply elm_obj_widget_theme_apply(Eo *obj);
</code>

%%Virtual function called when the widget needs to re-apply its theme.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:efl:ui:layout:method:widget_sub_object_add|widget_sub_object_add]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]// ''protected''
<code c>
Eina_Bool elm_obj_widget_sub_object_add(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Virtual function handling sub objects being added.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:efl:ui:layout:method:widget_sub_object_del|widget_sub_object_del]]** //[Overridden in [[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]]]// ''protected''
<code c>
Eina_Bool elm_obj_widget_sub_object_del(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Virtual function handling sub objects being removed.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:code_widget:method:widget_event|widget_event]]** //[Overridden here]// ''protected''
<code c>
Eina_Bool elm_obj_widget_event(Eo *obj, const Efl_Event *eo_event, Efl_Canvas_Object *source);
</code>

%%Virtual function handling input events on the widget.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:focus_manager_create|focus_manager_create]]** ''protected''
<code c>
Efl_Ui_Focus_Manager *elm_obj_widget_focus_manager_create(Eo *obj, Efl_Ui_Focus_Object *root);
</code>

%%If the widget needs a focus manager, this function will be called.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:focus_state_apply|focus_state_apply]]** ''protected''
<code c>
Eina_Bool elm_obj_widget_focus_state_apply(Eo *obj, Elm_Widget_Focus_State current_state, Elm_Widget_Focus_State configured_state, Elm_Widget *redirect);
</code>

%%Register focus with the given configuration.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:on_access_activate|on_access_activate]]** ''protected''
<code c>
Eina_Bool elm_obj_widget_on_access_activate(Eo *obj, Efl_Ui_Activate act);
</code>

%%Hook function called when widget is activated through accessibility.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:on_access_update|on_access_update]]** ''protected''
<code c>
void elm_obj_widget_on_access_update(Eo *obj, Eina_Bool enable);
</code>

%%Hook function called when accessibility is changed on the widget.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:method:on_orientation_update|on_orientation_update]]** ''protected''
<code c>
void elm_obj_widget_on_orientation_update(Eo *obj, int rotation);
</code>

%%Virtual function handling canvas orientation changes.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:focus_highlight_geometry|focus_highlight_geometry]]** //**(get)**// ''protected''
<code c>
Eina_Rect elm_obj_widget_focus_highlight_geometry_get(const Eo *obj);
</code>

%%The rectangle region to be highlighted on focus.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:interest_region|interest_region]]** //**(get)**// ''protected''
<code c>
Eina_Rect elm_obj_widget_interest_region_get(const Eo *obj);
</code>

%%Region of interest inside this widget, that should be given priority to be visible inside a scroller.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**// ''protected''
<code c>
void elm_obj_widget_on_show_region_hook_set(Eo *obj, Efl_Ui_Scrollable_On_Show_Region func);
</code>

%%Hook function called when the %%[[:develop:efl:auto:class:elm:widget:property:show_region|Elm.Widget.show_region]]%% is changed.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:resize_object|resize_object]]** //**(set)**// ''protected''
<code c>
void elm_obj_widget_resize_object_set(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%This is the internal canvas object managed by a widget.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:show_region|show_region]]** //**(get, set)**// ''protected''
<code c>
Eina_Rect elm_obj_widget_show_region_get(const Eo *obj);
void elm_obj_widget_show_region_set(Eo *obj, Eina_Rect region, Eina_Bool force);
</code>

%%Region inside the widget to show.%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:property:widget_parent|widget_parent]]** //**(get, set)**// ''protected''
<code c>
Elm_Widget *elm_obj_widget_parent_get(const Eo *obj);
void elm_obj_widget_parent_set(Eo *obj, Elm_Widget *parent);
</code>

%%The internal parent of this widget.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:method:selection_add|selection_add]]** ''protected''
<code c>
Eina_Bool efl_access_text_selection_add(Eo *obj, int start_offset, int end_offset);
</code>

%%Add selection%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:method:selection_remove|selection_remove]]** ''protected''
<code c>
Eina_Bool efl_access_text_selection_remove(Eo *obj, int selection_number);
</code>

%%Remove selection%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:attributes|attributes]]** //**(get)**// ''protected''
<code c>
Eina_List *efl_access_text_attributes_get(const Eo *obj, int *start_offset, int *end_offset);
</code>

%%Gets list of all text attributes.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:attribute|attribute]]** //**(get)**// ''protected''
<code c>
Eina_Bool efl_access_text_attribute_get(const Eo *obj, const char *name, int *start_offset, int *end_offset, char **value);
</code>

%%Indicate if a text attribute with a given name is set%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:bounded_ranges|bounded_ranges]]** //**(get)**// ''protected''
<code c>
Eina_List *efl_access_text_bounded_ranges_get(const Eo *obj, Eina_Bool screen_coords, Eina_Rect rect, Efl_Access_Text_Clip_Type xclip, Efl_Access_Text_Clip_Type yclip);
</code>

%%Bounded ranges%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:caret_offset|caret_offset]]** //**(get, set)**// ''protected''
<code c>
int efl_access_text_caret_offset_get(const Eo *obj);
Eina_Bool efl_access_text_caret_offset_set(Eo *obj, int offset);
</code>

%%Caret offset property%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:character_count|character_count]]** //**(get)**// ''protected''
<code c>
int efl_access_text_character_count_get(const Eo *obj);
</code>

%%Character count%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:character_extents|character_extents]]** //**(get)**// ''protected''
<code c>
Eina_Bool efl_access_text_character_extents_get(const Eo *obj, int offset, Eina_Bool screen_coords, Eina_Rect *rect);
</code>

%%Character extents%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:character|character]]** //**(get)**// ''protected''
<code c>
Eina_Unicode efl_access_text_character_get(const Eo *obj, int offset);
</code>

%%Gets single character present in accessible widget's text at given offset.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:default_attributes|default_attributes]]** //**(get)**// ''protected''
<code c>
Eina_List *efl_access_text_default_attributes_get(const Eo *obj);
</code>

%%Default attributes%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:offset_at_point|offset_at_point]]** //**(get)**// ''protected''
<code c>
int efl_access_text_offset_at_point_get(const Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Offset at given point%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:range_extents|range_extents]]** //**(get)**// ''protected''
<code c>
Eina_Bool efl_access_text_range_extents_get(const Eo *obj, Eina_Bool screen_coords, int start_offset, int end_offset, Eina_Rect *rect);
</code>

%%Range extents%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:selections_count|selections_count]]** //**(get)**// ''protected''
<code c>
int efl_access_text_selections_count_get(const Eo *obj);
</code>

%%Selection count property%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:selection|selection]]** //**(get, set)**// ''protected''
<code c>
void efl_access_text_selection_get(const Eo *obj, int selection_number, int *start_offset, int *end_offset);
Eina_Bool efl_access_text_selection_set(Eo *obj, int selection_number, int start_offset, int end_offset);
</code>

%%Selection property%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:string|string]]** //**(get)**// ''protected''
<code c>
char *efl_access_text_string_get(const Eo *obj, Efl_Access_Text_Granularity granularity, int *start_offset, int *end_offset);
</code>

%%Gets string, start and end offset in text according to given initial offset and granularity.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:property:text|text]]** //**(get)**// ''protected''
<code c>
char *efl_access_text_get(const Eo *obj, int start_offset, int end_offset);
</code>

%%Gets text of accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:canvas:layout_calc|Efl.Canvas.Layout_Calc]].**[[:develop:efl:auto:interface:efl:canvas:layout_calc:method:calc_force|calc_force]]** ''protected''
<code c>
void efl_canvas_layout_calc_force(Eo *obj);
</code>

%%Forces a Size/Geometry calculation.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:translatable|Efl.Ui.Translatable]].**[[:develop:efl:auto:class:elm:widget:method:translation_update|translation_update]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
void efl_ui_translatable_translation_update(Eo *obj);
</code>

%%This implements the calls to %%''gettext''%%() and %%''text_set''%%().%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:class:elm:widget:method:focus_grab|focus_grab]]** //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_Bool efl_access_component_focus_grab(Eo *obj);
</code>

%%Focuses accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:method:accessible_at_point_get|accessible_at_point_get]]** ''protected''
<code c>
Efl_Object *efl_access_component_accessible_at_point_get(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Gets top component object occupying space at given coordinates.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:method:contains|contains]]** ''protected''
<code c>
Eina_Bool efl_access_component_contains(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Contains accessible widget%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:property:alpha|alpha]]** //**(get)**// ''protected''
<code c>
double efl_access_component_alpha_get(const Eo *obj);
</code>

%%Gets alpha of accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:property:extents|extents]]** //**(get, set)**// ''protected''
<code c>
Eina_Rect efl_access_component_extents_get(const Eo *obj, Eina_Bool screen_coords);
Eina_Bool efl_access_component_extents_set(Eo *obj, Eina_Bool screen_coords, Eina_Rect rect);
</code>

%%Geometry of accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:property:layer|layer]]** //**(get)**// ''protected''
<code c>
int efl_access_component_layer_get(const Eo *obj);
</code>

%%Evas layer of accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:property:position|position]]** //**(get, set)**// ''protected''
<code c>
void efl_access_component_position_get(const Eo *obj, Eina_Bool screen_coords, int *x, int *y);
Eina_Bool efl_access_component_position_set(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Position of accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:property:size|size]]** //**(get, set)**// ''protected''
<code c>
void efl_access_component_size_get(const Eo *obj, int *w, int *h);
Eina_Bool efl_access_component_size_set(Eo *obj, int w, int h);
</code>

%%Size of accessible widget.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access:component|Efl.Access.Component]].**[[:develop:efl:auto:mixin:efl:access:component:property:z_order|z_order]]** //**(get)**// ''protected''
<code c>
int efl_access_component_z_order_get(const Eo *obj);
</code>

%%Gets the depth at which the component is shown in relation to other components in the same container.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:class:elm:widget:property:attributes|attributes]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_List *efl_access_attributes_get(const Eo *obj);
</code>

%%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:class:elm:widget:property:children|children]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_List *efl_access_children_get(const Eo *obj);
</code>

%%Gets object's accessible children.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:class:elm:widget:property:state_set|state_set]]** //**(get)**// //[Overridden in [[:develop:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Efl_Access_State_Set efl_access_state_set_get(const Eo *obj);
</code>

%%Gets set describing object accessible states.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:method:event_emit|event_emit]]** ''protected''
<code c>
void efl_access_event_emit(const Eo *obj, Efl_Access *accessible, const Efl_Event_Description *event, void *event_info);
</code>

%%Emit event%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:method:event_handler_add|event_handler_add]]** ''protected''
<code c>
Efl_Access_Event_Handler *efl_access_event_handler_add(const Eo *obj, Efl_Event_Cb cb, void *data);
</code>

%%Register accessibility event listener%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:method:event_handler_del|event_handler_del]]** ''protected''
<code c>
void efl_access_event_handler_del(const Eo *obj, Efl_Access_Event_Handler *handler);
</code>

%%Deregister accessibility event listener%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:index_in_parent|index_in_parent]]** //**(get)**// ''protected''
<code c>
int efl_access_index_in_parent_get(const Eo *obj);
</code>

%%Gets index of the child in parent's children list.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:localized_role_name|localized_role_name]]** //**(get)**// ''protected''
<code c>
const char *efl_access_localized_role_name_get(const Eo *obj);
</code>

%%Gets an localized string describing accessible object role name.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:relation_set|relation_set]]** //**(get)**// ''protected''
<code c>
Efl_Access_Relation_Set efl_access_relation_set_get(const Eo *obj);
</code>

%%Gets an all relations between accessible object and other accessible objects.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:property:role_name|role_name]]** //**(get)**// ''protected''
<code c>
const char *efl_access_role_name_get(const Eo *obj);
</code>

%%Gets human-readable string indentifying object accessibility role.%%\\ 
\\ 

===== Events =====

**[[:develop:efl:auto:class:elm:code_widget:event:changed_user|changed,user]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_CHANGED_USER(void)
</code>

%%Called when object changed due to user interaction%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:cursor_changed|cursor,changed]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_CURSOR_CHANGED(void)
</code>

%%Called when cursor changed%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:line_clicked|line,clicked]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_LINE_CLICKED(void)
</code>

%%Called when text line was clicked%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:line_gutter_clicked|line,gutter,clicked]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_LINE_GUTTER_CLICKED(void)
</code>

%%Called when gutter was clicked%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:selection_changed|selection,changed]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_SELECTION_CHANGED(void)
</code>

%%Called when selection changed%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:selection_cleared|selection,cleared]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_SELECTION_CLEARED(void)
</code>

%%Called when selection was cleared%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:selection_copy|selection,copy]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_SELECTION_COPY(void)
</code>

%%Called when a copy action is performed%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:selection_cut|selection,cut]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_SELECTION_CUT(void)
</code>

%%Called when a cut action is performed%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:selection_paste|selection,paste]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_SELECTION_PASTE(void)
</code>

%%Called when a paste action is performed%%\\ 
\\ 
**[[:develop:efl:auto:class:elm:code_widget:event:selection_start|selection,start]]**
<code c>
ELM_OBJ_CODE_WIDGET_EVENT_SELECTION_START(void)
</code>

%%Called when a selection is started%%\\ 
\\ 
==== Inherited ====

[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:ui:layout|Efl.Ui.Layout]].**[[:develop:efl:auto:class:efl:ui:layout:event:theme_changed|theme,changed]]**
<code c>
EFL_UI_LAYOUT_EVENT_THEME_CHANGED(void)
</code>

%%Called when theme changed%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:event:access_changed|access,changed]]**
<code c>
ELM_WIDGET_EVENT_ACCESS_CHANGED(void)
</code>

%%Called when accessibility changed%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:event:focused|focused]]**
<code c>
ELM_WIDGET_EVENT_FOCUSED(void)
</code>

%%Called when widget was focused%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:event:language_changed|language,changed]]**
<code c>
ELM_WIDGET_EVENT_LANGUAGE_CHANGED(void)
</code>

%%Called when widget language changed%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:event:moved|moved]]**
<code c>
ELM_WIDGET_EVENT_MOVED(void)
</code>

%%Called when widget moved%%\\ 
\\ 
[[:develop:efl:auto:class:elm:widget|Elm.Widget]].**[[:develop:efl:auto:class:elm:widget:event:unfocused|unfocused]]**
<code c>
ELM_WIDGET_EVENT_UNFOCUSED(void)
</code>

%%Called when widget was unfocused%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:event:access_text_attributes_changed|access,text,attributes,changed]]**
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_ATTRIBUTES_CHANGED(void)
</code>

%%Text attributes have changed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:event:access_text_bounds_changed|access,text,bounds,changed]]**
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_BOUNDS_CHANGED(void)
</code>

%%Text bounds have changed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:event:access_text_caret_moved|access,text,caret,moved]]**
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_CARET_MOVED(void)
</code>

%%Caret moved%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:event:access_text_inserted|access,text,inserted]]**
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_INSERTED(void)
</code>

%%Text was inserted%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:event:access_text_removed|access,text,removed]]**
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_REMOVED(void)
</code>

%%Text was removed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:access:text|Efl.Access.Text]].**[[:develop:efl:auto:interface:efl:access:text:event:access_text_selection_changed|access,text,selection,changed]]**
<code c>
EFL_ACCESS_TEXT_EVENT_ACCESS_TEXT_SELECTION_CHANGED(void)
</code>

%%Text selection has changed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:animator|Efl.Animator]].**[[:develop:efl:auto:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:container|Efl.Container]].**[[:develop:efl:auto:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:develop:efl:auto:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:develop:efl:auto:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:develop:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:develop:efl:auto:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:develop:efl:auto:interface:efl:ui:focus:user:event:logical_changed|logical,changed]]**
<code c>
EFL_UI_FOCUS_USER_EVENT_LOGICAL_CHANGED(Efl_Ui_Focus_Object *)
</code>

%%Emitted when a new logical parent should be used.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:develop:efl:auto:interface:efl:ui:focus:user:event:manager_changed|manager,changed]]**
<code c>
EFL_UI_FOCUS_USER_EVENT_MANAGER_CHANGED(Efl_Ui_Focus_Manager *)
</code>

%%Emitted when a new manager is the parent for this object.%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:active_descendant_changed|active,descendant,changed]]**
<code c>
EFL_ACCESS_EVENT_ACTIVE_DESCENDANT_CHANGED(void)
</code>

%%Called when active state of descendant has changed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:added|added]]**
<code c>
EFL_ACCESS_EVENT_ADDED(void)
</code>

%%Called when item was added%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:bounds_changed|bounds,changed]]**
<code c>
EFL_ACCESS_EVENT_BOUNDS_CHANGED(Efl_Access_Event_Geometry_Changed_Data)
</code>

%%Called when bounds have changed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:children_changed|children,changed]]**
<code c>
EFL_ACCESS_EVENT_CHILDREN_CHANGED(Efl_Access_Event_Children_Changed_Data)
</code>

%%Called when children have changed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:property_changed|property,changed]]**
<code c>
EFL_ACCESS_EVENT_PROPERTY_CHANGED(const char *)
</code>

%%Called when roperty has changed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:removed|removed]]**
<code c>
EFL_ACCESS_EVENT_REMOVED(void)
</code>

%%Called when item was removed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:state_changed|state,changed]]**
<code c>
EFL_ACCESS_EVENT_STATE_CHANGED(Efl_Access_Event_State_Changed_Data)
</code>

%%Called when tate has changed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:access|Efl.Access]].**[[:develop:efl:auto:mixin:efl:access:event:visible_data_changed|visible,data,changed]]**
<code c>
EFL_ACCESS_EVENT_VISIBLE_DATA_CHANGED(void)
</code>

%%Called when visibility has changed%%\\ 
\\ 
[[:develop:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:develop:efl:auto:mixin:efl:ui:focus:object:event:focus_changed|focus,changed]]**
<code c>
EFL_UI_FOCUS_OBJECT_EVENT_FOCUS_CHANGED(Eina_Bool)
</code>

%%Emitted if the focus state has changed%%\\ 
\\ 
