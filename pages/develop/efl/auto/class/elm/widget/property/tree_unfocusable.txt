<title>Elm.Widget.tree_unfocusable</title>
===== Signature =====

<code>
@property tree_unfocusable {
    get {
        values {
            tree_unfocusable: bool;
        }
    }
    set {
        values {
            tree_unfocusable: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool elm_obj_widget_tree_unfocusable_get(const Eo *obj);
void elm_obj_widget_tree_unfocusable_set(Eo *obj, Eina_Bool tree_unfocusable);
</code>

===== Values =====

  * **tree_unfocusable** - %%%%''true''%% for unfocusable, %%''false''%% for focusable.%%
===== Description =====

%%Make the elementary object and its children to be unfocusable (or focusable). If the tree is set as unfocusable, newest focused object which is not in this tree will get focus. This API can be helpful for an object to be deleted. When an object will be deleted soon, it and its children may not want to get focus (by focus reverting or by other focus controls). Then, just use this API before deleting.%%{{page>:docs:efl:user:class:elm:widget:property:tree_unfocusable:description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Elm.Widget.tree_unfocusable**

