<title>Elm.Table.pack</title>
===== Signature =====

<code>
pack {
    params {
        @in subobj: free(Efl.Canvas.Object, efl_del);
        @in column: int;
        @in row: int;
        @in colspan: int;
        @in rowspan: int;
    }
}
</code>

===== C signature =====

<code c>
void elm_obj_table_pack(Eo *obj, Efl_Canvas_Object *subobj, int column, int row, int colspan, int rowspan);
</code>

===== Parameters =====

  * **subobj** //(in)// - %%The subobject to be added to the table.%%
  * **column** //(in)// - %%Column number.%%
  * **row** //(in)// - %%Row number.%%
  * **colspan** //(in)// - %%Columns span.%%
  * **rowspan** //(in)// - %%Rows span.%%

===== Description =====

%%Add a subobject on the table with the coordinates passed.%%

%%All positioning inside the table is relative to rows and columns, so a value of 0 for x and y, means the top left cell of the table, and a value of 1 for w and h means %%''subobj''%% only takes that 1 cell.%%
</note>

%%Columns and rows only guarantee 16bit unsigned values at best. That means that col + colspan AND row + rowspan must fit inside 16bit unsigned values cleanly. You will be warned once values exceed 15bit storage, and attempting to use values not able to fit in 16bits will result in failure.%%
</note>
{{page>:develop:efl:user:class:elm:table:method:pack:description&nouser&nolink&nodate}}

===== Implemented by =====

  * **Elm.Table.pack**

