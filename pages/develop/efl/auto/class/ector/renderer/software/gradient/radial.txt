<title>Ector.Renderer.Software.Gradient.Radial</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    ector_renderer_software_gradient_radial [fillcolor = "black", label = "Ector.Renderer.Software.Gradient.Radial", color = "gray15", fontcolor = "white", style = "filled"]
    ector_renderer_software [fillcolor = "gray15", label = "Ector.Renderer.Software", color = "gray15", fontcolor = "white", style = "filled"]
    ector_renderer [fillcolor = "gray15", label = "Ector.Renderer", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    ector_renderer_gradient [fillcolor = "gray15", label = "Ector.Renderer.Gradient", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_gfx_gradient [fillcolor = "gray15", label = "Efl.Gfx.Gradient", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    ector_renderer_gradient_radial [fillcolor = "gray15", label = "Ector.Renderer.Gradient.Radial", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_gfx_gradient_radial [fillcolor = "gray15", label = "Efl.Gfx.Gradient.Radial", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_gradient [fillcolor = "gray15", label = "Efl.Gfx.Gradient", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    ector_renderer_software_gradient_radial -> ector_renderer_software
    ector_renderer_software -> ector_renderer
    ector_renderer -> efl_object
    ector_renderer_software_gradient_radial -> ector_renderer_gradient
    ector_renderer_gradient -> efl_gfx_gradient
    ector_renderer_software_gradient_radial -> ector_renderer_gradient_radial
    ector_renderer_gradient_radial -> efl_gfx_gradient_radial
    efl_gfx_gradient_radial -> efl_gfx_gradient
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:class:ector:renderer:software:gradient:radial|Ector.Renderer.Software.Gradient.Radial]] //(class)//**
    * [[:develop:efl:auto:class:ector:renderer:software|Ector.Renderer.Software]] //(class)//
      * [[:develop:efl:auto:class:ector:renderer|Ector.Renderer]] //(class)//
        * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:develop:efl:auto:mixin:ector:renderer:gradient|Ector.Renderer.Gradient]] //(mixin)//
      * [[:develop:efl:auto:interface:efl:gfx:gradient|Efl.Gfx.Gradient]] //(interface)//
    * [[:develop:efl:auto:mixin:ector:renderer:gradient:radial|Ector.Renderer.Gradient.Radial]] //(mixin)//
      * [[:develop:efl:auto:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]] //(interface)//
        * [[:develop:efl:auto:interface:efl:gfx:gradient|Efl.Gfx.Gradient]] //(interface)//

===== Description =====

%%Ector software renderer gradient radial%%

{{page>:develop:efl:user:class:ector:renderer:software:gradient:radial:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:efl:auto:class:ector:renderer:software|Ector.Renderer.Software]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:method:fill|fill]]** //[Overridden here]//
<code c>
Eina_Bool ector_renderer_software_fill(Eo *obj);
</code>

%%Renderer fill operation%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:method:bounds_get|bounds_get]]**
<code c>
void ector_renderer_bounds_get(Eo *obj, Eina_Rect *r);
</code>

%%Retrieves the bounds of the renderer%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:method:done|done]]**
<code c>
Eina_Bool ector_renderer_done(Eo *obj);
</code>

%%Done with rendering%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:color|color]]** //**(get, set)**//
<code c>
void ector_renderer_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void ector_renderer_color_set(Eo *obj, int r, int g, int b, int a);
</code>

%%Retrieves the general/main color of the given Ector renderer.%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:mask|mask]]** //**(get, set)**//
<code c>
Ector_Renderer *ector_renderer_mask_get(const Eo *obj);
void ector_renderer_mask_set(Eo *obj, Ector_Renderer *r);
</code>

%%Rendering mask%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:origin|origin]]** //**(get, set)**//
<code c>
void ector_renderer_origin_get(const Eo *obj, double *x, double *y);
void ector_renderer_origin_set(Eo *obj, double x, double y);
</code>

%%Renderer origin%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:quality|quality]]** //**(get, set)**//
<code c>
Ector_Quality ector_renderer_quality_get(const Eo *obj);
void ector_renderer_quality_set(Eo *obj, Ector_Quality q);
</code>

%%Quality of the renderer%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:surface|surface]]** //**(get, set)**//
<code c>
Ector_Surface *ector_renderer_surface_get(const Eo *obj);
void ector_renderer_surface_set(Eo *obj, Ector_Surface *s);
</code>

%%Surface associated with this renderer%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:transformation|transformation]]** //**(get, set)**//
<code c>
const Eina_Matrix3 *ector_renderer_transformation_get(const Eo *obj);
void ector_renderer_transformation_set(Eo *obj, const Eina_Matrix3 *m);
</code>

%%Transformation property%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:property:visibility|visibility]]** //**(get, set)**//
<code c>
Eina_Bool ector_renderer_visibility_get(const Eo *obj);
void ector_renderer_visibility_set(Eo *obj, Eina_Bool v);
</code>

%%The given Ector renderer can be visible or invisible.%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:method:draw|draw]]** //[Overridden here]//
<code c>
Eina_Bool ector_renderer_draw(Eo *obj, Efl_Gfx_Render_Op op, Eina_Array *clips, unsigned int mul_col);
</code>

%%Actual draw operation%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:method:prepare|prepare]]** //[Overridden here]//
<code c>
Eina_Bool ector_renderer_prepare(Eo *obj);
</code>

%%Prepare for rendering%%\\ 
\\ 
[[:develop:efl:auto:class:ector:renderer|Ector.Renderer]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:property:crc|crc]]** //**(get)**// //[Overridden here]//
<code c>
unsigned int ector_renderer_crc_get(const Eo *obj);
</code>

%%Cyclic redundancy check%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:ector:renderer:method:finalize|finalize]]** //[Overridden in [[:develop:efl:auto:class:ector:renderer|Ector.Renderer]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]].**[[:develop:efl:auto:mixin:ector:renderer:gradient:radial:property:center|center]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:mixin:ector:renderer:gradient:radial|Ector.Renderer.Gradient.Radial]]]//
<code c>
void efl_gfx_gradient_radial_center_get(const Eo *obj, double *x, double *y);
void efl_gfx_gradient_radial_center_set(Eo *obj, double x, double y);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]].**[[:develop:efl:auto:mixin:ector:renderer:gradient:radial:property:focal|focal]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:mixin:ector:renderer:gradient:radial|Ector.Renderer.Gradient.Radial]]]//
<code c>
void efl_gfx_gradient_radial_focal_get(const Eo *obj, double *x, double *y);
void efl_gfx_gradient_radial_focal_set(Eo *obj, double x, double y);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx:gradient:radial|Efl.Gfx.Gradient.Radial]].**[[:develop:efl:auto:mixin:ector:renderer:gradient:radial:property:radius|radius]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:mixin:ector:renderer:gradient:radial|Ector.Renderer.Gradient.Radial]]]//
<code c>
double efl_gfx_gradient_radial_radius_get(const Eo *obj);
void efl_gfx_gradient_radial_radius_set(Eo *obj, double r);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx:gradient|Efl.Gfx.Gradient]].**[[:develop:efl:auto:class:ector:renderer:software:gradient:radial:property:stop|stop]]** //**(get, set)**// //[Overridden here]//
<code c>
void efl_gfx_gradient_stop_get(const Eo *obj, const Efl_Gfx_Gradient_Stop **colors, unsigned int *length);
void efl_gfx_gradient_stop_set(Eo *obj, const Efl_Gfx_Gradient_Stop *colors, unsigned int length);
</code>

\\ 
[[:develop:efl:auto:interface:efl:gfx:gradient|Efl.Gfx.Gradient]].**[[:develop:efl:auto:mixin:ector:renderer:gradient:property:spread|spread]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:mixin:ector:renderer:gradient|Ector.Renderer.Gradient]]]//
<code c>
Efl_Gfx_Gradient_Spread efl_gfx_gradient_spread_get(const Eo *obj);
void efl_gfx_gradient_spread_set(Eo *obj, Efl_Gfx_Gradient_Spread s);
</code>

\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
