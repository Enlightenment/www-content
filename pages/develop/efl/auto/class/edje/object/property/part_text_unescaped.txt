<title>Edje.Object.part_text_unescaped</title>
===== Signature =====

<code>
@property part_text_unescaped {
    get {
        keys {
            part: string;
        }
        values {
            text_to_escape: ptr(own(char));
        }
    }
    set {
        keys {
            part: string;
        }
        values {
            text_to_escape: string;
        }
        return: bool;
    }
}
</code>

===== C signature =====

<code c>
char *edje_obj_part_text_unescaped_get(const Eo *obj, const char *part);
Eina_Bool edje_obj_part_text_unescaped_set(Eo *obj, const char *part, const char *text_to_escape);
</code>

===== Keys =====

  * **part** - %%The part name%%
===== Values =====

==== Getter ====

  * **text_to_escape** - %%The text string%%
==== Setter ====

  * **text_to_escape** - %%The text string%%
===== Description =====



{{page>:docs:efl:user:class:edje:object:property:part_text_unescaped:description&nodate&nolink&nouser}}

==== Getter ====

%%Returns the text of the object part, without escaping.%%

%%This function is the counterpart of %%[[:docs:efl:auto:class:edje:object:property:part_text_unescaped|Edje.Object.part_text_unescaped.set]]%%(). Please notice that the result is newly allocated memory and should be released with free() when done.%%

%%See also %%[[:docs:efl:auto:class:edje:object:property:part_text_unescaped|Edje.Object.part_text_unescaped.set]]%%().%%

{{page>:docs:efl:user:class:edje:object:property:part_text_unescaped:getter_description&nodate&nolink&nouser}}

==== Setter ====

%%Sets the raw (non escaped) text for an object part.%%

%%This function will not do escape for you if it is a TEXTBLOCK part, that is, if text contain tags, these tags will not be interpreted/parsed by TEXTBLOCK.%%

%%See also %%[[:docs:efl:auto:class:edje:object:property:part_text_unescaped|Edje.Object.part_text_unescaped.get]]%%().%%{{page>:docs:efl:user:class:edje:object:property:part_text_unescaped:getter_description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Edje.Object.part_text_unescaped**

