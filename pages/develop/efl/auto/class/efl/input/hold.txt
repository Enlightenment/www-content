<title>Efl.Input.Hold</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_input_hold [fillcolor = "black", label = "Efl.Input.Hold", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_input_event [fillcolor = "gray15", label = "Efl.Input.Event", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_input_hold -> efl_object
    efl_input_hold -> efl_input_event
    efl_input_event -> efl_interface
    efl_input_event -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:input:hold|Efl.Input.Hold]] //(class)//**
    * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
    * [[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]] //(mixin)//
      * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
      * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%Event data sent when inputs are put on hold or resumed.%%

{{page>:docs:efl:user:class:efl:input:hold:description&nodate&nolink&nouser}}

===== Members =====

**[[:docs:efl:auto:class:efl:input:hold:property:hold|hold]]** //**(get, set)**//
<code c>
Eina_Bool efl_input_hold_get(const Eo *obj);
void efl_input_hold_set(Eo *obj, Eina_Bool val);
</code>

%%Property to show if inputs are now on hold.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:input:hold:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:input:hold:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:class:efl:input:hold:method:dup|dup]]** //[Overridden here]//
<code c>
Efl_Input_Event *efl_input_dup(Eo *obj);
</code>

%%Creates a copy of this event.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:class:efl:input:hold:method:reset|reset]]** //[Overridden here]//
<code c>
void efl_input_reset(Eo *obj);
</code>

%%Resets the internal data to 0 or default values.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:class:efl:input:hold:property:device|device]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Input_Device *efl_input_device_get(const Eo *obj);
void efl_input_device_set(Eo *obj, Efl_Input_Device *dev);
</code>

%%Input device that originated this event.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:class:efl:input:hold:property:event_flags|event_flags]]** //**(get, set)**// //[Overridden here]//
<code c>
Efl_Input_Flags efl_input_event_flags_get(const Eo *obj);
void efl_input_event_flags_set(Eo *obj, Efl_Input_Flags flags);
</code>

%%Extra flags for this event, may be changed by the user.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:class:efl:input:hold:property:timestamp|timestamp]]** //**(get, set)**// //[Overridden here]//
<code c>
double efl_input_timestamp_get(const Eo *obj);
void efl_input_timestamp_set(Eo *obj, double ms);
</code>

%%The time at which an event was generated.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:mixin:efl:input:event:property:fake|fake]]** //**(get)**//
<code c>
Eina_Bool efl_input_fake_get(const Eo *obj);
</code>

%%%%''true''%% if the event was fake, not triggered by real hardware.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:mixin:efl:input:event:property:processed|processed]]** //**(get, set)**//
<code c>
Eina_Bool efl_input_processed_get(const Eo *obj);
void efl_input_processed_set(Eo *obj, Eina_Bool val);
</code>

%%%%''true''%% if %%[[:docs:efl:auto:mixin:efl:input:event:property:event_flags|Efl.Input.Event.event_flags]]%% indicates the event is on hold.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:input:event|Efl.Input.Event]].**[[:docs:efl:auto:mixin:efl:input:event:property:scrolling|scrolling]]** //**(get, set)**//
<code c>
Eina_Bool efl_input_scrolling_get(const Eo *obj);
void efl_input_scrolling_set(Eo *obj, Eina_Bool val);
</code>

%%%%''true''%% if %%[[:docs:efl:auto:mixin:efl:input:event:property:event_flags|Efl.Input.Event.event_flags]]%% indicates the event happened while scrolling.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
