<title>Efl.Io.Buffered_Stream: line</title>
===== Signature =====

<code>
line: ptr(const(Eina.Slice));
</code>

===== C information =====

<code c>
EFL_IO_BUFFERED_STREAM_EVENT_LINE(const Eina_Slice *)
</code>

===== C usage =====

<code c>
static void
on_efl_io_buffered_stream_event_line(void *data, const Efl_Event *event)
{
    const Eina_Slice *info = event->info;
    Eo *obj = event->object;
    Data *d = data;

    /* event hander code */
}

static void
setup_event_handler(Eo *obj, Data *d)
{
    efl_event_callback_add(obj, EFL_IO_BUFFERED_STREAM_EVENT_LINE, on_efl_io_buffered_stream_event_line, d);
}

</code>

===== Description =====

%%If %%[[:docs:efl:auto:class:efl:io:buffered_stream:property:line_delimiter|Efl.Io.Buffered_Stream.line_delimiter]]%% is set, will be emitted with current line. The memory is only valid during event callback dispatched and should not be modified. Note that the line slice may not be inside %%[[:docs:efl:auto:class:efl:io:buffered_stream:property:slice|Efl.Io.Buffered_Stream.slice]]%%, don't assume that!%%

//Since 1.19//
{{page>:docs:efl:user:class:efl:io:buffered_stream:event:line:description&nodate&nolink&nouser}}

