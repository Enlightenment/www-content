<title>Efl.Io.Copier.line_delimiter</title>
===== Signature =====

<code>
@property line_delimiter {
    get {
        values {
            slice: Eina.Slice;
        }
    }
    set {
        values {
            slice: Eina.Slice;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Slice efl_io_copier_line_delimiter_get(const Eo *obj);
void efl_io_copier_line_delimiter_set(Eo *obj, Eina_Slice slice);
</code>

===== Values =====

  * **slice** - %%The contents may contain 0 and will be copied%%
===== Description =====

%%If there is a line delimiter, the reads will buffer/queue up to the line delimiter before calling %%[[:docs:efl:auto:interface:efl:io:writer:method:write|Efl.Io.Writer.write]]%% on the %%[[:docs:efl:auto:class:efl:io:copier:property:destination|Efl.Io.Copier.destination]]%% and the event line is emitted with current line. The line may include the delimiter, unless it's end-of-stream on %%[[:docs:efl:auto:class:efl:io:copier:property:source|Efl.Io.Copier.source]]%% or %%[[:docs:efl:auto:class:efl:io:copier:property:buffer_limit|Efl.Io.Copier.buffer_limit]]%% was reached.%%

//Since 1.19//

{{page>:docs:efl:user:class:efl:io:copier:property:line_delimiter:description&nodate&nolink&nouser}}

==== Setter ====

%%Change line delimiter to use. If empty, no delimiter is to be used%%

//Since 1.19//{{page>:docs:efl:user:class:efl:io:copier:property:line_delimiter:getter_description&nodate&nolink&nouser}}


===== Implemented by =====

  * **Efl.Io.Copier.line_delimiter**

