<title>Efl.Ui.Text.Editable</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_ui_text_editable [fillcolor = "black", label = "Efl.Ui.Text.Editable", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_text [fillcolor = "gray15", label = "Efl.Ui.Text", color = "gray15", fontcolor = "white", style = "filled"]
    elm_layout [fillcolor = "gray15", label = "Elm.Layout", color = "gray15", fontcolor = "white", style = "filled"]
    elm_widget [fillcolor = "gray15", label = "Elm.Widget", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_accessible [fillcolor = "gray15", label = "Elm.Interface.Atspi_Accessible", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    elm_interface_atspi_component [fillcolor = "gray15", label = "Elm.Interface.Atspi_Component", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_focus_user [fillcolor = "gray15", label = "Efl.Ui.Focus.User", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_focus_object [fillcolor = "gray15", label = "Efl.Ui.Focus.Object", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_part [fillcolor = "gray15", label = "Efl.Part", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_container [fillcolor = "gray15", label = "Efl.Container", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_view [fillcolor = "gray15", label = "Efl.Ui.View", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_model_connect [fillcolor = "gray15", label = "Efl.Ui.Model.Connect", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_model_factory_connect [fillcolor = "gray15", label = "Efl.Ui.Model.Factory.Connect", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    elm_interface_scrollable [fillcolor = "gray15", label = "Elm.Interface_Scrollable", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_scrollable [fillcolor = "gray15", label = "Efl.Ui.Scrollable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_canvas_group [fillcolor = "gray15", label = "Efl.Canvas.Group", color = "gray15", fontcolor = "white", style = "filled"]
    efl_canvas_object [fillcolor = "gray15", label = "Efl.Canvas.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_gfx [fillcolor = "gray15", label = "Efl.Gfx", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_stack [fillcolor = "gray15", label = "Efl.Gfx.Stack", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_animator [fillcolor = "gray15", label = "Efl.Animator", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_input_interface [fillcolor = "gray15", label = "Efl.Input.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_size_hint [fillcolor = "gray15", label = "Efl.Gfx.Size.Hint", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_gfx_map [fillcolor = "gray15", label = "Efl.Gfx.Map", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_interface [fillcolor = "gray15", label = "Efl.Interface", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_focus_manager [fillcolor = "gray15", label = "Efl.Ui.Focus.Manager", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_ui_clickable [fillcolor = "gray15", label = "Efl.Ui.Clickable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    elm_interface_atspi_text [fillcolor = "gray15", label = "Elm.Interface.Atspi.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    elm_interface_atspi_text_editable [fillcolor = "gray15", label = "Elm.Interface.Atspi.Text.Editable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_file [fillcolor = "gray15", label = "Efl.File", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_selectable [fillcolor = "gray15", label = "Efl.Ui.Selectable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_scrollable [fillcolor = "gray15", label = "Efl.Ui.Scrollable", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_ui_text_interactive [fillcolor = "gray15", label = "Efl.Ui.Text.Interactive", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text [fillcolor = "gray15", label = "Efl.Text", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_font [fillcolor = "gray15", label = "Efl.Text.Font", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_format [fillcolor = "gray15", label = "Efl.Text.Format", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_style [fillcolor = "gray15", label = "Efl.Text.Style", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_ui_text_editable -> efl_ui_text
    efl_ui_text -> elm_layout
    elm_layout -> elm_widget
    elm_widget -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    elm_widget -> elm_interface_atspi_accessible
    elm_interface_atspi_accessible -> efl_interface
    elm_interface_atspi_accessible -> efl_object
    elm_widget -> elm_interface_atspi_component
    elm_widget -> efl_ui_focus_user
    elm_widget -> efl_ui_focus_object
    elm_layout -> efl_part
    elm_layout -> efl_container
    efl_container -> efl_gfx
    elm_layout -> efl_file
    elm_layout -> efl_ui_view
    elm_layout -> efl_ui_model_connect
    elm_layout -> efl_ui_model_factory_connect
    efl_ui_text -> elm_interface_scrollable
    elm_interface_scrollable -> efl_ui_scrollable
    elm_interface_scrollable -> efl_canvas_group
    efl_canvas_group -> efl_canvas_object
    efl_canvas_object -> efl_object
    efl_canvas_object -> efl_gfx
    efl_canvas_object -> efl_gfx_stack
    efl_canvas_object -> efl_animator
    efl_canvas_object -> efl_input_interface
    efl_canvas_object -> efl_gfx_size_hint
    efl_canvas_object -> efl_gfx_map
    efl_gfx_map -> efl_interface
    efl_gfx_map -> efl_object
    efl_canvas_object -> efl_loop_user
    efl_loop_user -> efl_object
    elm_interface_scrollable -> efl_ui_focus_manager
    efl_ui_focus_manager -> efl_object
    efl_ui_text -> efl_ui_clickable
    efl_ui_text -> elm_interface_atspi_text
    efl_ui_text -> elm_interface_atspi_text_editable
    efl_ui_text -> efl_file
    efl_ui_text -> efl_ui_selectable
    efl_ui_text -> efl_ui_scrollable
    efl_ui_text -> efl_ui_text_interactive
    efl_ui_text_interactive -> efl_text
    efl_ui_text_interactive -> efl_text_font
    efl_ui_text_interactive -> efl_text_format
    efl_ui_text_interactive -> efl_text_style
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:docs:efl:auto:class:efl:ui:text:editable|Efl.Ui.Text.Editable]] //(class)//**
    * [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]] //(class)//
      * [[:docs:efl:auto:class:elm:layout|Elm.Layout]] //(class)//
        * [[:docs:efl:auto:class:elm:widget|Elm.Widget]] //(class)//
          * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
            * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
              * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
              * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
              * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
              * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
              * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
              * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
                * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
                * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
              * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
                * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
          * [[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]] //(mixin)//
            * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
          * [[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]] //(mixin)//
          * [[:docs:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]] //(interface)//
          * [[:docs:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]] //(mixin)//
        * [[:docs:efl:auto:interface:efl:part|Efl.Part]] //(interface)//
        * [[:docs:efl:auto:interface:efl:container|Efl.Container]] //(interface)//
          * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
        * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//
        * [[:docs:efl:auto:interface:efl:ui:view|Efl.Ui.View]] //(interface)//
        * [[:docs:efl:auto:interface:efl:ui:model:connect|Efl.Ui.Model.Connect]] //(interface)//
        * [[:docs:efl:auto:interface:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]] //(interface)//
      * [[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]] //(mixin)//
        * [[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
        * [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]] //(class)//
          * [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]] //(interface)//
            * [[:docs:efl:auto:interface:efl:animator|Efl.Animator]] //(interface)//
            * [[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]] //(interface)//
            * [[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]] //(interface)//
            * [[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]] //(mixin)//
              * [[:docs:efl:auto:interface:efl:interface|Efl.Interface]] //(interface)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
            * [[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
              * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(class)//
          * [[:docs:efl:auto:class:efl:object|Efl.Object]] //(class)//
      * [[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]] //(interface)//
      * [[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]] //(interface)//
      * [[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]] //(interface)//
      * [[:docs:efl:auto:interface:efl:file|Efl.File]] //(interface)//
      * [[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]] //(interface)//
      * [[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]] //(interface)//
      * [[:docs:efl:auto:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]] //(interface)//
        * [[:docs:efl:auto:interface:efl:text|Efl.Text]] //(interface)//
        * [[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]] //(interface)//
        * [[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]] //(interface)//
        * [[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]] //(interface)//

===== Description =====

%%Efl UI text editable class%%

{{page>:docs:efl:user:class:efl:ui:text:editable:description&nodate&nolink&nouser}}

==== Inherited ====

[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:method:group_change|group_change]]**
<code c>
void efl_canvas_group_change(Eo *obj);
</code>

%%Marks the object as dirty.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:method:group_children_iterate|group_children_iterate]]**
<code c>
Eina_Iterator *efl_canvas_group_children_iterate(const Eo *obj);
</code>

%%Returns an iterator over the children of this object, that are canvas objects.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:canvas:group:property:group_need_recalculate|group_need_recalculate]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_group_need_recalculate_get(const Eo *obj);
void efl_canvas_group_need_recalculate_set(Eo *obj, Eina_Bool value);
</code>

%%Indicates that the group's layout need to be recalculated.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:efl:ui:text:method:group_member_add|group_member_add]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void efl_canvas_group_member_add(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Set an Evas object as a member of a given smart object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:layout:method:group_calculate|group_calculate]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_canvas_group_calculate(Eo *obj);
</code>

%%Triggers an immediate recalculation of this object's geometry.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]].**[[:docs:efl:auto:class:elm:widget:method:group_member_del|group_member_del]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_canvas_group_member_del(Eo *obj, Efl_Canvas_Object *sub_obj);
</code>

%%Removes a member object from a given smart object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:group:property:paragraph_direction|paragraph_direction]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:group|Efl.Canvas.Group]]]//
<code c>
Efl_Text_Bidirectional_Type efl_canvas_object_paragraph_direction_get(const Eo *obj);
void efl_canvas_object_paragraph_direction_set(Eo *obj, Efl_Text_Bidirectional_Type dir);
</code>

%%This handles text paragraph direction of the given object. Even if the given object is not textblock or text, its smart child objects can inherit the paragraph direction from the given object. The default paragraph direction is %%''inherit''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:clipees_has|clipees_has]]**
<code c>
Eina_Bool efl_canvas_object_clipees_has(const Eo *obj);
</code>

%%Test if any object is clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_grab|key_grab]]**
<code c>
Eina_Bool efl_canvas_object_key_grab(Eo *obj, const char *keyname, Efl_Input_Modifier modifiers, Efl_Input_Modifier not_modifiers, Eina_Bool exclusive);
</code>

%%Requests %%''keyname''%% key events be directed to %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:key_ungrab|key_ungrab]]**
<code c>
void efl_canvas_object_key_ungrab(Eo *obj, const char *keyname, Efl_Input_Modifier modifiers, Efl_Input_Modifier not_modifiers);
</code>

%%Removes the grab on %%''keyname''%% key events by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_add|seat_focus_add]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_add(Eo *obj, Efl_Input_Device *seat);
</code>

%%Add a seat to the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_check|seat_focus_check]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_check(Eo *obj, Efl_Input_Device *seat);
</code>

%%Check if this object is focused by a given seat%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:method:seat_focus_del|seat_focus_del]]**
<code c>
Eina_Bool efl_canvas_object_seat_focus_del(Eo *obj, Efl_Input_Device *seat);
</code>

%%Remove a seat from the focus list.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:anti_alias|anti_alias]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_anti_alias_get(const Eo *obj);
void efl_canvas_object_anti_alias_set(Eo *obj, Eina_Bool anti_alias);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:clipees|clipees]]** //**(get)**//
<code c>
Eina_Iterator *efl_canvas_object_clipees_get(const Eo *obj);
</code>

%%Return a list of objects currently clipped by %%''obj''%%.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:freeze_events|freeze_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_freeze_events_get(const Eo *obj);
void efl_canvas_object_freeze_events_set(Eo *obj, Eina_Bool freeze);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:key_focus|key_focus]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_key_focus_get(const Eo *obj);
void efl_canvas_object_key_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Indicates that this object is the keyboard event receiver on its canvas.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pass_events|pass_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_pass_events_get(const Eo *obj);
void efl_canvas_object_pass_events_set(Eo *obj, Eina_Bool pass);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_device_in|pointer_device_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_device_in_get(const Eo *obj, Efl_Input_Device *pointer);
</code>

%%Read-only value indicating whether a pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_in|pointer_in]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_pointer_in_get(const Eo *obj);
</code>

%%Read-only value indicating whether the main pointer is in the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode_by_device|pointer_mode_by_device]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_by_device_get(const Eo *obj, Efl_Input_Device *dev);
Eina_Bool efl_canvas_object_pointer_mode_by_device_set(Eo *obj, Efl_Input_Device *dev, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour by device. See %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.get]]%% and %%[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|Efl.Canvas.Object.pointer_mode.set]]%% for more explanation.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:pointer_mode|pointer_mode]]** //**(get, set)**//
<code c>
Efl_Input_Object_Pointer_Mode efl_canvas_object_pointer_mode_get(const Eo *obj);
Eina_Bool efl_canvas_object_pointer_mode_set(Eo *obj, Efl_Input_Object_Pointer_Mode pointer_mode);
</code>

%%Low-level pointer behaviour.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:precise_is_inside|precise_is_inside]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:propagate_events|propagate_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_propagate_events_get(const Eo *obj);
void efl_canvas_object_propagate_events_set(Eo *obj, Eina_Bool propagate);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_op|render_op]]** //**(get, set)**//
<code c>
Efl_Gfx_Render_Op efl_canvas_object_render_op_get(const Eo *obj);
void efl_canvas_object_render_op_set(Eo *obj, Efl_Gfx_Render_Op render_op);
</code>

%%Render mode to be used for compositing the Evas object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool efl_canvas_object_repeat_events_get(const Eo *obj);
void efl_canvas_object_repeat_events_set(Eo *obj, Eina_Bool repeat);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:scale|scale]]** //**(get, set)**//
<code c>
double efl_canvas_object_scale_get(const Eo *obj);
void efl_canvas_object_scale_set(Eo *obj, double scale);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_focus|seat_focus]]** //**(get)**//
<code c>
Eina_Bool efl_canvas_object_seat_focus_get(const Eo *obj);
</code>

%%Check if this object is focused.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:elm:widget:property:clip|clip]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Canvas_Object *efl_canvas_object_clip_get(const Eo *obj);
void efl_canvas_object_clip_set(Eo *obj, Efl_Canvas_Object *clip);
</code>

\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:elm:widget:property:is_frame_object|is_frame_object]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_canvas_object_is_frame_object_get(const Eo *obj);
void efl_canvas_object_is_frame_object_set(Eo *obj, Eina_Bool is_frame);
</code>

%%If %%''true''%% the object belongs to the window border decorations.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:elm:widget:property:no_render|no_render]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_canvas_object_no_render_get(const Eo *obj);
void efl_canvas_object_no_render_set(Eo *obj, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:docs:efl:auto:class:efl:canvas:object:property:loop|loop]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it. The search string can be a glob (shell style). It can also specify class name in the format of "class:name" where ":" separates class and name. Both class and name can be globs. If class is specified, and name is empty like "class:" then the search will match any object of that class.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:ui:text:editable:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:ui:text:method:destructor|destructor]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:elm:widget:method:finalize|finalize]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:elm:widget:method:provider_find|provider_find]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:fetch|fetch]]**
<code c>
Efl_Ui_Focus_Relations *efl_ui_focus_manager_fetch(Eo *obj, Efl_Ui_Focus_Object *child);
</code>

%%This will fetch the data from a registered node.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:focused|focused]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_focused(Eo *obj);
</code>

%%Return the currently focused element of this manager.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:logical_end|logical_end]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_logical_end(Eo *obj);
</code>

%%Return the last logical object.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:move|move]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>

%%Move the focus into the given direction.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:register_logical|register_logical]]**
<code c>
Eina_Bool efl_ui_focus_manager_register_logical(Eo *obj, Efl_Ui_Focus_Object *child, Efl_Ui_Focus_Object *parent, Efl_Ui_Focus_Manager *redirect);
</code>

%%Register a new item just for the logical parent.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:register|register]]**
<code c>
Eina_Bool efl_ui_focus_manager_register(Eo *obj, Efl_Ui_Focus_Object *child, Efl_Ui_Focus_Object *parent, Efl_Ui_Focus_Manager *redirect);
</code>

%%Register a new item in the graph.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:request_move|request_move]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>

%%Returns the object which would be the next object to focus in the given direction.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:unregister|unregister]]**
<code c>
void efl_ui_focus_manager_unregister(Eo *obj, Efl_Ui_Focus_Object *child);
</code>

%%Unregister the given item from the focus graph.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:update_children|update_children]]**
<code c>
Eina_Bool efl_ui_focus_manager_update_children(Eo *obj, Efl_Ui_Focus_Object *parent, Eina_List *children);
</code>

%%Give the list of children a different order.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:update_order|update_order]]**
<code c>
void efl_ui_focus_manager_update_order(Eo *obj, Efl_Ui_Focus_Object *parent, Eina_List *children);
</code>

%%Give the given order to the parent's child.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:update_parent|update_parent]]**
<code c>
Eina_Bool efl_ui_focus_manager_update_parent(Eo *obj, Efl_Ui_Focus_Object *child, Efl_Ui_Focus_Object *parent);
</code>

%%Set a new logical parent for the given child.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:method:update_redirect|update_redirect]]**
<code c>
Eina_Bool efl_ui_focus_manager_update_redirect(Eo *obj, Efl_Ui_Focus_Object *child, Efl_Ui_Focus_Manager *redirect);
</code>

%%Set a new redirect object for the given child.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Manager *efl_ui_focus_manager_redirect_get(const Eo *obj);
void efl_ui_focus_manager_redirect_set(Eo *obj, Efl_Ui_Focus_Manager *redirect);
</code>

%%Add a another manager to serve the move requests.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:property:root|root]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_root_get(const Eo *obj);
Eina_Bool efl_ui_focus_manager_root_set(Eo *obj, Efl_Ui_Focus_Object *root);
</code>

%%Root node for all logical subtrees.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:focus|focus]]** //[Overridden in [[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]]]//
<code c>
void efl_ui_focus_manager_focus(Eo *obj, Efl_Ui_Focus_Object *focus);
</code>

%%Make the given object the currently focused object in this manager.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:border_elements|border_elements]]** //**(get)**// //[Overridden in [[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]]]//
<code c>
Eina_Iterator *efl_ui_focus_manager_border_elements_get(const Eo *obj);
</code>

%%The list of elements which are at the border of the graph.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:context_menu_clear|context_menu_clear]]**
<code c>
void efl_ui_text_context_menu_clear(Eo *obj);
</code>

%%This clears and frees the items in a entry's contextual (longpress) menu.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:context_menu_item_add|context_menu_item_add]]**
<code c>
void efl_ui_text_context_menu_item_add(Eo *obj, const char *label, const char *icon_file, Elm_Icon_Type icon_type, Evas_Smart_Cb func, const void *data);
</code>

%%This adds an item to the entry's contextual menu.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:cursor_new|cursor_new]]**
<code c>
Efl_Canvas_Text_Cursor *efl_ui_text_cursor_new(Eo *obj);
</code>

%%Creates and returns a new cursor for the text.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:cursor_selection_end|cursor_selection_end]]**
<code c>
void efl_ui_text_cursor_selection_end(Eo *obj);
</code>

%%This ends a selection within the entry as though the user had just released the mouse button while making a selection.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:input_panel_hide|input_panel_hide]]**
<code c>
void efl_ui_text_input_panel_hide(Eo *obj);
</code>

%%Hide the input panel (virtual keyboard).%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:input_panel_imdata_get|input_panel_imdata_get]]**
<code c>
void efl_ui_text_input_panel_imdata_get(const Eo *obj, void data, int *len);
</code>

%%Get the specific data of the current input panel.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:input_panel_imdata_set|input_panel_imdata_set]]**
<code c>
void efl_ui_text_input_panel_imdata_set(Eo *obj, const void *data, int len);
</code>

%%Set the input panel-specific data to deliver to the input panel.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:input_panel_show|input_panel_show]]**
<code c>
void efl_ui_text_input_panel_show(Eo *obj);
</code>

%%Show the input panel (virtual keyboard) based on the input panel property of entry such as layout, autocapital types, and so on.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:item_provider_append|item_provider_append]]**
<code c>
void efl_ui_text_item_provider_append(Eo *obj, Elm_Entry_Item_Provider_Cb func, void *data);
</code>

%%This appends a custom item provider to the list for that entry%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:item_provider_prepend|item_provider_prepend]]**
<code c>
void efl_ui_text_item_provider_prepend(Eo *obj, Elm_Entry_Item_Provider_Cb func, void *data);
</code>

%%This prepends a custom item provider to the list for that entry%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:item_provider_remove|item_provider_remove]]**
<code c>
void efl_ui_text_item_provider_remove(Eo *obj, Elm_Entry_Item_Provider_Cb func, void *data);
</code>

%%This removes a custom item provider to the list for that entry%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:selection_copy|selection_copy]]**
<code c>
void efl_ui_text_selection_copy(Eo *obj);
</code>

%%This executes a "copy" action on the selected text in the entry.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:selection_cut|selection_cut]]**
<code c>
void efl_ui_text_selection_cut(Eo *obj);
</code>

%%This executes a "cut" action on the selected text in the entry.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:selection_paste|selection_paste]]**
<code c>
void efl_ui_text_selection_paste(Eo *obj);
</code>

%%This executes a "paste" action in the entry.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:autocapital_type|autocapital_type]]** //**(get, set)**//
<code c>
Elm_Autocapital_Type efl_ui_text_autocapital_type_get(const Eo *obj);
void efl_ui_text_autocapital_type_set(Eo *obj, Elm_Autocapital_Type autocapital_type);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:cnp_mode|cnp_mode]]** //**(get, set)**//
<code c>
Elm_Cnp_Mode efl_ui_text_cnp_mode_get(const Eo *obj);
void efl_ui_text_cnp_mode_set(Eo *obj, Elm_Cnp_Mode cnp_mode);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:context_menu_disabled|context_menu_disabled]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_context_menu_disabled_get(const Eo *obj);
void efl_ui_text_context_menu_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_hint|input_hint]]** //**(get, set)**//
<code c>
Elm_Input_Hints efl_ui_text_input_hint_get(const Eo *obj);
void efl_ui_text_input_hint_set(Eo *obj, Elm_Input_Hints hints);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_enabled|input_panel_enabled]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_input_panel_enabled_get(const Eo *obj);
void efl_ui_text_input_panel_enabled_set(Eo *obj, Eina_Bool enabled);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_language|input_panel_language]]** //**(get, set)**//
<code c>
Elm_Input_Panel_Lang efl_ui_text_input_panel_language_get(const Eo *obj);
void efl_ui_text_input_panel_language_set(Eo *obj, Elm_Input_Panel_Lang lang);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_layout_variation|input_panel_layout_variation]]** //**(get, set)**//
<code c>
int efl_ui_text_input_panel_layout_variation_get(const Eo *obj);
void efl_ui_text_input_panel_layout_variation_set(Eo *obj, int variation);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_layout|input_panel_layout]]** //**(get, set)**//
<code c>
Elm_Input_Panel_Layout efl_ui_text_input_panel_layout_get(const Eo *obj);
void efl_ui_text_input_panel_layout_set(Eo *obj, Elm_Input_Panel_Layout layout);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_return_key_autoenabled|input_panel_return_key_autoenabled]]** //**(set)**//
<code c>
void efl_ui_text_input_panel_return_key_autoenabled_set(Eo *obj, Eina_Bool enabled);
</code>

%%Set whether the return key on the input panel is disabled automatically when entry has no text.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_return_key_disabled|input_panel_return_key_disabled]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_input_panel_return_key_disabled_get(const Eo *obj);
void efl_ui_text_input_panel_return_key_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_return_key_type|input_panel_return_key_type]]** //**(get, set)**//
<code c>
Elm_Input_Panel_Return_Key_Type efl_ui_text_input_panel_return_key_type_get(const Eo *obj);
void efl_ui_text_input_panel_return_key_type_set(Eo *obj, Elm_Input_Panel_Return_Key_Type return_key_type);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:input_panel_show_on_demand|input_panel_show_on_demand]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_input_panel_show_on_demand_get(const Eo *obj);
void efl_ui_text_input_panel_show_on_demand_set(Eo *obj, Eina_Bool ondemand);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:password|password]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_password_get(const Eo *obj);
void efl_ui_text_password_set(Eo *obj, Eina_Bool password);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:prediction_allow|prediction_allow]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_prediction_allow_get(const Eo *obj);
void efl_ui_text_prediction_allow_set(Eo *obj, Eina_Bool prediction);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:scrollable|scrollable]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_scrollable_get(const Eo *obj);
void efl_ui_text_scrollable_set(Eo *obj, Eina_Bool scroll);
</code>

\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:selection_handler_disabled|selection_handler_disabled]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_selection_handler_disabled_get(const Eo *obj);
void efl_ui_text_selection_handler_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:method:signal_callback_add|signal_callback_add]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void elm_obj_layout_signal_callback_add(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func, void *data);
</code>

%%Add a callback for a (Edje) signal emitted by a layout widget's underlying Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:method:signal_callback_del|signal_callback_del]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void *elm_obj_layout_signal_callback_del(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func);
</code>

%%Remove a signal-triggered callback from a given layout widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:method:signal_emit|signal_emit]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void elm_obj_layout_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Send a (Edje) signal to a given layout widget's underlying Edje object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:method:sizing_eval|sizing_eval]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void elm_obj_layout_sizing_eval(Eo *obj);
</code>

%%Eval sizing.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:method:theme_enable|theme_enable]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_layout_theme_enable(Eo *obj);
</code>

%%Enable theme%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:property:text|text]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
const char *elm_obj_layout_text_get(const Eo *obj, const char *part);
Eina_Bool elm_obj_layout_text_set(Eo *obj, const char *part, const char *text);
</code>

\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:data_get|data_get]]**
<code c>
const char *elm_obj_layout_data_get(const Eo *obj, const char *key);
</code>

%%Get the edje data from the given layout.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:freeze|freeze]]**
<code c>
int elm_obj_layout_freeze(Eo *obj);
</code>

%%Freezes the Elementary layout object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_engine_only_get|part_cursor_engine_only_get]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_engine_only_get(const Eo *obj, const char *part_name);
</code>

%%Get a specific cursor engine_only for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_engine_only_set|part_cursor_engine_only_set]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_engine_only_set(Eo *obj, const char *part_name, Eina_Bool engine_only);
</code>

%%Sets if the cursor set should be searched on the theme or should use the provided by the engine, only.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_get|part_cursor_get]]**
<code c>
const char *elm_obj_layout_part_cursor_get(const Eo *obj, const char *part_name);
</code>

%%Get the cursor to be shown when mouse is over an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_set|part_cursor_set]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_set(Eo *obj, const char *part_name, const char *cursor);
</code>

%%Sets a specific cursor for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_style_get|part_cursor_style_get]]**
<code c>
const char *elm_obj_layout_part_cursor_style_get(const Eo *obj, const char *part_name);
</code>

%%Get a specific cursor style for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_style_set|part_cursor_style_set]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_style_set(Eo *obj, const char *part_name, const char *style);
</code>

%%Sets a specific cursor style for an edje part.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:part_cursor_unset|part_cursor_unset]]**
<code c>
Eina_Bool elm_obj_layout_part_cursor_unset(Eo *obj, const char *part_name);
</code>

%%Unsets a cursor previously set with %%[[:docs:efl:auto:class:elm:layout:method:part_cursor_set|Elm.Layout.part_cursor_set]]%%.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:sizing_restricted_eval|sizing_restricted_eval]]**
<code c>
void elm_obj_layout_sizing_restricted_eval(Eo *obj, Eina_Bool width, Eina_Bool height);
</code>

%%Request sizing reevaluation, restricted to current width and/or height.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:sub_object_add_enable|sub_object_add_enable]]**
<code c>
Eina_Bool elm_obj_layout_sub_object_add_enable(Eo *obj);
</code>

%%Enable sub object add%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:method:thaw|thaw]]**
<code c>
int elm_obj_layout_thaw(Eo *obj);
</code>

%%Thaws the Elementary object.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:edje_object_can_access|edje_object_can_access]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_layout_edje_object_can_access_get(const Eo *obj);
Eina_Bool elm_obj_layout_edje_object_can_access_set(Eo *obj, Eina_Bool can_access);
</code>

\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:edje|edje]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_layout_edje_get(const Eo *obj);
</code>

%%Get the edje layout%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:theme|theme]]** //**(set)**//
<code c>
Eina_Bool elm_obj_layout_theme_set(Eo *obj, const char *klass, const char *group, const char *style);
</code>

%%Set the edje group from the elementary theme that will be used as layout.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:activate|activate]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_activate(Eo *obj, Elm_Activate act);
</code>

%%'Virtual' function to activate widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:disable|disable]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_disable(Eo *obj);
</code>

%%'Virtual' function on the widget being disabled.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:focus_direction_manager_is|focus_direction_manager_is]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_focus_direction_manager_is(Eo *obj);
</code>

%%'Virtual' function which checks if handling of passing focus to sub-objects in given direction is supported by widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:focus_next_manager_is|focus_next_manager_is]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_focus_next_manager_is(Eo *obj);
</code>

%%'Virtual' function which checks if handling of passing focus to sub-objects is supported by widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:on_focus_region|on_focus_region]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_on_focus_region(Eo *obj, int *x, int *y, int *w, int *h);
</code>

%%'Virtual' function returning an inner area of a widget that should be brought into the visible area of a broader viewport, may this context arise.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:on_focus|on_focus]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_on_focus(Eo *obj, Elm_Widget_Item *item);
</code>

%%'Virtual' function handling focus in/out events on the widget%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:sub_object_del|sub_object_del]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool elm_obj_widget_sub_object_del(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%'Virtual' function handling sub objects being removed.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:efl:ui:text:method:theme_apply|theme_apply]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Elm_Theme_Apply elm_obj_widget_theme_apply(Eo *obj);
</code>

%%'Virtual' function on the widget being re-themed.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:focus_direction|focus_direction]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_focus_direction(Eo *obj, const Efl_Canvas_Object *base, double degree, Efl_Canvas_Object **direction, Elm_Widget_Item **direction_item, double *weight);
</code>

%%'Virtual' function handling passing focus to sub-objects given a direction, in degrees.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:focus_next|focus_next]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_focus_next(Eo *obj, Elm_Focus_Direction dir, Efl_Canvas_Object **next, Elm_Widget_Item **next_item);
</code>

%%'Virtual' function handling passing focus to sub-objects.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:layout:method:sub_object_add|sub_object_add]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool elm_obj_widget_sub_object_add(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%'Virtual' function handling sub objects being added.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:access|access]]**
<code c>
void elm_obj_widget_access(Eo *obj, Eina_Bool acs);
</code>

%%'Virtual' function on the widget being set access.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:cursor_add|cursor_add]]**
<code c>
void elm_obj_widget_cursor_add(Eo *obj, Elm_Cursor *cur);
</code>

%%Add cursor%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:cursor_del|cursor_del]]**
<code c>
void elm_obj_widget_cursor_del(Eo *obj, Elm_Cursor *cur);
</code>

%%Delete cursor%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_custom_chain_append|focus_custom_chain_append]]**
<code c>
void elm_obj_widget_focus_custom_chain_append(Eo *obj, Efl_Canvas_Object *child, Efl_Canvas_Object *relative_child);
</code>

%%Append object to custom focus chain.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_custom_chain_prepend|focus_custom_chain_prepend]]**
<code c>
void elm_obj_widget_focus_custom_chain_prepend(Eo *obj, Efl_Canvas_Object *child, Efl_Canvas_Object *relative_child);
</code>

%%Prepend object to custom focus chain.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_custom_chain_unset|focus_custom_chain_unset]]**
<code c>
void elm_obj_widget_focus_custom_chain_unset(Eo *obj);
</code>

%%Unset a custom focus chain on a given Elementary widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_cycle|focus_cycle]]**
<code c>
void elm_obj_widget_focus_cycle(Eo *obj, Elm_Focus_Direction dir);
</code>

%%Give focus to next object with specific focus direction in object tree.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_direction_get|focus_direction_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_direction_get(const Eo *obj, const Efl_Canvas_Object *base, double degree, Efl_Canvas_Object **direction, Elm_Widget_Item **direction_item, double *weight);
</code>

%%Get focus direction%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_direction_go|focus_direction_go]]**
<code c>
Eina_Bool elm_obj_widget_focus_direction_go(Eo *obj, double degree);
</code>

%%Go in focus direction%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_disabled_handle|focus_disabled_handle]]**
<code c>
void elm_obj_widget_focus_disabled_handle(Eo *obj);
</code>

%%Handle disable widget focus%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_hide_handle|focus_hide_handle]]**
<code c>
void elm_obj_widget_focus_hide_handle(Eo *obj);
</code>

%%Handle hide focus%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_highlight_geometry_get|focus_highlight_geometry_get]]**
<code c>
void elm_obj_widget_focus_highlight_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
</code>

%%Get the focus highlight geometry of widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_list_direction_get|focus_list_direction_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_list_direction_get(const Eo *obj, const Efl_Canvas_Object *base, const Eina_List *items, list_data_get_func_type list_data_get, double degree, Efl_Canvas_Object **direction, Elm_Widget_Item **direction_item, double *weight);
</code>

%%Get focus list direction%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_list_next_get|focus_list_next_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_list_next_get(const Eo *obj, const Eina_List *items, list_data_get_func_type list_data_get, Elm_Focus_Direction dir, Efl_Canvas_Object **next, Elm_Widget_Item **next_item);
</code>

%%Get next item in focus list%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_mouse_up_handle|focus_mouse_up_handle]]**
<code c>
void elm_obj_widget_focus_mouse_up_handle(Eo *obj);
</code>

%%Handle focus mouse up%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_get|focus_next_get]]**
<code c>
Eina_Bool elm_obj_widget_focus_next_get(const Eo *obj, Elm_Focus_Direction dir, Efl_Canvas_Object **next, Elm_Widget_Item **next_item);
</code>

%%Get next focus item%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_item_get|focus_next_item_get]]**
<code c>
Elm_Widget_Item *elm_obj_widget_focus_next_item_get(const Eo *obj, Elm_Focus_Direction dir);
</code>

%%Get the next object item with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_item_set|focus_next_item_set]]**
<code c>
void elm_obj_widget_focus_next_item_set(Eo *obj, Elm_Widget_Item *next_item, Elm_Focus_Direction dir);
</code>

%%Set the next object item with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_object_get|focus_next_object_get]]**
<code c>
Efl_Canvas_Object *elm_obj_widget_focus_next_object_get(const Eo *obj, Elm_Focus_Direction dir);
</code>

%%Get the next object with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_next_object_set|focus_next_object_set]]**
<code c>
void elm_obj_widget_focus_next_object_set(Eo *obj, Efl_Canvas_Object *next, Elm_Focus_Direction dir);
</code>

%%Set the next object with specific focus direction.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_reconfigure|focus_reconfigure]]**
<code c>
void elm_obj_widget_focus_reconfigure(Eo *obj);
</code>

%%No description supplied.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_region_show|focus_region_show]]**
<code c>
void elm_obj_widget_focus_region_show(const Eo *obj);
</code>

%%Show focus region%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_register|focus_register]]**
<code c>
Eina_Bool elm_obj_widget_focus_register(Eo *obj, Efl_Ui_Focus_Manager *manager, Efl_Ui_Focus_Object *logical, Eina_Bool full);
</code>

%%Register focus with focus manager%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_restore|focus_restore]]**
<code c>
void elm_obj_widget_focus_restore(Eo *obj);
</code>

%%Restore the focus state of the sub-tree.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_steal|focus_steal]]**
<code c>
void elm_obj_widget_focus_steal(Eo *obj, Elm_Widget_Item *item);
</code>

%%Steal focus%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focus_tree_unfocusable_handle|focus_tree_unfocusable_handle]]**
<code c>
void elm_obj_widget_focus_tree_unfocusable_handle(Eo *obj);
</code>

%%Handle focus tree unfocusable%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:focused_object_clear|focused_object_clear]]**
<code c>
void elm_obj_widget_focused_object_clear(Eo *obj);
</code>

%%Clear focused object%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:name_find|name_find]]**
<code c>
Efl_Canvas_Object *elm_obj_widget_name_find(const Eo *obj, const char *name, int recurse);
</code>

%%Find widget by name%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:newest_focus_order_get|newest_focus_order_get]]**
<code c>
Efl_Canvas_Object *elm_obj_widget_newest_focus_order_get(const Eo *obj, unsigned int *newest_focus_order, Eina_Bool can_focus_only);
</code>

%%Get newest focus in order%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:part_text_translate|part_text_translate]]**
<code c>
const char *elm_obj_widget_part_text_translate(Eo *obj, const char *part, const char *text);
</code>

%%Translate part text%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_freeze_pop|scroll_freeze_pop]]**
<code c>
void elm_obj_widget_scroll_freeze_pop(Eo *obj);
</code>

%%Pop scroller freeze%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_freeze_push|scroll_freeze_push]]**
<code c>
void elm_obj_widget_scroll_freeze_push(Eo *obj);
</code>

%%Push scroller freeze%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_hold_pop|scroll_hold_pop]]**
<code c>
void elm_obj_widget_scroll_hold_pop(Eo *obj);
</code>

%%Pop scroller hold%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:scroll_hold_push|scroll_hold_push]]**
<code c>
void elm_obj_widget_scroll_hold_push(Eo *obj);
</code>

%%Push scroll hold%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:show_region_get|show_region_get]]**
<code c>
void elm_obj_widget_show_region_get(const Eo *obj, int *x, int *y, int *w, int *h);
</code>

%%Get show region%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:show_region_set|show_region_set]]**
<code c>
void elm_obj_widget_show_region_set(Eo *obj, int x, int y, int w, int h, Eina_Bool forceshow);
</code>

%%Set show region%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:signal_callback_add|signal_callback_add]]**
<code c>
void elm_obj_widget_signal_callback_add(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func, void *data);
</code>

%%Add signal callback%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:signal_callback_del|signal_callback_del]]**
<code c>
void *elm_obj_widget_signal_callback_del(Eo *obj, const char *emission, const char *source, Edje_Signal_Cb func);
</code>

%%Delete signal callback%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:signal_emit|signal_emit]]**
<code c>
void elm_obj_widget_signal_emit(Eo *obj, const char *emission, const char *source);
</code>

%%Emit signal on widget%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:tooltip_add|tooltip_add]]**
<code c>
void elm_obj_widget_tooltip_add(Eo *obj, Elm_Tooltip *tt);
</code>

%%Add tooltip to widget%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:tooltip_del|tooltip_del]]**
<code c>
void elm_obj_widget_tooltip_del(Eo *obj, Elm_Tooltip *tt);
</code>

%%Delet widget tooltip%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:translatable_part_text_get|translatable_part_text_get]]**
<code c>
const char *elm_obj_widget_translatable_part_text_get(const Eo *obj, const char *part);
</code>

%%Get translatable part text%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:translate|translate]]**
<code c>
Eina_Bool elm_obj_widget_translate(Eo *obj);
</code>

%%'Virtual' function handling language changes on Elementary.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:method:widget_event|widget_event]]**
<code c>
Eina_Bool elm_obj_widget_event(Eo *obj, Efl_Canvas_Object *source, Evas_Callback_Type type, void *event_info);
</code>

%%'Virtual' function handling input events on the widget.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:access_highlight_in_theme|access_highlight_in_theme]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_access_highlight_in_theme_get(const Eo *obj);
void elm_obj_widget_access_highlight_in_theme_set(Eo *obj, Eina_Bool highlight);
</code>

%%Accessibility highlight in theme%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:access_info|access_info]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_access_info_get(const Eo *obj);
void elm_obj_widget_access_info_set(Eo *obj, const char *txt);
</code>

%%Accessibility information%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:can_focus_child_list|can_focus_child_list]]** //**(get)**//
<code c>
Eina_List *elm_obj_widget_can_focus_child_list_get(const Eo *obj);
</code>

%%Can focus children list%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:can_focus|can_focus]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_can_focus_get(const Eo *obj);
void elm_obj_widget_can_focus_set(Eo *obj, Eina_Bool can_focus);
</code>

%%The ability for an Elementary object to be focused.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:child_can_focus|child_can_focus]]** //**(get)**//
<code c>
Eina_Bool elm_obj_widget_child_can_focus_get(const Eo *obj);
</code>

%%Child can focus property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:disabled|disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_disabled_get(const Eo *obj);
void elm_obj_widget_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Enabled / disabled property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:display_mode|display_mode]]** //**(set)**//
<code c>
void elm_obj_widget_display_mode_set(Eo *obj, Efl_Gfx_Size_Hint_Mode dispmode);
</code>

%%Display mode property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:domain_part_text_translatable|domain_part_text_translatable]]** //**(set)**//
<code c>
void elm_obj_widget_domain_part_text_translatable_set(Eo *obj, const char *part, const char *domain, Eina_Bool translatable);
</code>

%%Translate domain text part property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:domain_translatable_part_text|domain_translatable_part_text]]** //**(set)**//
<code c>
void elm_obj_widget_domain_translatable_part_text_set(Eo *obj, const char *part, const char *domain, const char *label);
</code>

%%Domain translatable text part property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_child_locked_x|drag_child_locked_x]]** //**(get)**//
<code c>
int elm_obj_widget_drag_child_locked_x_get(const Eo *obj);
</code>

%%Drag child locked X axis%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_child_locked_y|drag_child_locked_y]]** //**(get)**//
<code c>
int elm_obj_widget_drag_child_locked_y_get(const Eo *obj);
</code>

%%Drag child locked Y axis property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_lock_x|drag_lock_x]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_drag_lock_x_get(const Eo *obj);
void elm_obj_widget_drag_lock_x_set(Eo *obj, Eina_Bool lock);
</code>

%%Drag lock on X axis%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:drag_lock_y|drag_lock_y]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_drag_lock_y_get(const Eo *obj);
void elm_obj_widget_drag_lock_y_set(Eo *obj, Eina_Bool lock);
</code>

%%Lock the Y axis from being dragged%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_custom_chain|focus_custom_chain]]** //**(get, set)**//
<code c>
const Eina_List *elm_obj_widget_focus_custom_chain_get(const Eo *obj);
void elm_obj_widget_focus_custom_chain_set(Eo *obj, Eina_List *objs);
</code>

%%A custom chain of objects to pass focus.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_highlight_style|focus_highlight_style]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_focus_highlight_style_get(const Eo *obj);
Eina_Bool elm_obj_widget_focus_highlight_style_set(Eo *obj, const char *style);
</code>

%%Control the widget focus highlight style.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_move_policy_automatic|focus_move_policy_automatic]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_move_policy_automatic_get(const Eo *obj);
void elm_obj_widget_focus_move_policy_automatic_set(Eo *obj, Eina_Bool automatic);
</code>

%%Control the widget's focus_move_policy mode setting.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_move_policy|focus_move_policy]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Move_Policy elm_obj_widget_focus_move_policy_get(const Eo *obj);
void elm_obj_widget_focus_move_policy_set(Eo *obj, Efl_Ui_Focus_Move_Policy policy);
</code>

%%The widget's focus move policy.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_order|focus_order]]** //**(get)**//
<code c>
unsigned int elm_obj_widget_focus_order_get(const Eo *obj);
</code>

%%Focus order property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_region_show_mode|focus_region_show_mode]]** //**(get, set)**//
<code c>
Elm_Focus_Region_Show_Mode elm_obj_widget_focus_region_show_mode_get(const Eo *obj);
void elm_obj_widget_focus_region_show_mode_set(Eo *obj, Elm_Focus_Region_Show_Mode mode);
</code>

%%Control the focus_region_show mode.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus_region|focus_region]]** //**(get)**//
<code c>
Eina_Bool elm_obj_widget_focus_region_get(const Eo *obj, int *x, int *y, int *w, int *h);
</code>

%%Focus region property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focused_item|focused_item]]** //**(get)**//
<code c>
Elm_Widget_Item *elm_obj_widget_focused_item_get(const Eo *obj);
</code>

%%Get the focused widget item.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focused_object|focused_object]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_focused_object_get(const Eo *obj);
</code>

%%Current focused object in object tree.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:focus|focus]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_focus_get(const Eo *obj);
void elm_obj_widget_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%Focus property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:highlight_ignore|highlight_ignore]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_highlight_ignore_get(const Eo *obj);
void elm_obj_widget_highlight_ignore_set(Eo *obj, Eina_Bool ignore);
</code>

%%Highlight ignore%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:highlight_in_theme|highlight_in_theme]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_highlight_in_theme_get(const Eo *obj);
void elm_obj_widget_highlight_in_theme_set(Eo *obj, Eina_Bool highlight);
</code>

%%Highlight in theme property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:highlight|highlight]]** //**(get)**//
<code c>
Eina_Bool elm_obj_widget_highlight_get(const Eo *obj);
</code>

%%Highlight property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:hover_object|hover_object]]** //**(set)**//
<code c>
void elm_obj_widget_hover_object_set(Eo *obj, Efl_Canvas_Object *sobj);
</code>

%%Hover object property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:item_loop_enabled|item_loop_enabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_item_loop_enabled_get(const Eo *obj);
void elm_obj_widget_item_loop_enabled_set(Eo *obj, Eina_Bool enable);
</code>

%%Control item loop feature.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:mirrored_automatic|mirrored_automatic]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_mirrored_automatic_get(const Eo *obj);
void elm_obj_widget_mirrored_automatic_set(Eo *obj, Eina_Bool automatic);
</code>

%%Control the widget's mirrored mode setting.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:mirrored|mirrored]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_mirrored_get(const Eo *obj);
void elm_obj_widget_mirrored_set(Eo *obj, Eina_Bool mirrored);
</code>

%%Control the widget's mirrored mode.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:on_show_region_hook|on_show_region_hook]]** //**(set)**//
<code c>
void elm_obj_widget_on_show_region_hook_set(Eo *obj, region_hook_func_type func, void *data);
</code>

%%Region hook on show property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:orientation_mode_disabled|orientation_mode_disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_orientation_mode_disabled_get(const Eo *obj);
void elm_obj_widget_orientation_mode_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Orientation mode disabled or enabled%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:orientation|orientation]]** //**(set)**//
<code c>
void elm_obj_widget_orientation_set(Eo *obj, int rotation);
</code>

%%Widget orientation%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parent2|parent2]]** //**(get, set)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_parent2_get(const Eo *obj);
void elm_obj_widget_parent2_set(Eo *obj, Efl_Canvas_Object *parent);
</code>

%%Second parent property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parent_highlight|parent_highlight]]** //**(set)**//
<code c>
void elm_obj_widget_parent_highlight_set(Eo *obj, Eina_Bool highlighted);
</code>

%%Parent highlight property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parent_widget|parent_widget]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_parent_widget_get(const Eo *obj);
</code>

%%Parent widget property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:parents_bounce|parents_bounce]]** //**(get)**//
<code c>
void elm_obj_widget_parents_bounce_get(const Eo *obj, Eina_Bool *horiz, Eina_Bool *vert);
</code>

%%Parents bounce property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:part_text|part_text]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_part_text_get(const Eo *obj, const char *part);
void elm_obj_widget_part_text_set(Eo *obj, const char *part, const char *label);
</code>

%%Part text property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:resize_object|resize_object]]** //**(set)**//
<code c>
void elm_obj_widget_resize_object_set(Eo *obj, Efl_Canvas_Object *sobj, Eina_Bool sub_obj);
</code>

%%Resize object property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scale|scale]]** //**(get, set)**//
<code c>
double elm_obj_widget_scale_get(const Eo *obj);
void elm_obj_widget_scale_set(Eo *obj, double scale);
</code>

%%Scale factor%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scroll_freeze|scroll_freeze]]** //**(get)**//
<code c>
int elm_obj_widget_scroll_freeze_get(const Eo *obj);
</code>

%%Scroll freeze property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scroll_hold|scroll_hold]]** //**(get)**//
<code c>
int elm_obj_widget_scroll_hold_get(const Eo *obj);
</code>

%%Scroll hold property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:scrollable_children|scrollable_children]]** //**(get)**//
<code c>
Eina_List *elm_obj_widget_scrollable_children_get(const Eo *obj);
</code>

%%Function to operate on a given widget's scrollable children when necessary.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:style|style]]** //**(get, set)**//
<code c>
const char *elm_obj_widget_style_get(const Eo *obj);
Elm_Theme_Apply elm_obj_widget_style_set(Eo *obj, const char *style);
</code>

%%Theme style%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:theme_object|theme_object]]** //**(set)**//
<code c>
Elm_Theme_Apply elm_obj_widget_theme_object_set(Eo *obj, Efl_Canvas_Object *edj, const char *wname, const char *welement, const char *wstyle);
</code>

%%Theme object property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:theme|theme]]** //**(get, set)**//
<code c>
Elm_Theme *elm_obj_widget_theme_get(const Eo *obj);
void elm_obj_widget_theme_set(Eo *obj, Elm_Theme *th);
</code>

%%Widget theme%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:top|top]]** //**(get)**//
<code c>
Efl_Canvas_Object *elm_obj_widget_top_get(const Eo *obj);
</code>

%%Top widget property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:tree_unfocusable|tree_unfocusable]]** //**(get, set)**//
<code c>
Eina_Bool elm_obj_widget_tree_unfocusable_get(const Eo *obj);
void elm_obj_widget_tree_unfocusable_set(Eo *obj, Eina_Bool tree_unfocusable);
</code>

%%Make the elementary object and its children to be unfocusable (or focusable). If the tree is set as unfocusable, newest focused object which is not in this tree will get focus. This API can be helpful for an object to be deleted. When an object will be deleted soon, it and its children may not want to get focus (by focus reverting or by other focus controls). Then, just use this API before deleting.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_count|content_count]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
int efl_content_count(Eo *obj);
</code>

%%Returns the number of UI elements packed in this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_iterate|content_iterate]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Iterator *efl_content_iterate(Eo *obj);
</code>

%%Begin iterating over this object's contents.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_remove|content_remove]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Eina_Bool efl_content_remove(Eo *obj, Efl_Gfx *content);
</code>

%%Unswallow an object from this container.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:method:content_unset|content_unset]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Gfx *efl_content_unset(Eo *obj);
</code>

%%Unswallow the object in the current container and return it.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:class:elm:layout:property:content|content]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Gfx *efl_content_get(const Eo *obj);
Eina_Bool efl_content_set(Eo *obj, Efl_Gfx *content);
</code>

%%Swallowed sub-object contained in this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:class:efl:ui:text:property:file|file]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void efl_file_get(const Eo *obj, const char **file, const char **key);
Eina_Bool efl_file_set(Eo *obj, const char *file, const char *key);
</code>

\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:class:elm:layout:property:mmap|mmap]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_file_mmap_get(const Eo *obj, const Eina_File **f, const char **key);
Eina_Bool efl_file_mmap_set(Eo *obj, const Eina_File *f, const char *key);
</code>

\\ 
[[:docs:efl:auto:interface:efl:file|Efl.File]].**[[:docs:efl:auto:interface:efl:file:method:save|save]]**
<code c>
Eina_Bool efl_file_save(const Eo *obj, const char *file, const char *key, const char *flags);
</code>

%%Save the given image object's contents to an (image) file.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_align|hint_align]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_align_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_align_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's alignment.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_aspect|hint_aspect]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_aspect_get(const Eo *obj, Efl_Gfx_Size_Hint_Aspect *mode, int *w, int *h);
void efl_gfx_size_hint_aspect_set(Eo *obj, Efl_Gfx_Size_Hint_Aspect mode, int w, int h);
</code>

%%Defines the aspect ratio to respect when scaling this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_combined_min|hint_combined_min]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_combined_min_get(const Eo *obj, int *w, int *h);
</code>

%%Read-only minimum size combining both %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_restricted_min|Efl.Gfx.Size.Hint.hint_restricted_min]]%% and %%[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_min|Efl.Gfx.Size.Hint.hint_min]]%% size hints.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_display_mode|hint_display_mode]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Size_Hint_Mode efl_gfx_size_hint_display_mode_get(const Eo *obj);
void efl_gfx_size_hint_display_mode_set(Eo *obj, Efl_Gfx_Size_Hint_Mode dispmode);
</code>

%%A hint for an object's display mode.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_margin|hint_margin]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_margin_get(const Eo *obj, int *l, int *r, int *t, int *b);
void efl_gfx_size_hint_margin_set(Eo *obj, int l, int r, int t, int b);
</code>

%%Hints for an object's margin or padding space.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_max|hint_max]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_max_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_max_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's maximum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_min|hint_min]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_min_set(Eo *obj, int w, int h);
</code>

%%Hints on the object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_request|hint_request]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_request_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_request_set(Eo *obj, int w, int h);
</code>

%%Hints for the object's optimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_restricted_min|hint_restricted_min]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]// ''protected set''
<code c>
void efl_gfx_size_hint_restricted_min_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_restricted_min_set(Eo *obj, int w, int h);
</code>

%%Internal hints for an object's minimum size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:class:efl:canvas:object:property:hint_weight|hint_weight]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_size_hint_weight_get(const Eo *obj, double *x, double *y);
void efl_gfx_size_hint_weight_set(Eo *obj, double x, double y);
</code>

%%Hints for an object's weight.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_base|hint_base]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_base_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_base_set(Eo *obj, int w, int h);
</code>

%%Base size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:property:hint_step|hint_step]]** //**(get, set)**//
<code c>
void efl_gfx_size_hint_step_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_hint_step_set(Eo *obj, int w, int h);
</code>

%%Step size for objects with sizing restrictions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:lower|lower]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_lower(Eo *obj);
</code>

%%Lower %%''obj''%% to the bottom of its layer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:raise|raise]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_raise(Eo *obj);
</code>

%%Raise %%''obj''%% to the top of its layer.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_above|stack_above]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_above(Eo *obj, Efl_Gfx_Stack *above);
</code>

%%Stack %%''obj''%% immediately %%''above''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:method:stack_below|stack_below]]** //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_stack_below(Eo *obj, Efl_Gfx_Stack *below);
</code>

%%Stack %%''obj''%% immediately %%''below''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:above|above]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_above_get(const Eo *obj);
</code>

%%Get the Evas object stacked right above %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:below|below]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Efl_Gfx_Stack *efl_gfx_stack_below_get(const Eo *obj);
</code>

%%Get the Evas object stacked right below %%''obj''%%%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:class:efl:canvas:object:property:layer|layer]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
short efl_gfx_stack_layer_get(const Eo *obj);
void efl_gfx_stack_layer_set(Eo *obj, short l);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:color_part|color_part]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_gfx_color_part_get(const Eo *obj, const char *part, int *r, int *g, int *b, int *a);
Eina_Bool efl_gfx_color_part_set(Eo *obj, const char *part, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:canvas:object:property:geometry|geometry]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
void efl_gfx_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
void efl_gfx_geometry_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Rectangular geometry that combines both position and size.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:ui:text:property:position|position]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void efl_gfx_position_get(const Eo *obj, int *x, int *y);
void efl_gfx_position_set(Eo *obj, int x, int y);
</code>

%%The 2D position of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:ui:text:property:size|size]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void efl_gfx_size_get(const Eo *obj, int *w, int *h);
void efl_gfx_size_set(Eo *obj, int w, int h);
</code>

%%The 2D size of a canvas object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:efl:ui:text:property:visible|visible]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool efl_gfx_visible_get(const Eo *obj);
void efl_gfx_visible_set(Eo *obj, Eina_Bool v);
</code>

\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:class:elm:widget:property:color|color]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
void efl_gfx_color_get(const Eo *obj, int *r, int *g, int *b, int *a);
void efl_gfx_color_set(Eo *obj, int r, int g, int b, int a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:class:efl:canvas:object:property:seat_event_filter|seat_event_filter]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]]]//
<code c>
Eina_Bool efl_input_seat_event_filter_get(const Eo *obj, Efl_Input_Device *seat);
void efl_input_seat_event_filter_set(Eo *obj, Efl_Input_Device *seat, Eina_Bool enable);
</code>

\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:method:pointer_iterate|pointer_iterate]]**
<code c>
Eina_Iterator *efl_input_pointer_iterate(const Eo *obj, Eina_Bool hover);
</code>

%%Returns an iterator over the current known pointer positions.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_inside|pointer_inside]]** //**(get)**//
<code c>
Eina_Bool efl_input_pointer_inside_get(const Eo *obj);
</code>

%%Returns whether the mouse pointer is logically inside the canvas.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:property:pointer_xy|pointer_xy]]** //**(get)**//
<code c>
void efl_input_pointer_xy_get(const Eo *obj, int *x, int *y);
</code>

%%This function returns the current known pointer coordinates%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:part|Efl.Part]].**[[:docs:efl:auto:class:elm:layout:method:part|part]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Object *efl_part(const Eo *obj, const char *name);
</code>

%%Get a proxy object referring to a part of an object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font_fallbacks|font_fallbacks]]** //**(get, set)**//
<code c>
const char *efl_text_font_fallbacks_get(const Eo *obj);
void efl_text_font_fallbacks_set(Eo *obj, const char *font_fallbacks);
</code>

%%Comma-separated list of font fallbacks%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font_lang|font_lang]]** //**(get, set)**//
<code c>
const char *efl_text_font_lang_get(const Eo *obj);
void efl_text_font_lang_set(Eo *obj, const char *lang);
</code>

%%Specific language of the displayed font%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font_slant|font_slant]]** //**(get, set)**//
<code c>
Efl_Text_Font_Slant efl_text_font_slant_get(const Eo *obj);
void efl_text_font_slant_set(Eo *obj, Efl_Text_Font_Slant style);
</code>

%%Type of slant of the displayed font%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font_source|font_source]]** //**(get, set)**//
<code c>
const char *efl_text_font_source_get(const Eo *obj);
void efl_text_font_source_set(Eo *obj, const char *font_source);
</code>

%%The source that will be used to lookup the font of the text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font_weight|font_weight]]** //**(get, set)**//
<code c>
Efl_Text_Font_Weight efl_text_font_weight_get(const Eo *obj);
void efl_text_font_weight_set(Eo *obj, Efl_Text_Font_Weight font_weight);
</code>

%%Type of weight of the displayed font%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font_width|font_width]]** //**(get, set)**//
<code c>
Efl_Text_Font_Width efl_text_font_width_get(const Eo *obj);
void efl_text_font_width_set(Eo *obj, Efl_Text_Font_Width width);
</code>

%%Type of width of the displayed font%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:font|Efl.Text.Font]].**[[:docs:efl:auto:interface:efl:text:font:property:font|font]]** //**(get, set)**//
<code c>
void efl_text_font_get(const Eo *obj, const char **font, int *size);
void efl_text_font_set(Eo *obj, const char *font, int size);
</code>

%%The font name and size that is used for the displayed text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_ellipsis|format_ellipsis]]** //**(get, set)**//
<code c>
double efl_text_format_ellipsis_get(const Eo *obj);
void efl_text_format_ellipsis_set(Eo *obj, double value);
</code>

%%Ellipsis value (number from -1.0 to 1.0)%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_halign|format_halign]]** //**(get, set)**//
<code c>
double efl_text_format_halign_get(const Eo *obj);
void efl_text_format_halign_set(Eo *obj, double value);
</code>

%%Horizontal alignment of text (number from 0.0 to 1.0)%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_linegap|format_linegap]]** //**(get, set)**//
<code c>
double efl_text_format_linegap_get(const Eo *obj);
void efl_text_format_linegap_set(Eo *obj, double value);
</code>

%%Minimal line gap (top and bottom) for each line in the text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_linerelgap|format_linerelgap]]** //**(get, set)**//
<code c>
double efl_text_format_linerelgap_get(const Eo *obj);
void efl_text_format_linerelgap_set(Eo *obj, double value);
</code>

%%Relative line gap (top and bottom) for each line in the text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_multiline|format_multiline]]** //**(get, set)**//
<code c>
Eina_Bool efl_text_format_multiline_get(const Eo *obj);
void efl_text_format_multiline_set(Eo *obj, Eina_Bool enabled);
</code>

%%Multiline is enabled or not%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_password|format_password]]** //**(get, set)**//
<code c>
Eina_Bool efl_text_format_password_get(const Eo *obj);
void efl_text_format_password_set(Eo *obj, Eina_Bool enabled);
</code>

%%Whether text is a password%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_replacement_char|format_replacement_char]]** //**(get, set)**//
<code c>
const char *efl_text_format_replacement_char_get(const Eo *obj);
void efl_text_format_replacement_char_set(Eo *obj, const char *repch);
</code>

%%The character used to replace characters that can not be displayed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_tabstops|format_tabstops]]** //**(get, set)**//
<code c>
int efl_text_format_tabstops_get(const Eo *obj);
void efl_text_format_tabstops_set(Eo *obj, int value);
</code>

%%Tabstops value%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_valign|format_valign]]** //**(get, set)**//
<code c>
double efl_text_format_valign_get(const Eo *obj);
void efl_text_format_valign_set(Eo *obj, double value);
</code>

%%Vertical alignment of text (number from -1.0 to 1.0)%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:format|Efl.Text.Format]].**[[:docs:efl:auto:interface:efl:text:format:property:format_wrap|format_wrap]]** //**(get, set)**//
<code c>
Efl_Text_Format_Wrap efl_text_format_wrap_get(const Eo *obj);
void efl_text_format_wrap_set(Eo *obj, Efl_Text_Format_Wrap wrap);
</code>

%%Wrap mode for use in the text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:backing_color|backing_color]]** //**(get, set)**//
<code c>
void efl_text_style_backing_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_backing_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:backing_type|backing_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Backing_Type efl_text_style_backing_type_get(const Eo *obj);
void efl_text_style_backing_type_set(Eo *obj, Efl_Text_Style_Backing_Type type);
</code>

\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:effect_type|effect_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Effect_Type efl_text_style_effect_type_get(const Eo *obj);
void efl_text_style_effect_type_set(Eo *obj, Efl_Text_Style_Effect_Type type);
</code>

%%Type of effect used for the displayed text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:glow2_color|glow2_color]]** //**(get, set)**//
<code c>
void efl_text_style_glow2_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_glow2_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Second color of the glow effect%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:glow_color|glow_color]]** //**(get, set)**//
<code c>
void efl_text_style_glow_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_glow_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of glow effect%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:normal_color|normal_color]]** //**(get, set)**//
<code c>
void efl_text_style_normal_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_normal_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of text, excluding style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:outline_color|outline_color]]** //**(get, set)**//
<code c>
void efl_text_style_outline_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_outline_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of outline effect%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:shadow_color|shadow_color]]** //**(get, set)**//
<code c>
void efl_text_style_shadow_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_shadow_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of shadow effect%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:shadow_direction|shadow_direction]]** //**(get, set)**//
<code c>
Efl_Text_Style_Shadow_Direction efl_text_style_shadow_direction_get(const Eo *obj);
void efl_text_style_shadow_direction_set(Eo *obj, Efl_Text_Style_Shadow_Direction type);
</code>

%%Direction of shadow effect%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:strikethrough_color|strikethrough_color]]** //**(get, set)**//
<code c>
void efl_text_style_strikethrough_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_strikethrough_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of strikethrough_style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:strikethrough_type|strikethrough_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Strikethrough_Type efl_text_style_strikethrough_type_get(const Eo *obj);
void efl_text_style_strikethrough_type_set(Eo *obj, Efl_Text_Style_Strikethrough_Type type);
</code>

%%Type of strikethrough style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline2_color|underline2_color]]** //**(get, set)**//
<code c>
void efl_text_style_underline2_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_underline2_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of underline2 style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline2_type|underline2_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Underline_Type efl_text_style_underline2_type_get(const Eo *obj);
void efl_text_style_underline2_type_set(Eo *obj, Efl_Text_Style_Underline_Type type);
</code>

%%Type of underline2 style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline_color|underline_color]]** //**(get, set)**//
<code c>
void efl_text_style_underline_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_underline_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of normal underline style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline_dashed_color|underline_dashed_color]]** //**(get, set)**//
<code c>
void efl_text_style_underline_dashed_color_get(const Eo *obj, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void efl_text_style_underline_dashed_color_set(Eo *obj, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
</code>

%%Color of dashed underline style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline_dashed_gap|underline_dashed_gap]]** //**(get, set)**//
<code c>
int efl_text_style_underline_dashed_gap_get(const Eo *obj);
void efl_text_style_underline_dashed_gap_set(Eo *obj, int gap);
</code>

%%Gap of dashed underline style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline_dashed_width|underline_dashed_width]]** //**(get, set)**//
<code c>
int efl_text_style_underline_dashed_width_get(const Eo *obj);
void efl_text_style_underline_dashed_width_set(Eo *obj, int width);
</code>

%%Width of dashed underline style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline_height|underline_height]]** //**(get, set)**//
<code c>
double efl_text_style_underline_height_get(const Eo *obj);
void efl_text_style_underline_height_set(Eo *obj, double height);
</code>

%%Height of underline style%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text:style|Efl.Text.Style]].**[[:docs:efl:auto:interface:efl:text:style:property:underline_type|underline_type]]** //**(get, set)**//
<code c>
Efl_Text_Style_Underline_Type efl_text_style_underline_type_get(const Eo *obj);
void efl_text_style_underline_type_set(Eo *obj, Efl_Text_Style_Underline_Type type);
</code>

%%Sets an underline style on the text%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:text|Efl.Text]].**[[:docs:efl:auto:interface:efl:text:property:text|text]]** //**(get, set)**//
<code c>
const char *efl_text_get(const Eo *obj);
void efl_text_set(Eo *obj, const char *text);
</code>

\\ 
[[:docs:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:docs:efl:auto:class:elm:widget:property:manager|manager]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Ui_Focus_Manager *efl_ui_focus_user_manager_get(const Eo *obj);
</code>

%%Describes which manager is used to register or should be used to register this user.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:docs:efl:auto:class:elm:widget:property:parent|parent]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_user_parent_get(const Eo *obj);
</code>

%%Describes which logical parent is used by this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:model:connect|Efl.Ui.Model.Connect]].**[[:docs:efl:auto:class:elm:layout:method:connect|connect]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_ui_model_connect(Eo *obj, const char *name, const char *property);
</code>

%%Connect property%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:model:factory:connect|Efl.Ui.Model.Factory.Connect]].**[[:docs:efl:auto:class:elm:layout:method:connect|connect]]** //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
void efl_ui_model_factory_connect(Eo *obj, const char *name, Efl_Ui_Factory *factory);
</code>

%%Connect factory%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]].**[[:docs:efl:auto:class:efl:ui:text:property:editable|editable]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
Eina_Bool efl_ui_text_interactive_editable_get(const Eo *obj);
void efl_ui_text_interactive_editable_set(Eo *obj, Eina_Bool editable);
</code>

%%Whether the entry is editable.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]].**[[:docs:efl:auto:interface:efl:ui:text:interactive:property:selection_allowed|selection_allowed]]** //**(get, set)**//
<code c>
Eina_Bool efl_ui_text_interactive_selection_allowed_get(const Eo *obj);
void efl_ui_text_interactive_selection_allowed_set(Eo *obj, Eina_Bool allowed);
</code>

%%Whether or not selection is allowed on this object%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]].**[[:docs:efl:auto:interface:efl:ui:text:interactive:property:selection_cursors|selection_cursors]]** //**(get)**//
<code c>
void efl_ui_text_interactive_selection_cursors_get(const Eo *obj, Efl_Canvas_Text_Cursor **start, Efl_Canvas_Text_Cursor **end);
</code>

%%The cursors used for selection handling.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:view|Efl.Ui.View]].**[[:docs:efl:auto:class:elm:layout:property:model|model]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:layout|Elm.Layout]]]//
<code c>
Efl_Model *efl_ui_view_model_get(const Eo *obj);
void efl_ui_view_model_set(Eo *obj, Efl_Model *model);
</code>

%%Model that is/will be%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:lightning_3d_absolute|lightning_3d_absolute]]**
<code c>
void efl_gfx_map_lightning_3d_absolute(Eo *obj, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Apply a lightning effect on the object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:lightning_3d|lightning_3d]]**
<code c>
void efl_gfx_map_lightning_3d(Eo *obj, const Efl_Gfx *pivot, double lx, double ly, double lz, int lr, int lg, int lb, int ar, int ag, int ab);
</code>

%%Apply a lightning effect on the object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_has|map_has]]**
<code c>
Eina_Bool efl_gfx_map_has(Eo *obj);
</code>

%%Read-only property indicating whether an object is mapped.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:map_reset|map_reset]]**
<code c>
void efl_gfx_map_reset(Eo *obj);
</code>

%%Resets the map transformation to its default state.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:perspective_3d_absolute|perspective_3d_absolute]]**
<code c>
void efl_gfx_map_perspective_3d_absolute(Eo *obj, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:perspective_3d|perspective_3d]]**
<code c>
void efl_gfx_map_perspective_3d(Eo *obj, const Efl_Gfx *pivot, double px, double py, double z0, double foc);
</code>

%%Apply a perspective transform to the map%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:rotate_3d_absolute|rotate_3d_absolute]]**
<code c>
void efl_gfx_map_rotate_3d_absolute(Eo *obj, double dx, double dy, double dz, double cx, double cy, double cz);
</code>

%%Rotate the object around 3 axes in 3D, using absolute coordinates.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:rotate_3d|rotate_3d]]**
<code c>
void efl_gfx_map_rotate_3d(Eo *obj, double dx, double dy, double dz, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>

%%Rotate the object around 3 axes in 3D.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:rotate_absolute|rotate_absolute]]**
<code c>
void efl_gfx_map_rotate_absolute(Eo *obj, double degrees, double cx, double cy);
</code>

%%Apply a rotation to the object, using absolute coordinates.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:rotate_quat_absolute|rotate_quat_absolute]]**
<code c>
void efl_gfx_map_rotate_quat_absolute(Eo *obj, double qx, double qy, double qz, double qw, double cx, double cy, double cz);
</code>

%%Rotate the object in 3D using a unit quaternion, using absolute coordinates.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:rotate_quat|rotate_quat]]**
<code c>
void efl_gfx_map_rotate_quat(Eo *obj, double qx, double qy, double qz, double qw, const Efl_Gfx *pivot, double cx, double cy, double cz);
</code>

%%Rotate the object in 3D using a unit quaternion.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:rotate|rotate]]**
<code c>
void efl_gfx_map_rotate(Eo *obj, double degrees, const Efl_Gfx *pivot, double cx, double cy);
</code>

%%Apply a rotation to the object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:translate|translate]]**
<code c>
void efl_gfx_map_translate(Eo *obj, double dx, double dy, double dz);
</code>

%%Apply a translation to the object using map.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:zoom_absolute|zoom_absolute]]**
<code c>
void efl_gfx_map_zoom_absolute(Eo *obj, double zoomx, double zoomy, double cx, double cy);
</code>

%%Apply a zoom to the object, using absolute coordinates.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:method:zoom|zoom]]**
<code c>
void efl_gfx_map_zoom(Eo *obj, double zoomx, double zoomy, const Efl_Gfx *pivot, double cx, double cy);
</code>

%%Apply a zoom to the object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_alpha|map_alpha]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_alpha_get(const Eo *obj);
void efl_gfx_map_alpha_set(Eo *obj, Eina_Bool alpha);
</code>

%%Alpha flag for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_clockwise|map_clockwise]]** //**(get)**//
<code c>
Eina_Bool efl_gfx_map_clockwise_get(const Eo *obj);
</code>

%%Clockwise state of a map (read-only).%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_color|map_color]]** //**(get, set)**//
<code c>
void efl_gfx_map_color_get(const Eo *obj, int idx, int *r, int *g, int *b, int *a);
void efl_gfx_map_color_set(Eo *obj, int idx, int r, int g, int b, int a);
</code>

%%Color of a vertex in the map.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_coord_absolute|map_coord_absolute]]** //**(get, set)**//
<code c>
void efl_gfx_map_coord_absolute_get(const Eo *obj, int idx, double *x, double *y, double *z);
void efl_gfx_map_coord_absolute_set(Eo *obj, int idx, double x, double y, double z);
</code>

%%A point's absolute coordinate on the canvas.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_smooth|map_smooth]]** //**(get, set)**//
<code c>
Eina_Bool efl_gfx_map_smooth_get(const Eo *obj);
void efl_gfx_map_smooth_set(Eo *obj, Eina_Bool smooth);
</code>

%%Smoothing state for map rendering.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:gfx:map|Efl.Gfx.Map]].**[[:docs:efl:auto:mixin:efl:gfx:map:property:map_uv|map_uv]]** //**(get, set)**//
<code c>
void efl_gfx_map_uv_get(const Eo *obj, int idx, double *u, double *v);
void efl_gfx_map_uv_set(Eo *obj, int idx, double u, double v);
</code>

%%Map point's U and V texture source point.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:docs:efl:auto:class:elm:widget:property:focus_geometry|focus_geometry]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Rectangle efl_ui_focus_object_focus_geometry_get(const Eo *obj);
</code>

%%The geometry to use to calculate the relations to other objects.%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:docs:efl:auto:class:elm:widget:property:focus|focus]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Eina_Bool efl_ui_focus_object_focus_get(const Eo *obj);
void efl_ui_focus_object_focus_set(Eo *obj, Eina_Bool focus);
</code>

%%This gets called by the manager and should never be called by someone else.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:efl:ui:text:property:name|name]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
const char *elm_interface_atspi_accessible_name_get(const Eo *obj);
void elm_interface_atspi_accessible_name_set(Eo *obj, const char *name);
</code>

%%Accessible name of the object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]//
<code c>
Elm_Interface_Atspi_Accessible *elm_interface_atspi_accessible_parent_get(const Eo *obj);
void elm_interface_atspi_accessible_parent_set(Eo *obj, Elm_Interface_Atspi_Accessible *parent);
</code>

%%Object's accessible parent.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:relationship_append|relationship_append]]**
<code c>
Eina_Bool elm_interface_atspi_accessible_relationship_append(Eo *obj, Elm_Atspi_Relation_Type type, const Elm_Interface_Atspi_Accessible *relation_object);
</code>

%%Defines the relationship between two accessible objects.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:relationship_remove|relationship_remove]]**
<code c>
void elm_interface_atspi_accessible_relationship_remove(Eo *obj, Elm_Atspi_Relation_Type type, const Elm_Interface_Atspi_Accessible *relation_object);
</code>

%%Removes the relationship between two accessible objects.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:relationships_clear|relationships_clear]]**
<code c>
void elm_interface_atspi_accessible_relationships_clear(Eo *obj);
</code>

%%Removes all relationships in accessible object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:description|description]]** //**(get, set)**//
<code c>
const char *elm_interface_atspi_accessible_description_get(const Eo *obj);
void elm_interface_atspi_accessible_description_set(Eo *obj, const char *description);
</code>

%%Contextual information about object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:role|role]]** //**(get, set)**//
<code c>
Elm_Atspi_Role elm_interface_atspi_accessible_role_get(const Eo *obj);
void elm_interface_atspi_accessible_role_set(Eo *obj, Elm_Atspi_Role role);
</code>

%%The role of the object in accessibility domain.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:root|root]]** //**(get)**//
<code c>
Efl_Object *elm_interface_atspi_accessible_root_get(const Eo *obj);
</code>

%%Get root object of accessible object hierarchy%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:translation_domain|translation_domain]]** //**(get, set)**//
<code c>
const char *elm_interface_atspi_accessible_translation_domain_get(const Eo *obj);
void elm_interface_atspi_accessible_translation_domain_set(Eo *obj, const char *domain);
</code>

%%The translation domain of "name" and "description" properties.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:type|type]]** //**(get, set)**//
<code c>
Elm_Atspi_Type elm_interface_atspi_accessible_type_get(const Eo *obj);
void elm_interface_atspi_accessible_type_set(Eo *obj, Elm_Atspi_Type type);
</code>

%%Type of accessibility object%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:class:efl:ui:text:property:bounce_allow|bounce_allow]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void elm_interface_scrollable_bounce_allow_get(const Eo *obj, Eina_Bool *horiz, Eina_Bool *vert);
void elm_interface_scrollable_bounce_allow_set(Eo *obj, Eina_Bool horiz, Eina_Bool vert);
</code>

%%Bouncing behavior%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:class:efl:ui:text:property:policy|policy]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]//
<code c>
void elm_interface_scrollable_policy_get(const Eo *obj, Elm_Scroller_Policy *hbar, Elm_Scroller_Policy *vbar);
void elm_interface_scrollable_policy_set(Eo *obj, Elm_Scroller_Policy hbar, Elm_Scroller_Policy vbar);
</code>

%%Scrollbar visibility policy%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:content_min_limit|content_min_limit]]**
<code c>
void elm_interface_scrollable_content_min_limit(Eo *obj, Eina_Bool w, Eina_Bool h);
</code>

%%Prevent the scrollable from being smaller than the minimum size of the content.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:content_pos_get|content_pos_get]]**
<code c>
void elm_interface_scrollable_content_pos_get(Eo *obj, int *x, int *y);
</code>

%%Get content position%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:content_pos_set|content_pos_set]]**
<code c>
void elm_interface_scrollable_content_pos_set(Eo *obj, int x, int y, Eina_Bool sig);
</code>

%%Set the content position%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:content_region_show|content_region_show]]**
<code c>
void elm_interface_scrollable_content_region_show(Eo *obj, int x, int y, int w, int h);
</code>

%%Show a specific virtual region within the scroller content object%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:page_bring_in|page_bring_in]]**
<code c>
void elm_interface_scrollable_page_bring_in(Eo *obj, int pagenumber_h, int pagenumber_v);
</code>

%%Show a specific virtual region within the scroller content object by page number.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:page_show|page_show]]**
<code c>
void elm_interface_scrollable_page_show(Eo *obj, int pagenumber_h, int pagenumber_v);
</code>

%%Show a specific virtual region within the scroller content object by page number.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:method:region_bring_in|region_bring_in]]**
<code c>
void elm_interface_scrollable_region_bring_in(Eo *obj, int x, int y, int w, int h);
</code>

%%Show a specific virtual region within the scroller content object.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:animate_start_cb|animate_start_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_animate_start_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb animate_start_cb);
</code>

%%Set the callback to run when the scrolling animation has started.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:animate_stop_cb|animate_stop_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_animate_stop_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb animate_stop_cb);
</code>

%%Set the callback to run when the scrolling animation has stopped.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:bounce_animator_disabled|bounce_animator_disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_scrollable_bounce_animator_disabled_get(const Eo *obj);
void elm_interface_scrollable_bounce_animator_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Bounce animator%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:content_min_limit_cb|content_min_limit_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_content_min_limit_cb_set(Eo *obj, Elm_Interface_Scrollable_Min_Limit_Cb min_limit_cb);
</code>

%%set the callback to run on minimal limit content%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:content_region|content_region]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_content_region_get(const Eo *obj, int *x, int *y, int *w, int *h);
void elm_interface_scrollable_content_region_set(Eo *obj, int x, int y, int w, int h);
</code>

%%Currently visible content region%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:content_size|content_size]]** //**(get)**//
<code c>
void elm_interface_scrollable_content_size_get(const Eo *obj, int *w, int *h);
</code>

%%Get the size of the content object%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:content_viewport_geometry|content_viewport_geometry]]** //**(get)**//
<code c>
void elm_interface_scrollable_content_viewport_geometry_get(const Eo *obj, int *x, int *y, int *w, int *h);
</code>

%%Content viewport geometry%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:content_viewport_resize_cb|content_viewport_resize_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_content_viewport_resize_cb_set(Eo *obj, Elm_Interface_Scrollable_Resize_Cb viewport_resize_cb);
</code>

%%When the viewport is resized, the callback is called.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:content|content]]** //**(set)**//
<code c>
void elm_interface_scrollable_content_set(Eo *obj, Efl_Canvas_Object *content);
</code>

%%Content property%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:current_page|current_page]]** //**(get)**//
<code c>
void elm_interface_scrollable_current_page_get(const Eo *obj, int *pagenumber_h, int *pagenumber_v);
</code>

%%Get scroll current page number.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:drag_start_cb|drag_start_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_drag_start_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb drag_start_cb);
</code>

%%Set the callback to run when dragging of the contents has started.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:drag_stop_cb|drag_stop_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_drag_stop_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb drag_stop_cb);
</code>

%%Set the callback to run when dragging of the contents has stopped.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:edge_bottom_cb|edge_bottom_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_edge_bottom_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb edge_bottom_cb);
</code>

%%Set the callback to run when the bottom edge of the content has been reached.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:edge_left_cb|edge_left_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_edge_left_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb edge_left_cb);
</code>

%%Set the callback to run when the left edge of the content has been reached.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:edge_right_cb|edge_right_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_edge_right_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb edge_right_cb);
</code>

%%Set the callback to run when the right edge of the content has been reached.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:edge_top_cb|edge_top_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_edge_top_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb edge_top_cb);
</code>

%%Set the callback to run when the top edge of the content has been reached.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:extern_pan|extern_pan]]** //**(set)**//
<code c>
void elm_interface_scrollable_extern_pan_set(Eo *obj, Efl_Canvas_Object *pan);
</code>

%%Extern pan%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:freeze|freeze]]** //**(set)**//
<code c>
void elm_interface_scrollable_freeze_set(Eo *obj, Eina_Bool freeze);
</code>

%%Freeze property%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:gravity|gravity]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_gravity_get(const Eo *obj, double *x, double *y);
void elm_interface_scrollable_gravity_set(Eo *obj, double x, double y);
</code>

%%Control scrolling gravity on the scrollable%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:hbar_drag_cb|hbar_drag_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_hbar_drag_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb hbar_drag_cb);
</code>

%%Set the callback to run when the horizontal scrollbar is dragged.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:hbar_press_cb|hbar_press_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_hbar_press_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb hbar_press_cb);
</code>

%%Set the callback to run when the horizontal scrollbar is pressed.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:hbar_unpress_cb|hbar_unpress_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_hbar_unpress_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb hbar_unpress_cb);
</code>

%%Set the callback to run when the horizontal scrollbar is unpressed.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:hold|hold]]** //**(set)**//
<code c>
void elm_interface_scrollable_hold_set(Eo *obj, Eina_Bool hold);
</code>

%%Hold property%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:last_page|last_page]]** //**(get)**//
<code c>
void elm_interface_scrollable_last_page_get(const Eo *obj, int *pagenumber_h, int *pagenumber_v);
</code>

%%Get scroll last page number.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:loop|loop]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_loop_get(const Eo *obj, Eina_Bool *loop_h, Eina_Bool *loop_v);
void elm_interface_scrollable_loop_set(Eo *obj, Eina_Bool loop_h, Eina_Bool loop_v);
</code>

%%Controls an infinite loop for a scroller.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:mirrored|mirrored]]** //**(set)**//
<code c>
void elm_interface_scrollable_mirrored_set(Eo *obj, Eina_Bool mirrored);
</code>

%%Mirroed property%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:momentum_animator_disabled|momentum_animator_disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_scrollable_momentum_animator_disabled_get(const Eo *obj);
void elm_interface_scrollable_momentum_animator_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Momentum animator%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:movement_block|movement_block]]** //**(get, set)**//
<code c>
Elm_Scroller_Movement_Block elm_interface_scrollable_movement_block_get(const Eo *obj);
void elm_interface_scrollable_movement_block_set(Eo *obj, Elm_Scroller_Movement_Block block);
</code>

%%Blocking of scrolling (per axis)%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:objects|objects]]** //**(set)**//
<code c>
void elm_interface_scrollable_objects_set(Eo *obj, Efl_Canvas_Object *edje_object, Efl_Canvas_Object *hit_rectangle);
</code>

%%Object property%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:page_change_cb|page_change_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_page_change_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb page_change_cb);
</code>

%%Set the callback to run when the visible page changes.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:page_relative|page_relative]]** //**(set)**//
<code c>
void elm_interface_scrollable_page_relative_set(Eo *obj, double h_pagerel, double v_pagerel);
</code>

%%Set scroll page size relative to viewport size.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:page_scroll_limit|page_scroll_limit]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_page_scroll_limit_get(const Eo *obj, int *page_limit_h, int *page_limit_v);
void elm_interface_scrollable_page_scroll_limit_set(Eo *obj, int page_limit_h, int page_limit_v);
</code>

%%Page scroll limit%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:page_size|page_size]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_page_size_get(const Eo *obj, int *x, int *y);
void elm_interface_scrollable_page_size_set(Eo *obj, int x, int y);
</code>

%%Scroll page size relative to viewport size.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:page_snap_allow|page_snap_allow]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_page_snap_allow_get(const Eo *obj, Eina_Bool *horiz, Eina_Bool *vert);
void elm_interface_scrollable_page_snap_allow_set(Eo *obj, Eina_Bool horiz, Eina_Bool vert);
</code>

%%Page snapping behavior%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:paging|paging]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_paging_get(const Eo *obj, double *pagerel_h, double *pagerel_v, int *pagesize_h, int *pagesize_v);
void elm_interface_scrollable_paging_set(Eo *obj, double pagerel_h, double pagerel_v, int pagesize_h, int pagesize_v);
</code>

%%Pagin property%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:repeat_events|repeat_events]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_scrollable_repeat_events_get(const Eo *obj);
void elm_interface_scrollable_repeat_events_set(Eo *obj, Eina_Bool repeat_events);
</code>

%%It decides whether the scrollable object propagates the events to content object or not.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:scroll_cb|scroll_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_scroll_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb scroll_cb);
</code>

%%Set the callback to run when the content has been moved.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:scroll_down_cb|scroll_down_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_scroll_down_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb scroll_down_cb);
</code>

%%Set the callback to run when the content has been moved down.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:scroll_left_cb|scroll_left_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_scroll_left_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb scroll_left_cb);
</code>

%%Set the callback to run when the content has been moved to the left%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:scroll_right_cb|scroll_right_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_scroll_right_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb scroll_right_cb);
</code>

%%Set the callback to run when the content has been moved to the right.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:scroll_up_cb|scroll_up_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_scroll_up_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb scroll_up_cb);
</code>

%%Set the callback to run when the content has been moved up.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:single_direction|single_direction]]** //**(get, set)**//
<code c>
Elm_Scroller_Single_Direction elm_interface_scrollable_single_direction_get(const Eo *obj);
void elm_interface_scrollable_single_direction_set(Eo *obj, Elm_Scroller_Single_Direction single_dir);
</code>

%%Single direction scroll configuration%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:step_size|step_size]]** //**(get, set)**//
<code c>
void elm_interface_scrollable_step_size_get(const Eo *obj, int *x, int *y);
void elm_interface_scrollable_step_size_set(Eo *obj, int x, int y);
</code>

%%Step size%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:vbar_drag_cb|vbar_drag_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_vbar_drag_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb vbar_drag_cb);
</code>

%%Set the callback to run when the horizontal scrollbar is dragged.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:vbar_press_cb|vbar_press_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_vbar_press_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb vbar_press_cb);
</code>

%%Set the callback to run when the vertical scrollbar is pressed.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:vbar_unpress_cb|vbar_unpress_cb]]** //**(set)**//
<code c>
void elm_interface_scrollable_vbar_unpress_cb_set(Eo *obj, Elm_Interface_Scrollable_Cb vbar_unpress_cb);
</code>

%%Set the callback to run when the horizontal scrollbar is unpressed.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:property:wheel_disabled|wheel_disabled]]** //**(get, set)**//
<code c>
Eina_Bool elm_interface_scrollable_wheel_disabled_get(const Eo *obj);
void elm_interface_scrollable_wheel_disabled_set(Eo *obj, Eina_Bool disabled);
</code>

%%Control Wheel disable Enable or disable mouse wheel to be used to scroll the scroller content. heel is enabled by default.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:canvas:object|Efl.Canvas.Object]].**[[:docs:efl:auto:class:efl:canvas:object:property:render_parent|render_parent]]** //**(get)**// ''protected''
<code c>
Efl_Canvas_Object *efl_canvas_object_render_parent_get(const Eo *obj);
</code>

%%Gets the parent smart object of a given Evas object, if it has one.%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:efl:ui:text:property:content_aliases|content_aliases]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
const Elm_Layout_Part_Alias_Description *elm_obj_layout_content_aliases_get(const Eo *obj);
</code>

%%Content aliases property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:property:text_aliases|text_aliases]]** //**(get)**// ''protected''
<code c>
const Elm_Layout_Part_Alias_Description *elm_obj_layout_text_aliases_get(const Eo *obj);
</code>

%%Text aliases property%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:property:widget_parent|widget_parent]]** //**(get, set)**// ''protected''
<code c>
Efl_Canvas_Object *elm_obj_widget_parent_get(const Eo *obj);
void elm_obj_widget_parent_set(Eo *obj, Efl_Canvas_Object *parent);
</code>

%%The internal widget parent%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]].**[[:docs:efl:auto:class:efl:ui:text:method:copy|copy]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_editable_copy(Eo *obj, int start, int end);
</code>

%%Copy text between start and end parameter%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]].**[[:docs:efl:auto:class:efl:ui:text:method:cut|cut]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_editable_cut(Eo *obj, int start, int end);
</code>

%%Cut text between start and end parameter%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]].**[[:docs:efl:auto:class:efl:ui:text:method:delete|delete]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_editable_delete(Eo *obj, int start, int end);
</code>

%%Delete text between start and end parameter%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]].**[[:docs:efl:auto:class:efl:ui:text:method:insert|insert]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_editable_insert(Eo *obj, const char *string, int position);
</code>

%%Insert text at given position%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]].**[[:docs:efl:auto:class:efl:ui:text:method:paste|paste]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_editable_paste(Eo *obj, int position);
</code>

%%Paste text at given position%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text:editable|Elm.Interface.Atspi.Text.Editable]].**[[:docs:efl:auto:class:efl:ui:text:property:content|content]]** //**(set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_editable_content_set(Eo *obj, const char *string);
</code>

%%Editable content property%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:selection_add|selection_add]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_selection_add(Eo *obj, int start_offset, int end_offset);
</code>

%%Add selection%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:method:selection_remove|selection_remove]]** //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_selection_remove(Eo *obj, int selection_number);
</code>

%%Remove selection%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:attributes|attributes]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_text_attributes_get(const Eo *obj, int *start_offset, int *end_offset);
</code>

%%Gets list of all text attributes.%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:attribute|attribute]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_attribute_get(const Eo *obj, const char *name, int *start_offset, int *end_offset, char **value);
</code>

%%Indicate if a text attribute with a given name is set%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:bounded_ranges|bounded_ranges]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_text_bounded_ranges_get(const Eo *obj, Eina_Bool screen_coords, Eina_Rectangle rect, Elm_Atspi_Text_Clip_Type xclip, Elm_Atspi_Text_Clip_Type yclip);
</code>

%%Bounded ranges%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:caret_offset|caret_offset]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
int elm_interface_atspi_text_caret_offset_get(const Eo *obj);
Eina_Bool elm_interface_atspi_text_caret_offset_set(Eo *obj, int offset);
</code>

%%Caret offset property%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:character_count|character_count]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
int elm_interface_atspi_text_character_count_get(const Eo *obj);
</code>

%%Character count%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:character_extents|character_extents]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_character_extents_get(const Eo *obj, int offset, Eina_Bool screen_coords, Eina_Rectangle *rect);
</code>

%%Character extents%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:character|character]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Unicode elm_interface_atspi_text_character_get(const Eo *obj, int offset);
</code>

%%Gets single character present in accessible widget's text at given offset.%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:default_attributes|default_attributes]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_text_default_attributes_get(const Eo *obj);
</code>

%%Default attributes%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:offset_at_point|offset_at_point]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
int elm_interface_atspi_text_offset_at_point_get(const Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Offset at given point%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:range_extents|range_extents]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_text_range_extents_get(const Eo *obj, Eina_Bool screen_coords, int start_offset, int end_offset, Eina_Rectangle *rect);
</code>

%%Range extents%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:selections_count|selections_count]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
int elm_interface_atspi_text_selections_count_get(const Eo *obj);
</code>

%%Selection count property%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:selection|selection]]** //**(get, set)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
void elm_interface_atspi_text_selection_get(const Eo *obj, int selection_number, int *start_offset, int *end_offset);
Eina_Bool elm_interface_atspi_text_selection_set(Eo *obj, int selection_number, int start_offset, int end_offset);
</code>

%%Selection property%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:string|string]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
char *elm_interface_atspi_text_string_get(const Eo *obj, Elm_Atspi_Text_Granularity granularity, int *start_offset, int *end_offset);
</code>

%%Gets string, start and end offset in text according to given initial offset and granularity.%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:class:efl:ui:text:property:text|text]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
char *elm_interface_atspi_text_get(const Eo *obj, int start_offset, int end_offset);
</code>

%%Gets text of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:efl:ui:text:property:state_set|state_set]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]]]// ''protected''
<code c>
Elm_Atspi_State_Set elm_interface_atspi_accessible_state_set_get(const Eo *obj);
</code>

%%Gets set describing object accessible states.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:attributes|attributes]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_accessible_attributes_get(const Eo *obj);
</code>

%%Gets key-value pairs indentifying object extra attributes. Must be free by a user.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:class:elm:widget:property:children|children]]** //**(get)**// //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_List *elm_interface_atspi_accessible_children_get(const Eo *obj);
</code>

%%Gets object's accessible children.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:event_emit|event_emit]]** ''protected''
<code c>
void elm_interface_atspi_accessible_event_emit(const Eo *obj, Elm_Interface_Atspi_Accessible *accessible, const Efl_Event_Description *event, void *event_info);
</code>

%%Emit event%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:event_handler_add|event_handler_add]]** ''protected''
<code c>
Elm_Atspi_Event_Handler *elm_interface_atspi_accessible_event_handler_add(const Eo *obj, Efl_Event_Cb cb, void *data);
</code>

%%Register accessibility event listener%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:method:event_handler_del|event_handler_del]]** ''protected''
<code c>
void elm_interface_atspi_accessible_event_handler_del(const Eo *obj, Elm_Atspi_Event_Handler *handler);
</code>

%%Deregister accessibility event listener%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:index_in_parent|index_in_parent]]** //**(get)**// ''protected''
<code c>
int elm_interface_atspi_accessible_index_in_parent_get(const Eo *obj);
</code>

%%Gets index of the child in parent's children list.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:localized_role_name|localized_role_name]]** //**(get)**// ''protected''
<code c>
const char *elm_interface_atspi_accessible_localized_role_name_get(const Eo *obj);
</code>

%%Gets an localized string describing accessible object role name.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:relation_set|relation_set]]** //**(get)**// ''protected''
<code c>
Elm_Atspi_Relation_Set elm_interface_atspi_accessible_relation_set_get(const Eo *obj);
</code>

%%Gets an all relations between accessible object and other accessible objects.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:property:role_name|role_name]]** //**(get)**// ''protected''
<code c>
const char *elm_interface_atspi_accessible_role_name_get(const Eo *obj);
</code>

%%Gets human-readable string indentifying object accessibility role.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:class:elm:widget:method:focus_grab|focus_grab]]** //[Overridden in [[:docs:efl:auto:class:elm:widget|Elm.Widget]]]// ''protected''
<code c>
Eina_Bool elm_interface_atspi_component_focus_grab(Eo *obj);
</code>

%%Focuses accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:method:accessible_at_point_get|accessible_at_point_get]]** ''protected''
<code c>
Efl_Object *elm_interface_atspi_component_accessible_at_point_get(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Gets top component object occupying space at given coordinates.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:method:contains|contains]]** ''protected''
<code c>
Eina_Bool elm_interface_atspi_component_contains(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Contains accessible widget%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:alpha|alpha]]** //**(get)**// ''protected''
<code c>
double elm_interface_atspi_component_alpha_get(const Eo *obj);
</code>

%%Gets alpha of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:extents|extents]]** //**(get, set)**// ''protected''
<code c>
void elm_interface_atspi_component_extents_get(const Eo *obj, Eina_Bool screen_coords, int *x, int *y, int *w, int *h);
Eina_Bool elm_interface_atspi_component_extents_set(Eo *obj, Eina_Bool screen_coords, int x, int y, int w, int h);
</code>

%%Geometry of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:layer|layer]]** //**(get)**// ''protected''
<code c>
int elm_interface_atspi_component_layer_get(const Eo *obj);
</code>

%%Evas layer of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:position|position]]** //**(get, set)**// ''protected''
<code c>
void elm_interface_atspi_component_position_get(const Eo *obj, Eina_Bool screen_coords, int *x, int *y);
Eina_Bool elm_interface_atspi_component_position_set(Eo *obj, Eina_Bool screen_coords, int x, int y);
</code>

%%Position of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:size|size]]** //**(get, set)**// ''protected''
<code c>
void elm_interface_atspi_component_size_get(const Eo *obj, int *w, int *h);
Eina_Bool elm_interface_atspi_component_size_set(Eo *obj, int w, int h);
</code>

%%Size of accessible widget.%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_component|Elm.Interface.Atspi_Component]].**[[:docs:efl:auto:mixin:elm:interface:atspi_component:property:z_order|z_order]]** //**(get)**// ''protected''
<code c>
int elm_interface_atspi_component_z_order_get(const Eo *obj);
</code>

%%Gets the depth at which the component is shown in relation to other components in the same container.%%\\ 
\\ 

==== Inherited ====

[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:object|Efl.Object]].**[[:docs:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_COORDS_DIRTY(void)
</code>

%%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:event:flush_pre|flush,pre]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FLUSH_PRE(void)
</code>

%%Emitted once the graph calculationg will be performed%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:event:focused|focused]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FOCUSED(Efl_Ui_Focus_Object *)
</code>

%%Emitted if the manager has focused an object%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:docs:efl:auto:class:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_REDIRECT_CHANGED(Efl_Ui_Focus_Manager *)
</code>

%%Emitted when the redirect object has changed, the old manager is passed as event info%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:aborted|aborted]]**
<code c>
EFL_UI_TEXT_EVENT_ABORTED(void)
</code>

%%Called when entry was aborted%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:activated|activated]]**
<code c>
EFL_UI_TEXT_EVENT_ACTIVATED(void)
</code>

%%Called when entry got activated%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:anchor_clicked|anchor,clicked]]**
<code c>
EFL_UI_TEXT_EVENT_ANCHOR_CLICKED(void)
</code>

%%Called when anchor was clicked%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:anchor_down|anchor,down]]**
<code c>
EFL_UI_TEXT_EVENT_ANCHOR_DOWN(void)
</code>

%%Called on anchor down%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:anchor_hover_opened|anchor,hover,opened]]**
<code c>
EFL_UI_TEXT_EVENT_ANCHOR_HOVER_OPENED(void)
</code>

%%Called when hover opened%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:anchor_in|anchor,in]]**
<code c>
EFL_UI_TEXT_EVENT_ANCHOR_IN(void)
</code>

%%Called on anchor in%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:anchor_out|anchor,out]]**
<code c>
EFL_UI_TEXT_EVENT_ANCHOR_OUT(void)
</code>

%%Called on anchor out%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:anchor_up|anchor,up]]**
<code c>
EFL_UI_TEXT_EVENT_ANCHOR_UP(void)
</code>

%%called on anchor up%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:changed_user|changed,user]]**
<code c>
EFL_UI_TEXT_EVENT_CHANGED_USER(void)
</code>

%%Called when object changed due to user interaction%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:changed|changed]]**
<code c>
EFL_UI_TEXT_EVENT_CHANGED(void)
</code>

%%Called when entry changed%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:context_open|context,open]]**
<code c>
EFL_UI_TEXT_EVENT_CONTEXT_OPEN(void)
</code>

%%Called when context menu was opened%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:cursor_changed_manual|cursor,changed,manual]]**
<code c>
EFL_UI_TEXT_EVENT_CURSOR_CHANGED_MANUAL(void)
</code>

%%Called on manual cursor change%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:cursor_changed|cursor,changed]]**
<code c>
EFL_UI_TEXT_EVENT_CURSOR_CHANGED(void)
</code>

%%Called on cursor changed%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:maxlength_reached|maxlength,reached]]**
<code c>
EFL_UI_TEXT_EVENT_MAXLENGTH_REACHED(void)
</code>

%%Called when maximum entry length has been reached%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:preedit_changed|preedit,changed]]**
<code c>
EFL_UI_TEXT_EVENT_PREEDIT_CHANGED(void)
</code>

%%Called when entry preedit changed%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:press|press]]**
<code c>
EFL_UI_TEXT_EVENT_PRESS(void)
</code>

%%Called when entry pressed%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:redo_request|redo,request]]**
<code c>
EFL_UI_TEXT_EVENT_REDO_REQUEST(void)
</code>

%%Called when redo was requested%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:rejected|rejected]]**
<code c>
EFL_UI_TEXT_EVENT_REJECTED(void)
</code>

%%Called when entry was rejected%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:text_set_done|text,set,done]]**
<code c>
EFL_UI_TEXT_EVENT_TEXT_SET_DONE(void)
</code>

%%Called when text set finished%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:undo_request|undo,request]]**
<code c>
EFL_UI_TEXT_EVENT_UNDO_REQUEST(void)
</code>

%%Called when undo was requested%%\\ 
\\ 
[[:docs:efl:auto:class:efl:ui:text|Efl.Ui.Text]].**[[:docs:efl:auto:class:efl:ui:text:event:validate|validate]]**
<code c>
EFL_UI_TEXT_EVENT_VALIDATE(void)
</code>

%%Called when validating%%\\ 
\\ 
[[:docs:efl:auto:class:elm:layout|Elm.Layout]].**[[:docs:efl:auto:class:elm:layout:event:theme_changed|theme,changed]]**
<code c>
ELM_LAYOUT_EVENT_THEME_CHANGED(void)
</code>

%%Called when theme changed%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:access_changed|access,changed]]**
<code c>
ELM_WIDGET_EVENT_ACCESS_CHANGED(void)
</code>

%%Called when accessibility changed%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:focused|focused]]**
<code c>
ELM_WIDGET_EVENT_FOCUSED(void)
</code>

%%Called when widget was focused%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:language_changed|language,changed]]**
<code c>
ELM_WIDGET_EVENT_LANGUAGE_CHANGED(void)
</code>

%%Called when widget language changed%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:moved|moved]]**
<code c>
ELM_WIDGET_EVENT_MOVED(void)
</code>

%%Called when widget moved%%\\ 
\\ 
[[:docs:efl:auto:class:elm:widget|Elm.Widget]].**[[:docs:efl:auto:class:elm:widget:event:unfocused|unfocused]]**
<code c>
ELM_WIDGET_EVENT_UNFOCUSED(void)
</code>

%%Called when widget was unfocused%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:animator|Efl.Animator]].**[[:docs:efl:auto:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:animator|Efl.Animator]].**[[:docs:efl:auto:interface:efl:animator:event:animator_tick|animator,tick]]**
<code c>
EFL_EVENT_ANIMATOR_TICK(Efl_Event_Animator_Tick)
</code>

%%Animator tick synchronized with screen vsync if possible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:event:content_added|content,added]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_ADDED(Efl_Gfx *)
</code>

%%Sent after a new item was added.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:container|Efl.Container]].**[[:docs:efl:auto:interface:efl:container:event:content_removed|content,removed]]**
<code c>
EFL_CONTAINER_EVENT_CONTENT_REMOVED(Efl_Gfx *)
</code>

%%Sent after an item was removed, before unref.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:size:hint|Efl.Gfx.Size.Hint]].**[[:docs:efl:auto:interface:efl:gfx:size:hint:event:change_size_hints|change,size,hints]]**
<code c>
EFL_GFX_EVENT_CHANGE_SIZE_HINTS(void)
</code>

%%Object size hints changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx:stack|Efl.Gfx.Stack]].**[[:docs:efl:auto:interface:efl:gfx:stack:event:restack|restack]]**
<code c>
EFL_GFX_EVENT_RESTACK(void)
</code>

%%Object stacking was changed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:changed|changed]]**
<code c>
EFL_GFX_EVENT_CHANGED(void)
</code>

%%Object was changed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:hide|hide]]**
<code c>
EFL_GFX_EVENT_HIDE(void)
</code>

%%Object just became invisible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:move|move]]**
<code c>
EFL_GFX_EVENT_MOVE(void)
</code>

%%Object was moved, its position during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:resize|resize]]**
<code c>
EFL_GFX_EVENT_RESIZE(void)
</code>

%%Object was resized, its size during the event is the new one.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:gfx|Efl.Gfx]].**[[:docs:efl:auto:interface:efl:gfx:event:show|show]]**
<code c>
EFL_GFX_EVENT_SHOW(void)
</code>

%%Object just became visible.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_down|finger,down]]**
<code c>
EFL_EVENT_FINGER_DOWN(Efl_Input_Pointer *)
</code>

%%Finger pressed (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_move|finger,move]]**
<code c>
EFL_EVENT_FINGER_MOVE(Efl_Input_Pointer *)
</code>

%%Finger moved (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:finger_up|finger,up]]**
<code c>
EFL_EVENT_FINGER_UP(Efl_Input_Pointer *)
</code>

%%Finger released (finger id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_in|focus,in]]**
<code c>
EFL_EVENT_FOCUS_IN(Efl_Input_Focus *)
</code>

%%A focus in event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:focus_out|focus,out]]**
<code c>
EFL_EVENT_FOCUS_OUT(Efl_Input_Focus *)
</code>

%%A focus out event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:hold|hold]]**
<code c>
EFL_EVENT_HOLD(Efl_Input_Hold *)
</code>

%%All input events are on hold or resumed.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_down|key,down]]**
<code c>
EFL_EVENT_KEY_DOWN(Efl_Input_Key *)
</code>

%%Keyboard key press.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:key_up|key,up]]**
<code c>
EFL_EVENT_KEY_UP(Efl_Input_Key *)
</code>

%%Keyboard key release.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_axis|pointer,axis]]**
<code c>
EFL_EVENT_POINTER_AXIS(Efl_Input_Pointer *)
</code>

%%Pen or other axis event update.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_cancel|pointer,cancel]]**
<code c>
EFL_EVENT_POINTER_CANCEL(Efl_Input_Pointer *)
</code>

%%Main pointer button press was cancelled (button id is known). This can happen in rare cases when the window manager passes the focus to a more urgent window, for instance. You probably don't need to listen to this event, as it will be accompanied by an up event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_down|pointer,down]]**
<code c>
EFL_EVENT_POINTER_DOWN(Efl_Input_Pointer *)
</code>

%%Main pointer button pressed (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_in|pointer,in]]**
<code c>
EFL_EVENT_POINTER_IN(Efl_Input_Pointer *)
</code>

%%Pointer entered a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_move|pointer,move]]**
<code c>
EFL_EVENT_POINTER_MOVE(Efl_Input_Pointer *)
</code>

%%Main pointer move (current and previous positions are known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_out|pointer,out]]**
<code c>
EFL_EVENT_POINTER_OUT(Efl_Input_Pointer *)
</code>

%%Pointer left a window or a widget.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_up|pointer,up]]**
<code c>
EFL_EVENT_POINTER_UP(Efl_Input_Pointer *)
</code>

%%Main pointer button released (button id is known).%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:input:interface|Efl.Input.Interface]].**[[:docs:efl:auto:interface:efl:input:interface:event:pointer_wheel|pointer,wheel]]**
<code c>
EFL_EVENT_POINTER_WHEEL(Efl_Input_Pointer *)
</code>

%%Mouse wheel event.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:clicked_double|clicked,double]]**
<code c>
EFL_UI_EVENT_CLICKED_DOUBLE(void)
</code>

%%Called when object received a double click%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:clicked_right|clicked,right]]**
<code c>
EFL_UI_EVENT_CLICKED_RIGHT(void)
</code>

%%Called when object received a right click%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:clicked_triple|clicked,triple]]**
<code c>
EFL_UI_EVENT_CLICKED_TRIPLE(void)
</code>

%%Called when object received a triple click%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:clicked|clicked]]**
<code c>
EFL_UI_EVENT_CLICKED(void)
</code>

%%Called when object was clicked%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:longpressed|longpressed]]**
<code c>
EFL_UI_EVENT_LONGPRESSED(void)
</code>

%%Called when the object received a longpress%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:pressed|pressed]]**
<code c>
EFL_UI_EVENT_PRESSED(void)
</code>

%%Called when the object was pressed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:repeated|repeated]]**
<code c>
EFL_UI_EVENT_REPEATED(void)
</code>

%%Called when the object received repeated presses/clicks%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:clickable|Efl.Ui.Clickable]].**[[:docs:efl:auto:interface:efl:ui:clickable:event:unpressed|unpressed]]**
<code c>
EFL_UI_EVENT_UNPRESSED(void)
</code>

%%Called when the object is now longer pressed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:docs:efl:auto:interface:efl:ui:focus:user:event:logical_changed|logical,changed]]**
<code c>
EFL_UI_FOCUS_USER_EVENT_LOGICAL_CHANGED(Efl_Ui_Focus_Object *)
</code>

%%Emitted when a new logical parent should be used.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]].**[[:docs:efl:auto:interface:efl:ui:focus:user:event:manager_changed|manager,changed]]**
<code c>
EFL_UI_FOCUS_USER_EVENT_MANAGER_CHANGED(Efl_Ui_Focus_Manager *)
</code>

%%Emitted when a new manager is the parent for this object.%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_anim_start|scroll,anim,start]]**
<code c>
EFL_UI_EVENT_SCROLL_ANIM_START(void)
</code>

%%Called when scroll animation started%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_anim_start|scroll,anim,start]]**
<code c>
EFL_UI_EVENT_SCROLL_ANIM_START(void)
</code>

%%Called when scroll animation started%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_anim_stop|scroll,anim,stop]]**
<code c>
EFL_UI_EVENT_SCROLL_ANIM_STOP(void)
</code>

%%Called when scroll animation stopped%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_anim_stop|scroll,anim,stop]]**
<code c>
EFL_UI_EVENT_SCROLL_ANIM_STOP(void)
</code>

%%Called when scroll animation stopped%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_drag_start|scroll,drag,start]]**
<code c>
EFL_UI_EVENT_SCROLL_DRAG_START(void)
</code>

%%Called when scroll drag started%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_drag_start|scroll,drag,start]]**
<code c>
EFL_UI_EVENT_SCROLL_DRAG_START(void)
</code>

%%Called when scroll drag started%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_drag_stop|scroll,drag,stop]]**
<code c>
EFL_UI_EVENT_SCROLL_DRAG_STOP(void)
</code>

%%Called when scroll drag stopped%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll_drag_stop|scroll,drag,stop]]**
<code c>
EFL_UI_EVENT_SCROLL_DRAG_STOP(void)
</code>

%%Called when scroll drag stopped%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll|scroll]]**
<code c>
EFL_UI_EVENT_SCROLL(void)
</code>

%%Called when scroll operation started%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:scrollable|Efl.Ui.Scrollable]].**[[:docs:efl:auto:interface:efl:ui:scrollable:event:scroll|scroll]]**
<code c>
EFL_UI_EVENT_SCROLL(void)
</code>

%%Called when scroll operation started%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selected|selected]]**
<code c>
EFL_UI_EVENT_SELECTED(void)
</code>

%%Called when selected%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selection_changed|selection,changed]]**
<code c>
EFL_UI_EVENT_SELECTION_CHANGED(void)
</code>

%%Called when selection changed%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selection_cleared|selection,cleared]]**
<code c>
EFL_UI_EVENT_SELECTION_CLEARED(void)
</code>

%%Called when selection was cleared%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selection_copy|selection,copy]]**
<code c>
EFL_UI_EVENT_SELECTION_COPY(void)
</code>

%%Called when selection was copied%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selection_cut|selection,cut]]**
<code c>
EFL_UI_EVENT_SELECTION_CUT(void)
</code>

%%Called when selection was cut%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selection_paste|selection,paste]]**
<code c>
EFL_UI_EVENT_SELECTION_PASTE(void)
</code>

%%Called when selection got pasted%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:selection_start|selection,start]]**
<code c>
EFL_UI_EVENT_SELECTION_START(void)
</code>

%%Called at selection start%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:selectable|Efl.Ui.Selectable]].**[[:docs:efl:auto:interface:efl:ui:selectable:event:unselected|unselected]]**
<code c>
EFL_UI_EVENT_UNSELECTED(void)
</code>

%%Called when no longer selected%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]].**[[:docs:efl:auto:interface:efl:ui:text:interactive:event:changed_user|changed,user]]**
<code c>
EFL_UI_TEXT_INTERACTIVE_EVENT_CHANGED_USER(Efl_Ui_Text_Interactive_Change_Info)
</code>

%%The text object has changed due to user interaction%%\\ 
\\ 
[[:docs:efl:auto:interface:efl:ui:text:interactive|Efl.Ui.Text.Interactive]].**[[:docs:efl:auto:interface:efl:ui:text:interactive:event:selection_changed|selection,changed]]**
<code c>
EFL_UI_TEXT_INTERACTIVE_EVENT_SELECTION_CHANGED(void)
</code>

%%The selection on the object has changed. Query using %%[[:docs:efl:auto:interface:efl:ui:text:interactive:property:selection_cursors|Efl.Ui.Text.Interactive.selection_cursors]]%%%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:interface:elm:interface:atspi:text:event:access_text_attributes_changed|access,text,attributes,changed]]**
<code c>
ELM_INTERFACE_ATSPI_TEXT_EVENT_ACCESS_TEXT_ATTRIBUTES_CHANGED(void)
</code>

%%Text attributes have changed%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:interface:elm:interface:atspi:text:event:access_text_bounds_changed|access,text,bounds,changed]]**
<code c>
ELM_INTERFACE_ATSPI_TEXT_EVENT_ACCESS_TEXT_BOUNDS_CHANGED(void)
</code>

%%Text bounds have changed%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:interface:elm:interface:atspi:text:event:access_text_caret_moved|access,text,caret,moved]]**
<code c>
ELM_INTERFACE_ATSPI_TEXT_EVENT_ACCESS_TEXT_CARET_MOVED(void)
</code>

%%Caret moved%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:interface:elm:interface:atspi:text:event:access_text_inserted|access,text,inserted]]**
<code c>
ELM_INTERFACE_ATSPI_TEXT_EVENT_ACCESS_TEXT_INSERTED(void)
</code>

%%Text was inserted%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:interface:elm:interface:atspi:text:event:access_text_removed|access,text,removed]]**
<code c>
ELM_INTERFACE_ATSPI_TEXT_EVENT_ACCESS_TEXT_REMOVED(void)
</code>

%%Text was removed%%\\ 
\\ 
[[:docs:efl:auto:interface:elm:interface:atspi:text|Elm.Interface.Atspi.Text]].**[[:docs:efl:auto:interface:elm:interface:atspi:text:event:access_text_selection_changed|access,text,selection,changed]]**
<code c>
ELM_INTERFACE_ATSPI_TEXT_EVENT_ACCESS_TEXT_SELECTION_CHANGED(void)
</code>

%%Text selection has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:efl:ui:focus:object|Efl.Ui.Focus.Object]].**[[:docs:efl:auto:mixin:efl:ui:focus:object:event:focus_changed|focus,changed]]**
<code c>
EFL_UI_FOCUS_OBJECT_EVENT_FOCUS_CHANGED(Eina_Bool)
</code>

%%Emitted if the focus state has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:active_descendant_changed|active,descendant,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_ACTIVE_DESCENDANT_CHANGED(void)
</code>

%%Called when active state of descendant has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:added|added]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_ADDED(void)
</code>

%%Called when item was added%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:bounds_changed|bounds,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_BOUNDS_CHANGED(Elm_Atspi_Event_Geometry_Changed_Data)
</code>

%%Called when bounds have changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:children_changed|children,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_CHILDREN_CHANGED(Elm_Atspi_Event_Children_Changed_Data)
</code>

%%Called when children have changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:property_changed|property,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_PROPERTY_CHANGED(const char *)
</code>

%%Called when roperty has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:removed|removed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_REMOVED(void)
</code>

%%Called when item was removed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:state_changed|state,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_STATE_CHANGED(Elm_Atspi_Event_State_Changed_Data)
</code>

%%Called when tate has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface:atspi_accessible|Elm.Interface.Atspi_Accessible]].**[[:docs:efl:auto:mixin:elm:interface:atspi_accessible:event:visible_data_changed|visible,data,changed]]**
<code c>
ELM_INTERFACE_ATSPI_ACCESSIBLE_EVENT_VISIBLE_DATA_CHANGED(void)
</code>

%%Called when visibility has changed%%\\ 
\\ 
[[:docs:efl:auto:mixin:elm:interface_scrollable|Elm.Interface_Scrollable]].**[[:docs:efl:auto:mixin:elm:interface_scrollable:event:changed|changed]]**
<code c>
ELM_INTERFACE_SCROLLABLE_EVENT_CHANGED(void)
</code>

%%Called when content changed%%\\ 
\\ 
