<title>Efl.Canvas.Object.precise_is_inside</title>
===== Signature =====

<code>
@property precise_is_inside {
    get {
        values {
            precise: bool;
        }
    }
    set {
        values {
            precise: bool;
        }
    }
}
</code>

===== C signature =====

<code c>
Eina_Bool efl_canvas_object_precise_is_inside_get(const Eo *obj);
void efl_canvas_object_precise_is_inside_set(Eo *obj, Eina_Bool precise);
</code>

===== Values =====

  * **precise** - %%Whether to use precise point collision detection or not. The default value is false.%%
===== Description =====



{{page>:develop:efl:user:class:efl:canvas:object:property:precise_is_inside:description&nouser&nolink&nodate}}

==== Getter ====

%%Determine whether an object is set to use precise point collision detection.%%

{{page>:develop:efl:user:class:efl:canvas:object:property:precise_is_inside:getter_description&nouser&nolink&nodate}}

==== Setter ====

%%Set whether to use precise (usually expensive) point collision detection for a given Evas object.%%

%%Use this function to make Evas treat objects' transparent areas as not belonging to it with regard to mouse pointer events. By default, all of the object's boundary rectangle will be taken in account for them.%%

%%By using precise point collision detection you'll be making Evas more resource intensive.%%
</note>{{page>:develop:efl:user:class:efl:canvas:object:property:precise_is_inside:getter_description&nouser&nolink&nodate}}


===== Implemented by =====

  * **Efl.Canvas.Object.precise_is_inside**

