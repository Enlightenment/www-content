<title>Efl.Net.Server.Tcp</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_net_server_tcp [fillcolor = "black", label = "Efl.Net.Server.Tcp", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_server_ip [fillcolor = "gray15", label = "Efl.Net.Server.Ip", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_server_fd [fillcolor = "gray15", label = "Efl.Net.Server.Fd", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_fd [fillcolor = "gray15", label = "Efl.Loop.Fd", color = "gray15", fontcolor = "white", style = "filled"]
    efl_loop_user [fillcolor = "gray15", label = "Efl.Loop_User", color = "gray15", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]
    efl_net_server [fillcolor = "gray15", label = "Efl.Net.Server", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_net_server_tcp -> efl_net_server_ip
    efl_net_server_ip -> efl_net_server_fd
    efl_net_server_fd -> efl_loop_fd
    efl_loop_fd -> efl_loop_user
    efl_loop_user -> efl_object
    efl_net_server_fd -> efl_net_server
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:class:efl:net:server:tcp|Efl.Net.Server.Tcp]] //(class)//**
    * [[:develop:efl:auto:class:efl:net:server:ip|Efl.Net.Server.Ip]] //(class)//
      * [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]] //(class)//
        * [[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]] //(class)//
          * [[:develop:efl:auto:class:efl:loop_user|Efl.Loop_User]] //(class)//
            * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//
        * [[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]] //(interface)//

===== Description =====

%%A TCP server.%%

//Since 1.19//

{{page>:develop:efl:user:class:efl:net:server:tcp:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:develop:efl:auto:class:efl:loop:fd:property:fd_file|fd_file]]** //**(get, set)**//
<code c>
int efl_loop_fd_file_get(const Eo *obj);
void efl_loop_fd_file_set(Eo *obj, int fd);
</code>

%%Defines which file descriptor to watch when watching a file.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:develop:efl:auto:class:efl:net:server:fd:property:fd|fd]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]//
<code c>
int efl_loop_fd_get(const Eo *obj);
void efl_loop_fd_set(Eo *obj, int fd);
</code>

%%Defines which file descriptor to watch. If it is a file, use file_fd variant.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:loop_user|Efl.Loop_User]].**[[:develop:efl:auto:class:efl:loop_user:property:loop|loop]]** //**(get)**//
<code c>
Efl_Loop *efl_loop_get(const Eo *obj);
</code>

%%The loop to which this object belongs to.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:fd:property:close_on_exec|close_on_exec]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_fd_close_on_exec_get(const Eo *obj);
Eina_Bool efl_net_server_fd_close_on_exec_set(Eo *obj, Eina_Bool close_on_exec);
</code>

%%Controls Close-on-Exec() using FD_CLOEXEC.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:fd:property:family|family]]** //**(get, set)**// ''protected set''
<code c>
int efl_net_server_fd_family_get(const Eo *obj);
void efl_net_server_fd_family_set(Eo *obj, int family);
</code>

%%The address family (AF_*) family of this socket.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:fd:property:reuse_address|reuse_address]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_fd_reuse_address_get(const Eo *obj);
Eina_Bool efl_net_server_fd_reuse_address_set(Eo *obj, Eina_Bool reuse_address);
</code>

%%Controls address reuse() using SO_REUSEADDR%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:fd:property:reuse_port|reuse_port]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_fd_reuse_port_get(const Eo *obj);
Eina_Bool efl_net_server_fd_reuse_port_set(Eo *obj, Eina_Bool reuse_port);
</code>

%%Controls port reuse() using SO_REUSEPORT (since linux 3.9)%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:tcp:method:socket_activate|socket_activate]]** //[Overridden here]//
<code c>
Eina_Error efl_net_server_fd_socket_activate(Eo *obj, const char *address);
</code>

%%If this method is called use an already activated socket.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:ip|Efl.Net.Server.Ip]].**[[:develop:efl:auto:class:efl:net:server:ip:property:ipv6_only|ipv6_only]]** //**(get, set)**//
<code c>
Eina_Bool efl_net_server_ip_ipv6_only_get(const Eo *obj);
void efl_net_server_ip_ipv6_only_set(Eo *obj, Eina_Bool ipv6_only);
</code>

%%Whenever IPv6 listen address will accept only same-family clients or will allow IPv4 to connect as well.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:loop:fd:property:parent|parent]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]]]//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:net:server:fd:method:finalize|finalize]]** //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]//
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:net:server:ip:method:constructor|constructor]]** //[Overridden in [[:develop:efl:auto:class:efl:net:server:ip|Efl.Net.Server.Ip]]]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:net:server:tcp:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:class:efl:net:server:fd:property:address|address]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]// ''protected set''
<code c>
const char *efl_net_server_address_get(const Eo *obj);
void efl_net_server_address_set(Eo *obj, const char *address);
</code>

%%The address the server is bound to.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:class:efl:net:server:fd:property:clients_count|clients_count]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]// ''protected set''
<code c>
unsigned int efl_net_server_clients_count_get(const Eo *obj);
void efl_net_server_clients_count_set(Eo *obj, unsigned int count);
</code>

%%Number of concurrent clients accepted by this server.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:class:efl:net:server:fd:property:clients_limit|clients_limit]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]//
<code c>
void efl_net_server_clients_limit_get(const Eo *obj, unsigned int *limit, Eina_Bool *reject_excess);
void efl_net_server_clients_limit_set(Eo *obj, unsigned int limit, Eina_Bool reject_excess);
</code>

%%Number of maximum concurrent clients allowed by this server.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:class:efl:net:server:fd:property:serving|serving]]** //**(get, set)**// //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]// ''protected set''
<code c>
Eina_Bool efl_net_server_serving_get(const Eo *obj);
void efl_net_server_serving_set(Eo *obj, Eina_Bool serving);
</code>

%%Returns whenever the server is ready to accept clients or not.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:class:efl:net:server:tcp:method:serve|serve]]** //[Overridden here]//
<code c>
Eina_Error efl_net_server_serve(Eo *obj, const char *address);
</code>

%%Starts serving requests.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:fd:method:process_incoming_data|process_incoming_data]]** ''protected''
<code c>
void efl_net_server_fd_process_incoming_data(Eo *obj);
</code>

%%When the socket has data to be read, process it.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:tcp:method:client_add|client_add]]** //[Overridden here]// ''protected''
<code c>
void efl_net_server_fd_client_add(Eo *obj, int client_fd);
</code>

%%Accepts a new client, should emit "client,add".%%\\ 
\\ 
[[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]].**[[:develop:efl:auto:class:efl:net:server:tcp:method:client_reject|client_reject]]** //[Overridden here]// ''protected''
<code c>
void efl_net_server_fd_client_reject(Eo *obj, int client_fd);
</code>

%%Rejects a new client, should emit "client,rejected".%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:class:efl:net:server:fd:method:client_announce|client_announce]]** //[Overridden in [[:develop:efl:auto:class:efl:net:server:fd|Efl.Net.Server.Fd]]]// ''protected''
<code c>
Eina_Bool efl_net_server_client_announce(Eo *obj, Efl_Net_Socket *client);
</code>

%%Implementions should call this method to announce new clients.%%\\ 
\\ 

==== Inherited ====

[[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:develop:efl:auto:class:efl:loop:fd:event:error|error]]**
<code c>
EFL_LOOP_FD_EVENT_ERROR(void)
</code>

%%Called when a error occurred on the file descriptor%%\\ 
\\ 
[[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:develop:efl:auto:class:efl:loop:fd:event:read|read]]**
<code c>
EFL_LOOP_FD_EVENT_READ(void)
</code>

%%Called when a read happened on the file descriptor%%\\ 
\\ 
[[:develop:efl:auto:class:efl:loop:fd|Efl.Loop.Fd]].**[[:develop:efl:auto:class:efl:loop:fd:event:write|write]]**
<code c>
EFL_LOOP_FD_EVENT_WRITE(void)
</code>

%%Called when a write happened on the file descriptor%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:interface:efl:net:server:event:client_add|client,add]]**
<code c>
EFL_NET_SERVER_EVENT_CLIENT_ADD(Efl_Net_Socket *, @hot)
</code>

%%A new client socket was created.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:interface:efl:net:server:event:client_rejected|client,rejected]]**
<code c>
EFL_NET_SERVER_EVENT_CLIENT_REJECTED(const char *)
</code>

%%Notifies a client was rejected due excess, see %%[[:develop:efl:auto:interface:efl:net:server:property:clients_limit|Efl.Net.Server.clients_limit]]%%.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:interface:efl:net:server:event:error|error]]**
<code c>
EFL_NET_SERVER_EVENT_ERROR(Eina_Error)
</code>

%%Some error happened and the server needs to be stopped.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:net:server|Efl.Net.Server]].**[[:develop:efl:auto:interface:efl:net:server:event:serving|serving]]**
<code c>
EFL_NET_SERVER_EVENT_SERVING(void)
</code>

%%Notifies the server is ready to accept clients. See property %%[[:develop:efl:auto:interface:efl:net:server:property:serving|Efl.Net.Server.serving]]%%%%\\ 
\\ 
