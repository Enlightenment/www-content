<title>Efl.Net.Control.Access_Point.connect</title>
===== Signature =====

<code>
connect {
    return: free(future<void_ptr>, efl_del);
}
</code>

===== C signature =====

<code c>
Efl_Future *efl_net_control_access_point_connect(Eo *obj);
</code>

===== Description =====

%%Connects to this access point.%%

%%This connection will happen asynchronously in the background, with results being delivered by events in the access point object, such as the "changed".%%

%%Successful connections will remember the device and set it to auto-connect using the property %%[[:develop:efl:auto:class:efl:net:control:access_point:property:auto_connect|Efl.Net.Control.Access_Point.auto_connect]]%%.%%

%%See %%[[:develop:efl:auto:class:efl:net:control:access_point:method:forget|Efl.Net.Control.Access_Point.forget]]%%, %%[[:develop:efl:auto:class:efl:net:control:access_point:property:remembered|Efl.Net.Control.Access_Point.remembered]]%%, %%[[:develop:efl:auto:class:efl:net:control:access_point:property:auto_connect|Efl.Net.Control.Access_Point.auto_connect]]%% and %%[[:develop:efl:auto:class:efl:net:control:access_point:method:disconnect|Efl.Net.Control.Access_Point.disconnect]]%%%%

%%The future may fail with non-fatal errors such as EINPROGRESS (the connection was already ongoing) and EALREADY (the connection was already established).%%

//Since 1.19//
{{page>:develop:efl:user:class:efl:net:control:access_point:method:connect:description&nouser&nolink&nodate}}

===== Implemented by =====

  * **Efl.Net.Control.Access_Point.connect**

