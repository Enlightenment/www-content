<title>Evas.Box.layout_horizontal</title>
===== Signature =====

<code>
layout_horizontal {
    params {
        @in priv: ptr(Evas_Object_Box_Data);
        @in data: void_ptr;
    }
}
</code>

===== C signature =====

<code c>
void evas_obj_box_layout_horizontal(Eo *obj, Evas_Object_Box_Data *priv, void *data);
</code>

===== Parameters =====

  * **priv** //(in)// - %%Private data pointer%%
  * **data** //(in)// - %%Data pointer%%

===== Description =====

%%Layout function which sets the box o to a (basic) horizontal box%%

%%In this layout, the box object's overall behavior is controlled by its padding/alignment properties, which are set by the evas_object_box_{h,v}_{align,padding}_set family of functions. The size hints of the elements in the box -- set by the evas_object_size_hint_{align,padding,weight}_set functions -- also control the way this function works.%%

%%Box's properties: %%''align_h''%% controls the horizontal alignment of the child objects relative to the containing box. When set to $0.0, children are aligned to the left. A value of $1.0 makes them aligned to the right border. Values in between align them proportionally. Note that if the size required by the children, which is given by their widths and the %%''padding_h''%% property of the box, is bigger than the their container's width, the children will be displayed out of the box's bounds. A negative value of %%''align_h''%% makes the box to justify its children. The padding between them, in this case, is corrected so that the leftmost one touches the left border and the rightmost one touches the right border (even if they must overlap). The %%''align_v''%% and %%''padding_v''%% properties of the box don't contribute to its behaviour when this layout is chosen.%%

%%Child element's properties: %%''align_x''%% does not influence the box's behavior. %%''padding_l''%% and %%''padding_r''%% sum up to the container's horizontal padding between elements. The child's %%''padding_t''%%, %%''padding_b''%% and %%''align_y''%% properties apply for padding/alignment relative to the overall height of the box. Finally, there is the %%''weight_x''%% property, which, if set to a non-zero value, tells the container that the child width is not pre-defined. If the container can't accommodate all its children, it sets the widths of the ones with weights to sizes as small as they can all fit into it. If the size required by the children is less than the available, the box increases its childrens' (which have weights) widths as to fit the remaining space. The %%''weight_x''%% property, besides telling the element is resizable, gives a weight for the resizing process.  The parent box will try to distribute (or take off) widths accordingly to the normalized list of weights: most weighted children remain/get larger in this process than the least ones. %%''weight_y''%% does not influence the layout.%%

%%If one desires that, besides having weights, child elements must be resized bounded to a minimum or maximum size, those size hints must be set, by the evas_object_size_hint_{min,max}_set functions.%%
{{page>:develop:efl:user:class:evas:box:method:layout_horizontal:description&nouser&nolink&nodate}}

===== Implemented by =====

  * **Evas.Box.layout_horizontal**

