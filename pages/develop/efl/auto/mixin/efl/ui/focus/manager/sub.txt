<title>Efl.Ui.Focus.Manager.Sub</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_ui_focus_manager_sub [fillcolor = "deepskyblue4", label = "Efl.Ui.Focus.Manager.Sub", color = "deepskyblue", fontcolor = "white", style = "filled"]
    efl_ui_focus_manager [fillcolor = "gray15", label = "Efl.Ui.Focus.Manager", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_object [fillcolor = "gray15", label = "Efl.Object", color = "gray15", fontcolor = "white", style = "filled"]

    efl_ui_focus_manager_sub -> efl_ui_focus_manager
    efl_ui_focus_manager_sub -> efl_object
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:mixin:efl:ui:focus:manager:sub|Efl.Ui.Focus.Manager.Sub]] //(mixin)//**
    * [[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]] //(interface)//
    * [[:develop:efl:auto:class:efl:object|Efl.Object]] //(class)//

===== Description =====

%%A class that automatically registeres its border elements in the parent manager%%

%%This sub manager will register its border elements on the parent manager. The parent manager is found with the %%[[:develop:efl:auto:interface:efl:ui:focus:user|Efl.Ui.Focus.User]]%% interface of the %%[[:develop:efl:auto:class:efl:object:property:parent|Efl.Object.parent]]%%.%%

%%Each sub manager also has to be a focus object, the object itself will be registered into the parent manager. It will be used as logical parent while registering the border elements.%%

%%You can filter the border elements by overriding the property %%[[:develop:efl:auto:interface:efl:ui:focus:manager:property:border_elements|Efl.Ui.Focus.Manager.border_elements]]%%.%%

//Since 1.20//

{{page>:develop:efl:user:mixin:efl:ui:focus:manager:sub:description&nouser&nolink&nodate}}

==== Inherited ====

[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:children_iterator_new|children_iterator_new]]**
<code c>
Eina_Iterator *efl_children_iterator_new(Eo *obj);
</code>

%%Get an iterator on all childrens%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_attach|composite_attach]]**
<code c>
Eina_Bool efl_composite_attach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Make an object a composite object of another.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_detach|composite_detach]]**
<code c>
Eina_Bool efl_composite_detach(Eo *obj, Efl_Object *comp_obj);
</code>

%%Detach a composite object from another object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:composite_part_is|composite_part_is]]**
<code c>
Eina_Bool efl_composite_part_is(Eo *obj);
</code>

%%Check if an object is part of a composite object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:debug_name_override|debug_name_override]]**
<code c>
void efl_debug_name_override(Eo *obj, Eina_Strbuf *sb);
</code>

%%Build a read-only name for this object used for debugging.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:del|del]]**
<code c>
void efl_del(const Eo *obj);
</code>

%%Unrefs the object and reparents it to NULL.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_add|event_callback_forwarder_add]]**
<code c>
void efl_event_callback_forwarder_add(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Add an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_forwarder_del|event_callback_forwarder_del]]**
<code c>
void efl_event_callback_forwarder_del(Eo *obj, const Efl_Event_Description *desc, Efl_Object *new_obj);
</code>

%%Remove an event callback forwarder for an event and an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_callback_stop|event_callback_stop]]**
<code c>
void efl_event_callback_stop(Eo *obj);
</code>

%%Stop the current callback call.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_freeze|event_freeze]]**
<code c>
void efl_event_freeze(Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_freeze|event_global_freeze]]**
<code c>
void efl_event_global_freeze(const Eo *obj);
</code>

%%Freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_global_thaw|event_global_thaw]]**
<code c>
void efl_event_global_thaw(const Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:event_thaw|event_thaw]]**
<code c>
void efl_event_thaw(Eo *obj);
</code>

%%Thaw events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:finalize|finalize]]**
<code c>
Efl_Object *efl_finalize(Eo *obj);
</code>

%%Called at the end of #eo_add. Should not be called, just overridden.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:name_find|name_find]]**
<code c>
Efl_Object *efl_name_find(const Eo *obj, const char *search);
</code>

%%Find a child object with the given name and return it.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:method:provider_find|provider_find]]**
<code c>
Efl_Object *efl_provider_find(Eo *obj, const Efl_Object *klass);
</code>

%%Searches up in the object tree for a provider which knows the given class/interface.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:allow_parent_unref|allow_parent_unref]]** //**(get, set)**//
<code c>
Eina_Bool efl_allow_parent_unref_get(const Eo *obj);
void efl_allow_parent_unref_set(Eo *obj, Eina_Bool allow);
</code>

%%Allow an object to be deleted by unref even if it has a parent.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:comment|comment]]** //**(get, set)**//
<code c>
const char *efl_comment_get(const Eo *obj);
void efl_comment_set(Eo *obj, const char *comment);
</code>

%%A human readable comment for the object%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_freeze_count|event_freeze_count]]** //**(get)**//
<code c>
int efl_event_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:event_global_freeze_count|event_global_freeze_count]]** //**(get)**//
<code c>
int efl_event_global_freeze_count_get(const Eo *obj);
</code>

%%Return freeze events of object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:finalized|finalized]]** //**(get)**//
<code c>
Eina_Bool efl_finalized_get(const Eo *obj);
</code>

%%True if the object is already finalized, false otherwise.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:name|name]]** //**(get, set)**//
<code c>
const char *efl_name_get(const Eo *obj);
void efl_name_set(Eo *obj, const char *name);
</code>

%%The name of the object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:parent|parent]]** //**(get, set)**//
<code c>
Efl_Object *efl_parent_get(const Eo *obj);
void efl_parent_set(Eo *obj, Efl_Object *parent);
</code>

%%The parent of an object.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:mixin:efl:ui:focus:manager:sub:method:constructor|constructor]]** //[Overridden here]//
<code c>
Efl_Object *efl_constructor(Eo *obj);
</code>

%%Call the object's constructor.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:mixin:efl:ui:focus:manager:sub:method:destructor|destructor]]** //[Overridden here]//
<code c>
void efl_destructor(Eo *obj);
</code>

%%Call the object's destructor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:fetch|fetch]]**
<code c>
Efl_Ui_Focus_Relations *efl_ui_focus_manager_fetch(Eo *obj, Efl_Ui_Focus_Object *child);
</code>

%%This will fetch the data from a registered node.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:logical_end|logical_end]]**
<code c>
Efl_Ui_Focus_Manager_Logical_End_Detail efl_ui_focus_manager_logical_end(Eo *obj);
</code>

%%Return the last logical object.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:move|move]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>

%%Move the focus into the given direction.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:pop_history_stack|pop_history_stack]]**
<code c>
void efl_ui_focus_manager_pop_history_stack(Eo *obj);
</code>

%%Removes the most upper history element, and gives the focus to the next one below%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:request_move|request_move]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_move(Eo *obj, Efl_Ui_Focus_Direction direction);
</code>

%%Returns the object which would be the next object to focus in the given direction.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:request_subchild|request_subchild]]**
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_request_subchild(Eo *obj, Efl_Ui_Focus_Object *child);
</code>

%%Returns a widget that can receive focus%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:method:reset_history|reset_history]]**
<code c>
void efl_ui_focus_manager_reset_history(Eo *obj);
</code>

%%Reset the history stack of this manager object. This means the most upper element will be unfocused, all other elements will be removed from the remembered before.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:property:border_elements|border_elements]]** //**(get)**//
<code c>
Eina_Iterator *efl_ui_focus_manager_border_elements_get(const Eo *obj);
</code>

%%The list of elements which are at the border of the graph.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:property:focus|focus]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_focus_get(const Eo *obj);
void efl_ui_focus_manager_focus_set(Eo *obj, Efl_Ui_Focus_Object *focus);
</code>

%%The element which is currently focused by this manager%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:property:redirect|redirect]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Manager *efl_ui_focus_manager_redirect_get(const Eo *obj);
void efl_ui_focus_manager_redirect_set(Eo *obj, Efl_Ui_Focus_Manager *redirect);
</code>

%%Add a another manager to serve the move requests.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:property:root|root]]** //**(get, set)**//
<code c>
Efl_Ui_Focus_Object *efl_ui_focus_manager_root_get(const Eo *obj);
Eina_Bool efl_ui_focus_manager_root_set(Eo *obj, Efl_Ui_Focus_Object *root);
</code>

%%Root node for all logical subtrees.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:property:auto_unref|auto_unref]]** //**(set)**// ''protected''
<code c>
void efl_auto_unref_set(Eo *obj, Eina_Bool enable);
</code>

%%Mark an object to be automatically deleted after a function call.%%\\ 
\\ 

==== Inherited ====

[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_add|callback,add]]**
<code c>
EFL_EVENT_CALLBACK_ADD(void, @hot)
</code>

%%A callback was added.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:callback_del|callback,del]]**
<code c>
EFL_EVENT_CALLBACK_DEL(void, @hot)
</code>

%%A callback was deleted.%%\\ 
\\ 
[[:develop:efl:auto:class:efl:object|Efl.Object]].**[[:develop:efl:auto:class:efl:object:event:del|del]]**
<code c>
EFL_EVENT_DEL(void, @hot)
</code>

%%Object is being deleted.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:event:coords_dirty|coords,dirty]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_COORDS_DIRTY(void)
</code>

%%Emitted once the graph is dirty, this means there are potential changes in border_elements you want to know about%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:event:flush_pre|flush,pre]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FLUSH_PRE(void)
</code>

%%Emitted once the graph calculationg will be performed%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:event:focused|focused]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_FOCUSED(Efl_Ui_Focus_Object *)
</code>

%%Emitted if the manager has focused an object%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:ui:focus:manager|Efl.Ui.Focus.Manager]].**[[:develop:efl:auto:interface:efl:ui:focus:manager:event:redirect_changed|redirect,changed]]**
<code c>
EFL_UI_FOCUS_MANAGER_EVENT_REDIRECT_CHANGED(Efl_Ui_Focus_Manager *)
</code>

%%Emitted when the redirect object has changed, the old manager is passed as event info%%\\ 
\\ 
