<title>Efl.Access.Value</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_access_value [fillcolor = "dodgerblue4", label = "Efl.Access.Value", color = "cornflowerblue", fontcolor = "white", style = "filled"]

}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:interface:efl:access:value|Efl.Access.Value]] //(interface)//**

===== Description =====

%%Elementary Access value interface%%

{{page>:develop:efl:user:interface:efl:access:value:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:efl:auto:interface:efl:access:value:property:increment|increment]]** //**(get)**// ''protected''
<code c>
double efl_access_value_increment_get(const Eo *obj);
</code>

%%Gets an minimal incrementation value%%\\ 
\\ 
**[[:develop:efl:auto:interface:efl:access:value:property:range|range]]** //**(get)**// ''protected''
<code c>
void efl_access_value_range_get(const Eo *obj, double *lower_limit, double *upper_limit, const char **description);
</code>

%%Gets a range of all possible values and its description%%\\ 
\\ 
**[[:develop:efl:auto:interface:efl:access:value:property:value_and_text|value_and_text]]** //**(get, set)**// ''protected''
<code c>
void efl_access_value_and_text_get(const Eo *obj, double *value, const char **text);
Eina_Bool efl_access_value_and_text_set(Eo *obj, double value, const char *text);
</code>

%%Value and text property%%\\ 
\\ 

