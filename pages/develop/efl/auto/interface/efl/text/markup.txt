<title>Efl.Text.Markup</title>
++++ Inheritance graph |

<graphviz>
digraph hierarchy {
    bgcolor = "transparent"
    size = "6"
    rankdir = "TB"

    node [shape = "box"]
    edge [color = "gray35"]

    efl_text_markup [fillcolor = "dodgerblue4", label = "Efl.Text.Markup", color = "cornflowerblue", fontcolor = "white", style = "filled"]
    efl_text_cursor [fillcolor = "gray15", label = "Efl.Text.Cursor", color = "cornflowerblue", fontcolor = "white", style = "filled"]

    efl_text_markup -> efl_text_cursor
}
</graphviz>

++++

===== Inheritance hierarchy =====

  * **[[:develop:efl:auto:interface:efl:text:markup|Efl.Text.Markup]] //(interface)//**
    * [[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]] //(interface)//

===== Description =====

%%Markup data that populates the text object's style and format%%

//Since 1.21//

{{page>:develop:efl:user:interface:efl:text:markup:description&nouser&nolink&nodate}}

===== Members =====

**[[:develop:efl:auto:interface:efl:text:markup:method:cursor_markup_insert|cursor_markup_insert]]**
<code c>
void efl_text_markup_cursor_markup_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *markup);
</code>

%%Inserts a markup text to the text object in a given cursor position%%\\ 
\\ 
**[[:develop:efl:auto:interface:efl:text:markup:property:markup|markup]]** //**(get, set)**//
<code c>
const char *efl_text_markup_get(const Eo *obj);
void efl_text_markup_set(Eo *obj, const char *markup);
</code>

\\ 

==== Inherited ====

[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_char_delete|cursor_char_delete]]**
<code c>
void efl_text_cursor_char_delete(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Deletes a single character from position pointed by given cursor.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_char_next|cursor_char_next]]**
<code c>
void efl_text_cursor_char_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the next character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_char_prev|cursor_char_prev]]**
<code c>
void efl_text_cursor_char_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the previous character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_compare|cursor_compare]]**
<code c>
int efl_text_cursor_compare(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Compare two cursors%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_coord_set|cursor_coord_set]]**
<code c>
void efl_text_cursor_coord_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int x, int y);
</code>

%%Set cursor coordinates%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_copy|cursor_copy]]**
<code c>
void efl_text_cursor_copy(Eo *obj, Efl_Text_Cursor_Cursor *dst, const Efl_Text_Cursor_Cursor *src);
</code>

%%Copy existing cursor%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_equal|cursor_equal]]**
<code c>
Eina_Bool efl_text_cursor_equal(Eo *obj, const Efl_Text_Cursor_Cursor *cur1, const Efl_Text_Cursor_Cursor *cur2);
</code>

%%Check if two cursors are equal%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_free|cursor_free]]**
<code c>
void efl_text_cursor_free(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Free existing cursor%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_line_char_first|cursor_line_char_first]]**
<code c>
void efl_text_cursor_line_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current line first character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_line_char_last|cursor_line_char_last]]**
<code c>
void efl_text_cursor_line_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current line last character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_line_jump_by|cursor_line_jump_by]]**
<code c>
void efl_text_cursor_line_jump_by(Eo *obj, Efl_Text_Cursor_Cursor *cur, int by);
</code>

%%Jump the cursor by the given number of lines%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_new|cursor_new]]**
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_new(Eo *obj);
</code>

%%Create new cursor%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_char_first|cursor_paragraph_char_first]]**
<code c>
void efl_text_cursor_paragraph_char_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the first character in this paragraph%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_char_last|cursor_paragraph_char_last]]**
<code c>
void efl_text_cursor_paragraph_char_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the last character in this paragraph%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_first|cursor_paragraph_first]]**
<code c>
void efl_text_cursor_paragraph_first(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current paragraph first character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_last|cursor_paragraph_last]]**
<code c>
void efl_text_cursor_paragraph_last(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current paragraph last character%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_next|cursor_paragraph_next]]**
<code c>
void efl_text_cursor_paragraph_next(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the start of the next text node%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_paragraph_prev|cursor_paragraph_prev]]**
<code c>
void efl_text_cursor_paragraph_prev(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advances to the end of the previous text node%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_text_insert|cursor_text_insert]]**
<code c>
int efl_text_cursor_text_insert(Eo *obj, Efl_Text_Cursor_Cursor *cur, const char *text);
</code>

%%Adds text to the current cursor position and set the cursor to *after* the start of the text just added.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_word_end|cursor_word_end]]**
<code c>
void efl_text_cursor_word_end(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current word end%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:method:cursor_word_start|cursor_word_start]]**
<code c>
void efl_text_cursor_word_start(Eo *obj, Efl_Text_Cursor_Cursor *cur);
</code>

%%Advance to current word start%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor_content|cursor_content]]** //**(get)**//
<code c>
Eina_Unicode efl_text_cursor_content_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur);
</code>

%%The content of the cursor (the character under the cursor)%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor_geometry|cursor_geometry]]** //**(get)**//
<code c>
Eina_Bool efl_text_cursor_geometry_get(const Eo *obj, const Efl_Text_Cursor_Cursor *cur, Efl_Text_Cursor_Cursor_Type ctype, int *cx, int *cy, int *cw, int *ch, int *cx2, int *cy2, int *cw2, int *ch2);
</code>

%%Returns the geometry of two cursors ("split cursor"), if logical cursor is between LTR/RTL text, also considering paragraph direction. Upper cursor is shown for the text of the same direction as paragraph, lower cursor - for opposite.%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor_position|cursor_position]]** //**(get, set)**//
<code c>
int efl_text_cursor_position_get(const Eo *obj, Efl_Text_Cursor_Cursor *cur);
void efl_text_cursor_position_set(Eo *obj, Efl_Text_Cursor_Cursor *cur, int position);
</code>

%%Cursor position%%\\ 
\\ 
[[:develop:efl:auto:interface:efl:text:cursor|Efl.Text.Cursor]].**[[:develop:efl:auto:interface:efl:text:cursor:property:cursor|cursor]]** //**(get)**//
<code c>
Efl_Text_Cursor_Cursor *efl_text_cursor_get(const Eo *obj, Efl_Text_Cursor_Cursor_Get_Type get_type);
</code>

%%The object's main cursor.%%\\ 
\\ 

