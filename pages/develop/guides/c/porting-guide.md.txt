---
~~Title: EFL C Porting Guide~~
---

# EFL C Porting Guide #

This document highlights the main differences between the original EFL API (henceforth the *Legacy API*) and the new EFL API based on Eo objects (dubbed *Unified API*). The Unified API was introduced in EFL 1.22, around December 2017.

Both APIs can be used simultaneously but support for the Legacy version will be dropped in the future. As such any new code should use the Unified API.

> **NOTE:**
> Currently the Legacy API has not been completely removed. Enabling the Unified API requires defining two compilation symbols, ``EFL_EO_API_SUPPORT`` and ``EFL_BETA_API_SUPPORT``, as you can see in the tutorials and examples.

## Main Loop ##

### Timers ###

Programming guides: [Unified EFL](/develop/guides/c/core/main-loop.md#Timers), [Legacy EFL](/develop/legacy/program_guide/main_loop/timers)

* Timers are now regular Eo objects created with ``efl_add(EFL_LOOP_TIMER_CLASS, ...)`` and destroyed with ``efl_unref()``.

* The timer callback is registered with ``efl_event_callback_add(timer_object, EFL_LOOP_TIMER_EVENT_TICK, ...)``.

* Timers are always periodic. The callback does not return ``ECORE_CALLBACK_RENEW`` or ``ECORE_CALLBACK_CANCEL`` any more. If you want a one-shot timer remove it from the callback after it has fired once.

* ``ecore_timer_interval_set/get()`` -> ``efl_loop_timer_interval_set/get()``

* ``ecore_timer_pending_get()`` -> ``efl_loop_timer_pending_get()``

* ``ecore_timer_reset()`` -> ``efl_loop_timer_reset()``

* ``ecore_timer_freeze/thaw()`` -> ``efl_event_freeze/thaw()``

* ``ecore_timer_*()`` methods should not be used in new code.

### File Descriptors ###

Programming guides: [Unified EFL](/develop/guides/c/core/main-loop.md#File_Descriptor_Monitors), [Legacy EFL](/develop/legacy/program_guide/main_loop/file_descriptors)

* File Descriptors are now regular Eo objects created with ``efl_add(EFL_LOOP_FD_CLASS, ...)`` and destroyed with ``efl_unref()``.

* Register to FD events with ``efl_event_callback_add()``, possible events are ``EFL_LOOP_FD_EVENT_READ``, ``_WRITE`` and ``_ERROR``.

* Retrieve the internal FDs through the ``fd`` and ``fd_file`` properties .

* ``ecore_main_fd_*()`` methods should not be used in new code.

### Idlers ###

Programming guides: [Unified EFL](/develop/guides/c/core/main-loop.md#Idlers), [Legacy EFL](/develop/legacy/program_guide/main_loop/idlers)

* All idler functions are handled through regular events on the Loop object.

* ``ecore_idler_add()`` -> ``efl_event_callback_add(loop_object, EFL_LOOP_EVENT_IDLE, ...)``

* ``ecore_idler_enterer_add()`` -> ``efl_event_callback_add(loop_object, EFL_LOOP_EVENT_IDLE_ENTER, ...)``

* ``ecore_idler_exiter_add()`` -> ``efl_event_callback_add(loop_object, EFL_LOOP_EVENT_IDLE_EXIT, ...)``

* ``ecore_idler_*()`` methods should not be used in new code.