~~Title: Example Page~~
This will be some sample content. nothing more.

====== Level 1 Headline ======

Paragraph here

===== Level 2 Headline =====

Paragraph here

==== Level 3 Headline ====

Paragraph here

=== Level 4 Headline ===

Paragraph here

== Level 5 Headline ==

A horizontal rule goes below.

----

This is the first paragraph of the page. We should test a long one to
see how wrapping and other formatting works with it. **Bold Text**
works. //Italic Text// also works. __Underlined Text__ is fine as
well. ''Monospaced Text'' is there too. <del>Strike-through Text</del>
is also not a problem.

  - Ordered List Item
  - Item 2
  - Last item

  * Unordered List Item
  * Item 2
  * Third item
  * Last item

An external link like: [[http://example.com|External Link]] would go here.

And here is an inlined image, centered.

{{ :efl-core.png?nolink |}}

Sample code snippets and hilights

<code c>
  typedef struct blah Blah;
  int c;
  void function(char *blah) {
    double x;
    This_Type *y;
    Type_Here *z;
    int e = ENUM_HERE;
    x = 10;
    char *p = malloc(10);
    evas_object_del(p);
  }
</code>

<code lua>
  function hello(x)
    local y
  end
</code>

This should become a link to the [[start]] page. How about the [[blah]]
page too. Test autolink with evas_object_del() as a keyword.

Below between the hr's should be an externally included wiki page

----

{{page>blah}}

----

So how about Tables? well let's try one:

^ Header 1 ^ Header Column 2 ^ Column 3 header ^
| Cell 1   | Cell 2          | Cell 3          |
| Cell 1   | Cell 2          | Cell 3          |
| Cell 1   | Cell 2          | Cell 3          |
| Cell 1   | Cell 2          | Cell 3          |

And quotes:

Some text
> Quote this level
>> Another level
>>> Yet another level

----
<itemtable header=test;c=column_a;c=column_b,column_c;c=column_d;fdelim=:>

_line_a
column_a:text_a1
column_b:<tablecell>text_a2 \\ This is an example
how to fill a cell over several lines</tablecell>

_line_b
column_a:<tablecell>text_b1 \\ \\ As you can see, local DokuWiki CRLF sequences
can be added to force a linebreak in the cell. Other formatting
elements could be used as well.
</tablecell>
column_c:text_b2

</itemtable>

{|
|+//Extended Table Example//
! style="width: 12em;"|
A1 Header
! style="width: 10em;"|
B1 Header
|- style="background-color: #223344;"
|
{{ icon-enlightenment.png?50&nolink}}
Lorem ipsum dolor sit amet, 
consetetur sadipscing elitr, 
sed diam nonumy eirmod tempor invidunt
ut labore et dolore magna aliquyam erat, 
sed diam voluptua.
|
B2 Data
  * //italic//
  * ''monospace''
  * [[:start|page link]]

**ATTENTION:**\\
Needs an extra empty line 
after the end of  whole table!
|}

  - Ordered list item 1
  - Ordered list item 2
  -- Ordered list item 3...
  .. ... in multiple paragraphs
  - Ordered list item 4

  * Unordered list item
  ** Unordered list item...
  .. ... in multiple paragraphs

  - Ordered list, first level
    - Second level
      - Third level
        - Fourth level
    -- Back to second level
      - //Second?! What happened to third?//
    .. //Quiet, you.//
  - Back to first level
  - Still at first level

  ? Definition list
  : Definition lists vary only slightly from other types of lists in that list items consist of two parts: a term and a description. The term is given by the DT element and is restricted to inline content. The description is given with a DD element that contains block-level content. [Source: W3C]
  ? Definition list w/ multiple paragraphs
  :: The style sheet provided with this plugin will render these paragraphs...
  .. ... to the left of the term being defined.
    ? Definition list w/ multiple "paragraphs"
    : Another way to separate blocks of text in a definition...
    : ... is to simply have multiple definitions for a term (or group of terms).

  : This definition list has DD tags without any preceding DT tags.
  : Hey, it's legal XHTML.
  ? Just like DT tags without following DD tags.
  ?? But DT tags can't contain paragraphs. That would __not__ be legal XHTML.
  .. If you try, the result will be rendered oddly.

And now to test a bunch of folded text/content below. But ++First |
test if we can fold/unfold inline++. Then try a block below:

++++ Folded block here |

The content would be here

^ Table ^ Blah ^ Blah   ^
| Row   | Row  | Row    |
| Your  | Boat | Gently |
| Down  | The  | Stream |

++++

----

~~DISCUSSIONS~~
