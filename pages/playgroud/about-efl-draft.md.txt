---
~~Title: About EFL~~
~~NOCACHE~~
---

[Download EFL Here](/download)

Code quality - [EFL Coverity scan status](https://scan.coverity.com/projects/552)

![EFL Core](/_media/efl-core.png)

EFL is made up of quite a few libraries that build on top of each other in layers, steadily becoming higher-level, yet allowing access to each level as they go. The higher up you go, the less you have to do yourself. Elementary is about as high up as you get, while you still access layers below it for day to day things as there is no need for it to wrap things that work perfectly well as-is.

All of EFL exposes its APIs by default in C, with several bindings available. We are now also working on supporting bindings for various language as first-class-citizens in EFL by auto-generating the bindings directly from our new object orientation infrastructure for C. We stick to C mostly because the libraries have been around for a long time, were originally written in C and the developers who write the libraries prefer C. We add OO features in C with tools and infrastructure where needed. Also moving from C would limit the audience. C programmers won't be able to access a %%C++%% API (whereas a %%C++%% programmer can access both C and %%C++%%). That is partly why we aim to auto-generate bindings so programmers of  various languages can get native-like APIs for their chose language from the same core EFL API set.

Our components are divided into named libraries or projects. Core EFL components include:

| Component   | Description |
| -------------- | -------------- |
| Evas | Core scene graph and rendering    |
| Eina | Data structures and low level helpers   |
| Edje | UI layout & animation data files for themes |
| Eet | Data (de)serialization and storage  |
| Ecore | Core loop and system abstractions like X11 |
| Efreet | Freedesktop.org standards handling  |
| Eldbus | D-Bus glue and handling   |
| Embryo | Tiny VM and compiler based on Pawn  |
| Eeze | Device enumeration and access library  |
| Emotion | Video decode wrapping, glue and abstraction |
| Ethumb| Thumbnailing handler  |
| Ephysics | Physics (bullet) wrapper and Evas glue  |
| EIO | Asynchronous I/O handling  |
| Evas Generic Loaders  | Extra image loaders for complex image types|
| Emotion Generic Players | Extra video decoders (for VLC)      |
| Elementary     | Widgets and high level abstractions    |


Binding support exists for several languages such as:

* Python
* Javascript
* C++
* Ruby
* Lua

EFL covers a wide range of functions including inter-process communication (IPC), graphics, audio and even location services. Other powerful features include file handling utilities, widgets and user interface controls, thumbnailing and rendering via scene graph. You can discover more of EFL's capabilities by visiting the [About EFL](https://www.enlightenment.org/about-efl) page. 

The Enlightenment Foundation Libraries already power millions of systems from mobile phones to set-top boxes, desktops, laptops, game systems and more. It is recognized for its forward-thinking approach which allows product designers and developers to offer more than the boring user experience of the past. This is where EFL excels. 
[Free.fr](http://www.free.fr) has shipped millions of set top boxes in France powered by EFL. The [Openmoko Freerunner project](http://wiki.openmoko.org/wiki/Neo_FreeRunner) also sold thousands of devices using EFL and Enlightenment. 

EFL powers [Samsung Galaxy Gear](http://www.samsung.com/us/mobile/wearable-tech) smartwatches and is behind Samsung Smart Televisions such as the [Class Q9F QLED 4K TV](https://www.samsung.com/us/televisions-home-theater/tvs/qled-tvs/65--class-q9f-qled-4k-tv-qn65q9famfxza/) and refrigerators such as the [Samsung Family Hub Refrigerator](https://www.samsung.com/us/explore/family-hub-refrigerator/overview/), which are based on Tizen. GPS devices such as the [Coyote](https://www.moncoyote.com/) also run EFL.

